"""
Resource Pool Maker for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The Resource Pool Maker for Cisco Intersight automates the creation
         of Resource Pools.
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
Resource Pool on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######

# General Settings
resource_pool_name = "Resource-Pool-1"
resource_pool_description = "A Cisco Intersight Resource Pool generated by the Resource Pool Maker."
resource_pool_organization = "default"
resource_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the resource_pool_tags dictionary if no tags are needed, for example: resource_pool_tags = {}

# Pool Detail Settings
chassis_resources_list = [
    {"DomainName": "UCS-IMM-Pod",
     "ChassisIds": "1",
     "SlotIds": "1,2,3,4,5-8",
     "Serials": ""
     },
    ]

blade_server_resources_list = [
    {"Names": "UCS-IMM-Pod-1-8",
     "Serials": ""
     },
    ]

rack_server_resources_list = [
    {"Names": "UCS-IMM-Pod-1",
     "Serials": ""
     },
    ]

# Pool Default Settings (Change only if needed)
ucs_server_type = "FI-Attached"     # Options: "FI-Attached", "Standalone"
resource_assignment_order = "default"       # Options: "default", "sequential"
resource_type = "Server"        # Options: "Server", "None"
pool_type = "Static"        # Options: "Static", "Dynamic"

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


import sys
import traceback
import json
import copy
import intersight
import re
import urllib3

# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to convert a list of strings in string type format to list type format.
def string_to_list_maker(string_list,
                         remove_duplicate_elements_in_list=True
                         ):
    """This function converts a list of strings in string type format to list
    type format. The provided string should contain commas, semicolons, or
    spaces as the separator between strings. For each string in the list,
    leading and rear spaces will be removed. Duplicate strings in the list are
    removed by default.

    Args:
        string_list (str):
            A string containing an element or range of elements.

        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements are
            removed from the provided string list. The default value is True.

    Returns:
        A list of elements.   
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.

            separator (str):
                The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.   
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            provided_list (list): A list of elements to be separated.

            separator (str): The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.        
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element, separator)
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    staged_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list, " ")
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list, ",")
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list, ";")
    # Split provided list by hyphens.
    for post_semicolon_split_string_set in post_semicolon_split_list:
        staged_list.append(post_semicolon_split_string_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        final_list = list(set(staged_list))
    return final_list


# Establish function to convert a list of numbers in string type format to list type format.
def integer_number_list_maker(string_list,
                              remove_duplicate_elements_in_list=True,
                              sort_elements_in_list=True
                              ):
    """This function converts a list of numbers in string type format
    to list type format. The provided string should contain commas,
    semicolons, or spaces as the separator between numbers. Number
    ranges can be configured using hyphens. An example entry would be
    "1, 2, 3, 4, 5, 6, 7, 7-14, 25". For each number in the list,
    leading and rear spaces will be removed. Duplicate numbers in the
    list are removed by default.

    Args:
        string_list (str):
            A string containing a number or range of numbers.
        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements
            are removed from the provided string list. The default
            value is True.
        sort_elements_in_list (bool):
            Optional; A setting to determine if the elements in the provided
            string list should be sorted in ascending order. The default value
            is True.

    Returns:
        A list of integers.            
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            provided_list (list):
                A list of elements to be separated.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.               
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element,
                                                               separator
                                                               )
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    integer_number_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list,
                                                " "
                                                )
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list,
                                                   ","
                                                   )
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list,
                                                       ";"
                                                       )
    # Split provided number ranges in the list by hyphens.
    for post_semicolon_split_number_set in post_semicolon_split_list:
        if "-" in post_semicolon_split_number_set:
            if post_semicolon_split_number_set[0] != "-" and post_semicolon_split_number_set[-1] != "-":
                hyphen_split_list = string_to_list_separator(post_semicolon_split_number_set,
                                                             "-"
                                                             )
                # Limit new list to a maximum of two elements.
                fixed_hyphen_split_list = hyphen_split_list[:2]
                # Enumerate the numbers in the hyphen split list.
                integer_starting_number_of_provided_range = int(fixed_hyphen_split_list[0])
                integer_ending_number_of_provided_range = int(fixed_hyphen_split_list[1])
                enumerated_range_list = range(
                    integer_starting_number_of_provided_range,
                    (integer_ending_number_of_provided_range + 1)
                    )
                integer_number_list.extend(enumerated_range_list)
        else:
            integer_of_current_number_set = int(post_semicolon_split_number_set)
            integer_number_list.append(integer_of_current_number_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        integer_number_list = list(set(integer_number_list))
    if sort_elements_in_list:
        integer_number_list = sorted(integer_number_list)
    return integer_number_list


# Establish Maker specific classes and functions
class ResourcePool:
    """This class is used to configure a Resource Pool in Intersight.
    """
    object_type = "Resource Pool"
    intersight_api_path = "resourcepool/Pools"
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "Resource Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 chassis_resources_list=None,
                 blade_server_resources_list=None,
                 rack_server_resources_list=None,
                 ucs_server_type="FI-Attached",
                 resource_type="Server",
                 pool_type="Static"
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.pool_name = pool_name
        self.pool_description = pool_description
        self.pool_assignment_order = pool_assignment_order
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        if chassis_resources_list is None:
            self.chassis_resources_list = []
        else:
            self.chassis_resources_list = chassis_resources_list
        if blade_server_resources_list is None:
            self.blade_server_resources_list = []
        else:
            self.blade_server_resources_list = blade_server_resources_list
        if rack_server_resources_list is None:
            self.rack_server_resources_list = []
        else:
            self.rack_server_resources_list = rack_server_resources_list
        self.ucs_server_type = ucs_server_type
        self.resource_type = resource_type
        self.pool_type = pool_type
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description,
            "ResourceType": self.resource_type,
            "PoolType": self.pool_type
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.chassis_resources_list}, "
            f"{self.blade_server_resources_list}, "
            f"{self.rack_server_resources_list}, "
            f"'{self.ucs_server_type}', "
            f"'{self.resource_type}', "
            f"'{self.pool_type}')"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.pool_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=self.intersight_api_path,
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        pool_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                  intersight_api_key=None,
                                                                  object_name=self.organization,
                                                                  intersight_api_path="organization/Organizations",
                                                                  object_type="Organization",
                                                                  preconfigured_api_client=self.api_client
                                                                  )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": pool_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.pool_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted pool object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.pool_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()

        # Update the API body with the provided Resource Pool UCS Server Type (Management Mode)
        # Reformat the user provided ucs_server_type variable value to lowercase and remove spaces to prevent potential format issues
        try:
            reformatted_ucs_server_type_variable_value = "".join(self.ucs_server_type.lower().split())
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.pool_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        if reformatted_ucs_server_type_variable_value == "fi-attached":
            self.intersight_api_body["ResourcePoolParameters"] = {
                "ClassId": "resourcepool.ServerPoolParameters",
                "ManagementMode": "Intersight",
                "ObjectType": "resourcepool.ServerPoolParameters"
                }
        elif reformatted_ucs_server_type_variable_value == "standalone":
            self.intersight_api_body["ResourcePoolParameters"] = {
                "ClassId": "resourcepool.ServerPoolParameters",
                "ManagementMode": "IntersightStandalone",
                "ObjectType": "resourcepool.ServerPoolParameters"
                }
        else:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.pool_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)

        # Update the API body with the provided Resource Pool Resources
        # Setup lists for MOIDs of retrieved Blade and Rack Servers
        retrieved_blade_server_moid_list = []
        retrieved_rack_server_moid_list = []
        
        # Check for provided Chassis resources
        if self.chassis_resources_list:
            print("Checking for the provided Chassis resources...")
            retrieved_intersight_chassis = get_intersight_objects(
                intersight_api_key_id=None,
                intersight_api_key=None,
                intersight_api_path="equipment/Chasses",
                object_type="Chassis",
                preconfigured_api_client=self.api_client
                )
            if not retrieved_intersight_chassis.get("Results"):
                print("No Chassis were found in the Intersight Account.")
            for chassis_resources_dictionary in self.chassis_resources_list:
                # Chassis Blade Server MOID extraction process if only the Domain Name is provided
                if chassis_resources_dictionary.get("DomainName"):
                    if not any(
                        (chassis_resources_dictionary.get("ChassisIds"),
                         chassis_resources_dictionary.get("SlotIds"),
                         chassis_resources_dictionary.get("Serials")
                         )
                        ):
                        # Get the MOID of the provided Domain Name for the Chassis
                        chassis_domain_name_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "DeviceHostname": [chassis_resources_dictionary["DomainName"]]
                                },
                            intersight_api_path="asset/DeviceRegistrations",
                            object_type="Domain Name",
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )
                        # Search for Chassis in the provided Domain Name under the Intersight Account
                        for chassis in retrieved_intersight_chassis.get("Results"):
                            if (
                                chassis["RegisteredDevice"]["Moid"] == chassis_domain_name_moid
                                and
                                chassis["ManagementMode"] == "Intersight"
                                ):
                                # Extract MOIDs from the Blade Servers in any matched Chassis
                                for chassis_blade_server in chassis["Blades"]:
                                    retrieved_blade_server_moid_list.append(chassis_blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Domain Name and Chassis IDs are provided without any corresponding Slot IDs
                if all(
                    (chassis_resources_dictionary.get("DomainName"),
                     chassis_resources_dictionary.get("ChassisIds")
                     )
                    ):
                    if not chassis_resources_dictionary.get("SlotIds"):
                        # Convert provided Chassis IDs into list format
                        provided_chassis_id_list = integer_number_list_maker(chassis_resources_dictionary["ChassisIds"])
                        # Get the MOID of the provided Domain Name for the Chassis
                        chassis_domain_name_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "DeviceHostname": [chassis_resources_dictionary["DomainName"]]
                                },
                            intersight_api_path="asset/DeviceRegistrations",
                            object_type="Domain Name",
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )
                        # Search for Chassis in the provided Domain Name with matching Chassis IDs under the Intersight Account
                        for chassis in retrieved_intersight_chassis.get("Results"):
                            if (
                                chassis["RegisteredDevice"]["Moid"] == chassis_domain_name_moid
                                and
                                chassis["ChassisId"] in provided_chassis_id_list
                                and
                                chassis["ManagementMode"] == "Intersight"
                                ):
                                # Extract MOIDs from the Blade Servers in any matched Chassis
                                for chassis_blade_server in chassis["Blades"]:
                                    retrieved_blade_server_moid_list.append(chassis_blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Domain Name, Chassis IDs and Slot IDs are provided
                if all(
                    (chassis_resources_dictionary.get("DomainName"),
                     chassis_resources_dictionary.get("ChassisIds"),
                     chassis_resources_dictionary.get("SlotIds")
                     )
                    ):
                    # Convert provided Chassis IDs into list format
                    provided_chassis_id_list = integer_number_list_maker(chassis_resources_dictionary["ChassisIds"])
                    # Convert provided Chassis Blade Server Slot IDs into list format
                    provided_chassis_slot_ids_list = integer_number_list_maker(chassis_resources_dictionary["SlotIds"])
                    # Get the MOID of the provided Domain Name for the Chassis
                    chassis_domain_name_moid = advanced_intersight_object_moid_retriever(
                        intersight_api_key_id=None,
                        intersight_api_key=None,
                        object_attributes={
                            "DeviceHostname": [chassis_resources_dictionary["DomainName"]]
                            },
                        intersight_api_path="asset/DeviceRegistrations",
                        object_type="Domain Name",
                        organization=self.organization,
                        preconfigured_api_client=self.api_client
                        )
                    # Check for Blade Server resources located under the Intersight Account
                    retrieved_intersight_blade_servers = get_intersight_objects(
                        intersight_api_key_id=None,
                        intersight_api_key=None,
                        intersight_api_path=f"compute/Blades?$filter=ManagementMode%20eq%20%27Intersight%27",
                        object_type="Blade Server",
                        preconfigured_api_client=self.api_client
                        )                    
                    # Search for Chassis Blade Servers in the provided Domain Name with matching Chassis and Slot IDs under the Intersight Account
                    for blade_server in retrieved_intersight_blade_servers.get("Results"):
                        if (
                            int(blade_server["ChassisId"]) in provided_chassis_id_list
                            and
                            blade_server["SlotId"] in provided_chassis_slot_ids_list
                            and
                            blade_server["ManagementMode"] == "Intersight"
                            ):
                            current_chassis_id = int(blade_server["ChassisId"])
                            # Search for Chassis in the provided Domain Name with matching Chassis IDs under the Intersight Account
                            for chassis in retrieved_intersight_chassis.get("Results"):
                                if (
                                    chassis["RegisteredDevice"]["Moid"] == chassis_domain_name_moid
                                    and
                                    chassis["ChassisId"] == current_chassis_id
                                    and
                                    chassis["ManagementMode"] == "Intersight"
                                    ):
                                    retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Chassis IDs are provided without the Domain Name or Slot IDs
                if chassis_resources_dictionary.get("ChassisIds"):
                    if not any(
                        (chassis_resources_dictionary.get("DomainName"),
                         chassis_resources_dictionary.get("SlotIds")
                         )
                        ):
                        # Convert provided Chassis IDs into list format
                        provided_chassis_id_list = integer_number_list_maker(chassis_resources_dictionary["ChassisIds"])
                        # Search for Chassis with matching Chassis IDs under the Intersight Account
                        for chassis in retrieved_intersight_chassis.get("Results"):
                            if (
                                chassis["ChassisId"] in provided_chassis_id_list
                                and
                                chassis["ManagementMode"] == "Intersight"
                                ):
                                # Extract MOIDs from the Blade Servers in any matched Chassis
                                for chassis_blade_server in chassis["Blades"]:
                                    retrieved_blade_server_moid_list.append(chassis_blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Chassis IDs and Slot IDs are provided without any corresponding Domain Name
                if all(
                    (chassis_resources_dictionary.get("ChassisIds"),
                     chassis_resources_dictionary.get("SlotIds")
                     )
                    ):
                    if not chassis_resources_dictionary.get("DomainName"):
                        # Convert provided Chassis IDs into list format
                        provided_chassis_id_list = integer_number_list_maker(chassis_resources_dictionary["ChassisIds"])
                        # Convert provided Chassis Blade Server Slot IDs into list format
                        provided_chassis_slot_ids_list = integer_number_list_maker(chassis_resources_dictionary["SlotIds"])
                        # Check for Blade Server resources located under the Intersight Account
                        retrieved_intersight_blade_servers = get_intersight_objects(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            intersight_api_path=f"compute/Blades?$filter=ManagementMode%20eq%20%27Intersight%27",
                            object_type="Blade Server",
                            preconfigured_api_client=self.api_client
                            )                        
                        # Search for Chassis Blade Servers with matching Chassis and Slot IDs under the Intersight Account
                        for blade_server in retrieved_intersight_blade_servers.get("Results"):
                            if (
                                int(blade_server["ChassisId"]) in provided_chassis_id_list
                                and
                                blade_server["SlotId"] in provided_chassis_slot_ids_list
                                and
                                blade_server["ManagementMode"] == "Intersight"
                                ):
                                current_chassis_id = int(blade_server["ChassisId"])
                                # Search for Chassis with matching Chassis IDs under the Intersight Account
                                for chassis in retrieved_intersight_chassis.get("Results"):
                                    if (
                                        chassis["ChassisId"] == current_chassis_id
                                        and
                                        chassis["ManagementMode"] == "Intersight"
                                        ):
                                        retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Slot IDs are provided without the Domain Name or Chassis IDs
                if chassis_resources_dictionary.get("SlotIds"):
                    if not any(
                        (chassis_resources_dictionary.get("DomainName"),
                         chassis_resources_dictionary.get("ChassisIds")
                         )
                        ):
                        # Convert provided Chassis Blade Server Slot IDs into list format
                        provided_chassis_slot_ids_list = integer_number_list_maker(chassis_resources_dictionary["SlotIds"])
                        # Check for Blade Server resources located under the Intersight Account
                        retrieved_intersight_blade_servers = get_intersight_objects(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            intersight_api_path=f"compute/Blades?$filter=ManagementMode%20eq%20%27Intersight%27",
                            object_type="Blade Server",
                            preconfigured_api_client=self.api_client
                            )                        
                        # Search for Chassis Blade Servers in the provided Domain Name with matching Slot IDs under the Intersight Account
                        for blade_server in retrieved_intersight_blade_servers.get("Results"):
                            if (
                                blade_server["SlotId"] in provided_chassis_slot_ids_list
                                and
                                blade_server["ManagementMode"] == "Intersight"
                                ):
                                retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Domain Name and Slot IDs are provided without any corresponding Chassis IDs
                if all(
                    (chassis_resources_dictionary.get("DomainName"),
                     chassis_resources_dictionary.get("SlotIds")
                     )
                    ):
                    if not chassis_resources_dictionary.get("ChassisIds"):
                        # Convert provided Chassis Blade Server Slot IDs into list format
                        provided_chassis_slot_ids_list = integer_number_list_maker(chassis_resources_dictionary["SlotIds"])
                        # Get the MOID of the provided Domain Name for the Chassis
                        chassis_domain_name_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "DeviceHostname": [chassis_resources_dictionary["DomainName"]]
                                },
                            intersight_api_path="asset/DeviceRegistrations",
                            object_type="Domain Name",
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )                        
                        # Check for Blade Server resources located under the Intersight Account
                        retrieved_intersight_blade_servers = get_intersight_objects(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            intersight_api_path=f"compute/Blades?$filter=ManagementMode%20eq%20%27Intersight%27",
                            object_type="Blade Server",
                            preconfigured_api_client=self.api_client
                            )                        
                        # Search for Chassis Blade Servers in the provided Domain Name with matching Slot IDs under the Intersight Account
                        for blade_server in retrieved_intersight_blade_servers.get("Results"):
                            if (
                                blade_server["SlotId"] in provided_chassis_slot_ids_list
                                and
                                blade_server["ManagementMode"] == "Intersight"
                                ):
                                # Get the MOID of the Chassis associated with the current Blade Server
                                current_chassis_moid = blade_server["EquipmentChassis"]["Moid"]
                                # Get the associated Chassis object details
                                current_chassis_object = get_single_intersight_object(
                                    intersight_api_key_id=None,
                                    intersight_api_key=None,
                                    intersight_api_path="equipment/Chasses",
                                    object_moid=current_chassis_moid,
                                    object_type="UCS Chassis",
                                    preconfigured_api_client=self.api_client
                                    )
                                # Get the MOID of the Domain Name for the Chassis associated with the current Blade Server
                                current_chassis_object_domain_name_moid = current_chassis_object["RegisteredDevice"]["Moid"]
                                # Retrieve the current Blade Server MOID if the Chassis Domain Name matches the provided Domain Name
                                if current_chassis_object_domain_name_moid == chassis_domain_name_moid:
                                    retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if any Chassis serials are provided
                if chassis_resources_dictionary.get("Serials"):
                    # Convert provided Chassis serials into list format
                    provided_chassis_serials_list = string_to_list_maker(chassis_resources_dictionary["Serials"])
                    # Search for Chassis with matching serials under the Intersight Account
                    for chassis in retrieved_intersight_chassis.get("Results"):
                        if chassis["Serial"] in provided_chassis_serials_list:
                            # Extract MOIDs from the Blade Servers in any matched Chassis
                            for chassis_blade_server in chassis["Blades"]:
                                retrieved_blade_server_moid_list.append(chassis_blade_server["Moid"])

        # Check for provided Blade Server resources
        if self.blade_server_resources_list:
            print("Checking for the provided Blade Server resources...")
            retrieved_intersight_blade_servers = get_intersight_objects(
                intersight_api_key_id=None,
                intersight_api_key=None,
                intersight_api_path=f"compute/Blades?$filter=ManagementMode%20eq%20%27Intersight%27",
                object_type="Blade Server",
                preconfigured_api_client=self.api_client
                )
            if not retrieved_intersight_blade_servers.get("Results"):
                print("No Blade Servers were found in the Intersight Account.")
            for blade_server_resources_dictionary in self.blade_server_resources_list:
                # Blade Server MOID extraction process if any Blade Server names are provided
                if blade_server_resources_dictionary.get("Names"):
                    # Convert provided Blade Server names into list format
                    provided_blade_server_names_list = string_to_list_maker(blade_server_resources_dictionary["Names"])
                    # Search for Blade Servers with matching names under the Intersight Account
                    for blade_server in retrieved_intersight_blade_servers.get("Results"):
                        if blade_server["Name"] in provided_blade_server_names_list:
                            # Extract MOIDs from the matched Blade Servers
                            retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Blade Server MOID extraction process if any Blade Server serials are provided
                if blade_server_resources_dictionary.get("Serials"):
                    # Convert provided Blade Server serials into list format
                    provided_blade_server_serials_list = string_to_list_maker(blade_server_resources_dictionary["Serials"])
                    # Search for Blade Servers with matching serials under the Intersight Account
                    for blade_server in retrieved_intersight_blade_servers.get("Results"):
                        if blade_server["Serial"] in provided_blade_server_serials_list:
                            # Extract MOIDs from the matched Blade Servers
                            retrieved_blade_server_moid_list.append(blade_server["Moid"])

        # Setup API body with retrieved Blade Server MOIDs from any provided resources
        if retrieved_blade_server_moid_list:
            try:
                api_ready_retrieved_blade_server_moid_list = tuple(set(retrieved_blade_server_moid_list))
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} "
                      f"named {self.policy_name}, there was an issue with "
                      "retrieving the blade servers under the provided "
                      "chassis resources.\n")
            # Count the number of Blade Servers to be added to the Resource Pool
            number_of_blade_servers_to_be_added = len(api_ready_retrieved_blade_server_moid_list)
            print("Based on the resource criteria provided, the amount of "
                  "Blade Servers to be placed in the Resource Pool is "
                  f"{number_of_blade_servers_to_be_added}.")
            # NOTE - Intersight API Selector attribute will not accept tuple with single element and trailing comma
            # NOTE - Addressed by handling single elements differently
            if number_of_blade_servers_to_be_added == 1:
                for blade_server in api_ready_retrieved_blade_server_moid_list:
                    single_blade_server = blade_server
                if self.intersight_api_body.get("Selectors"):
                    self.intersight_api_body["Selectors"].append(
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/Blades?$filter=(Moid in ('{single_blade_server}'))"
                         }
                        )
                else:
                    self.intersight_api_body["Selectors"] = [
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/Blades?$filter=(Moid in ('{single_blade_server}'))"
                         }
                        ]
            else:
                if self.intersight_api_body.get("Selectors"):
                    self.intersight_api_body["Selectors"].append(
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/Blades?$filter=(Moid in {api_ready_retrieved_blade_server_moid_list})"
                         }
                        )
                else:
                    self.intersight_api_body["Selectors"] = [
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/Blades?$filter=(Moid in {api_ready_retrieved_blade_server_moid_list})"
                         }
                        ]
        else:
            print("Based on the resource criteria provided, no Blade Servers "
                  "will be added to the Resource Pool.")
            if self.intersight_api_body.get("Selectors"):
                self.intersight_api_body["Selectors"].append(
                    {"ClassId": "resource.Selector",
                     "ObjectType": "resource.Selector",
                     "Selector": f"/api/v1/compute/Blades?$filter=(Moid in (''))"
                     }
                    )
            else:
                self.intersight_api_body["Selectors"] = [
                    {"ClassId": "resource.Selector",
                     "ObjectType": "resource.Selector",
                     "Selector": f"/api/v1/compute/Blades?$filter=(Moid in (''))"
                     }
                    ]
    
        # Check for provided Rack Server resources
        if self.rack_server_resources_list:
            print("Checking for the provided Rack Server resources...")
            if reformatted_ucs_server_type_variable_value == "fi-attached":
                retrieved_intersight_rack_servers = get_intersight_objects(
                    intersight_api_key_id=None,
                    intersight_api_key=None,
                    intersight_api_path="compute/RackUnits?$filter=ManagementMode%20eq%20%27Intersight%27",
                    object_type="Rack Server",
                    preconfigured_api_client=self.api_client
                    )
            elif reformatted_ucs_server_type_variable_value == "standalone":
                retrieved_intersight_rack_servers = get_intersight_objects(
                    intersight_api_key_id=None,
                    intersight_api_key=None,
                    intersight_api_path="compute/RackUnits?$filter=ManagementMode%20eq%20%27IntersightStandalone%27",
                    object_type="Rack Server",
                    preconfigured_api_client=self.api_client
                    )
            if not retrieved_intersight_rack_servers.get("Results"):
                print("No Rack Servers were found in the Intersight Account.")
            for rack_server_resources_dictionary in self.rack_server_resources_list:
                # Rack Server MOID extraction process if any Rack Server names are provided
                if rack_server_resources_dictionary.get("Names"):
                    # Convert provided Rack Server names into list format
                    provided_rack_server_names_list = string_to_list_maker(rack_server_resources_dictionary["Names"])
                    # Search for Rack Servers with matching names under the Intersight Account
                    for rack_server in retrieved_intersight_rack_servers.get("Results"):
                        if rack_server["Name"] in provided_rack_server_names_list:
                            # Extract MOIDs from the matched Rack Servers
                            retrieved_rack_server_moid_list.append(rack_server["Moid"])
                # Rack Server MOID extraction process if any Rack Server serials are provided
                if rack_server_resources_dictionary.get("Serials"):
                    # Convert provided Rack Server serials into list format
                    provided_rack_server_serials_list = string_to_list_maker(rack_server_resources_dictionary["Serials"])
                    # Search for Rack Servers with matching serials under the Intersight Account
                    for rack_server in retrieved_intersight_rack_servers.get("Results"):
                        if rack_server["Serial"] in provided_rack_server_serials_list:
                            # Extract MOIDs from the matched Rack Servers
                            retrieved_rack_server_moid_list.append(rack_server["Moid"])

        # Setup API body with retrieved Rack Server MOIDs from any provided resources
        if retrieved_rack_server_moid_list:
            try:
                api_ready_retrieved_rack_server_moid_list = tuple(set(retrieved_rack_server_moid_list))
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} "
                      f"named {self.policy_name}, there was an issue with "
                      "retrieving the rack servers under the provided "
                      "chassis resources.\n")
            # Count the number of Rack Servers to be added to the Resource Pool
            number_of_rack_servers_to_be_added = len(api_ready_retrieved_rack_server_moid_list)
            print("Based on the resource criteria provided, the amount of "
                  "Rack Servers to be placed in the Resource Pool is "
                  f"{number_of_rack_servers_to_be_added}.")
            # NOTE - Intersight API Selector attribute will not accept tuple with single element and trailing comma
            # NOTE - Addressed by handling single elements differently
            if number_of_rack_servers_to_be_added == 1:
                for rack_server in api_ready_retrieved_rack_server_moid_list:
                    single_rack_server = rack_server
                if self.intersight_api_body.get("Selectors"):
                    self.intersight_api_body["Selectors"].append(
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in ('{single_rack_server}'))"
                         }
                        )
                else:
                    self.intersight_api_body["Selectors"] = [
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in ('{single_rack_server}'))"
                         }
                        ]
            else:
                if self.intersight_api_body.get("Selectors"):
                    self.intersight_api_body["Selectors"].append(
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in {api_ready_retrieved_rack_server_moid_list})"
                         }
                        )
                else:
                    self.intersight_api_body["Selectors"] = [
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in {api_ready_retrieved_rack_server_moid_list})"
                         }
                        ]
        else:
            print("Based on the resource criteria provided, no Rack Servers "
                  "will be added to the Resource Pool.")
            if self.intersight_api_body.get("Selectors"):
                self.intersight_api_body["Selectors"].append(
                    {"ClassId": "resource.Selector",
                     "ObjectType": "resource.Selector",
                     "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in (''))"
                     }
                    )
            else:
                self.intersight_api_body["Selectors"] = [
                    {"ClassId": "resource.Selector",
                     "ObjectType": "resource.Selector",
                     "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in (''))"
                     }
                    ]

        # POST the API body to Intersight
        self._post_intersight_object()


def resource_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    chassis_resources_list=None,
    blade_server_resources_list=None,
    rack_server_resources_list=None,
    ucs_server_type="FI-Attached",
    resource_type="Server",
    pool_type="Static",
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Resource Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        chassis_resources_list (list):
            Optional; The list of dictionary entries for blade servers to be
            added to the resource pool based on chassis membership. This is the
            easiest way to add multiple blades at once with minimal
            configuration. The default value is None. An example entry is:
            [{"DomainName": "UCS-IMM-Pod",
              "ChassisIds": "1",
              "SlotIds": "1,2,3,4,5-8",
              "Serials": ""},].
            The above example entry will add the blade servers in slots
            1 through 8 of chassis 1 under the UCS domain named UCS-IMM-Pod.
            A "DomainName" key with a string value can be configured to specify
            the domain of the targeted chassis. If only the "DomainName" key is
            provided, the blade servers of all chassis in the domain under
            Intersight Managed Mode will be added to the resource pool. A
            "ChassisIds" key with a string value can be configured to specify
            the IDs of the targeted chassis. If only the "ChassisIds" key is
            provided, the blade servers of the listed chassis (regardless of
            UCS domain) under Intersight Managed Mode will be added to the
            resource pool. A "SlotIds" key with a string value can be
            configured to specify the IDs of the targeted chassis slots. If
            only the "SlotIds" key is provided, the blade servers in the listed
            chassis slots of any available chassis (regardless of UCS domain)
            under Intersight Managed Mode will be added to the resource pool.
            Combined use of the above keys will have greater specificity in
            targeting desired blade servers for the resource pool. A "Serials"
            key with a string value can also be configured to specify the
            serials of targeted chassis. When using the "Serials" key, all
            blades in the targeted chassis will be added to the resource pool.
            Multiple dictionaries can be placed in the list to configure
            different resource criteria and ranges. All keys are optional.
        blade_server_resources_list (list):
            Optional; The list of dictionary entries for blade servers to be
            added to the resource pool based on the blade server name or
            serial. The default value is None.
            An example entry is: 
            [{"Names": "UCS-IMM-Pod-1-7, UCS-IMM-Pod-1-8",
              "Serials": ""},].
            The above example entry will add the two blade servers named
            UCS-IMM-Pod-1-7 and UCS-IMM-Pod-1-8. A "Names" key with a string
            value can be configured to specify the names of the targeted blade
            servers. A "Serials" key with a string value can also be configured
            to specify the serials of targeted blade servers. Multiple
            dictionaries can be placed in the list to configure different
            resource criteria and ranges. All keys are optional.
        rack_server_resources_list (list):
            Optional; The list of dictionary entries for rack servers to be
            added to the resource pool based on the rack server name or serial.
            The default value is None. An example entry is: 
            [{"Names": "UCS-IMM-Pod-1, UCS-IMM-Pod-2, UCS-IMM-Pod-3",
              "Serials": ""},].
            The above example entry will add the three rack servers named
            UCS-IMM-Pod-1, UCS-IMM-Pod-2 and UCS-IMM-Pod-3. A "Names" key with
            a string value can be configured to specify the names of the
            targeted rack servers. A "Serials" key with a string value can also
            be configured to specify the serials of targeted rack servers. 
            Multiple dictionaries can be placed in the list to configure
            different resource criteria and ranges. All keys are optional.
        ucs_server_type (str):
            Optional; The target UCS server type of the resource pool. The
            accepted values are "FI-Attached" or "Standalone". IMM
            (Intersight Managed Mode) environments should use "FI-Attached". 
            The default value is "FI-Attached".
        resource_type (str):
            Optional; The resource type of the pool. The accepted values are 
            "Server" or "None". The default value is "Server".
        pool_type (str):
            Optional; The resource management type of the pool. Static pools
            will not change unless manually updated by a user. The accepted
            values are "Static" or "Dynamic". The default value is "Static".
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Resource Pool object in Intersight
    builder(
        ResourcePool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            chassis_resources_list=chassis_resources_list,
            blade_server_resources_list=blade_server_resources_list,
            rack_server_resources_list=rack_server_resources_list,
            ucs_server_type=ucs_server_type,
            resource_type=resource_type,
            pool_type=pool_type
            ))


def main():
    # Establish Maker specific variables
    maker_type = "Intersight Resource Pool Maker"
    
    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the Pool Maker for Cisco Intersight
    print(f"\nStarting the {maker_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the Pool in Intersight
    resource_pool_maker(
        intersight_api_key_id=None,
        intersight_api_key=None,
        pool_name=resource_pool_name,
        chassis_resources_list=chassis_resources_list,
        blade_server_resources_list=blade_server_resources_list,
        rack_server_resources_list=rack_server_resources_list,
        ucs_server_type=ucs_server_type,
        resource_type=resource_type,
        pool_type=pool_type,
        pool_description=resource_pool_description,
        pool_assignment_order=resource_assignment_order,
        organization=resource_pool_organization,
        intersight_base_url=intersight_base_url,
        tags=resource_pool_tags,
        preconfigured_api_client=main_intersight_api_client
        )

    # Pool Maker completion
    print(f"\nThe {maker_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the Pool Maker for Cisco Intersight
sys.exit(0)
