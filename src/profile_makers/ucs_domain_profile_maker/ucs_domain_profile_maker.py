"""
UCS Domain Profile Maker for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The UCS Domain Profile Maker for Cisco Intersight automates the
         creation of UCS Domain Profiles.
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
UCS Domain Profile on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######

# General Settings
ucs_domain_profile_name = "UCS-Domain-Profile-1"
ucs_domain_profile_description = "A Cisco Intersight UCS Domain Profile generated by the UCS Domain Profile Maker."
ucs_domain_profile_organization = "default"
ucs_domain_profile_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ucs_domain_profile_tags dictionary if no tags are needed, for example: ucs_domain_profile_tags = {}

# UCS Domain Assignment Settings
## NOTE - For the Intersight Target identifier, the accepted values are the Target Name, IP Address or Target ID (Serial Numbers) as found in the Intersight GUI Targets section.
## If there are targets with duplicate names or duplicate IP addresses, please use the Target ID (Serial Numbers) to ensure the correct Intersight Target is selected.
## Here is an example using the Target Name: target_assignment_identifier = "UCS-IMM-Pod"
## Here is an example using the Target ID (Serial Numbers): target_assignment_identifier = "FXO17840D7U,FXO47840D11"
## Here is an example using the Target IP Address: target_assignment_identifier = "192.168.0.11,192.168.0.12"
## For the Target ID (Serial Numbers) or Target IP Address which are listed as pairs in the Intersight GUI, for convenience, one entry from the pair can also be provided.
## Here is an example using one entry in the Target ID (Serial Numbers) pair : target_assignment_identifier = "FXO17840D7U"
## Here is an example using one entry in the Target IP Address pair: target_assignment_identifier = "192.168.0.11"
target_assignment_identifier = ""
assign_ucs_domain_profile = False

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


import sys
import traceback
import json
import copy
import intersight
import re
import time
import urllib3

# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to convert a list of strings in string type format to list type format.
def string_to_list_maker(string_list,
                         remove_duplicate_elements_in_list=True
                         ):
    """This function converts a list of strings in string type format to list
    type format. The provided string should contain commas, semicolons, or
    spaces as the separator between strings. For each string in the list,
    leading and rear spaces will be removed. Duplicate strings in the list are
    removed by default.

    Args:
        string_list (str):
            A string containing an element or range of elements.

        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements are
            removed from the provided string list. The default value is True.

    Returns:
        A list of elements.   
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.

            separator (str):
                The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.   
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            provided_list (list): A list of elements to be separated.

            separator (str): The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.        
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element, separator)
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    staged_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list, " ")
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list, ",")
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list, ";")
    # Split provided list by hyphens.
    for post_semicolon_split_string_set in post_semicolon_split_list:
        staged_list.append(post_semicolon_split_string_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        final_list = list(set(staged_list))
    return final_list


# Establish Maker specific classes and functions
class UcsDomainProfile:
    """This class is used to configure a UCS Domain Profile in Intersight.
    """
    object_type = "UCS Domain Profile"
    intersight_api_path = "fabric/SwitchClusterProfiles"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 ucs_domain_profile_name,
                 ucs_domain_profile_description="",
                 ucs_domain_profile_organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.ucs_domain_profile_name = ucs_domain_profile_name
        self.ucs_domain_profile_description = ucs_domain_profile_description
        self.ucs_domain_profile_organization = ucs_domain_profile_organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.ucs_domain_profile_name,
            "Description": self.ucs_domain_profile_description,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.ucs_domain_profile_description}', "
            f"'{self.ucs_domain_profile_organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.ucs_domain_profile_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=self.intersight_api_path,
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        ucs_domain_profile_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                intersight_api_key=None,
                                                                                object_name=self.ucs_domain_profile_organization,
                                                                                intersight_api_path="organization/Organizations",
                                                                                object_type="Organization",
                                                                                preconfigured_api_client=self.api_client
                                                                                )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": ucs_domain_profile_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.ucs_domain_profile_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class SwitchProfile(UcsDomainProfile):
    """This class serves as a base class for configuring Switch Profiles.
    """
    object_type = "Switch Profile"
    intersight_api_path = "fabric/SwitchProfiles"
    cluster_profile_type = "UCS Domain Profile"
    cluster_profile_intersight_api_path = "fabric/SwitchClusterProfiles"
    attributes_that_require_special_handling = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 ucs_domain_profile_name,
                 ucs_domain_profile_description="",
                 ucs_domain_profile_organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 fabric_interconnect="A"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         ucs_domain_profile_name,
                         ucs_domain_profile_description,
                         ucs_domain_profile_organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.fabric_interconnect = fabric_interconnect
        self.intersight_api_body = {
            "Description": self.ucs_domain_profile_description,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.ucs_domain_profile_description}', "
            f"'{self.ucs_domain_profile_organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.fabric_interconnect}')"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.ucs_domain_profile_name}-{self.fabric_interconnect}'"

    def _post_intersight_switch_profile(self,
                                        switch_profile_name,
                                        moid=None
                                        ):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Args:
            switch_profile_name (str):
                The name of the Switch Profile to be posted on Intersight.
            moid (str):
                Optional; The Intersight MOID of the object to be posted
                on Intersight. The default value is None.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        if moid:
            full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
        else:
            full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            if moid:
                print(f"Configuring the underlying {self.object_type} "
                      f"named {switch_profile_name}...")
                print(f"The configuration of the {self.object_type} for "
                      f"Fabric Interconnect {self.fabric_interconnect} has "
                      "been updated.")
            else:
                print(f"Configuring the underlying {self.object_type} "
                      f"named {switch_profile_name}...")
                print(f"The configuration of the {self.object_type} for "
                      f"Fabric Interconnect {self.fabric_interconnect} has "
                      "completed.")
            return "The POST method was successful."
        except Exception:
            print("\nA configuration error has occurred!\n")
            if moid:
                print(f"Unable to update the underlying {self.object_type} "
                      f"named {switch_profile_name} for "
                      f"Fabric Interconnect {self.fabric_interconnect} "
                      "under the Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
            else:
                print("Unable to configure the underlying "
                      f"{self.object_type} named {switch_profile_name} for "
                      f"Fabric Interconnect {self.fabric_interconnect} "
                      "under the Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def object_maker(self):
        """This function applies the provided configuration to the
        targeted profile.
        """ 
        # Begin configuration of the Switch Profile
        # Verify that accepted values for the Fabric Interconnect have been provided
        if self.fabric_interconnect not in ("A", "B"):
            print("\nA configuration error has occurred!\n")
            print(f"The provided value of '{self.fabric_interconnect}' for the "
                  f"{self.object_type} Fabric Interconnect is not supported.")
            print(f"To proceed, the {self.object_type} Fabric Interconnect "
                  "value must be 'A' or 'B'.")
            print(f"Please update the value for the {self.object_type} "
                  f"Fabric Interconnect, then re-attempt execution.\n")
            sys.exit(0)        
        # Update the API body with the Switch Profile name, depending on the target Fabric Interconnect
        switch_profile_name = f"{self.ucs_domain_profile_name}-{self.fabric_interconnect}"
        self.intersight_api_body["Name"] = switch_profile_name
        # Retrieve the UCS Domain Profile MOID
        ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                   intersight_api_key=None,
                                                                   object_name=self.ucs_domain_profile_name,
                                                                   intersight_api_path=self.cluster_profile_intersight_api_path,
                                                                   object_type=self.cluster_profile_type,
                                                                   organization=self.ucs_domain_profile_organization,
                                                                   preconfigured_api_client=self.api_client
                                                                   )
        # Update the API body with the UCS Domain Profile a.k.a. Switch Cluster Profile
        self.intersight_api_body["SwitchClusterProfile"] = {"Moid": ucs_domain_profile_moid}
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # POST the API body to Intersight
        self._post_intersight_switch_profile(switch_profile_name)


def ucs_domain_profile_maker(intersight_api_key_id,
                             intersight_api_key,
                             ucs_domain_profile_name,
                             ucs_domain_profile_description="",
                             ucs_domain_profile_organization="default",
                             intersight_base_url="https://www.intersight.com/api/v1",
                             tags=None,
                             preconfigured_api_client=None
                             ):
    """This is a function used to make a UCS Domain Profile on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_domain_profile_name (str):
            The name of the UCS Domain Profile to be created.
        ucs_domain_profile_description (str):
            Optional; The description of the UCS Domain Profile to be created.
            The default value is an empty string ("").
        ucs_domain_profile_organization (str):
            Optional; The Intersight account organization of the UCS Domain
            Profile. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            profile. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool, policy, or profile on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create UCS Domain Profile object in Intersight
    builder(UcsDomainProfile(intersight_api_key_id=intersight_api_key_id,
                             intersight_api_key=intersight_api_key,
                             ucs_domain_profile_name=ucs_domain_profile_name,
                             ucs_domain_profile_description=ucs_domain_profile_description,
                             ucs_domain_profile_organization=ucs_domain_profile_organization,
                             intersight_base_url=intersight_base_url,
                             tags=tags,
                             preconfigured_api_client=preconfigured_api_client
                             ))

    # Define and create Switch Profile object for Fabric Interconnect A in Intersight
    builder(SwitchProfile(intersight_api_key_id=intersight_api_key_id,
                          intersight_api_key=intersight_api_key,
                          ucs_domain_profile_name=ucs_domain_profile_name,
                          ucs_domain_profile_description=ucs_domain_profile_description,
                          ucs_domain_profile_organization=ucs_domain_profile_organization,
                          intersight_base_url=intersight_base_url,
                          tags=tags,
                          preconfigured_api_client=preconfigured_api_client,
                          fabric_interconnect="A"
                          ))

    time.sleep(2)

    # Define and create Switch Profile object for Fabric Interconnect B in Intersight
    builder(SwitchProfile(intersight_api_key_id=intersight_api_key_id,
                          intersight_api_key=intersight_api_key,
                          ucs_domain_profile_name=ucs_domain_profile_name,
                          ucs_domain_profile_description=ucs_domain_profile_description,
                          ucs_domain_profile_organization=ucs_domain_profile_organization,
                          intersight_base_url=intersight_base_url,
                          tags=tags,
                          preconfigured_api_client=preconfigured_api_client,
                          fabric_interconnect="B"
                          ))


# Establish function to assign domain profile to targets
def assign_and_deploy_ucs_domain_profile(intersight_api_key_id,
                                         intersight_api_key,
                                         ucs_domain_profile_name,
                                         target_assignment_identifier="",
                                         assign_ucs_domain_profile=True,
                                         deploy_ucs_domain_profile=False,
                                         ucs_domain_profile_organization="default",
                                         intersight_base_url="https://www.intersight.com/api/v1",
                                         preconfigured_api_client=None
                                         ):
    """This is a function to assign and deploy a UCS Domain Profile to
    an Intersight Target.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_domain_profile_name (str):
            The name of the UCS Domain Profile to be assigned and/or deployed.
        target_assignment_identifier (str):
            Optional; The Intersight Target that the provided UCS Domain
            Profile should be assigned to. The default value is an empty string 
            (""). An empty string or None can be provided if no Intersight
            Target is being set or the UCS Domain Profile is already assigned
            to an Intersight Target.
        assign_ucs_domain_profile (bool):
            Optional; This argument enables or disables the option to assign
            the provided UCS Domain Profile to the provided Intersight Target.
            The default value is True.
        assign_ucs_domain_profile (bool):
            Optional; This argument enables or disables the option to deploy
            the provided UCS Domain Profile to the provided Intersight Target
            or a previously assigned Intersight Target.
            The default value is False.
        ucs_domain_profile_organization (str):
            Optional; The Intersight account organization of the UCS Domain
            Profile. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def post_intersight_switch_profile_update(switch_profile_moid,
                                              switch_profile_api_body,
                                              switch_profile_fabric_id
                                              ):
        """This is a function to update an Intersight Switch Profile by
        performing a POST through the Intersight API.

        Args:
            switch_profile_moid (str):
                The Intersight MOID of the Switch Profile to be updated
                on Intersight.
            switch_profile_api_body (dict):
                The updated Switch Profile Intersight API body.
            switch_profile_fabric_id (str):
                The Fabric ID of the Fabric Interconnect that the Switch
                Profile will be assigned to.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/fabric/SwitchProfiles/{switch_profile_moid}"
        try:
            api_client.call_api(resource_path=full_intersight_api_path,
                                method="POST",
                                body=switch_profile_api_body,
                                auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                )
            print("The configuration of the Switch Profile for Fabric "
                  f"Interconnect {switch_profile_fabric_id} has been updated.")
            print("Any accompanying Intersight Requests will be initiated.")
            return "The POST method was successful."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("Unable to update the Switch Profile for Fabric Interconnect "
                  f"{switch_profile_fabric_id}.")
            print("The Intersight API resource path for the Switch Profile is "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."
    
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Get UCS Domain Profile MOID
    ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                               intersight_api_key=None,
                                                               object_name=ucs_domain_profile_name,
                                                               intersight_api_path="fabric/SwitchClusterProfiles",
                                                               object_type="UCS Domain Profile",
                                                               organization=ucs_domain_profile_organization,
                                                               preconfigured_api_client=api_client
                                                               )
    # Get UCS Domain Profile object dictionary attributes
    ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                             intersight_api_key=None,
                                                             intersight_api_path="fabric/SwitchClusterProfiles",
                                                             object_moid=ucs_domain_profile_moid,
                                                             object_type="UCS Domain Profile",
                                                             preconfigured_api_client=api_client
                                                             )
    # Get Switch Profiles that are attached to the UCS Domain Profile
    ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
    if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
        print("\nA configuration error has occurred!\n")
        print("The provided UCS Domain Profile named "
              f"{ucs_domain_profile_name} is not configured with two "
              "attached Switch Profiles.")
        print("To proceed, two Switch Profiles must be attached to the "
              "provided UCS Domain Profile.")
        print("Please update the configuration of the provided UCS "
              f"Domain Profile, then re-attempt execution.\n")
        sys.exit(0)
    else:
        fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
        fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
    # Assign UCS Domain Profile
    if assign_ucs_domain_profile:
        print("\nAssigning the UCS Domain Profile named "
              f"{ucs_domain_profile_name}...")
        print("The provided Intersight Target identifier for assignment is "
              f"'{target_assignment_identifier}'.")
        # Convert provided Intersight Target Identifier
        if target_assignment_identifier:
            provided_target_identifiers = string_to_list_maker(target_assignment_identifier)
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the UCS Domain "
                  "Profile to an Intersight Target.")
            print("In order to assign the provided UCS Domain Profile, an "
                  "Intersight Target identifier must also be provided.")
            print("Please check the value provided for the "
                  "Intersight Target identifier.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)            
        # Find provided Intersight Target
        retrieved_intersight_targets = get_intersight_objects(intersight_api_key_id=None,
                                                              intersight_api_key=None,
                                                              intersight_api_path="asset/Targets?$top=1000",
                                                              object_type="Target",
                                                              preconfigured_api_client=api_client
                                                              )
        if retrieved_intersight_targets.get("Results"):
            for intersight_target in retrieved_intersight_targets.get("Results"):
                for target_identifier in provided_target_identifiers:
                    for target_identifier_type in ("TargetId", "Name", "IpAddress"):
                        if target_identifier in intersight_target.get(target_identifier_type):
                            if intersight_target.get("TargetType") == "UCSFIISM":
                                matching_intersight_target = intersight_target
                                break
                            else:
                                print("\nA configuration error has occurred!\n")
                                print("There was an issue assigning the UCS "
                                      "Domain Profile to an Intersight Target.")
                                print("The Intersight Target with the provided "
                                      "identifier of "
                                      f"'{target_assignment_identifier}' "
                                      "was found, but is not supported with "
                                      "Intersight UCS Domain Profiles.")
                                print("Please provide a supported Intersight "
                                      "Target.")
                                print("Once the issue has been resolved, "
                                      "re-attempt execution.\n")
                                sys.exit(0)
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("There was an issue assigning the UCS Domain "
                              "Profile to an Intersight Target.")
                        print("The Intersight Target with the provided "
                              f"identifier of '{target_assignment_identifier}' "
                              "was not found.")
                        print("Please check the Intersight Account named "
                              f"{intersight_account_name}.")
                        print("Verify through the API or GUI that the needed "
                              "Intersight Target is present.")
                        print("If the needed Intersight Target is missing, "
                              "please register it.")
                        print("Once the issue has been resolved, "
                              "re-attempt execution.\n")
                        sys.exit(0)
                    break
                else:
                    print("\nA configuration error has occurred!\n")
                    print("There was an issue assigning the UCS Domain "
                          "Profile to an Intersight Target.")
                    print("Please check the value provided for the "
                          "Intersight Target identifier.")
                    print("The Intersight Target with the provided "
                          f"identifier of '{target_assignment_identifier}' "
                          "was not found.")
                    print("Please check the Intersight Account named "
                          f"{intersight_account_name}.")
                    print("Verify through the API or GUI that the needed "
                          "Intersight Target is present.")
                    print("If the needed Intersight Target is missing, "
                          "please register it.")
                    print("Once the issue has been resolved, re-attempt "
                          "execution.\n")
                    sys.exit(0)                           
                break
            else:
                print("\nA configuration error has occurred!\n")
                print("There was an issue assigning the UCS Domain Profile to "
                      "an Intersight Target.")
                print("The Intersight Target with the provided identifier of "
                      f"'{target_assignment_identifier}' was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      "Intersight Target is present.")
                print("If the needed Intersight Target is missing, please "
                      "register it.")
                print(f"Once the issue has been resolved, re-attempt "
                      "execution.\n")
                sys.exit(0)
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the UCS Domain Profile to an "
                  "Intersight Target.")
            print(f"The Intersight Target with the provided identifier of "
                  f"'{target_assignment_identifier}' was not found.")
            print("No Intersight targets are currently available in the "
                  f"Intersight account named {intersight_account_name}.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed Intersight "
                  "Target is present.")
            print("If the needed Intersight Target is missing, please register "
                  "it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
        # Log name of found matching Intersight Target
        matching_intersight_target_name = matching_intersight_target.get("Name")
        print("A matching Intersight Target named "
              f"{matching_intersight_target_name} has been found for "
              "assignment.")
        # Find the Intersight Network Elements (Fabric Interconnects) related to the Intersight Target
        matching_network_elements_list = []
        retrieved_intersight_network_elements = get_intersight_objects(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       intersight_api_path="network/Elements",
                                                                       object_type="Fabric Interconnect",
                                                                       preconfigured_api_client=api_client
                                                                       )
        if retrieved_intersight_network_elements.get("Results"):
            for network_element in retrieved_intersight_network_elements.get("Results"):
                if network_element.get("RegisteredDevice") == matching_intersight_target.get("RegisteredDevice"):
                    matching_network_elements_list.append(network_element)
            # Determine the Fabric ID for the found matching Fabric Interconnect Network Elements
            if len(matching_network_elements_list) != 2:
                print("\nA configuration error has occurred!\n")
                print("There was an issue assigning the UCS Domain Profile to "
                      "an Intersight Target.")
                print(f"The Intersight Target with the provided identifier of "
                      f"'{target_assignment_identifier}' does not have two "
                      "Fabric Interconnects.")
                print("To proceed, two Fabric Interconnects "
                      "(no more and no less) must be registered under the "
                      "provided Intersight Target.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      "Intersight Target is present, properly registered and "
                      "in a healthy state.")
                print("If the needed Intersight Target is missing, please "
                      "register it.")
                print("Once the issue has been resolved, re-attempt "
                      "execution.\n")
                sys.exit(0)
            else:
                for fabric_interconnect_network_element in matching_network_elements_list:
                    if fabric_interconnect_network_element.get("SwitchId") == "A":
                        fabric_interconnect_a_network_element = fabric_interconnect_network_element
                    if fabric_interconnect_network_element.get("SwitchId") == "B":
                        fabric_interconnect_b_network_element = fabric_interconnect_network_element
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the "
                  "UCS Domain Profile to an Intersight Target.")
            print("The Fabric Interconnects related to the Intersight Target "
                  "with the provided identifier of "
                  f"'{target_assignment_identifier}' were not found.")
            print("No Fabric Interconnects are currently registered under the "
                  f"Intersight account named {intersight_account_name}.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed Intersight "
                  "Target is present, properly registered and in a healthy "
                  "state.")
            print("If the needed Intersight Target is missing, please register "
                  "it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
        # Assign Service Profile to Fabric Interconnect A
        print("Assigning the underlying Switch Profile for Fabric "
              "Interconnect A...")
        fabric_interconnect_a_network_element_moid = fabric_interconnect_a_network_element.get("Moid")
        fabric_interconnect_a_switch_profile_assignment_api_body = {
            "AssignedSwitch": {"Moid": fabric_interconnect_a_network_element_moid}
            }
        post_intersight_switch_profile_update(
            switch_profile_moid=fabric_interconnect_a_switch_profile_moid,
            switch_profile_api_body=fabric_interconnect_a_switch_profile_assignment_api_body,
            switch_profile_fabric_id="A"
            )
        # Assign Service Profile to Fabric Interconnect B
        print("Assigning the underlying Switch Profile for Fabric "
              "Interconnect B...")
        fabric_interconnect_b_network_element_moid = fabric_interconnect_b_network_element.get("Moid")
        fabric_interconnect_b_switch_profile_assignment_api_body = {
            "AssignedSwitch": {"Moid": fabric_interconnect_b_network_element_moid}
            }
        post_intersight_switch_profile_update(
            switch_profile_moid=fabric_interconnect_b_switch_profile_moid,
            switch_profile_api_body=fabric_interconnect_b_switch_profile_assignment_api_body,
            switch_profile_fabric_id="B"
            )
    # Deploy UCS Domain Profile
    if deploy_ucs_domain_profile:
        print("\nDeploying the UCS Domain Profile named "
              f"{ucs_domain_profile_name}...")
        # Deploy Service Profile to Fabric Interconnect A
        print("Deploying the underlying Switch Profile for Fabric "
              "Interconnect A...")
        fabric_interconnect_a_switch_profile_deployment_api_body = {
            "Action": "Deploy"
            }
        post_intersight_switch_profile_update(
            switch_profile_moid=fabric_interconnect_a_switch_profile_moid,
            switch_profile_api_body=fabric_interconnect_a_switch_profile_deployment_api_body,
            switch_profile_fabric_id="A"
            )
        # Deploy Service Profile to Fabric Interconnect B
        print("Deploying the underlying Switch Profile for Fabric "
              "Interconnect B...")
        fabric_interconnect_b_switch_profile_deployment_api_body = {
            "Action": "Deploy"
            }
        post_intersight_switch_profile_update(
            switch_profile_moid=fabric_interconnect_b_switch_profile_moid,
            switch_profile_api_body=fabric_interconnect_b_switch_profile_deployment_api_body,
            switch_profile_fabric_id="B"
            )


def main():

    # Establish Maker specific variables
    maker_type = "Intersight UCS Domain Profile Maker"

    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the Profile Maker for Cisco Intersight
    print(f"\nStarting the {maker_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the Profile in Intersight
    ucs_domain_profile_maker(
        intersight_api_key_id=None,
        intersight_api_key=None,
        ucs_domain_profile_name=ucs_domain_profile_name,
        ucs_domain_profile_description=ucs_domain_profile_description,
        ucs_domain_profile_organization=ucs_domain_profile_organization,
        tags=ucs_domain_profile_tags,
        preconfigured_api_client=main_intersight_api_client
        )

    # Assign and Deploy the Profile to an Intersight Target
    if assign_ucs_domain_profile:
        assign_and_deploy_ucs_domain_profile(
            intersight_api_key_id=None,
            intersight_api_key=None,
            ucs_domain_profile_name=ucs_domain_profile_name,
            target_assignment_identifier=target_assignment_identifier,
            assign_ucs_domain_profile=assign_ucs_domain_profile,
            deploy_ucs_domain_profile=False,
            ucs_domain_profile_organization=ucs_domain_profile_organization,
            preconfigured_api_client=main_intersight_api_client
            )

    # Profile Maker completion
    print(f"\nThe {maker_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the Profile Maker for Cisco Intersight
sys.exit(0)
