"""
UCS Server Deployment Tool for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The UCS Server Deployment Tool for Cisco Intersight automates the
         comprehensive build and deployment of UCS Server Profiles, UCS Server
         Profile Templates, Policies and Pools for Cisco IMM (Intersight
         Managed Mode).
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


import sys
import traceback
import json
import copy
import intersight
import re
import urllib3
import time
import base64
import ast

########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
UCS Server Profile on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######


#----------------------------------Section 01----------------------------------#

# GENERAL DEPLOYMENT CONFIGURATION

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

# Global Deployment Name Settings (Optional - These settings will attach a global prefix or suffix to the names of the created UCS Server Profile, Policies, and Pools)
deployment_name_prefix = ""
## If a deployment name suffix is desired, change the value of the following deployment_name_suffix variable, for example: deployment_name_suffix = "-1"
## A timestamp can also be used as a suffix for multiple unique deployments, for example: deployment_name_suffix = f"_{int(time.time())}"
deployment_name_suffix = ""


#----------------------------------Section 02----------------------------------#

# UCS SERVER PROFILE CONFIGURATION

# General Settings
ucs_server_profile_description = "A Cisco Intersight UCS Server Profile generated by the UCS Server Deployment Tool."
ucs_server_profile_organization = "default"
ucs_server_profile_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ucs_server_profile_tags dictionary if no tags are needed, for example: ucs_server_profile_tags = {}

# UCS Server Profile Name and Assignment Settings
## NOTE - For the "Server Assignment Identifier" key below, the accepted values are the Server serial, name, model, or PID (product ID). This information can be found in Intersight, if needed.
## If there are Server with duplicate names, models, or PIDs, please use the serial to ensure the correct Server is selected.
## Here is an example using the Server serial: "Server Assignment Identifier": "FOX1337G777"
## Here is an example using the Server name: "Server Assignment Identifier": "UCS-IMM-Pod-1"
## Here is an example using the Server model: "Server Assignment Identifier": "N20-C6508"
## Here is an example using the Server PID: "Server Assignment Identifier": "N20-C6508"
## For the "Deploy Server Profile" key, setting to False will allow for only assignment of Server profiles to valid Server identifiers. Set to True for full deployment.
## The value set for the "Server Assignment Identifier" key will override any Resource Pool value set in the "Server Resource Pool" key to allow for discrete server assignments if desired.
## To deploy additional UCS Server Profiles, add more rows below.
ucs_server_profile_names_and_assignments = [
    {"Server Profile Name": "UCS-SP-1", "Server Resource Pool": "Resource-Pool-1", "Server Assignment Identifier": "", "Assign Server Profile": True, "Deploy Server Profile": True},
    {"Server Profile Name": "UCS-SP-2", "Server Resource Pool": "Resource-Pool-1", "Server Assignment Identifier": "", "Assign Server Profile": True, "Deploy Server Profile": True},
    {"Server Profile Name": "", "Server Resource Pool": "Resource-Pool-1", "Server Assignment Identifier": "", "Assign Server Profile": True, "Deploy Server Profile": True},
    {"Server Profile Name": "", "Server Resource Pool": "Resource-Pool-1", "Server Assignment Identifier": "", "Assign Server Profile": True, "Deploy Server Profile": True},
    {"Server Profile Name": "", "Server Resource Pool": "Resource-Pool-1", "Server Assignment Identifier": "", "Assign Server Profile": True, "Deploy Server Profile": True},
    {"Server Profile Name": "", "Server Resource Pool": "Resource-Pool-1", "Server Assignment Identifier": "", "Assign Server Profile": True, "Deploy Server Profile": True},
    {"Server Profile Name": "", "Server Resource Pool": "Resource-Pool-1", "Server Assignment Identifier": "", "Assign Server Profile": True, "Deploy Server Profile": True},
    {"Server Profile Name": "", "Server Resource Pool": "Resource-Pool-1", "Server Assignment Identifier": "", "Assign Server Profile": True, "Deploy Server Profile": True},
    ]

ucs_server_profile_ucs_server_form_factor = "Blade"        # Options: "Blade", "Rack"

# UCS Server Profile Template Name Settings (Optional)
ucs_server_profile_template_creation_during_deployment = True
ucs_server_profile_template_name = "UCS-SP-Template-1"

# Compute Configuration
## NOTE - If deploying multiple UCS Server Profiles simultaneously, setting the UUID assignment type to "Pool" is required.
ucs_server_profile_uuid_assignment_type = "Pool"       # Options: "Pool", "Static", "None"
ucs_server_profile_uuid_pool_name = "UUID-Pool-1"       # If the uuid_assignment_type variable is set to "Pool", provide a string value e.g. "UUID-Pool-1" for the uuid_pool_name variable
ucs_server_profile_uuid_static_address = ""        # If the uuid_assignment_type variable is set to "Static", provide a string value e.g. "F733776E-1ED8-11E2-0000-000000000001" for the uuid_static_address variable

# Deployment Start Delay Configuration
## NOTE - This argument sets the delay time between UCS Server Profile assignment and deployment.
## The delay allows for system time that may be needed for clearing previous configurations, etc. before a new UCS Server Profile may be deployed.
ucs_server_profile_deployment_start_delay = 5

# Profile Default Settings (Change only if needed)
ucs_server_profile_ucs_server_type = "FI-Attached"     # Options: "FI-Attached", "Standalone"


#----------------------------------Section 03----------------------------------#

# CUSTOM DEFAULT PRE-REQUISITE AND SUPPORT POLICIES (Change only if using previously created default policies. Otherwise these policies will be automatically created by the UCS Domain Deployment Tool)

# Custom Default Pre-requisite and Support Policies for LAN Connectivity Policies
custom_default_mac_address_pool_name = ""
custom_default_ethernet_network_group_policy_name = ""
custom_default_ethernet_network_control_policy_name = ""
custom_default_ethernet_qos_policy_name = ""
custom_default_ethernet_adapter_policy_name = ""
custom_default_iscsi_boot_policy_name = ""
custom_default_usnic_adapter_policy_name = ""
custom_default_vmmq_adapter_policy_name = ""

# Custom Default Pre-requisite and Support Policies for SAN Connectivity Policies
custom_default_wwpn_address_pool_name = ""
custom_default_fibre_channel_network_policy_name = ""
custom_default_fibre_channel_qos_policy_name = ""
custom_default_fibre_channel_adapter_policy_name = ""
## To provide custom default FC Zone Policies, provide one or more FC Zone Policy names as strings within the list format.
## For example: custom_default_fc_zone_policy_names = ["Default-FC-Zone-Policy-1", "Default-FC-Zone-Policy-2"]
custom_default_fc_zone_policy_names = []


#----------------------------------Section 04----------------------------------#

# POLICY AND POOL ENABLEMENT FOR UCS SERVER PROFILES AND UCS SERVER PROFILE TEMPLATES
## NOTE - The following variables enable creation and deployment of the corresponding named Pool or Policy type. To disable creating a specific Pool or Policy type, change the value to False.

# Server Assignment
deploy_resource_pool = True

# Compute Configuration
deploy_bios_policy = True
deploy_boot_order_policy = True
deploy_power_policy = False
deploy_uuid_pool = True
deploy_virtual_media_policy = False

# Management Configuration
deploy_cert_mgmt_policy = False
deploy_imc_access_policy = True
deploy_ip_pool_in_band = True
deploy_ip_pool_out_of_band = False
deploy_ipmi_over_lan_policy = True
deploy_local_user_policy = True
deploy_serial_over_lan_policy = True
deploy_snmp_policy = False
deploy_syslog_policy = False
deploy_virtual_kvm_policy = False

# Storage Configuration
deploy_sd_card_policy = False
deploy_storage_policy = True

# Network Configuration - LAN
deploy_ethernet_adapter_policy = True
deploy_ethernet_network_control_policy = True
deploy_ethernet_network_group_policy = True
deploy_ethernet_qos_policy = True
deploy_ip_pool_iscsi_boot = False
deploy_iqn_pool = False
deploy_iscsi_adapter_policy = False
deploy_iscsi_boot_policy = False
deploy_iscsi_static_target_policy_primary = False
deploy_iscsi_static_target_policy_secondary = False
deploy_lan_connectivity_policy = True
deploy_mac_pool = True
deploy_usnic_ethernet_adapter_policy = False
deploy_vmmq_ethernet_adapter_policy = False

# Network Configuration - SAN
deploy_fc_zone_policy = False
deploy_fibre_channel_adapter_policy = False
deploy_fibre_channel_network_policy = False
deploy_fibre_channel_qos_policy = False
deploy_san_connectivity_policy = False
deploy_wwnn_pool = False
deploy_wwpn_pool = False


#----------------------------------Section 05----------------------------------#

# BIOS POLICY CONFIGURATION

# General Settings
bios_policy_name = "BIOS-Policy-1"
bios_policy_description = "A Cisco Intersight BIOS Policy generated by the UCS Server Deployment Tool."
bios_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the bios_policy_tags dictionary if no tags are needed, for example: bios_policy_tags = {}

# Policy Detail Settings
## To change BIOS settings from platform defaults, add the setting and its desired configuration.
## Available BIOS settings can be found at https://intersight.com/apidocs/apirefs/bios/Policies/model/.
bios_policy_bios_settings = {
    "CpuPerformance": "enterprise",
    "CpuEnergyPerformance": "balanced-performance",
    }


#----------------------------------Section 06----------------------------------#

# BOOT ORDER POLICY CONFIGURATION

# General Settings
boot_order_policy_name = "Boot-Order-Policy-1"
boot_order_policy_description = "A Cisco Intersight Boot Order Policy generated by the UCS Server Deployment Tool."
boot_order_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the boot_order_policy_tags dictionary if no tags are needed, for example: boot_order_policy_tags = {}

# Policy Detail Settings
boot_order_policy_configured_boot_mode = "Uefi"     # Options: "Legacy", "Uefi"
boot_order_policy_enable_uefi_secure_boot = False
# NOTE! - For the boot devices list, place each boot device dictionary in the list to match the desired boot order (first to last).
boot_order_policy_boot_devices_list = [
    {"Type": "Virtual Media", "Device Name": "Virtual-Media-1", "Sub-Type": "KVM MAPPED DVD"},
    {"Type": "Local Disk", "Device Name": "Local-Disk-1", "Slot": "MSTOR-RAID"},
    ]


#----------------------------------Section 07----------------------------------#

# CERTIFICATE MANAGEMENT POLICY CONFIGURATION

# General Settings
cert_mgmt_policy_name = "Cert-Mgmt-Policy-1"
cert_mgmt_policy_description = "A Cisco Intersight Certificate Management Policy generated by the UCS Server Deployment Tool."
cert_mgmt_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the cert_mgmt_policy_tags dictionary if no tags are needed, for example: cert_mgmt_policy_tags = {}

# Policy Detail Settings
cert_mgmt_policy_enable_imc_certificate = True

cert_mgmt_policy_certificate = """
-----BEGIN CERTIFICATE-----
MIIDCjCCAfKgAwIBAgIQUckb2WsT/I5MnEbqjS2d9DANBgkqhkiG9w0BAQsFADAd
MRswGQYDVQQDDBJTYW1wbGUgQ2VydGlmaWNhdGUwHhcNMjIwMTI1MjI0ODUxWhcN
MzIwMTI1MjI1ODUyWjAdMRswGQYDVQQDDBJTYW1wbGUgQ2VydGlmaWNhdGUwggEi
MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPcG0VRMfORnb0kdR4mehBbLZ8
AiguJ3aSVcr43OlLf7GxEp/MLeP+9zb/HmXdECC58yJi6y3E1n3u4Sr9R2D7Ydej
b0wuUWTsrUWbr4rvvgIIMRfGznbNn179jvHWDd6RjCCT/+nuEwOpwUjzPZi61N36
4bzABPbl2V2wsMq/xwsaCANMO53toCMH64YrdY+HQNJJWDeBuhi3iUk2SdIQ8jOE
3SmB5hJO2yRl2mkUgIN3J1nRndp9L1ZzBuBpghf9HUDy8OPeq3BdQIFaYSiNWqwv
SiaizJwTuEzFTXyj/9w7NLF3PZpLTKMj0OuRncuggF7oYGPDjwZFRhowDPXFAgMB
AAGjRjBEMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcDAjAdBgNV
HQ4EFgQUcPQ6iXWN84RXcNW8H4qHKTXuxpkwDQYJKoZIhvcNAQELBQADggEBAM34
45rCMJm854lnFYVaxKBsAFXEk0fMDUTNT40vJMlk8XQUTBe4vPTtX2y33uqU7FyW
lirhNASU9P3Vq+0dVKgcy22Nk3Mwp4Q8aenrhJ+tO8ToaYrLGRXKAaOOxYUOjOb5
JE3dsXLMXp4D8K02k4I63tDox6XYpR6LKXXMbGq2/6pdXcu9XDSXiMfvlKPoTfy9
+QjKy6eZzZYYtz3OLS6C2XaaIaa9Pp7VkSESH4YD/cOBQEqrwmWNqgvtJP3GJT5q
DjTXdwQ6707d/IasjC3Gd1rnNFiyDQTmlJQqjiHziLMCMesl6Qe75EmPJAQBeT2G
SQZ/GGDkTpEBh+Ru3TM=
-----END CERTIFICATE-----
"""

cert_mgmt_policy_private_key = """
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDPcG0VRMfORnb0
kdR4mehBbLZ8AiguJ3aSVcr43OlLf7GxEp/MLeP+9zb/HmXdECC58yJi6y3E1n3u
4Sr9R2D7Ydejb0wuUWTsrUWbr4rvvgIIMRfGznbNn179jvHWDd6RjCCT/+nuEwOp
wUjzPZi61N364bzABPbl2V2wsMq/xwsaCANMO53toCMH64YrdY+HQNJJWDeBuhi3
iUk2SdIQ8jOE3SmB5hJO2yRl2mkUgIN3J1nRndp9L1ZzBuBpghf9HUDy8OPeq3Bd
QIFaYSiNWqwvSiaizJwTuEzFTXyj/9w7NLF3PZpLTKMj0OuRncuggF7oYGPDjwZF
RhowDPXFAgMBAAECggEANykLKLOwee6M5T3+BM/QTc1tvQ4JxzQhOIptvb1on/Xl
t1NfgLjXPs5YJoDbz2vhd/DqPOmSsxviQupHNzCK3m3HHKOU22AzeSgeMWb9iAC7
o5gCXZA7UTRG2x/uuN/ZRlS/uPs9JlySBcrq7ht8CHpgSL1MJrdrO/WQD1MDpvj5
JuGaUBwRUhFc928TbEgUceZsOzjd7kCNP1h32zk+D6v/97001y0vEMm5bOslhWgZ
orn67zbMOkVmBOCdEjsuhJhr9UCPJZHiFOEQREryza8650nstK/anr81CiY0TOg/
WIigPfXbpBl+n22AiROKMfYw5w4Cif97joiP+jtL5QKBgQDgnX02ms3iBMUsRUAx
DxnzuBIdW5ZVpfTCArLu5lnqwgkgxZp1soHn9wSCm7yOvCS5D6WMMsitL/eeKbgI
3VY8/uB7+3ecoBzyPh7Y4e/PBnPsXB8U9bJAAin0RIH6OlriyfIKCkW6h3G72CXC
GPTZtlL83xWziiPZVNXoLlEkXwKBgQDsbIxtY7p7bxEB4jUvIdvxc5BVZCQy/R/Z
pzlYPtnz5hFueW/owutSudZk0TQSe0vsy7oR/7OW5+wE0QDl/W0kDIvScSvqatTV
MRwWp1+pZqvdH53ijo322MC/7dlL7SeT/17RV4UFHzlVfDs9loI0MB/qE0v8r1Gu
Nat2HKf4WwKBgB6Ka28UR3A289RcKilBg2bXHWduf5dvtEL4+PlwysMX1QPmumTM
e8tdk/hqUo4Z2Ohszzar5QtfXUzdIU/bQJGUmlNhUtcyEh2CAtG8js3Yc8SslfFU
owL/CFNVSVMLwjXZ/ZYN5YNCTV2cOy4UFJ7RoqENeDbsTomLdnZWbeQDAoGBAM7c
UypLPhlOHrVlNV+d4pGqqbjtO/cZHssT08rwg0cyIEJnIpGoKrphO8NOgJ9DHjV8
M7wX3QzGs+2q6XxSdzI5gAWLW/9ppfs7UvZHUB4qZWm+hih6zqATGuNTuvMB98U4
hb/pMcw/e6zeW/8RN69uBB6M78mRpIgnEXTwsc9NAoGAV//5aYtDq1PuxKZAa7nb
b3jP7x+tds+/idQnOLsxRkAI9J8KbUbm4Js0KWYmxSsyKZ2ikUbUEZwNKpaPv0m5
l9rshOr/277oktj4ZGR+ukQlv5RwxTqF7fYPrskScw795bnkoMZ3yqqmLRn+ZYxU
ev9o1mdOxbKniclNUrH8HBA=
-----END PRIVATE KEY-----
"""


#----------------------------------Section 08----------------------------------#

# ETHERNET ADAPTER POLICY CONFIGURATION

# General Settings
ethernet_adapter_policy_name = "Eth-Adapter-Policy-1"
ethernet_adapter_policy_description = "A Cisco Intersight Ethernet Adapter Policy generated by the UCS Server Deployment Tool."
ethernet_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_adapter_policy_tags dictionary if no tags are needed, for example: ethernet_adapter_policy_tags = {}

## Ethernet Adapter Default Configuration
## NOTE - Setting a default configuration will override all settings under Policy Details. Leave an empty string ("") if a default configuration is not desired.
## NOTE - Default configurations can be set by providing the name of one of the pre-defined built-in default configuration options from Intersight.
## NOTE - Available pre-defined built-in default configuration options from Intersight include:
## "MQ-SMBd"
## "SMBServer"
## "SMBClient"
## "Solaris"
## "usNICOracleRAC"
## "WIN-AzureStack"
## "Win-HPN-SMBd"
## "Win-HPN"
## "Linux-NVMe-RoCE"
## "MQ"
## "usNIC"
## "SRIOV"
## "VMWarePassThru"
## "VMWare"
## "Windows"
## "Linux"
ethernet_adapter_policy_ethernet_adapter_default_configuration = ""

# Policy Detail Settings
ethernet_adapter_policy_enable_virtual_extensible_lan = False
ethernet_adapter_policy_enable_network_virtualization_using_gre = False
ethernet_adapter_policy_enable_accelerated_receive_flow_steering = False
ethernet_adapter_policy_enable_precision_time_protocol = False
ethernet_adapter_policy_enable_advanced_filter = False
ethernet_adapter_policy_enable_interrupt_scaling = False
ethernet_adapter_policy_enable_geneve_offload = False

## RoCE Settings
ethernet_adapter_policy_enable_rdma_over_converged_ethernet = False

## Interrupt Settings
ethernet_adapter_policy_interrupts = 8        # Options: 1 - 1024
ethernet_adapter_policy_interrupt_mode = "MSIx"     # Options: "MSIx", "MSI", or "INTx"
ethernet_adapter_policy_interrupt_timer = 125        # Options: 0 - 65535
ethernet_adapter_policy_interrupt_coalescing_type = "Min"       # Options: "Min" or "Idle"

## Receive Settings
ethernet_adapter_policy_receive_queue_count = 4        # Options: 1 - 1000
ethernet_adapter_policy_receive_ring_size = 512        # Options: 64 - 16384

## Transmit Settings
ethernet_adapter_policy_transmit_queue_count = 1        # Options: 1 - 1000
ethernet_adapter_policy_transmit_ring_size = 256        # Options: 64 - 16384

## Completion Settings
ethernet_adapter_policy_completion_queue_count = 5        # Options: 1 - 2000
ethernet_adapter_policy_completion_ring_size = 5        # Options: 1 - 256
ethernet_adapter_policy_uplink_failback_timeout = 5        # Options: 0 - 600

## TCP Offload Settings
ethernet_adapter_policy_enable_tx_checksum_offload = True
ethernet_adapter_policy_enable_rx_checksum_offload = True
ethernet_adapter_policy_enable_large_send_offload = True
ethernet_adapter_policy_enable_large_receive_offload = True

## Receive Side Scaling Settings
ethernet_adapter_policy_enable_receive_side_scaling = True
ethernet_adapter_policy_enable_ipv4_hash = True
ethernet_adapter_policy_enable_ipv6_extensions_hash = False
ethernet_adapter_policy_enable_ipv6_hash = True
ethernet_adapter_policy_enable_tcp_and_ipv4_hash = True
ethernet_adapter_policy_enable_tcp_and_ipv6_extensions_hash = False
ethernet_adapter_policy_enable_tcp_and_ipv6_hash = True
ethernet_adapter_policy_enable_udp_and_ipv4_hash = False
ethernet_adapter_policy_enable_udp_and_ipv6_hash = False

## Additional RoCE Settings (Not available in the GUI, change only if needed.)
ethernet_adapter_policy_roce_class_of_service = 5        # Options: 1 - 6
ethernet_adapter_policy_roce_memory_regions = 0
ethernet_adapter_policy_roce_queue_pairs = 0
ethernet_adapter_policy_roce_resource_groups = 0
ethernet_adapter_policy_roce_version = 1        # Options: 1 - 2


#----------------------------------Section 09----------------------------------#

# ETHERNET NETWORK CONTROL POLICY CONFIGURATION

# General Settings
ethernet_network_control_policy_name = "Eth-Net-Control-Policy-1"
ethernet_network_control_policy_description = "A Cisco Intersight Ethernet Network Control Policy generated by the UCS Server Deployment Tool."
ethernet_network_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_network_control_policy_tags dictionary if no tags are needed, for example: ethernet_network_control_policy_tags = {}

# Policy Detail Settings
ethernet_network_control_policy_enable_cdp = False
ethernet_network_control_policy_mac_register_mode = "Only Native VLAN"        # Options: "Only Native VLAN", "All Host VLANs"
ethernet_network_control_policy_action_on_uplink_fail = "Link Down"      # Options: "Link Down", "Warning"
ethernet_network_control_policy_mac_forging = "Allow"        # Options: "Allow", "Deny"
ethernet_network_control_policy_lldp_enable_transmit = False
ethernet_network_control_policy_lldp_enable_receive = False


#----------------------------------Section 10----------------------------------#

# ETHERNET NETWORK GROUP POLICY CONFIGURATION

# General Settings
ethernet_network_group_policy_name = "Eth-Net-Group-Policy-1"
ethernet_network_group_policy_description = "A Cisco Intersight Ethernet Network Group Policy generated by the UCS Server Deployment Tool."
ethernet_network_group_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_network_group_policy_tags dictionary if no tags are needed, for example: ethernet_network_group_policy_tags = {}

# Policy Detail Settings
## NOTE - For the "Allowed VLANs" setting, the provided value must be a string. Ranges of VLANs can be split with a hyphen or commas with no spaces. Allowed VLANs can be between 1-4093.
ethernet_network_group_policy_allowed_vlans = "5-7,10"

## NOTE - For the "Native VLAN" setting, the provided value must be an integer. Native VLANs can be between 1-4093.
ethernet_network_group_policy_native_vlan = 1


#----------------------------------Section 11----------------------------------#

# ETHERNET QOS POLICY CONFIGURATION

# General Settings
ethernet_qos_policy_name = "Ethernet-QoS-Policy-1"
ethernet_qos_policy_description = "A Cisco Intersight Ethernet QoS Policy generated by the UCS Server Deployment Tool."
ethernet_qos_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_qos_policy_tags dictionary if no tags are needed, for example: ethernet_qos_policy_tags = {}

# Policy Detail Settings
ethernet_qos_policy_ethernet_qos_mtu_in_bytes = 1500        # Options: 1500 - 9000
ethernet_qos_policy_ethernet_qos_rate_limit_in_mbps = 0        # Options: 0 - 100000
ethernet_qos_policy_ethernet_qos_cos = 3        # Options: 0 - 6
ethernet_qos_policy_ethernet_qos_burst = 1024        # Options: 1024 - 1000000
ethernet_qos_policy_ethernet_qos_priority = "Best Effort"        # Options: "Best Effort", "FC", "Platinum", "Gold", "Silver", "Bronze"
ethernet_qos_policy_ethernet_qos_enable_trust_host_cos = False        # Options: True, False


#----------------------------------Section 12----------------------------------#

# FC ZONE POLICY CONFIGURATION

# General Settings
fc_zone_policy_name = "FC-Zone-Policy-1"
fc_zone_policy_description = "A Cisco Intersight FC Zone Policy generated by the UCS Server Deployment Tool."
fc_zone_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the fc_zone_policy_tags dictionary if no tags are needed, for example: fc_zone_policy_tags = {}

# Policy Detail Settings
fc_zone_policy_fc_target_zoning_type = "Single Initiator Single Target"        # Options: "Single Initiator Single Target", "Single Initiator Multiple Target", "None"
fc_zone_policy_fc_zone_target_list = [
    {"Name": "sample-target-1-a",
     "WWPN": "20:00:00:25:B5:AA:00:01",
     "Switch ID": "A",
     "VSAN ID": 1
     },
    {"Name": "sample-target-1-b",
     "WWPN": "20:00:00:25:B5:BB:00:01",
     "Switch ID": "B",
     "VSAN ID": 1
     },
    ]


#----------------------------------Section 13----------------------------------#

# FIBRE CHANNEL ADAPTER POLICY CONFIGURATION

# General Settings
fibre_channel_adapter_policy_name = "FC-Adapter-Policy-1"
fibre_channel_adapter_policy_description = "A Cisco Intersight Fibre Channel Adapter Policy generated by the UCS Server Deployment Tool."
fibre_channel_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the fibre_channel_adapter_policy_tags dictionary if no tags are needed, for example: fibre_channel_adapter_policy_tags = {}

## Fibre Channel Adapter Default Configuration
## NOTE - Setting a default configuration will override all settings under Policy Details. Leave an empty string ("") if a default configuration is not desired.
## NOTE - Default configurations can be set by providing the name of one of the pre-defined built-in default configuration options from Intersight.
## NOTE - Available pre-defined built-in default configuration options from Intersight include:
## "WindowsBoot"
## "Solaris"
## "FCNVMeTarget"
## "FCNVMeInitiator"
## "Target"
## "Initiator"
## "VMWare"
## "Windows"
## "Linux"
fibre_channel_adapter_policy_fibre_channel_adapter_default_configuration = ""

# Policy Detail Settings
## Error Recovery
fibre_channel_adapter_policy_fcp_error_recovery = False
fibre_channel_adapter_policy_port_down_timeout_in_ms = 10000     # Options: 0 - 240000
fibre_channel_adapter_policy_link_down_timeout_in_ms = 30000     # Options: 0 - 240000
fibre_channel_adapter_policy_io_retry_timeout_in_seconds = 5     # Options: 1 - 59
fibre_channel_adapter_policy_port_down_io_retry_in_ms = 8        # Options: 0 - 255

## Error Detection
fibre_channel_adapter_policy_error_detection_timeout = 2000  # Options: 1000 - 100000

## Resource Allocation
fibre_channel_adapter_policy_resource_allocation_timeout = 10000     # Options: 5000 - 100000

## Flogi
fibre_channel_adapter_policy_flogi_retries = 8       # Options: > 0
fibre_channel_adapter_policy_flogi_timeout_in_ms = 4000      # Options: 1000 - 255000

## Plogi
fibre_channel_adapter_policy_plogi_retries = 8       # Options: 0 - 255
fibre_channel_adapter_policy_plogi_timeout_in_ms = 20000     # Options: 1000 - 255000

## Interrupt
fibre_channel_adapter_policy_interrupt_mode = "MSIx"     # Options: "MSIx", "MSI", or "INTx"

## I/O Throttle
fibre_channel_adapter_policy_io_throttle_count = 512     # Options: 1 - 1024

## LUN
fibre_channel_adapter_policy_maximum_luns_per_target = 1024     # Options: 1 - 1024
fibre_channel_adapter_policy_lun_queue_depth = 20     # Options: 1 - 254

## Receive Settings
fibre_channel_adapter_policy_receive_ring_size = 64        # Options: > 64

## Transmit Settings
fibre_channel_adapter_policy_transmit_ring_size = 64        # Options: > 64

## SCSI I/O
fibre_channel_adapter_policy_scsi_io_queues = 1     # Options: 1 - 245
fibre_channel_adapter_policy_scsi_io_ring_size = 512     # Options: 64 - 512


#----------------------------------Section 14----------------------------------#

# FIBRE CHANNEL NETWORK POLICY CONFIGURATION

# General Settings
fibre_channel_network_policy_name = "FC-Network-Policy-1"
fibre_channel_network_policy_description = "A Cisco Intersight Fibre Channel Network Policy generated by the UCS Server Deployment Tool."
fibre_channel_network_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the fibre_channel_network_policy_tags dictionary if no tags are needed, for example: fibre_channel_network_policy_tags = {}

# Policy Detail Settings
## For the "Default VLAN" setting, the provided value must be an integer. Default VLANs can be between 1-4094. Leave the default of 0 if there is no default VLAN.
fibre_channel_network_policy_default_vlan = 0
## For the "VSAN ID" setting, the provided value must be an integer. VSAN IDs can be between 1-4094.
fibre_channel_network_policy_vsan_id = 1


#----------------------------------Section 15----------------------------------#

# FIBRE CHANNEL QOS POLICY CONFIGURATION

# General Settings
fibre_channel_qos_policy_name = "FC-QoS-Policy-1"
fibre_channel_qos_policy_description = "A Cisco Intersight Fibre Channel QoS Policy generated by the UCS Server Deployment Tool."
fibre_channel_qos_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the fibre_channel_qos_policy_tags dictionary if no tags are needed, for example: fibre_channel_qos_policy_tags = {}

# Policy Detail Settings
fibre_channel_qos_policy_fibre_channel_qos_rate_limit_in_mbps = 0        # Options: 0 - 100000
fibre_channel_qos_policy_fibre_channel_qos_maximum_data_field_size_in_bytes = 2112        # Options: 256 - 2112
fibre_channel_qos_policy_fibre_channel_qos_cos = 3        # Options: 0 - 6
fibre_channel_qos_policy_fibre_channel_qos_burst = 10240        # Options: 1 - 1000000


#----------------------------------Section 16----------------------------------#

# IMC ACCESS POLICY CONFIGURATION

# General Settings
imc_access_policy_name = "IMC-Access-Policy-1"
imc_access_policy_description = "A Cisco Intersight IMC Access Policy generated by the UCS Server Deployment Tool."
imc_access_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the imc_access_policy_tags dictionary if no tags are needed, for example: imc_access_policy_tags = {}

# Policy Detail Settings
## NOTE - A pre-existing IP Pool must be provided when configuring in-band of out-of-band IMC Access.
## A default IP Pool can be provided using the default_in_band_ip_pool_name or default_out_of_band_ip_pool_name variables below.
imc_access_policy_enable_in_band_configuration = True
imc_access_policy_in_band_vlan_id = 5        # Options: 4 - 4093
imc_access_policy_enable_in_band_ipv4_configuration = True
imc_access_policy_enable_in_band_ipv6_configuration = False
imc_access_policy_default_in_band_ip_pool_name = "In-Band-IP-Pool-1"
imc_access_policy_enable_out_of_band_configuration = False
imc_access_policy_default_out_of_band_ip_pool_name = ""


#----------------------------------Section 17----------------------------------#

# IP POOL - IN-BAND CONFIGURATION

# General Settings
in_band_ip_pool_name = "In-Band-IP-Pool-1"
in_band_ip_pool_description = "A Cisco Intersight In-Band IP Pool generated by the UCS Server Deployment Tool."
in_band_ip_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ip_pool_tags dictionary if no tags are needed, for example: ip_pool_tags = {}

# Pool Detail Settings
in_band_ip_pool_configure_ipv4_pool = True
in_band_ip_pool_ipv4_netmask = "255.255.255.0"
in_band_ip_pool_ipv4_gateway = "198.18.0.1"
in_band_ip_pool_ipv4_primary_dns = "198.18.133.1"
in_band_ip_pool_ipv4_secondary_dns = ""
in_band_ip_pool_configure_ipv6_pool = False
in_band_ip_pool_ipv6_prefix = 0
in_band_ip_pool_ipv6_gateway = ""
in_band_ip_pool_ipv6_primary_dns = ""
in_band_ip_pool_ipv6_secondary_dns = ""

## NOTE! - For the IP blocks lists, place each IP block dictionary in the list to match the desired order (first to last).
in_band_ip_pool_ipv4_blocks_list = [
    {"From": "198.18.0.100", "Size": 100},
    ]
in_band_ip_pool_ipv6_blocks_list = []

# Pool Default Settings (Change only if needed)
in_band_ip_pool_ip_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 18----------------------------------#

# IP POOL - iSCSI BOOT CONFIGURATION

# General Settings
iscsi_boot_ip_pool_name = "iSCSI-Boot-IP-Pool-1"
iscsi_boot_ip_pool_description = "A Cisco Intersight iSCSI Boot IP Pool generated by the UCS Server Deployment Tool."
iscsi_boot_ip_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ip_pool_tags dictionary if no tags are needed, for example: ip_pool_tags = {}

# Pool Detail Settings
iscsi_boot_ip_pool_configure_ipv4_pool = True
iscsi_boot_ip_pool_ipv4_netmask = "255.255.255.0"
iscsi_boot_ip_pool_ipv4_gateway = "192.168.2.1"
iscsi_boot_ip_pool_ipv4_primary_dns = "192.168.133.1"
iscsi_boot_ip_pool_ipv4_secondary_dns = ""
iscsi_boot_ip_pool_configure_ipv6_pool = False
iscsi_boot_ip_pool_ipv6_prefix = 0
iscsi_boot_ip_pool_ipv6_gateway = ""
iscsi_boot_ip_pool_ipv6_primary_dns = ""
iscsi_boot_ip_pool_ipv6_secondary_dns = ""

## NOTE! - For the IP blocks lists, place each IP block dictionary in the list to match the desired order (first to last).
iscsi_boot_ip_pool_ipv4_blocks_list = [
    {"From": "192.168.2.20", "Size": 100},
    ]
iscsi_boot_ip_pool_ipv6_blocks_list = []

# Pool Default Settings (Change only if needed)
iscsi_boot_ip_pool_ip_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 19----------------------------------#

# IP POOL - OUT-OF-BAND CONFIGURATION

# General Settings
out_of_band_ip_pool_name = "Out-Of-Band-IP-Pool-1"
out_of_band_ip_pool_description = "A Cisco Intersight Out-Of-Band IP Pool generated by the UCS Server Deployment Tool."
out_of_band_ip_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ip_pool_tags dictionary if no tags are needed, for example: ip_pool_tags = {}

# Pool Detail Settings
out_of_band_ip_pool_configure_ipv4_pool = True
out_of_band_ip_pool_ipv4_netmask = "255.255.255.0"
out_of_band_ip_pool_ipv4_gateway = "192.168.1.1"
out_of_band_ip_pool_ipv4_primary_dns = "192.168.133.1"
out_of_band_ip_pool_ipv4_secondary_dns = ""
out_of_band_ip_pool_configure_ipv6_pool = False
out_of_band_ip_pool_ipv6_prefix = 0
out_of_band_ip_pool_ipv6_gateway = ""
out_of_band_ip_pool_ipv6_primary_dns = ""
out_of_band_ip_pool_ipv6_secondary_dns = ""

## NOTE! - For the IP blocks lists, place each IP block dictionary in the list to match the desired order (first to last).
out_of_band_ip_pool_ipv4_blocks_list = [
    {"From": "192.168.1.20", "Size": 100},
    ]
out_of_band_ip_pool_ipv6_blocks_list = []

# Pool Default Settings (Change only if needed)
out_of_band_ip_pool_ip_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 20----------------------------------#

# IPMI OVER LAN POLICY CONFIGURATION

# General Settings
ipmi_over_lan_policy_name = "IPMI-Over-LAN-Policy-1"
ipmi_over_lan_policy_description = "A Cisco Intersight IPMI Over LAN Policy generated by the UCS Server Deployment Tool."
ipmi_over_lan_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ipmi_over_lan_policy_tags dictionary if no tags are needed, for example: ipmi_over_lan_policy_tags = {}

# Policy Detail Settings
ipmi_over_lan_policy_enable_ipmi_over_lan = True
ipmi_over_lan_policy_privilege_level = "admin"        # Options: "admin", "user", and "read-only"
ipmi_over_lan_policy_encryption_key = ""


#----------------------------------Section 21----------------------------------#

# IQN POOL CONFIGURATION

# General Settings
iqn_pool_name = "IQN-Pool-1"
iqn_pool_description = "A Cisco Intersight IQN Pool generated by the UCS Server Deployment Tool."
iqn_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the iqn_pool_tags dictionary if no tags are needed, for example: iqn_pool_tags = {}

# Pool Detail Settings
iqn_pool_iqn_prefix = "iqn.1987-05.com.cisco"

## NOTE! - For the IQN blocks lists, place each IQN block dictionary in the list to match the desired order (first to last).
iqn_pool_iqn_blocks_list = [
    {"Suffix": "ucs.server.host", "From": 1, "Size": 256},
    ]

# Pool Default Settings (Change only if needed)
iqn_pool_iqn_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 22----------------------------------#

# iSCSI ADAPTER POLICY CONFIGURATION

# General Settings
iscsi_adapter_policy_name = "iSCSI-Adapter-Policy-1"
iscsi_adapter_policy_description = "A Cisco Intersight iSCSI Adapter Policy generated by the UCS Server Deployment Tool."
iscsi_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the iscsi_adapter_policy_tags dictionary if no tags are needed, for example: iscsi_adapter_policy_tags = {}

# Policy Detail Settings
iscsi_adapter_policy_tcp_connection_timeout = 15        # Options: 0 - 255
iscsi_adapter_policy_dhcp_timeout = 60      # Options: 60 - 300
iscsi_adapter_policy_lun_busy_retry_count = 15      # Options: 0 - 60


#----------------------------------Section 23----------------------------------#

# iSCSI BOOT POLICY CONFIGURATION

# General Settings
iscsi_boot_policy_name = "iSCSI-Boot-Policy-1"
iscsi_boot_policy_description = "A Cisco Intersight iSCSI Boot Policy generated by the UCS Server Deployment Tool."
iscsi_boot_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the iscsi_boot_policy_tags dictionary if no tags are needed, for example: iscsi_boot_policy_tags = {}

# Policy Detail Settings
iscsi_boot_policy_iscsi_adapter_policy_name = "iSCSI-Adapter-Policy-1"
iscsi_boot_policy_configuration_type_for_target_source = "Static"     # Options: "Auto" or "Static"
iscsi_boot_policy_auto_target_dhcp_vendor_id_or_iqn = ""
iscsi_boot_policy_primary_static_target_policy_name = "Primary-iSCSI-Static-Target-Policy-1"
iscsi_boot_policy_secondary_static_target_policy_name = "Secondary-iSCSI-Static-Target-Policy-1"
iscsi_boot_policy_static_chap_username = ""
iscsi_boot_policy_static_chap_password = ""
iscsi_boot_policy_static_mutual_chap_username = ""
iscsi_boot_policy_static_mutual_chap_password = ""
iscsi_boot_policy_static_initiator_ip_source = "Pool"        # Options: "Pool", "DHCP", or "Static"
iscsi_boot_policy_static_initiator_ip_source_pool_ip_pool_name = "iSCSI-Boot-IP-Pool-1"
iscsi_boot_policy_static_initiator_ip_source_static_ip_address = ""
iscsi_boot_policy_static_initiator_ip_source_static_subnet_mask = ""
iscsi_boot_policy_static_initiator_ip_source_static_default_gateway = ""
iscsi_boot_policy_static_initiator_ip_source_static_primary_dns = ""
iscsi_boot_policy_static_initiator_ip_source_static_secondary_dns = ""


#----------------------------------Section 24----------------------------------#

# iSCSI STATIC TARGET POLICY - PRIMARY CONFIGURATION

# General Settings
primary_iscsi_static_target_policy_name = "Primary-iSCSI-Static-Target-Policy-1"
primary_iscsi_static_target_policy_description = "A Cisco Intersight Primary iSCSI Static Target Policy generated by the iSCSI Static Target Policy Maker."
primary_iscsi_static_target_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the iscsi_static_target_policy_tags dictionary if no tags are needed, for example: iscsi_static_target_policy_tags = {}

# Policy Detail Settings
primary_iscsi_static_target_policy_target_name = "iqn.1987-05.com.cisco:netapp:sn.343777525a"
primary_iscsi_static_target_policy_ip_address = "192.168.7.100"
primary_iscsi_static_target_policy_port = 3260      # Options: 1 - 65535
primary_iscsi_static_target_policy_lun_id = 0
primary_iscsi_static_target_policy_lun_is_bootable = False


#----------------------------------Section 25----------------------------------#

# iSCSI STATIC TARGET POLICY - SECONDARY CONFIGURATION

# General Settings
secondary_iscsi_static_target_policy_name = "Secondary-iSCSI-Static-Target-Policy-1"
secondary_iscsi_static_target_policy_description = "A Cisco Intersight Secondary iSCSI Static Target Policy generated by the iSCSI Static Target Policy Maker."
secondary_iscsi_static_target_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the iscsi_static_target_policy_tags dictionary if no tags are needed, for example: iscsi_static_target_policy_tags = {}

# Policy Detail Settings
secondary_iscsi_static_target_policy_target_name = "iqn.1987-05.com.cisco:netapp:sn.343777525b"
secondary_iscsi_static_target_policy_ip_address = "192.168.8.100"
secondary_iscsi_static_target_policy_port = 3260      # Options: 1 - 65535
secondary_iscsi_static_target_policy_lun_id = 0
secondary_iscsi_static_target_policy_lun_is_bootable = False


#----------------------------------Section 26----------------------------------#

# LAN CONNECTIVITY POLICY CONFIGURATION

# General Settings
lan_connectivity_policy_name = "LAN-Connect-Policy-1"
lan_connectivity_policy_description = "A Cisco Intersight LAN Connectivity Policy generated by the UCS Server Deployment Tool."
lan_connectivity_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the lan_connectivity_policy_tags dictionary if no tags are needed, for example: lan_connectivity_policy_tags = {}

# Policy Detail Settings
## IQN
lan_connectivity_policy_enable_azure_stack_host_qos = False
lan_connectivity_policy_iqn_assignment_type = "None"        # Options: "None", "Static", "Pool"
lan_connectivity_policy_iqn_pool_name = "IQN-Pool-1"     # If the iqn_assignment_type variable is set to "Pool", provide a string value e.g. "IQN-Pool-1" for the iqn_pool_name variable
lan_connectivity_policy_iqn_static_identifier = ""      # If the iqn_assignment_type variable is set to "Static", provide a string value e.g. "iqn.1987-05.com.cisco.ucs.windows.host.1" for the iqn_static_identifier variable

## vNIC Configuration
## NOTE - Here are example configurations for the vnic_placement_mode and vnic_list variables:
##
## -- Create two vNICs named vnic0 and vnic1 in auto placement mode with the minimum required dictionary keys for default settings.
##    Policies and Pools provided in the separate default variables are automatically applied:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic0",
##         "Switch ID": "A"
##         },
##        {"Name": "vnic1",
##         "Switch ID": "B"
##         }
##        ]
##
##
## -- Bulk create eight vNICs named vnic0-7 using the "Vnics" key in auto placement mode with the minimum required dictionary keys for default settings.
##    When using the "Vnics" key, the "Name" key becomes a prefix for the vNIC name value.
##    Policies and Pools provided in the separate default variables are automatically applied:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic",
##         "Vnics": "0,2,4,6",
##         "Switch ID": "A"
##         },
##        {"Name": "vnic",
##         "Vnics": "1,3,5,7",
##         "Switch ID": "B"
##         }
##        ]
##
##
## -- Bulk create twenty vNICs named vnic0-19 using the "Vnics" key in auto placement mode with the minimum required dictionary keys for default settings.
##    When using the "Vnics" key, the "Name" key becomes a prefix for the vNIC name value.
##    Policies and Pools provided in the separate default variables are automatically applied:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic",
##         "Vnics": "0-9",
##         "Switch ID": "A"
##         },
##        {"Name": "vnic",
##         "Vnics": "10-19",
##         "Switch ID": "B"
##         }
##        ]
##
##
## -- Create two vNICs named vnic0 and vnic1 in auto placement mode with failover enabled, and a usNIC connection type, and Policies/Pools directly specified that override any provided default Policies/Pools:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic0",
##         "MAC Address Type": "Pool",
##         "MAC Address Pool": "MAC-Pool-2",
##         "Switch ID": "A",
##         "Failover": True,
##         "Ethernet Network Group Policy": "Sample-Eth-Net-Group-Policy",
##         "Ethernet Network Control Policy": "Sample-Eth-Net-Control-Policy",
##         "Ethernet QoS": "Sample-Ethernet-QoS-Policy",
##         "Ethernet Adapter": "Sample-Eth-Adapter-Policy",
##         "Connection Type": "usNIC",
##         "Number of usNICs": 1,
##         "usNIC Adapter Policy": "Sample-Eth-Adapter-Policy",
##         "Class of Service": 5
##         },
##        {"Name": "vnic1",
##         "MAC Address Type": "Pool",
##         "MAC Address Pool": "MAC-Pool-2",
##         "Switch ID": "B",
##         "Failover": True,
##         "Ethernet Network Group Policy": "Sample-Eth-Net-Group-Policy",
##         "Ethernet Network Control Policy": "Sample-Eth-Net-Control-Policy",
##         "Ethernet QoS": "Sample-Ethernet-QoS-Policy",
##         "Ethernet Adapter": "Sample-Eth-Adapter-Policy",
##         "Connection Type": "usNIC",
##         "Number of usNICs": 1,
##         "usNIC Adapter Policy": "Sample-Eth-Adapter-Policy",
##         "Class of Service": 5
##         }
##        ]
##
##
## -- Create two vNICs named vnic0 and vnic1 in manual placement mode with corresponding manual placement settings, a pin group, static MAC addresses, CDN user defined names, a VMQ connection type and VMMQ enabled.
##    Policies provided in the separate default variables are automatically applied:
##
##    vnic_placement_mode = "Manual"
##    vnic_list = [
##        {"Name": "vnic0",
##         "Pin Group Name": "Pin-Group-0",
##         "MAC Address Type": "Static",
##         "Static MAC Address": "00:25:B5:DD:00:01",
##         "Slot ID": "1",
##         "PCI Link": 0,
##         "Switch ID": "A",
##         "PCI Order": 0,
##         "Source": "User Defined",
##         "Value": "vnic-user-named-0",
##         "Failover": True,
##         "Connection Type": "VMQ",
##         "Enable Virtual Machine Multi-Queue": True,
##         "Number of Sub vNICs": 32,
##         "VMMQ Adapter Policy": "Sample-Eth-Adapter-Policy"
##         },
##        {"Name": "vnic1",
##         "Pin Group Name": "Pin-Group-1",
##         "MAC Address Type": "Static",
##         "Static MAC Address": "00:25:B5:DD:00:02",
##         "Slot ID": "2",
##         "PCI Link": 0,
##         "Switch ID": "B",
##         "PCI Order": 0,
##         "Source": "User Defined",
##         "Value": "vnic-user-named-1",
##         "Failover": True,
##         "Connection Type": "VMQ",
##         "Enable Virtual Machine Multi-Queue": True,
##         "Number of Sub vNICs": 32,
##         "VMMQ Adapter Policy": "Sample-Eth-Adapter-Policy"
##         }
##        ]
##
##
## -- Create two vNICs named vnic0 and vnic1 in auto placement mode with a VMQ connection type and no VMMQ.
##    Policies and Pools provided in the separate default variables are automatically applied where applicable:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic0",
##         "Switch ID": "A",
##         "Connection Type": "VMQ",
##         "Number of Interrupts": 25,
##         "Number of Virtual Machine Queues": 7
##         },
##        {"Name": "vnic1",
##         "Switch ID": "B",
##         "Connection Type": "VMQ",
##         "Number of Interrupts": 25,
##         "Number of Virtual Machine Queues": 7
##         }
##        ]
##
##
## NOTE - The full list of configurable keys for each vNIC dictionary entry aligns with the Intersight GUI naming and includes:
## "Name", "Pin Group Name", "MAC Address Type", "MAC Address Pool", "Static MAC Address", 
## "Slot ID", "PCI Link", "Switch ID", "Uplink", "PCI Order", "Source", "Value", "Failover", 
## "Ethernet Network Group Policy", "Ethernet Network Control Policy", "Ethernet QoS",
## "Ethernet Adapter", "Ethernet Network", "iSCSI Boot", "Connection Type", "Number of usNICs",
## "usNIC Adapter Policy", "Class of Service", "Enable Virtual Machine Multi-Queue",
## "Number of Sub vNICs", "VMMQ Adapter Policy", "Number of Interrupts", and "Number of Virtual Machine Queues".
##
## NOTE - Pre-existing Ethernet Network Group, Ethernet Network Control, Ethernet QoS, and Ethernet Adapter Policies must be provided when configuring vNICs.
## Default Policies and Pools to be used by all configured vNICs can be provided using the default variables listed below.
## To override the default Policy or Pool for a particular vNIC, a corresponding Policy or Pool key and value can be provided for each set of vNIC dictionaries in the vnic_list variable.
## Please see the included example above.
##
## NOTE - A custom "Vnics" key can be used for quick bulk creation of multiple vNICs with similar values.
## When using the "Vnics" key, the "Name" key becomes a prefix for the vNIC name value.
## Please see the included example above.
##
## NOTE - To not configure any vNICs, configure the vnic_list variable with an empty list, for example: vnic_list = []

lan_connectivity_policy_vnic_placement_mode = "Auto"        # Options: "Auto", "Manual"

lan_connectivity_policy_vnic_list = [
    {"Name": "vnic0",
     "Switch ID": "A"
     },
    {"Name": "vnic1",
     "Switch ID": "B"
     }
    ]

# Policy Default Settings (Change only if needed)
lan_connectivity_policy_ucs_server_type = "FI-Attached"     # Options: "FI-Attached", "Standalone"


#----------------------------------Section 27----------------------------------#

# LOCAL USER POLICY CONFIGURATION

# General Settings
local_user_policy_name = "Local-User-Policy-1"
local_user_policy_description = "A Cisco Intersight Local User Policy generated by the UCS Server Deployment Tool."
local_user_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the local_user_policy_tags dictionary if no tags are needed, for example: local_user_policy_tags = {}

# Policy Detail Settings
local_user_policy_enforce_strong_password = True
local_user_policy_enable_password_expiry = False
local_user_policy_password_expiry_duration = 90       # Options: 1 - 3650
local_user_policy_password_expiry_notification_period = 15        # Options: 0 - 15
local_user_policy_password_expiry_grace_period = 0       # Options: 0 - 5
local_user_policy_password_history = 5       # Options: 0 - 5
local_user_policy_always_send_user_password = False
local_user_policy_local_users_list = [
    {"Enable": True,
     "Username": "adminuser",
     "Password": "C1sco12345",
     "Role": "admin"
     },
    {"Enable": True,
     "Username": "readonlyuser",
     "Password": "C1sco12345",
     "Role": "readonly"
     }
    ]


#----------------------------------Section 28----------------------------------#

# MAC ADDRESS POOL CONFIGURATION

# General Settings
mac_pool_name = "MAC-Pool-1"
mac_pool_description = "A Cisco Intersight MAC Pool generated by the UCS Server Deployment Tool."
mac_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the mac_pool_tags dictionary if no tags are needed, for example: mac_pool_tags = {}

# Pool Detail Settings
## NOTE! - For the MAC blocks lists, place each MAC block dictionary in the list to match the desired order (first to last).
mac_pool_mac_blocks_list = [
    {"From": "00:25:B5:AA:00:00", "Size": 256},
    {"From": "00:25:B5:BB:00:00", "Size": 256},
    ]

# Pool Default Settings (Change only if needed)
mac_pool_mac_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 29----------------------------------#

# POWER POLICY CONFIGURATION

# General Settings
power_policy_name = "Power-Policy-1"
power_policy_description = "A Cisco Intersight Power Policy generated by the UCS Server Deployment Tool."
power_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the power_policy_tags dictionary if no tags are needed, for example: power_policy_tags = {}

# Policy Detail Settings
power_policy_power_profiling = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_power_priority = "Low"      # Options: "Low", "Medium", "High"
power_policy_power_restore = "Always Off"        # Options: "Always Off",  "Always On", "Last State"
power_policy_power_redundancy = "Grid"       # Options: "Grid", "Not Redundant", "N+1", "N+2"
power_policy_power_save_mode = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_dynamic_power_rebalancing = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_extended_power_capacity = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_power_allocation_in_watts = 0       # Options: 0 - 65535


#----------------------------------Section 30----------------------------------#

# RESOURCE POOL CONFIGURATION

# General Settings
resource_pool_name = "Resource-Pool-1"
resource_pool_description = "A Cisco Intersight Resource Pool generated by the UCS Server Deployment Tool."
resource_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the resource_pool_tags dictionary if no tags are needed, for example: resource_pool_tags = {}

# Pool Detail Settings
resource_pool_chassis_resources_list = [
    {"DomainName": "UCS-IMM-Pod",
     "ChassisIds": "1",
     "SlotIds": "1-8",
     "Serials": ""
     },
    ]

resource_pool_blade_server_resources_list = []

resource_pool_rack_server_resources_list = []

# Pool Default Settings (Change only if needed)
resource_pool_ucs_server_type = "FI-Attached"     # Options: "FI-Attached", "Standalone"
resource_pool_resource_assignment_order = "default"       # Options: "default", "sequential"
resource_pool_resource_type = "Server"        # Options: "Server", "None"
resource_pool_pool_type = "Static"        # Options: "Static", "Dynamic"


#----------------------------------Section 31----------------------------------#

# SAN CONNECTIVITY POLICY CONFIGURATION

# General Settings
san_connectivity_policy_name = "SAN-Connect-Policy-1"
san_connectivity_policy_description = "A Cisco Intersight SAN Connectivity Policy generated by the UCS Server Deployment Tool."
san_connectivity_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the san_connectivity_policy_tags dictionary if no tags are needed, for example: san_connectivity_policy_tags = {}

# Policy Detail Settings
## WWNN Address
san_connectivity_policy_wwnn_address_type = "Pool"        # Options: "Pool", "Static"
san_connectivity_policy_wwnn_pool_name = "WWNN-Pool-1"     # If the wwnn_address_type variable is set to "Pool", provide a string value e.g. "WWNN-Pool-1" for the wwnn_pool_name variable
san_connectivity_policy_wwnn_static_address = ""      # If the wwnn_address_type variable is set to "Static", provide a string value e.g. "20:00:00:25:B5:00:00:01" for the wwnn_static_address variable

## vHBA Configuration
## NOTE - Here are example configurations for the vhba_placement_mode and vhba_list variables:
##
## -- Create two vHBAs named vhba0 and vhba1 in auto placement mode with the minimum required dictionary keys for default settings.
##    Policies and Pools provided in the separate default variables are automatically applied:
##
##    vhba_placement_mode = "Auto"
##    vhba_list = [
##        {"Name": "vhba0",
##         "Switch ID": "A"
##         },
##        {"Name": "vhba1",
##         "Switch ID": "B"
##         }
##        ]
##
##
## -- Bulk create eight vHBAs named vhba0-7 using the "Vhbas" key in auto placement mode with the minimum required dictionary keys for default settings.
##    When using the "Vhbas" key, the "Name" key becomes a prefix for the vHBA name value.
##    Policies and Pools provided in the separate default variables are automatically applied:
##
##    vhba_placement_mode = "Auto"
##    vhba_list = [
##        {"Name": "vhba",
##         "Vhbas": "0,2,4,6",
##         "Switch ID": "A"
##         },
##        {"Name": "vhba",
##         "Vhbas": "1,3,5,7",
##         "Switch ID": "B"
##         }
##        ]
##
##
## -- Bulk create sixteen vHBAs named vhba0-15 using the "Vhbas" key in auto placement mode with the minimum required dictionary keys for default settings.
##    When using the "Vhbas" key, the "Name" key becomes a prefix for the vHBA name value.
##    Policies and Pools provided in the separate default variables are automatically applied:
##
##    vhba_placement_mode = "Auto"
##    vhba_list = [
##        {"Name": "vhba",
##         "Vhbas": "0-7",
##         "Switch ID": "A"
##         },
##        {"Name": "vhba",
##         "Vhbas": "8-15",
##         "Switch ID": "B"
##         }
##        ]
##
##
## -- Create two vHBAs named vhba0 and vhba1 in auto placement mode with persistent LUN bindings enabled, and Policies/Pools directly specified that override any provided default Policies/Pools:
##
##    vhba_placement_mode = "Auto"
##    vhba_list = [
##        {"Name": "vhba0",
##         "WWPN Address Type": "Pool",
##         "WWPN Address Pool": "WWPN-Pool-2",
##         "Switch ID": "A",
##         "Persistent LUN Bindings": True,
##         "Fibre Channel Network": "Sample-FC-Network-Policy",
##         "Fibre Channel QoS": "Sample-FC-QoS-Policy",
##         "Fibre Channel Adapter": "Sample-FC-Adapter-Policy",
##         "FC Zone": ["Sample-FC-Zone-Policy"]
##         },
##        {"Name": "vhba1",
##         "WWPN Address Type": "Pool",
##         "WWPN Address Pool": "WWPN-Pool-2",
##         "Switch ID": "B",
##         "Persistent LUN Bindings": True,
##         "Fibre Channel Network": "Sample-FC-Network-Policy",
##         "Fibre Channel QoS": "Sample-FC-QoS-Policy",
##         "Fibre Channel Adapter": "Sample-FC-Adapter-Policy",
##         "FC Zone": ["Sample-FC-Zone-Policy"]
##         }
##        ]
##
##
## -- Create two vHBAs named vhba0 and vhba1 in manual placement mode with corresponding manual placement settings, a pin group, and static WWPN addresses.
##    Policies provided in the separate default variables are automatically applied:
##
##    vhba_placement_mode = "Manual"
##    vhba_list = [
##        {"Name": "vhba0",
##         "Pin Group Name": "Pin-Group-0",
##         "WWPN Address Type": "Static",
##         "Static WWPN Address": "20:00:00:25:B5:AA:00:01",
##         "Slot ID": "1",
##         "PCI Link": 0,
##         "Switch ID": "A",
##         "PCI Order": 0
##         },
##        {"Name": "vhba1",
##         "Pin Group Name": "Pin-Group-1",
##         "WWPN Address Type": "Static",
##         "Static WWPN Address": "20:00:00:25:B5:BB:00:01",
##         "Slot ID": "2",
##         "PCI Link": 0,
##         "Switch ID": "B",
##         "PCI Order": 0
##         }
##        ]
##
##
## -- Create two vHBAs named vhba0 and vhba1 in auto placement mode with the vHBA type changed to "fc-nvme-initiator" and two FC Zone Policies directly specified that override any provided default FC Zone Policies.
##    Policies and Pools provided in the separate default variables are automatically applied where applicable:
##
##    vhba_placement_mode = "Auto"
##    vhba_list = [
##        {"Name": "vhba0",
##         "Switch ID": "A",
##         "vHBA Type": "fc-nvme-initiator",
##         "FC Zone": ["Sample-FC-Zone-Policy-1", "Sample-FC-Zone-Policy-2"]
##         },
##        {"Name": "vhba1",
##         "Switch ID": "B",
##         "vHBA Type": "fc-nvme-initiator",
##         "FC Zone": ["Sample-FC-Zone-Policy-1", "Sample-FC-Zone-Policy-2"]
##         }
##        ]
##
##
## NOTE - The full list of configurable keys for each vHBA dictionary entry aligns with the Intersight GUI naming and includes:
## "Name", "vHBA Type", "Pin Group Name", "WWPN Address Type", "WWPN Address Pool", "Static WWPN Address", 
## "Slot ID", "PCI Link", "Switch ID", "Uplink", "PCI Order", "Persistent LUN Bindings", 
## "Fibre Channel Network", "Fibre Channel QoS", "Fibre Channel Adapter", "FC Zone"
##
## NOTE - Pre-existing Fibre Channel Network, Fibre Channel QoS, and Fibre Channel Adapter Policies must be provided when configuring vHBAs.
## Default Policies and Pools to be used by all configured vHBAs can be provided using the default variables listed below.
## To override the default Policy or Pool for a particular vHBA, a corresponding Policy or Pool key and value can be provided for each set of vHBA dictionaries in the vhba_list variable.
## Please see the included example above.
##
## NOTE - A custom "Vhbas" key can be used for quick bulk creation of multiple vHBAs with similar values.
## When using the "Vhbas" key, the "Name" key becomes a prefix for the vHBA name value.
## Please see the included example above.
##
## NOTE - To not configure any vHBAs, configure the vhba_list variable with an empty list, for example: vhba_list = []

san_connectivity_policy_vhba_placement_mode = "Auto"

san_connectivity_policy_vhba_list = [
    {"Name": "vhba0",
     "Switch ID": "A"
     },
    {"Name": "vhba1",
     "Switch ID": "B"
     }
    ]

# Policy Default Settings (Change only if needed)
san_connectivity_policy_ucs_server_type = "FI-Attached"     # Options: "FI-Attached", "Standalone"


#----------------------------------Section 32----------------------------------#

# SD CARD POLICY CONFIGURATION

# General Settings
sd_card_policy_name = "SD-Card-Policy-1"
sd_card_policy_description = "A Cisco Intersight SD Card Policy generated by the UCS Server Deployment Tool."
sd_card_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the sd_card_policy_tags dictionary if no tags are needed, for example: sd_card_policy_tags = {}

# Policy Detail Settings
sd_card_policy_sd_card_mode = "Operating System Only"      # Options: "Operating System Only", "Utility Only", "Operating System + Utility"

## Operating System Settings
sd_card_policy_enable_operating_system = False
sd_card_policy_operating_system_partition_name = "Hypervisor"

## Utility Settings
sd_card_policy_enable_utility_diagnostics = False
sd_card_policy_enable_utility_drivers = False
sd_card_policy_enable_utility_host_upgrade_utility = False
sd_card_policy_enable_utility_server_configuration_utility = False
sd_card_policy_enable_utility_user_partition = False
sd_card_policy_utility_user_partition_name = "UserPartition"


#----------------------------------Section 33----------------------------------#

# SERIAL OVER LAN POLICY CONFIGURATION

# General Settings
serial_over_lan_policy_name = "Serial-Over-LAN-Policy-1"
serial_over_lan_policy_description = "A Cisco Intersight Serial Over LAN Policy generated by the UCS Server Deployment Tool."
serial_over_lan_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the serial_over_lan_policy_tags dictionary if no tags are needed, for example: serial_over_lan_policy_tags = {}

# Policy Detail Settings
serial_over_lan_policy_enable_serial_over_lan = True
serial_over_lan_policy_com_port = "com0"        # Options: "com0" or "com1"
serial_over_lan_policy_baud_rate = 9600        # Options: 9600, 19200, 38400, 57600, 115200
serial_over_lan_policy_ssh_port = 2400        # Options: 1024 - 65535


#----------------------------------Section 34----------------------------------#

# SNMP POLICY CONFIGURATION

# General Settings
snmp_policy_name = "SNMP-Policy-1"
snmp_policy_description = "A Cisco Intersight SNMP Policy generated by the UCS Server Deployment Tool."
snmp_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the snmp_policy_tags dictionary if no tags are needed, for example: snmp_policy_tags = {}

# Policy Detail Settings
snmp_policy_enable_snmp = True
snmp_policy_v2c_features = True
snmp_policy_v3_features = True
snmp_policy_port = 161
snmp_policy_system_contact = "Administrator"
snmp_policy_system_location = "Datacenter 001"
snmp_policy_access_community_string = "demo_access_string"
snmp_policy_community_access = "Disabled"      # Options: "Disabled", "Limited", "Full"
snmp_policy_trap_community_string = "demo_trap_string"
snmp_policy_engine_input_id = "0123456789ABC"
snmp_policy_users_list = [
    {"Name": "demouser",
     "Security Level": "AuthPriv",
     "Auth Type": "SHA",
     "Auth Password": "C1sco12345",
     "Privacy Type": "AES",
     "Privacy Password": "C1sco12345"
     },
    ]
snmp_policy_trap_destinations_list = [
    {"Enable": True,
     "SNMP Version": "V3",
     "User": "demouser",
     "Trap Type": "Trap",
     "Destination Address": "192.168.0.101",
     "Port": 162
     },
    {"Enable": True,
     "SNMP Version": "V2",
     "Community String": "demo_trap_string",
     "Trap Type": "Trap",
     "Destination Address": "192.168.0.102",
     "Port": 162
     },
    ]


#----------------------------------Section 35----------------------------------#

# STORAGE POLICY CONFIGURATION

# General Settings
storage_policy_name = "Storage-Policy-1"
storage_policy_description = "A Cisco Intersight Storage Policy generated by the UCS Server Deployment Tool."
storage_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the storage_policy_tags dictionary if no tags are needed, for example: storage_policy_tags = {}

# Policy Detail Settings
## General Configuration
storage_policy_use_jbod_drives_for_virtual_drive_creation = False
storage_policy_unused_disks_state = "No Change"        # Options: "No Change", "Unconfigured Good", "JBOD"

## M.2 RAID Configuration
storage_policy_enable_m2_raid_configuration = True
storage_policy_m2_raid_controller_slot_for_virtual_drive_creation = "MSTOR-RAID-1 (MSTOR-RAID)"        # Options: "MSTOR-RAID-1 (MSTOR-RAID)", "MSTOR-RAID-2" "MSTOR-RAID-1,MSTOR-RAID-2"

## MRAID/RAID Controller Configuration
## NOTE - Here are example configurations for the drive_group_list and virtual_drive_list variables:
##
## -- Create one Drive Group as RAID 1 with a two-disk span.
##    Create one Virtual Drive set as the boot drive using all available disk space in the matched Drive Group.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID1",
##         "Drive Array Span 0": "0-1",
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Virtual Drive Name": "vd0",
##         "Expand to Available": True,
##         "Set as Boot Drive": True,
##         },
##        ]
##
##
## -- Create one Drive Group as RAID 5 with a three-disk span and a hot spare.
##    Create one Virtual Drive allocated 1000 MiB in the matched Drive Group.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID5",
##         "Drive Array Span 0": "0-2",
##         "Dedicated Hot Spares": "3"
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Virtual Drive Name": "vd0",
##         "Size": 1000,
##         },
##        ]
##
##
## -- Create one Drive Group as RAID 5 with a three-disk span and a hot spare.
##    Create another Drive Group as RAID 10 with two four-disk spans and two hot spares.
##    Create one Virtual Drive set as the boot drive using all available disk space in the first Drive Group and a modified strip size.
##    Create another Virtual Drive allocated 1000 MiB in the second Drive Group, a modified strip size, and modified policies.
##    Key attributes set to default settings do not have to be provided, but are shown as an example.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID5",
##         "Drive Array Span 0": "0-2",
##         "Dedicated Hot Spares": "3"
##         },
##        {"Drive Group Name": "dg1",
##         "RAID Level": "RAID10",
##         "Drive Array Span 0": "4-7",
##         "Drive Array Span 1": "8-11",
##         "Dedicated Hot Spares": "12,13"
##         }
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Number of Copies": 0,
##         "Virtual Drive Name": "vd0",
##         "Size": 0,
##         "Expand to Available": True,
##         "Set as Boot Drive": True,
##         "Strip Size": 128,
##         "Access Policy": "Default",
##         "Read Policy": "Default",
##         "Write Policy": "Default",
##         "Disk Cache": "Default"
##         },
##        {"Drive Group": "dg1",
##         "Number of Copies": 0,
##         "Virtual Drive Name": "vd1",
##         "Size": 1000,
##         "Expand to Available": False,
##         "Set as Boot Drive": False,
##         "Strip Size": 512,
##         "Access Policy": "Read Write",
##         "Read Policy": "Always Read Ahead",
##         "Write Policy": "Write Through",
##         "Disk Cache": "Enabled"
##         }
##        ]
##
##
## -- Create one Drive Group as RAID 5 with a three-disk span and a hot spare.
##    Create one Virtual Drive allocated 1000 MiB in the matched Drive Group.
##    Ten copies of the original Virtual Drive will also be bulk created using the "Number of Copies" key attribute.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID5",
##         "Drive Array Span 0": "0-2",
##         "Dedicated Hot Spares": "3"
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Number of Copies": 10,
##         "Virtual Drive Name": "vd",
##         "Size": 1000,
##         },
##        ]
##
##
## -- Create one Drive Group as RAID 5 with a three-disk span and a hot spare.
##    Bulk create twelve virtual drives allocated 1000 MiB each in the matched Drive Group using the "VirtualDrives" key attribute.
##    The "VirtualDrives" key attribute provides more precision in the naming and numbering of the virtual drives compared to the "Number of Copies" key attribute.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID5",
##         "Drive Array Span 0": "0-2",
##         "Dedicated Hot Spares": "3"
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "VirtualDrives": "2,4,6,8,10,12,20-25",
##         "Virtual Drive Name": "vd",
##         "Size": 1000,
##         },
##        ]
##
##
## -- Create one Drive Group as RAID 50 with the maximum of eight spans. Each span is a three-disk configuration.
##    Create one Virtual Drive allocated 7000000 MiB in the matched Drive Group.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID50",
##         "Drive Array Span 0": "1-3",
##         "Drive Array Span 1": "4-6",
##         "Drive Array Span 2": "7-9",
##         "Drive Array Span 3": "10-12",
##         "Drive Array Span 4": "13-15",
##         "Drive Array Span 5": "16-18",
##         "Drive Array Span 6": "19-21",
##         "Drive Array Span 7": "22-24",
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Virtual Drive Name": "vd0",
##         "Size": 7000000,
##         },
##        ]

storage_policy_enable_mraid_raid_controller_configuration = False
storage_policy_global_hot_spares = ""

storage_policy_drive_group_list = [
    {"Drive Group Name": "dg0",
     "RAID Level": "RAID5",
     "Drive Array Span 0": "0-2",
     "Dedicated Hot Spares": "3"
     },
    {"Drive Group Name": "dg1",
     "RAID Level": "RAID10",
     "Drive Array Span 0": "4-5",
     "Drive Array Span 1": "6-7",
     "Dedicated Hot Spares": "8"
     }
    ]

storage_policy_virtual_drive_list = [
    {"Drive Group": "dg0",
     "Number of Copies": 0,
     "Virtual Drive Name": "vd0",
     "Size": 0,
     "Expand to Available": True,
     "Set as Boot Drive": True,
     "Strip Size": 64,
     "Access Policy": "Default",
     "Read Policy": "Default",
     "Write Policy": "Default",
     "Disk Cache": "Default"
     },
    {"Drive Group": "dg1",
     "Number of Copies": 0,
     "Virtual Drive Name": "vd1",
     "Size": 1000,
     "Expand to Available": False,
     "Set as Boot Drive": False,
     "Strip Size": 64,
     "Access Policy": "Default",
     "Read Policy": "Default",
     "Write Policy": "Default",
     "Disk Cache": "Default"
     }
    ]

## MRAID/RAID Single Drive RAID0 Configuration
storage_policy_enable_mraid_raid_single_drive_raid0_configuration = False
storage_policy_drive_slots = ""
storage_policy_strip_size_in_kib = 64      # Options: 64, 128, 256, 512, 1024
storage_policy_access_policy = "Default"       # Options: "Default", "Read Write", "Read Only", "Blocked"
storage_policy_read_policy = "Default"     # Options: "Default", "Always Read Ahead", "No Read Ahead"
storage_policy_write_policy = "Default"     # Options: "Default", "Write Through", "Write Back Good BBU", "Always Write Back"
storage_policy_disk_cache = "Default"     # Options: "Default", "Unchanged", "Enabled", "Disabled"


#----------------------------------Section 37----------------------------------#

# SYSLOG POLICY CONFIGURATION

# General Settings
syslog_policy_name = "Syslog-Policy-1"
syslog_policy_description = "A Cisco Intersight Syslog Policy generated by the UCS Server Deployment Tool."
syslog_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the syslog_policy_tags dictionary if no tags are needed, for example: syslog_policy_tags = {}

# Policy Detail Settings
syslog_policy_syslog_local_logging_minimum_severity_to_report = "warning"     # Options: "warning", "emergency", "alert", "critical", "error", "notice", "informational", "debug"
syslog_policy_syslog_remote_logging_server_list = [
    {"Enable": True,
     "Hostname/IP Address": "192.168.0.201",
     "Port": 514,
     "Protocol": "TCP",
     "Minimum Severity To Report": "alert"
     },
    {"Enable": False,
     "Hostname/IP Address": "0.0.0.0",
     "Port": 514,
     "Protocol": "UDP",
     "Minimum Severity To Report": "warning"
     },
    ]


#----------------------------------Section 38----------------------------------#

# usNIC ETHERNET ADAPTER POLICY CONFIGURATION

# General Settings
usnic_adapter_policy_name = "usNIC-Adapter-Policy-1"
usnic_adapter_policy_description = "A Cisco Intersight usNIC Ethernet Adapter Policy generated by the UCS Server Deployment Tool."
usnic_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the usnic_adapter_policy_tags dictionary if no tags are needed, for example: usnic_adapter_policy_tags = {}

## Ethernet Adapter Default Configuration
## NOTE - Setting a default configuration will override all settings under Policy Details. Leave an empty string ("") if a default configuration is not desired.
## NOTE - Default configurations can be set by providing the name of one of the pre-defined built-in default configuration options from Intersight.
## NOTE - Available pre-defined built-in default configuration options from Intersight include:
## "MQ-SMBd"
## "SMBServer"
## "SMBClient"
## "Solaris"
## "usNICOracleRAC"
## "WIN-AzureStack"
## "Win-HPN-SMBd"
## "Win-HPN"
## "Linux-NVMe-RoCE"
## "MQ"
## "usNIC"
## "SRIOV"
## "VMWarePassThru"
## "VMWare"
## "Windows"
## "Linux"
usnic_adapter_policy_ethernet_adapter_default_configuration = "usNIC"

# Policy Detail Settings
usnic_adapter_policy_enable_virtual_extensible_lan = False
usnic_adapter_policy_enable_network_virtualization_using_gre = False
usnic_adapter_policy_enable_accelerated_receive_flow_steering = False
usnic_adapter_policy_enable_precision_time_protocol = False
usnic_adapter_policy_enable_advanced_filter = False
usnic_adapter_policy_enable_interrupt_scaling = False
usnic_adapter_policy_enable_geneve_offload = False

## RoCE Settings
usnic_adapter_policy_enable_rdma_over_converged_ethernet = False

## Interrupt Settings
usnic_adapter_policy_interrupts = 6        # Options: 1 - 1024
usnic_adapter_policy_interrupt_mode = "MSIx"     # Options: "MSIx", "MSI", or "INTx"
usnic_adapter_policy_interrupt_timer = 125        # Options: 0 - 65535
usnic_adapter_policy_interrupt_coalescing_type = "Min"       # Options: "Min" or "Idle"

## Receive Settings
usnic_adapter_policy_receive_queue_count = 6        # Options: 1 - 1000
usnic_adapter_policy_receive_ring_size = 512        # Options: 64 - 16384

## Transmit Settings
usnic_adapter_policy_transmit_queue_count = 6        # Options: 1 - 1000
usnic_adapter_policy_transmit_ring_size = 256        # Options: 64 - 16384

## Completion Settings
usnic_adapter_policy_completion_queue_count = 12        # Options: 1 - 2000
usnic_adapter_policy_completion_ring_size = 4        # Options: 1 - 256
usnic_adapter_policy_uplink_failback_timeout = 5        # Options: 0 - 600

## TCP Offload Settings
usnic_adapter_policy_enable_tx_checksum_offload = True
usnic_adapter_policy_enable_rx_checksum_offload = True
usnic_adapter_policy_enable_large_send_offload = True
usnic_adapter_policy_enable_large_receive_offload = True

## Receive Side Scaling Settings
usnic_adapter_policy_enable_receive_side_scaling = True
usnic_adapter_policy_enable_ipv4_hash = True
usnic_adapter_policy_enable_ipv6_extensions_hash = False
usnic_adapter_policy_enable_ipv6_hash = True
usnic_adapter_policy_enable_tcp_and_ipv4_hash = True
usnic_adapter_policy_enable_tcp_and_ipv6_extensions_hash = False
usnic_adapter_policy_enable_tcp_and_ipv6_hash = True
usnic_adapter_policy_enable_udp_and_ipv4_hash = False
usnic_adapter_policy_enable_udp_and_ipv6_hash = False

## Additional RoCE Settings (Not available in the GUI, change only if needed.)
usnic_adapter_policy_roce_class_of_service = 5        # Options: 1 - 6
usnic_adapter_policy_roce_memory_regions = 0
usnic_adapter_policy_roce_queue_pairs = 0
usnic_adapter_policy_roce_resource_groups = 0
usnic_adapter_policy_roce_version = 1        # Options: 1 - 2


#----------------------------------Section 39----------------------------------#

# UUID POOL CONFIGURATION

# General Settings
uuid_pool_name = "UUID-Pool-1"
uuid_pool_description = "A Cisco Intersight UUID Pool generated by the UCS Server Deployment Tool."
uuid_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the uuid_pool_tags dictionary if no tags are needed, for example: uuid_pool_tags = {}

# Pool Detail Settings
uuid_pool_uuid_prefix = "F733776E-1ED8-11E2"

## NOTE! - For the UUID blocks lists, place each UUID block dictionary in the list to match the desired order (first to last).
uuid_pool_uuid_blocks_list = [
    {"From": "0000-000000000001", "Size": 128},
    ]

# Pool Default Settings (Change only if needed)
uuid_pool_uuid_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 40----------------------------------#

# VIRTUAL KVM POLICY CONFIGURATION

# General Settings
virtual_kvm_policy_name = "Virtual-KVM-Policy-1"
virtual_kvm_policy_description = "A Cisco Intersight Virtual KVM Policy generated by the UCS Server Deployment Tool."
virtual_kvm_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the virtual_kvm_policy_tags dictionary if no tags are needed, for example: virtual_kvm_policy_tags = {}

# Policy Detail Settings
virtual_kvm_policy_enable_virtual_kvm = True
virtual_kvm_policy_max_sessions = 4        # Options: 1 - 4
virtual_kvm_policy_remote_port = 2068      # Options: 1 - 65535
virtual_kvm_policy_enable_video_encryption = True
virtual_kvm_policy_enable_local_server_video = True


#----------------------------------Section 41----------------------------------#

# VIRTUAL MEDIA POLICY CONFIGURATION

# General Settings
virtual_media_policy_name = "Virtual-Media-Policy-1"
virtual_media_policy_description = "A Cisco Intersight Virtual Media Policy generated by the UCS Server Deployment Tool."
virtual_media_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the virtual_media_policy_tags dictionary if no tags are needed, for example: virtual_media_policy_tags = {}

# Policy Detail Settings
virtual_media_policy_enable_virtual_media = True
virtual_media_policy_enable_virtual_media_encryption=True
virtual_media_policy_enable_low_power_usb=True
virtual_media_policy_virtual_media_mapping_list = [
    {"Virtual Media Type": "CDD",
     "Virtual Media Protocol": "NFS",
     "Name": "sample-mapping-1",
     "File Location": "hostname-or-IP/filePath/fileName.iso",
     "Mount Options": ""
     },
    {"Virtual Media Type": "HDD",
     "Virtual Media Protocol": "CIFS",
     "Name": "sample-mapping-2",
     "File Location": "hostname-or-IP/filePath/fileName.img",
     "Mount Options": "ro, soft",
     "Username": "sampleuser",
     "Password": "C1sco12345",
     "Authentication Protocol": "ntlm"
     },
    {"Virtual Media Type": "CDD",
     "Virtual Media Protocol": "HTTPS",
     "Name": "sample-mapping-3",
     "File Location": "https://hostname-or-IP/filePath/fileName.iso",
     "Mount Options": ""
     },
    ]


#----------------------------------Section 42----------------------------------#

# VMMQ ETHERNET ADAPTER POLICY CONFIGURATION

# General Settings
vmmq_adapter_policy_name = "VMMQ-Adapter-Policy-1"
vmmq_adapter_policy_description = "A Cisco Intersight VMMQ Ethernet Adapter Policy generated by the UCS Server Deployment Tool."
vmmq_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the vmmq_adapter_policy_tags dictionary if no tags are needed, for example: vmmq_adapter_policy_tags = {}

## Ethernet Adapter Default Configuration
## NOTE - Setting a default configuration will override all settings under Policy Details. Leave an empty string ("") if a default configuration is not desired.
## NOTE - Default configurations can be set by providing the name of one of the pre-defined built-in default configuration options from Intersight.
## NOTE - Available pre-defined built-in default configuration options from Intersight include:
## "MQ-SMBd"
## "SMBServer"
## "SMBClient"
## "Solaris"
## "usNICOracleRAC"
## "WIN-AzureStack"
## "Win-HPN-SMBd"
## "Win-HPN"
## "Linux-NVMe-RoCE"
## "MQ"
## "usNIC"
## "SRIOV"
## "VMWarePassThru"
## "VMWare"
## "Windows"
## "Linux"
vmmq_adapter_policy_ethernet_adapter_default_configuration = "MQ"

# Policy Detail Settings
vmmq_adapter_policy_enable_virtual_extensible_lan = False
vmmq_adapter_policy_enable_network_virtualization_using_gre = False
vmmq_adapter_policy_enable_accelerated_receive_flow_steering = False
vmmq_adapter_policy_enable_precision_time_protocol = False
vmmq_adapter_policy_enable_advanced_filter = False
vmmq_adapter_policy_enable_interrupt_scaling = False
vmmq_adapter_policy_enable_geneve_offload = False

## RoCE Settings
vmmq_adapter_policy_enable_rdma_over_converged_ethernet = False

## Interrupt Settings
vmmq_adapter_policy_interrupts = 256        # Options: 1 - 1024
vmmq_adapter_policy_interrupt_mode = "MSIx"     # Options: "MSIx", "MSI", or "INTx"
vmmq_adapter_policy_interrupt_timer = 125        # Options: 0 - 65535
vmmq_adapter_policy_interrupt_coalescing_type = "Min"       # Options: "Min" or "Idle"

## Receive Settings
vmmq_adapter_policy_receive_queue_count = 512        # Options: 1 - 1000
vmmq_adapter_policy_receive_ring_size = 512        # Options: 64 - 16384

## Transmit Settings
vmmq_adapter_policy_transmit_queue_count = 64        # Options: 1 - 1000
vmmq_adapter_policy_transmit_ring_size = 256        # Options: 64 - 16384

## Completion Settings
vmmq_adapter_policy_completion_queue_count = 576        # Options: 1 - 2000
vmmq_adapter_policy_completion_ring_size = 4        # Options: 1 - 256
vmmq_adapter_policy_uplink_failback_timeout = 5        # Options: 0 - 600

## TCP Offload Settings
vmmq_adapter_policy_enable_tx_checksum_offload = True
vmmq_adapter_policy_enable_rx_checksum_offload = True
vmmq_adapter_policy_enable_large_send_offload = True
vmmq_adapter_policy_enable_large_receive_offload = True

## Receive Side Scaling Settings
vmmq_adapter_policy_enable_receive_side_scaling = True
vmmq_adapter_policy_enable_ipv4_hash = True
vmmq_adapter_policy_enable_ipv6_extensions_hash = False
vmmq_adapter_policy_enable_ipv6_hash = True
vmmq_adapter_policy_enable_tcp_and_ipv4_hash = True
vmmq_adapter_policy_enable_tcp_and_ipv6_extensions_hash = False
vmmq_adapter_policy_enable_tcp_and_ipv6_hash = True
vmmq_adapter_policy_enable_udp_and_ipv4_hash = False
vmmq_adapter_policy_enable_udp_and_ipv6_hash = False

## Additional RoCE Settings (Not available in the GUI, change only if needed.)
vmmq_adapter_policy_roce_class_of_service = 5        # Options: 1 - 6
vmmq_adapter_policy_roce_memory_regions = 0
vmmq_adapter_policy_roce_queue_pairs = 0
vmmq_adapter_policy_roce_resource_groups = 0
vmmq_adapter_policy_roce_version = 1        # Options: 1 - 2


#----------------------------------Section 43----------------------------------#

# WWNN POOL CONFIGURATION

# General Settings
wwnn_pool_name = "WWNN-Pool-1"
wwnn_pool_description = "A Cisco Intersight WWNN Pool generated by the UCS Server Deployment Tool."
wwnn_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the wwnn_pool_tags dictionary if no tags are needed, for example: wwnn_pool_tags = {}

# Pool Detail Settings
## NOTE! - For the WWNN blocks lists, place each WWNN block dictionary in the list to match the desired order (first to last).
wwnn_pool_wwnn_blocks_list = [
    {"From": "20:00:00:25:B5:00:00:00", "Size": 256},
    ]

# Pool Default Settings (Change only if needed)
wwnn_pool_wwnn_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 44----------------------------------#

# WWPN POOL CONFIGURATION

# General Settings
wwpn_pool_name = "WWPN-Pool-1"
wwpn_pool_description = "A Cisco Intersight WWPN Pool generated by the UCS Server Deployment Tool."
wwpn_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the wwpn_pool_tags dictionary if no tags are needed, for example: wwpn_pool_tags = {}

# Pool Detail Settings
## NOTE! - For the WWPN blocks lists, place each WWPN block dictionary in the list to match the desired order (first to last).
wwpn_pool_wwpn_blocks_list = [
    {"From": "20:00:00:25:B5:AB:00:00", "Size": 256},
    ]

# Pool Default Settings (Change only if needed)
wwpn_pool_wwpn_assignment_order = "default"       # Options: "default", "sequential"


####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to backup an Intersight object
def intersight_object_backup(intersight_api_key_id,
                             intersight_api_key,
                             object_attributes,
                             intersight_api_path,
                             backup_attribute_list,
                             object_type="object",
                             organization="default",
                             intersight_base_url="https://www.intersight.com/api/v1",
                             preconfigured_api_client=None
                             ):
    """This is a function to backup an Intersight object based on various
    provided attributes using the Intersight API.
    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        backup_attribute_list (list):
            A list containing the attribute keys that will be backed up for the 
            Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object. To
            ignore the organization value or if no organization is available
            for the object, the value None can be provided for the argument. 
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
    
    if intersight_objects.get("Results"):
        if organization:
            for intersight_object in intersight_objects.get("Results"):
                if intersight_object.get("Organization"):
                    provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                  intersight_api_key=None,
                                                                                  object_name=organization,
                                                                                  intersight_api_path="organization/Organizations?$top=1000",
                                                                                  object_type="Organization",
                                                                                  preconfigured_api_client=api_client
                                                                                  )
                    if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                        for object_attribute in object_attributes:
                            try:
                                intersight_object[object_attribute]
                            except KeyError:
                                break
                            if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                                break
                        else:
                            # The provided object has been identified and retrieved.
                            # Extract requested attributes from identified object
                            backup_intersight_object = {}
                            for backup_attribute in backup_attribute_list:
                                if intersight_object.get(backup_attribute):
                                    backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                            return backup_intersight_object
                else:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        # The provided object has been identified and retrieved.
                        # Extract requested attributes from identified object
                        backup_intersight_object = {}
                        for backup_attribute in backup_attribute_list:
                            if intersight_object.get(backup_attribute):
                                backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                        return backup_intersight_object
            else:
                print("\nA configuration error has occurred!\n")
                print(f"The provided {object_type} was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      f"{object_type} is present.")
                print(f"If the needed {object_type} is missing, please create it.")
                print("Once the issue has been resolved, re-attempt execution.\n")
                sys.exit(0)
        else:
            for intersight_object in intersight_objects.get("Results"):
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    # The provided object has been identified and retrieved.
                    # Extract requested attributes from identified object
                    backup_intersight_object = {}
                    for backup_attribute in backup_attribute_list:
                        if intersight_object.get(backup_attribute):
                            backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                    return backup_intersight_object
            else:
                print("\nA configuration error has occurred!\n")
                print(f"The provided {object_type} was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      f"{object_type} is present.")
                print(f"If the needed {object_type} is missing, please create it.")
                print("Once the issue has been resolved, re-attempt execution.\n")
                sys.exit(0)                
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to convert a list of strings in string type format to list type format.
def string_to_list_maker(string_list,
                         remove_duplicate_elements_in_list=True
                         ):
    """This function converts a list of strings in string type format to list
    type format. The provided string should contain commas, semicolons, or
    spaces as the separator between strings. For each string in the list,
    leading and rear spaces will be removed. Duplicate strings in the list are
    removed by default.

    Args:
        string_list (str):
            A string containing an element or range of elements.

        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements are
            removed from the provided string list. The default value is True.

    Returns:
        A list of elements.   
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.

            separator (str):
                The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.   
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            provided_list (list): A list of elements to be separated.

            separator (str): The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.        
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element, separator)
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    staged_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list, " ")
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list, ",")
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list, ";")
    # Split provided list by hyphens.
    for post_semicolon_split_string_set in post_semicolon_split_list:
        staged_list.append(post_semicolon_split_string_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        final_list = list(set(staged_list))
    return final_list


# Establish function to convert a list of numbers in string type format to list type format.
def integer_number_list_maker(string_list,
                              remove_duplicate_elements_in_list=True,
                              sort_elements_in_list=True
                              ):
    """This function converts a list of numbers in string type format
    to list type format. The provided string should contain commas,
    semicolons, or spaces as the separator between numbers. Number
    ranges can be configured using hyphens. An example entry would be
    "1, 2, 3, 4, 5, 6, 7, 7-14, 25". For each number in the list,
    leading and rear spaces will be removed. Duplicate numbers in the
    list are removed by default.

    Args:
        string_list (str):
            A string containing a number or range of numbers.
        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements
            are removed from the provided string list. The default
            value is True.
        sort_elements_in_list (bool):
            Optional; A setting to determine if the elements in the provided
            string list should be sorted in ascending order. The default value
            is True.

    Returns:
        A list of integers.            
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            provided_list (list):
                A list of elements to be separated.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.               
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element,
                                                               separator
                                                               )
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    integer_number_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list,
                                                " "
                                                )
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list,
                                                   ","
                                                   )
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list,
                                                       ";"
                                                       )
    # Split provided number ranges in the list by hyphens.
    for post_semicolon_split_number_set in post_semicolon_split_list:
        if "-" in post_semicolon_split_number_set:
            if post_semicolon_split_number_set[0] != "-" and post_semicolon_split_number_set[-1] != "-":
                hyphen_split_list = string_to_list_separator(post_semicolon_split_number_set,
                                                             "-"
                                                             )
                # Limit new list to a maximum of two elements.
                fixed_hyphen_split_list = hyphen_split_list[:2]
                # Enumerate the numbers in the hyphen split list.
                integer_starting_number_of_provided_range = int(fixed_hyphen_split_list[0])
                integer_ending_number_of_provided_range = int(fixed_hyphen_split_list[1])
                enumerated_range_list = range(
                    integer_starting_number_of_provided_range,
                    (integer_ending_number_of_provided_range + 1)
                    )
                integer_number_list.extend(enumerated_range_list)
        else:
            integer_of_current_number_set = int(post_semicolon_split_number_set)
            integer_number_list.append(integer_of_current_number_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        integer_number_list = list(set(integer_number_list))
    if sort_elements_in_list:
        integer_number_list = sorted(integer_number_list)
    return integer_number_list


# Establish function to provide a delay timer between tasks.
def delay_timer(
    delay_in_seconds=5,
    delay_symbol="*"
    ):
    """This is a function to provide an delay timer between tasks.

    Args:
        delay_in_seconds (int):
            Optional; This argument sets the delay time. The default value
            is 5 seconds.
        delay_symbol (str):
            Optional; This argument sets the visual delay symbol. The
            default value is "*".
    
    Raises:
        Exception:
            An exception occurred while performing the function.
            An error message will be specified.
    """
    try:
        while delay_in_seconds > 0:
            print(delay_symbol, end="\r")
            delay_in_seconds -= 1
            time.sleep(1)
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue with performing the delay timer with the "
              "arguments provided.")
        print("An attempt will be made with the default settings of 5 "
              "seconds and the delay symbol as '*'.\n")
        delay_in_seconds = 5
        delay_symbol = "*"
        while delay_in_seconds > 0:
            print(delay_symbol, end="\r")
            delay_in_seconds -= 1
            time.sleep(1)


# Establish base classes for configuring Intersight UCS Policies
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerPolicy(UcsPolicy):
    """This class is used to configure a UCS Server Policy in Intersight that
    is logically directly attached to UCS Servers through UCS Server Profiles
    and/or UCS Server Profile Templates.
    """
    object_type = "Directly Attached UCS Server Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_names = ucs_server_profile_names
        self.ucs_server_profile_template_names = ucs_server_profile_template_names

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}')"
            )

    def _attach_ucs_server_profile(self):
        """This is a function to attach Intersight UCS Server Profiles and/or
        UCS Server Profile Templates to an Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []        
        # Attach UCS Server Profile
        if self.ucs_server_profile_names:
            provided_ucs_server_profile_list = string_to_list_maker(self.ucs_server_profile_names)
            for provided_ucs_server_profile in provided_ucs_server_profile_list:
                print("Attaching the UCS Server Profile named "
                      f"{provided_ucs_server_profile}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_server_profile,
                                                                           intersight_api_path="server/Profiles?$top=1000",
                                                                           object_type="UCS Server Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_moid,
                     "ObjectType": "server.Profile"}
                    )
        # Attach UCS Server Profile Templates
        if self.ucs_server_profile_template_names:
            provided_ucs_server_profile_template_list = string_to_list_maker(self.ucs_server_profile_template_names)
            for provided_ucs_server_profile_template in provided_ucs_server_profile_template_list:
                print("Attaching the UCS Server Profile Template named "
                      f"{provided_ucs_server_profile_template}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_template_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=provided_ucs_server_profile_template,
                                                                                    intersight_api_path="server/ProfileTemplates?$top=1000",
                                                                                    object_type="UCS Server Profile Template",
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_template_moid,
                     "ObjectType": "server.ProfileTemplate"}
                    )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerAndChassisPolicy(UcsPolicy):
    """This class is used to configure a UCS Server and/or UCS Chassis Policy
    in Intersight that is logically directly attached to UCS Servers through
    UCS Server Profiles and/or UCS Server Profile Templates, and/or UCS Chassis
    through UCS Chassis Profiles.
    """
    object_type = "Directly Attached UCS Server and Chassis Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 ucs_chassis_profile_names=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_names = ucs_server_profile_names
        self.ucs_server_profile_template_names = ucs_server_profile_template_names
        self.ucs_chassis_profile_names = ucs_chassis_profile_names

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.ucs_chassis_profile_names}')"
            )

    def _attach_ucs_server_and_chassis_profiles(self):
        """This is a function to attach Intersight UCS Server Profiles, UCS
        Server Profile Templates, and/or UCS Chassis Profiles to an Intersight
        Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []
        # Attach UCS Server Profile
        if self.ucs_server_profile_names:
            provided_ucs_server_profile_list = string_to_list_maker(self.ucs_server_profile_names)
            for provided_ucs_server_profile in provided_ucs_server_profile_list:
                print("Attaching the UCS Server Profile named "
                      f"{provided_ucs_server_profile}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_server_profile,
                                                                           intersight_api_path="server/Profiles?$top=1000",
                                                                           object_type="UCS Server Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_moid,
                     "ObjectType": "server.Profile"}
                    )
        # Attach UCS Server Profile Templates
        if self.ucs_server_profile_template_names:
            provided_ucs_server_profile_template_list = string_to_list_maker(self.ucs_server_profile_template_names)
            for provided_ucs_server_profile_template in provided_ucs_server_profile_template_list:
                print("Attaching the UCS Server Profile Template named "
                      f"{provided_ucs_server_profile_template}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_template_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=provided_ucs_server_profile_template,
                                                                                    intersight_api_path="server/ProfileTemplates?$top=1000",
                                                                                    object_type="UCS Server Profile Template",
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_template_moid,
                     "ObjectType": "server.ProfileTemplate"}
                    )
        # Attach UCS Chassis Profile
        if self.ucs_chassis_profile_names:
            provided_ucs_chassis_profile_list = string_to_list_maker(self.ucs_chassis_profile_names)
            for provided_ucs_chassis_profile in provided_ucs_chassis_profile_list:                
                print("Attaching the UCS Chassis Profile named "
                      f"{provided_ucs_chassis_profile}...")
                # Get UCS Chassis Profile MOID
                ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                            intersight_api_key=None,
                                                                            object_name=provided_ucs_chassis_profile,
                                                                            intersight_api_path="chassis/Profiles?$top=1000",
                                                                            object_type="UCS Chassis Profile",
                                                                            organization=self.organization,
                                                                            preconfigured_api_client=self.api_client
                                                                            )
                # Update the API body with the appropriate Chassis Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_chassis_profile_moid,
                     "ObjectType": "chassis.Profile"}
                    )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server and/or UCS Chassis Profile attached, if specified
        self._attach_ucs_server_and_chassis_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerAndDomainPolicy(UcsPolicy):
    """This class is used to configure a UCS Server and/or UCS Domain Policy in
    Intersight that is logically directly attached to UCS Servers through UCS
    Server Profiles and/or UCS Server Profile Templates, and/or UCS Fabric
    Interconnects through UCS Domain Profiles.
    """
    object_type = "Directly Attached UCS Server and Domain Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 ucs_domain_profile_names="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_names = ucs_server_profile_names
        self.ucs_server_profile_template_names = ucs_server_profile_template_names
        self.ucs_domain_profile_names = ucs_domain_profile_names
        self.fabric_interconnect = fabric_interconnect

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.ucs_domain_profile_names}', "
            f"'{self.fabric_interconnect}')"
            )

    def _attach_ucs_server_and_domain_profiles(self):
        """This is a function to attach Intersight UCS Server Profiles, UCS
        Server Profile Templates, and/or UCS Domain Profiles to an Intersight
        Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []
        # Attach UCS Server Profile
        if self.ucs_server_profile_names:
            provided_ucs_server_profile_list = string_to_list_maker(self.ucs_server_profile_names)
            for provided_ucs_server_profile in provided_ucs_server_profile_list:
                print("Attaching the UCS Server Profile named "
                      f"{provided_ucs_server_profile}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_server_profile,
                                                                           intersight_api_path="server/Profiles?$top=1000",
                                                                           object_type="UCS Server Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_moid,
                     "ObjectType": "server.Profile"}
                    )
        # Attach UCS Server Profile Templates
        if self.ucs_server_profile_template_names:
            provided_ucs_server_profile_template_list = string_to_list_maker(self.ucs_server_profile_template_names)
            for provided_ucs_server_profile_template in provided_ucs_server_profile_template_list:
                print("Attaching the UCS Server Profile Template named "
                      f"{provided_ucs_server_profile_template}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_template_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=provided_ucs_server_profile_template,
                                                                                    intersight_api_path="server/ProfileTemplates?$top=1000",
                                                                                    object_type="UCS Server Profile Template",
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_template_moid,
                     "ObjectType": "server.ProfileTemplate"}
                    )
        # Attach UCS Domain Profile
        if self.ucs_domain_profile_names:
            provided_ucs_domain_profile_list = string_to_list_maker(self.ucs_domain_profile_names)
            for provided_ucs_domain_profile in provided_ucs_domain_profile_list:            
                print("Attaching the UCS Domain Profile named "
                      f"{provided_ucs_domain_profile}...")
                # Get UCS Domain Profile MOID
                ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_domain_profile,
                                                                           intersight_api_path="fabric/SwitchClusterProfiles?$top=1000",
                                                                           object_type="UCS Domain Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Get UCS Domain Profile object dictionary attributes
                ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                                         intersight_api_key=None,
                                                                         intersight_api_path="fabric/SwitchClusterProfiles",
                                                                         object_moid=ucs_domain_profile_moid,
                                                                         object_type="UCS Domain Profile",
                                                                         preconfigured_api_client=self.api_client
                                                                         )
                # Get Switch Profiles that are attached to the UCS Domain Profile
                ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
                if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
                    print("\nA configuration error has occurred!\n")
                    print("The provided UCS Domain Profile named "
                          f"{provided_ucs_domain_profile} is not configured with "
                          "two attached Switch Profiles.")
                    print("To proceed, two Switch Profiles must be attached to the "
                          "provided UCS Domain Profile.")
                    print("Please update the configuration of the provided UCS "
                          f"Domain Profile, then re-attempt execution.\n")
                    sys.exit(0)
                else:
                    fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
                    fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
                # Update the API body with the appropriate Switch Profile MOIDs based on selected Fabric Interconnects
                if self.fabric_interconnect not in ("AB", "BA", "A", "B"):
                    print("\nA configuration error has occurred!\n")
                    print("The provided UCS Domain Profile Fabric Interconnect "
                          "value of "
                          f"'{self.fabric_interconnect}' "
                          "is not supported.")
                    print("To proceed, the Fabric Interconnect value for the "
                          "UCS Domain Profile must be 'AB', 'A', or 'B'.")
                    print("Please update the configuration of the provided UCS "
                          "Domain Profile Fabric Interconnect, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                else:
                    if self.fabric_interconnect == "A":
                        print("The attachment will be made to Fabric Interconnect "
                              "A.")
                        self.intersight_api_body["Profiles"].append(
                            {"Moid": fabric_interconnect_a_switch_profile_moid,
                             "ObjectType": "fabric.SwitchProfile"}
                            )
                    elif self.fabric_interconnect == "B":
                        print("The attachment will be made to Fabric Interconnect "
                              "B.")
                        self.intersight_api_body["Profiles"].append(
                            {"Moid": fabric_interconnect_b_switch_profile_moid,
                             "ObjectType": "fabric.SwitchProfile"}
                            )
                    else:
                        print("The attachment will be made to Fabric Interconnects "
                              "A and B.")
                        self.intersight_api_body["Profiles"].extend(
                            [{"Moid": fabric_interconnect_a_switch_profile_moid,
                              "ObjectType": "fabric.SwitchProfile"},
                             {"Moid": fabric_interconnect_b_switch_profile_moid,
                              "ObjectType": "fabric.SwitchProfile"}
                             ]
                            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server and/or Domain Profile attached, if specified
        self._attach_ucs_server_and_domain_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerChassisAndDomainPolicy(UcsPolicy):
    """This class is used to configure a UCS Server, UCS Chassis and/or
    UCS Domain Policy in Intersight that is logically directly attached to UCS
    Servers through UCS Server Profiles and/or UCS Server Profile Templates,
    UCS Chassis through UCS Chassis Profiles, and/or UCS Fabric Interconnects
    through UCS Domain Profiles.
    """
    object_type = "Directly Attached UCS Server, Chassis and Domain Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 ucs_chassis_profile_names="",
                 ucs_domain_profile_names="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_names = ucs_server_profile_names
        self.ucs_server_profile_template_names = ucs_server_profile_template_names
        self.ucs_chassis_profile_names = ucs_chassis_profile_names
        self.ucs_domain_profile_names = ucs_domain_profile_names
        self.fabric_interconnect = fabric_interconnect

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.ucs_chassis_profile_names}', "
            f"'{self.ucs_domain_profile_names}', "
            f"'{self.fabric_interconnect}')"
            )

    def _attach_ucs_server_chassis_and_domain_profiles(self):
        """This is a function to attach Intersight UCS Server Profiles, UCS
        Server Profile Templates, UCS Chassis Profiles, and/or UCS Domain
        Profiles to an Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []
        # Attach UCS Server Profile
        if self.ucs_server_profile_names:
            provided_ucs_server_profile_list = string_to_list_maker(self.ucs_server_profile_names)
            for provided_ucs_server_profile in provided_ucs_server_profile_list:
                print("Attaching the UCS Server Profile named "
                      f"{provided_ucs_server_profile}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_server_profile,
                                                                           intersight_api_path="server/Profiles?$top=1000",
                                                                           object_type="UCS Server Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_moid,
                     "ObjectType": "server.Profile"}
                    )
        # Attach UCS Server Profile Templates
        if self.ucs_server_profile_template_names:
            provided_ucs_server_profile_template_list = string_to_list_maker(self.ucs_server_profile_template_names)
            for provided_ucs_server_profile_template in provided_ucs_server_profile_template_list:
                print("Attaching the UCS Server Profile Template named "
                      f"{provided_ucs_server_profile_template}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_template_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=provided_ucs_server_profile_template,
                                                                                    intersight_api_path="server/ProfileTemplates?$top=1000",
                                                                                    object_type="UCS Server Profile Template",
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_template_moid,
                     "ObjectType": "server.ProfileTemplate"}
                    )
        # Attach UCS Chassis Profile
        if self.ucs_chassis_profile_names:
            provided_ucs_chassis_profile_list = string_to_list_maker(self.ucs_chassis_profile_names)
            for provided_ucs_chassis_profile in provided_ucs_chassis_profile_list:
                print("Attaching the UCS Chassis Profile named "
                      f"{provided_ucs_chassis_profile}...")
                # Get UCS Chassis Profile MOID
                ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                            intersight_api_key=None,
                                                                            object_name=provided_ucs_chassis_profile,
                                                                            intersight_api_path="chassis/Profiles?$top=1000",
                                                                            object_type="UCS Chassis Profile",
                                                                            organization=self.organization,
                                                                            preconfigured_api_client=self.api_client
                                                                            )
                # Update the API body with the appropriate Chassis Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_chassis_profile_moid,
                     "ObjectType": "chassis.Profile"}
                    )
        # Attach UCS Domain Profile
        if self.ucs_domain_profile_names:
            provided_ucs_domain_profile_list = string_to_list_maker(self.ucs_domain_profile_names)
            for provided_ucs_domain_profile in provided_ucs_domain_profile_list:            
                print("Attaching the UCS Domain Profile named "
                      f"{provided_ucs_domain_profile}...")
                # Get UCS Domain Profile MOID
                ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_domain_profile,
                                                                           intersight_api_path="fabric/SwitchClusterProfiles?$top=1000",
                                                                           object_type="UCS Domain Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Get UCS Domain Profile object dictionary attributes
                ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                                         intersight_api_key=None,
                                                                         intersight_api_path="fabric/SwitchClusterProfiles",
                                                                         object_moid=ucs_domain_profile_moid,
                                                                         object_type="UCS Domain Profile",
                                                                         preconfigured_api_client=self.api_client
                                                                         )
                # Get Switch Profiles that are attached to the UCS Domain Profile
                ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
                if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
                    print("\nA configuration error has occurred!\n")
                    print("The provided UCS Domain Profile named "
                          f"{provided_ucs_domain_profile} is not configured with "
                          "two attached Switch Profiles.")
                    print("To proceed, two Switch Profiles must be attached to the "
                          "provided UCS Domain Profile.")
                    print("Please update the configuration of the provided UCS "
                          f"Domain Profile, then re-attempt execution.\n")
                    sys.exit(0)
                else:
                    fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
                    fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
                # Update the API body with the appropriate Switch Profile MOIDs based on selected Fabric Interconnects
                if self.fabric_interconnect not in ("AB", "BA", "A", "B"):
                    print("\nA configuration error has occurred!\n")
                    print("The provided UCS Domain Profile Fabric Interconnect "
                          "value of "
                          f"'{self.fabric_interconnect}' "
                          "is not supported.")
                    print("To proceed, the Fabric Interconnect value for the "
                          "UCS Domain Profile must be 'AB', 'A', or 'B'.")
                    print("Please update the configuration of the provided UCS "
                          "Domain Profile Fabric Interconnect, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                else:
                    if self.fabric_interconnect == "A":
                        print("The attachment will be made to Fabric Interconnect "
                              "A.")
                        self.intersight_api_body["Profiles"].append(
                            {"Moid": fabric_interconnect_a_switch_profile_moid,
                             "ObjectType": "fabric.SwitchProfile"}
                            )
                    elif self.fabric_interconnect == "B":
                        print("The attachment will be made to Fabric Interconnect "
                              "B.")
                        self.intersight_api_body["Profiles"].append(
                            {"Moid": fabric_interconnect_b_switch_profile_moid,
                             "ObjectType": "fabric.SwitchProfile"}
                            )
                    else:
                        print("The attachment will be made to Fabric Interconnects "
                              "A and B.")
                        self.intersight_api_body["Profiles"].extend(
                            [{"Moid": fabric_interconnect_a_switch_profile_moid,
                              "ObjectType": "fabric.SwitchProfile"},
                             {"Moid": fabric_interconnect_b_switch_profile_moid,
                              "ObjectType": "fabric.SwitchProfile"}
                             ]
                            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server, UCS Chassis and/or UCS Domain Profile attached, if specified
        self._attach_ucs_server_chassis_and_domain_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


# Establish base classes for configuring Intersight UCS Pools
class UcsPool:
    """This class is used to configure a UCS Pool in Intersight.
    """
    object_type = "UCS Pool"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    block_types = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.pool_name = pool_name
        self.pool_description = pool_description
        self.pool_assignment_order = pool_assignment_order
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.pool_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        pool_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": pool_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.pool_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def _update_api_body_pool_block_attributes(self):
        """This function updates the Intersight API body with the Pool block
        attributes for the Intersight object. The provided Pool block list is 
        converted for use with the Intersight API.
        """
        for block_type_dictionary in self.block_types:
            blocks_list = getattr(self,
                                  block_type_dictionary.get("BlocksListVariableName")
                                  )
            if blocks_list:
                converted_blocks_list = []
                for provided_block_dictionary in blocks_list:
                    staged_block_dictionary = copy.deepcopy(provided_block_dictionary)
                    returned_block_type = block_type_dictionary["BlockType"]
                    # Set 'ClassId' attribute
                    staged_block_dictionary["ClassId"] = returned_block_type
                    # Set 'ObjectType' attribute
                    staged_block_dictionary["ObjectType"] = returned_block_type
                    converted_block_dictionary = staged_block_dictionary
                    converted_blocks_list.append(converted_block_dictionary)
                # Update Intersight API body with the converted Pool block list value
                self.intersight_api_body[block_type_dictionary["AttributeName"]] = converted_blocks_list

    def object_maker(self):
        """This function makes the targeted pool object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.pool_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with individual Pool block list attributes
        self._update_api_body_pool_block_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


# Establish classes and functions to make UCS Server Profile
class UcsServerProfile:
    """This class is used to configure a UCS Server Profile in Intersight.
    """
    object_type = "UCS Server Profile"
    intersight_api_path = "server/Profiles"
    object_variable_value_maps = [
        {"VariableName": "uuid_assignment_type",
         "Description": "UUID Assignment Type",
         "AttributeName": "UuidAddressType",
         "Values": [
             {"FrontEndValue": "Pool",
              "BackEndValue": "POOL"
              },
             {"FrontEndValue": "Static",
              "BackEndValue": "STATIC"
              },
             {"FrontEndValue": "None",
              "BackEndValue": "NONE"
              }
             ]
         },
        {"VariableName": "ucs_server_type",
         "Description": "UCS Server Type (Target Platform)",
         "AttributeName": "TargetPlatform",
         "Values": [
             {"FrontEndValue": "FI-Attached",
              "BackEndValue": "FIAttached"
              },
             {"FrontEndValue": "Standalone",
              "BackEndValue": "Standalone"
              }
             ]
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 ucs_server_profile_name,
                 ucs_server_profile_description="",
                 ucs_server_profile_organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_type="FI-Attached",
                 uuid_assignment_type="Pool",
                 uuid_pool_name="",
                 uuid_static_address="",
                 ucs_server_profile_template_name_for_attachment="",
                 overwrite_conflicting_ucs_server_profile_template_attachments=False
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.ucs_server_profile_name = ucs_server_profile_name
        self.ucs_server_profile_description = ucs_server_profile_description
        self.ucs_server_profile_organization = ucs_server_profile_organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.ucs_server_type = ucs_server_type
        self.uuid_assignment_type = uuid_assignment_type
        self.uuid_pool_name = uuid_pool_name
        self.uuid_static_address = uuid_static_address
        self.ucs_server_profile_template_name_for_attachment = ucs_server_profile_template_name_for_attachment
        self.overwrite_conflicting_ucs_server_profile_template_attachments = overwrite_conflicting_ucs_server_profile_template_attachments
        self.intersight_api_body = {
            "Name": self.ucs_server_profile_name,
            "Description": self.ucs_server_profile_description,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.ucs_server_profile_name}', "
            f"'{self.ucs_server_profile_description}', "
            f"'{self.ucs_server_profile_organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_type}', "
            f"'{self.uuid_assignment_type}', "
            f"'{self.uuid_pool_name}', "
            f"'{self.uuid_static_address}', "
            f"'{self.ucs_server_profile_template_name_for_attachment}', "
            f"{self.overwrite_conflicting_ucs_server_profile_template_attachments})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.ucs_server_profile_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            error_body_dictionary = ast.literal_eval(error.body)
            if error.status == 409:
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{self.ucs_server_profile_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=self.ucs_server_profile_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {self.ucs_server_profile_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {self.ucs_server_profile_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            elif (
                error.status == 403
                and
                error_body_dictionary.get("messageId") == "gershwin_cannot_edit_derived_sp"
                ):
                print(f"A {self.object_type} named "
                      f"{self.ucs_server_profile_name} appears to already "
                      "exist.")
                print("It also appears a UCS Server Profile Template may "
                      "already be attached.")
                if self.ucs_server_profile_template_name_for_attachment:
                    print("A UCS Server Profile Template named "
                          f"{ucs_server_profile_template_name_for_attachment} "
                          "has been provided for a new attachment.")
                    print("If no UCS Server Profile Template is already attached, "
                          "an attempt will be made to attach the newly "
                          "provided UCS Server Profile Template.")
                    print("If the newly provided UCS Server Profile Template "
                          "is already attached, an attempt will be made to "
                          "refresh the attachment...")
                else:
                    print("No UCS Server Profile Template has been provided "
                          "for a new attachment.")
                    print("An attempt will be made to update the pre-existing "
                          f"{self.object_type} named "
                          f"{self.ucs_server_profile_name}.")
                try:
                    if self.overwrite_conflicting_ucs_server_profile_template_attachments:
                        modified_intersight_api_body = copy.deepcopy(self.intersight_api_body)
                        modified_intersight_api_body["SrcTemplate"] = None
                        # Post UCS Server Profile object with cleared source template in modified Intersight API body
                        self.api_client.call_api(resource_path=full_intersight_api_path,
                                                 method="POST",
                                                 body=modified_intersight_api_body,
                                                 auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                                 )
                        # Re-Post UCS Server Profile object with original Intersight API body
                        self.api_client.call_api(resource_path=full_intersight_api_path,
                                                 method="POST",
                                                 body=self.intersight_api_body,
                                                 auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                                 )
                        print(f"The update of the {self.object_type} has "
                              "completed.")
                        print(f"The pre-existing {self.ucs_server_profile_name} "
                              "has been updated.")
                        return "The POST method was successful."
                    else:                        
                        # Get UCS Server Profile MOID
                        existing_ucs_server_profile_moid = intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_name=self.ucs_server_profile_name,
                            intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                            object_type=self.object_type,
                            preconfigured_api_client=self.api_client
                            )
                        # Get UCS Server Profile object dictionary attributes
                        existing_ucs_server_profile_object = get_single_intersight_object(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            intersight_api_path=self.intersight_api_path,
                            object_moid=existing_ucs_server_profile_moid,
                            object_type=self.object_type,
                            preconfigured_api_client=self.api_client
                            )
                        provided_ucs_server_profile_template_moid = self.intersight_api_body.get("SrcTemplate", {}).get("Moid")
                        existing_ucs_server_profile_object_ucs_server_profile_template_moid = existing_ucs_server_profile_object.get("SrcTemplate", {}).get("Moid")
                        # Check if UCS Server Profile Template is attached to pre-existing UCS Server Profile
                        # If UCS Server Profile Template is attached to pre-existing UCS Server Profile, verify it matches the newly provided UCS Server Profile Template
                        if (existing_ucs_server_profile_object_ucs_server_profile_template_moid is None
                            or
                            provided_ucs_server_profile_template_moid == existing_ucs_server_profile_object_ucs_server_profile_template_moid):
                            # Update full Intersight API path with the MOID of the existing object
                            full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_ucs_server_profile_moid}"
                            modified_intersight_api_body = copy.deepcopy(self.intersight_api_body)
                            modified_intersight_api_body["SrcTemplate"] = None
                            # Post UCS Server Profile object with cleared source template in modified Intersight API body
                            self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                                     method="POST",
                                                     body=modified_intersight_api_body,
                                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                                     )
                            # Re-Post UCS Server Profile object with original Intersight API body
                            self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                                     method="POST",
                                                     body=self.intersight_api_body,
                                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                                     )
                            print(f"The update of the {self.object_type} has "
                                  "completed.")
                            print(f"The pre-existing {self.ucs_server_profile_name} "
                                  "has been updated.")
                            return "The POST method was successful."
                        else:
                            print("\nA configuration error has occurred!\n")
                            print(f"The pre-existing {self.ucs_server_profile_name} "
                                  "appears to have a current UCS Server Profile Template "
                                  "attachment that is different from the "
                                  "provided configuration.")
                            print("As a safeguard, please update the pre-existing "
                                  f"{self.ucs_server_profile_name} manually.")
                            print("An an alternative solution, please change the "
                                  "name of the proposed UCS Server Profile.")
                            return "The POST method failed."                        
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {self.ucs_server_profile_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."                
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        ucs_server_profile_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                intersight_api_key=None,
                                                                                object_name=self.ucs_server_profile_organization,
                                                                                intersight_api_path="organization/Organizations?$top=1000",
                                                                                object_type="Organization",
                                                                                preconfigured_api_client=self.api_client
                                                                                )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": ucs_server_profile_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.
        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.pool_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.ucs_server_profile_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with any provided UUID Pool or UUID Static Address
        if self.uuid_pool_name and self.intersight_api_body["UuidAddressType"] == "POOL":
            uuid_pool_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.uuid_pool_name,
                intersight_api_path="uuidpool/Pools?$top=1000",
                object_type="UUID Pool",
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["UuidPool"] = {
                "Moid": uuid_pool_moid
                }
        elif self.uuid_static_address and self.intersight_api_body["UuidAddressType"] == "STATIC":
            self.intersight_api_body["StaticUuidAddress"] = self.uuid_static_address
        else:
            self.intersight_api_body["UuidAddressType"] = "NONE"
            self.intersight_api_body["UuidPool"] = None
            self.intersight_api_body["StaticUuidAddress"] = ""
        # Update the API body with any provided UCS Server Profile Template for attachment
        if self.ucs_server_profile_template_name_for_attachment:
            print("The UCS Server Profile Template named "
                  f"{self.ucs_server_profile_template_name_for_attachment} has "
                  "been provided for attachment.")
            ucs_server_profile_template_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.ucs_server_profile_template_name_for_attachment,
                intersight_api_path="server/ProfileTemplates",
                object_type="UCS Server Profile Template",
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["SrcTemplate"] = {
                "ClassId": "mo.MoRef",
                "Moid": ucs_server_profile_template_moid,
                "ObjectType": "server.ProfileTemplate",
                "link": f"https://www.intersight.com/api/v1/server/ProfileTemplates/{ucs_server_profile_template_moid}"
                }
        else:
            self.intersight_api_body["SrcTemplate"] = None
        # POST the API body to Intersight
        self._post_intersight_object()


def ucs_server_profile_maker(
    intersight_api_key_id,
    intersight_api_key,
    ucs_server_profile_name,
    uuid_pool_name="",
    uuid_assignment_type="Pool",
    uuid_static_address="",
    ucs_server_profile_template_name_for_attachment="",
    overwrite_conflicting_ucs_server_profile_template_attachments=False,
    ucs_server_type="FI-Attached",
    ucs_server_profile_description="",
    ucs_server_profile_organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a UCS Server Profile on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_server_profile_name (str):
            The name of the UCS Server Profile to be created.
        uuid_pool_name (str):
            The name of the pre-existing UUID Pool to be used by the UCS Server
            Profile if the UUID assignment type has been set to "Pool". The
            default value is an empty string ("").
        uuid_assignment_type (str):
            Optional; The UUID assignment type. The accepted values are "Pool",
            "Static", and "None". The default value is "Pool".
        uuid_static_address (str):
            Optional; The UUID static address to be used if the UUID
            assignment type has been set to "Static". The default value is an
            empty string ("").
        ucs_server_profile_template_name_for_attachment (str):
            Optional; The name of the UCS Server Profile Template that the UCS
            Server Profile should be attached to. If attached to a UCS Server
            Profile Template, the UCS Server Profile will inherit settings from
            the UCS Server Profile Template. The default value is an empty
            string ("").
        overwrite_conflicting_ucs_server_profile_template_attachments (bool):
            Optional; In the case of pre-exiting UCS Server Profiles, this
            option allows the automatic overwrite of any previously attached
            UCS Server Profile Templates that conflict with the newly provided
            UCS Server Profile Template in the separate 
            ucs_server_profile_template_name_for_attachment argument. Setting
            to True will enable the automatic overwrite and provide for
            potentially faster deployments. The default value is False.
        ucs_server_type (str):
            Optional; The desired UCS Server type (Target Platform) of the UCS
            Server Profile. The accepted values are "FI-Attached" or
            "Standalone". IMM (Intersight Managed Mode) environments should use
            "FI-Attached". The default value is "FI-Attached".
        ucs_server_profile_description (str):
            Optional; The description of the UCS Server Profile to be created.
            The default value is an empty string ("").
        ucs_server_profile_organization (str):
            Optional; The Intersight account organization of the UCS Server
            Profile. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            profile. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool, policy, or profile on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create UCS Server Profile object in Intersight
    builder(
        UcsServerProfile(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            ucs_server_profile_name=ucs_server_profile_name,
            ucs_server_profile_description=ucs_server_profile_description,
            ucs_server_profile_organization=ucs_server_profile_organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_type=ucs_server_type,
            uuid_assignment_type=uuid_assignment_type,
            uuid_pool_name=uuid_pool_name,
            uuid_static_address=uuid_static_address,
            ucs_server_profile_template_name_for_attachment=ucs_server_profile_template_name_for_attachment,
            overwrite_conflicting_ucs_server_profile_template_attachments=overwrite_conflicting_ucs_server_profile_template_attachments
            ))


# Establish function to assign Server profile
def assign_and_deploy_ucs_server_profile(
    intersight_api_key_id,
    intersight_api_key,
    ucs_server_profile_name,
    resource_pool_name="",
    ucs_server_assignment_identifier="",
    ucs_server_form_factor="Blade",
    ucs_server_type="FI-Attached",
    assign_ucs_server_profile=True,
    deploy_ucs_server_profile=False,
    deployment_start_delay=5,
    ucs_server_profile_organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    preconfigured_api_client=None
    ):
    """This is a function to assign and deploy a UCS Server Profile.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_server_profile_name (str):
            The name of the UCS Server Profile to be assigned and/or deployed.
        resource_pool_name (str):
            Optional; The name of the Resource Pool that the provided UCS
            Server Profile should be assigned to. The default value is an
            empty string (""). An empty string or None can be provided if no
            Resource Pool is being set or the UCS Server Profile is
            already assigned. Setting an individual Server assignment with the
            ucs_server_assignment_identifier argument will take precedence over
            a Resource Pool assignment.
        ucs_server_assignment_identifier (str):
            Optional; The identifier of the Server that the provided UCS
            Server Profile should be assigned to. The default value is an
            empty string (""). An empty string or None can be provided if no
            Server identifier is being set or the UCS Server Profile is
            already assigned. Setting an individual Server assignment will take 
            precedence over a Resource Pool assignment.
        ucs_server_form_factor (str):
            Optional; The form factor of the Server that the provided UCS
            Server Profile should be assigned to. The accepted values are
            "Blade" or "Rack". The default value is "Blade".
        ucs_server_type (str):
            Optional; The UCS Server type (Target Platform) of the provided
            UCS Server Profile. The  accepted values are "FI-Attached" or
            "Standalone". IMM (Intersight Managed Mode) environments should use
            "FI-Attached". The default value is "FI-Attached". In order for a
            successful assignment, the management mode of the provided target
            Server should align with the UCS Server type.
        assign_ucs_server_profile (bool):
            Optional; This argument enables or disables the option to assign
            the provided UCS Server Profile to the provided Server.
            The default value is True.
        deploy_ucs_server_profile (bool):
            Optional; This argument enables or disables the option to deploy
            the provided UCS Server Profile to the provided Server or a
            previously assigned Server. The default value is False.
        deployment_start_delay (int):
            Optional; This argument sets the delay time between UCS Server
            Profile assignment and deployment. The delay allows for system time
            that may be needed for clearing previous configurations, etc.
            before a new UCS Server Profile may be deployed. The default value
            is 5 seconds.
        ucs_server_profile_organization (str):
            Optional; The Intersight account organization of the UCS Server
            Profile. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def post_intersight_server_profile_update(
        server_profile_moid,
        server_profile_api_body
        ):
        """This is a function to update an Intersight Server Profile by
        performing a POST through the Intersight API.

        Args:
            server_profile_moid (str):
                The Intersight MOID of the Server Profile to be updated
                on Intersight.
            server_profile_api_body (dict):
                The updated Server Profile Intersight API body.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/server/Profiles/{server_profile_moid}"
        try:
            api_client.call_api(resource_path=full_intersight_api_path,
                                method="POST",
                                body=server_profile_api_body,
                                auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                )
            print("The configuration of the UCS Server Profile has been "
                  "updated.")
            print("Any accompanying Intersight Requests will be initiated.")
            return "The POST method was successful."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("Unable to update the UCS Server Profile.")
            print("The Intersight API resource path for the UCS Server "
                  f"Profile is '{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."
    
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Get UCS Server Profile MOID
    ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                               intersight_api_key=None,
                                                               object_name=ucs_server_profile_name,
                                                               intersight_api_path="server/Profiles?$top=1000",
                                                               object_type="UCS Server Profile",
                                                               organization=ucs_server_profile_organization,
                                                               preconfigured_api_client=api_client
                                                               )
    # Get UCS Server Profile object dictionary attributes
    ucs_server_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                             intersight_api_key=None,
                                                             intersight_api_path="server/Profiles",
                                                             object_moid=ucs_server_profile_moid,
                                                             object_type="UCS Server Profile",
                                                             preconfigured_api_client=api_client
                                                             )
    # Assign UCS Server Profile
    if assign_ucs_server_profile:
        print("\nAssigning the UCS Server Profile named "
              f"{ucs_server_profile_name}...")
        ucs_server_profile_assignment_api_body = {}
        # If a Server Identifier has been provided, retrieve the targeted Server and assign to the UCS Server Profile
        if ucs_server_assignment_identifier:
            print("The provided Server identifier for assignment is "
                  f"'{ucs_server_assignment_identifier}'.")
            provided_server_identifiers = string_to_list_maker(ucs_server_assignment_identifier)
            # Determine Server Form Factor
            if ucs_server_form_factor == "Blade":
                provided_ucs_server_form_factor = "Blades"
                provided_ucs_server_object_type = "Blade Server"
            elif ucs_server_form_factor == "Rack":
                provided_ucs_server_form_factor = "RackUnits"
                provided_ucs_server_object_type = "Rack Server"
            else:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the assignment settings "
                      "for the UCS Server Profile named "
                      f"{ucs_server_profile_name}, there was an issue with the "
                      "value provided for the Server Form Factor setting.")
                print(f"The value provided was {ucs_server_form_factor}.")
                print("To proceed, the value provided for the Server Form "
                      "Factor setting should be updated to an accepted string "
                      "format.")
                print("The accepted values are 'Blade' or 'Rack'.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            # Determine UCS Server Type (Target Platform or Management Mode)
            if ucs_server_type == "FI-Attached":
                provided_ucs_server_type = "FI-Attached"
                provided_ucs_server_management_mode = "Intersight"
            elif ucs_server_type == "Standalone":
                provided_ucs_server_type = "Standalone"
                provided_ucs_server_management_mode = "IntersightStandalone"
            else:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the assignment settings "
                      "for the UCS Server Profile named "
                      f"{ucs_server_profile_name}, there was an issue with the "
                      "value provided for the UCS Server Type setting.")
                print(f"The value provided was {ucs_server_type}.")
                print("To proceed, the value provided for the UCS "
                      "Server Type setting should be updated to an accepted string "
                      "format.")
                print("The accepted values are 'FI-Attached' or 'Standalone'.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            # Find provided Server
            retrieved_intersight_servers = get_intersight_objects(
                intersight_api_key_id=None,
                intersight_api_key=None,
                intersight_api_path=f"compute/{provided_ucs_server_form_factor}?$top=1000&$filter=ManagementMode%20eq%20%27{provided_ucs_server_management_mode}%27",
                object_type=f"{provided_ucs_server_object_type}",
                preconfigured_api_client=api_client
                )
            if retrieved_intersight_servers.get("Results"):
                matching_intersight_server = None
                for intersight_server in retrieved_intersight_servers.get("Results"):
                    server_serial = intersight_server.get("Serial", "")
                    server_name = intersight_server.get("Name", "")
                    server_model = intersight_server.get("Model", "")
                    server_user_label = intersight_server.get("UserLabel", "")
                    for server_identifier in provided_server_identifiers:
                        if server_identifier in [server_serial,
                                                 server_name,
                                                 server_model,
                                                 server_user_label
                                                 ]:
                            matching_intersight_server = intersight_server
                            break
                    if matching_intersight_server:
                        break
                else:
                    print("\nA configuration error has occurred!\n")
                    print("There was an issue assigning the UCS Server Profile to "
                          f"a {provided_ucs_server_object_type} in Intersight.")
                    print(f"A {provided_ucs_server_object_type} with the provided "
                          f"identifier of '{ucs_server_assignment_identifier}' was "
                          "not found.")
                    print("Please check the Intersight Account named "
                          f"{intersight_account_name}.")
                    print("Verify through the API or GUI that the needed "
                          f"{provided_ucs_server_object_type} and matching "
                          "identifier are present.")
                    print("If any associated Intersight Target is missing, such as "
                          "an Intersight Managed Domain through an attached Fabric "
                          "Interconnect pair, claiming it first may be required.")
                    print(f"Once the issue has been resolved, re-attempt "
                          "execution.\n")
                    sys.exit(0)
            else:
                print("\nA configuration error has occurred!\n")
                print("There was an issue assigning the UCS Server Profile to a "
                      f"{provided_ucs_server_object_type} in Intersight.")
                print(f"The {provided_ucs_server_object_type} with the provided "
                      f"identifier of '{ucs_server_assignment_identifier}' was not "
                      "found.")
                print(f"No {provided_ucs_server_object_type}s that are compatible "
                      "with the UCS Server Profile could be found in the "
                      f"Intersight account named {intersight_account_name}.")
                print(f"Compatible {provided_ucs_server_object_type}s need to be "
                      f"{provided_ucs_server_type}.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      f"{provided_ucs_server_object_type} and matching "
                      "identifier are present.")
                print("If any associated Intersight Target is missing, such as an "
                      "Intersight Managed Domain through an attached Fabric "
                      "Interconnect pair, claiming it first may be required.")
                print("Once the issue has been resolved, re-attempt execution.\n")
                sys.exit(0)
            # Log name of found matching Server
            matching_intersight_server_name = matching_intersight_server.get("Name")
            print(f"A matching {provided_ucs_server_object_type} named "
                  f"{matching_intersight_server_name} has been found for "
                  "assignment.")
            # Assign the UCS Server Profile to the provided Server
            print("Assigning the UCS Server Profile to the provided "
                  f"{provided_ucs_server_object_type}...")
            matching_intersight_server_moid = matching_intersight_server.get("Moid")
            ucs_server_profile_assignment_api_body["ServerAssignmentMode"] = "Static"
            ucs_server_profile_assignment_api_body = {
                "AssignedServer": {
                    "ClassId": "mo.MoRef",
                    "Moid": matching_intersight_server_moid,
                    "ObjectType": "compute.Blade",
                    "link": f"https://www.intersight.com/api/v1/compute/Blades/{matching_intersight_server_moid}"
                    }
                }
            post_intersight_server_profile_update(
                server_profile_moid=ucs_server_profile_moid,
                server_profile_api_body=ucs_server_profile_assignment_api_body
                )
        # # If a Resource Pool name has been provided, retrieve the targeted Resource Pool and assign to the UCS Server Profile
        elif resource_pool_name:
            print("The provided Resource Pool name for assignment is "
                  f"'{resource_pool_name}'.")
            print("Assigning the UCS Server Profile to the provided Resource Pool...")
            resource_pool_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                  intersight_api_key=None,
                                                                  object_name=resource_pool_name,
                                                                  intersight_api_path="resourcepool/Pools?$top=1000",
                                                                  object_type="Resource Pool",
                                                                  preconfigured_api_client=preconfigured_api_client
                                                                  )
            ucs_server_profile_assignment_api_body["ServerAssignmentMode"] = "Pool"
            ucs_server_profile_assignment_api_body["ServerPool"] = {
                "Moid": resource_pool_moid
                }            
            post_intersight_server_profile_update(
                server_profile_moid=ucs_server_profile_moid,
                server_profile_api_body=ucs_server_profile_assignment_api_body
                )
        # Check for provided Server Identifier or Resource Pool
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the UCS Server "
                  "Profile in Intersight.")
            print("In order to assign the provided UCS Server Profile, a "
                  "Server identifier or Resource Pool must also be provided.")
            print("Please check the value provided for the "
                  "Server identifier or Resource Pool.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)            
        
    # Deploy UCS Server Profile
    if deploy_ucs_server_profile:
        print("\nDeploying the UCS Server Profile named "
              f"{ucs_server_profile_name}...")
        if deployment_start_delay:
            print(f"A deployment start delay of {deployment_start_delay} "
                  "seconds has been set, please wait...\n")
            delay_timer(deployment_start_delay)
            print("\n")
        # Deploy the UCS Server Profile
        print("Deploying the UCS Server Profile...")
        ucs_server_profile_deployment_api_body = {
            "Action": "Deploy"
            }
        post_intersight_server_profile_update(
            server_profile_moid=ucs_server_profile_moid,
            server_profile_api_body=ucs_server_profile_deployment_api_body
            )


# Establish classes and functions to make UCS Server Profile Template
class UcsServerProfileTemplate:
    """This class is used to configure a UCS Server Profile Template in Intersight.
    """
    object_type = "UCS Server Profile Template"
    intersight_api_path = "server/ProfileTemplates"
    object_variable_value_maps = [
        {"VariableName": "ucs_server_type",
         "Description": "UCS Server Type (Target Platform)",
         "AttributeName": "TargetPlatform",
         "Values": [
             {"FrontEndValue": "FI-Attached",
              "BackEndValue": "FIAttached"
              },
             {"FrontEndValue": "Standalone",
              "BackEndValue": "Standalone"
              }
             ]
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 ucs_server_profile_template_name,
                 ucs_server_profile_template_description="",
                 ucs_server_profile_template_organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_type="FI-Attached",
                 uuid_pool_name=""
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.ucs_server_profile_template_name = ucs_server_profile_template_name
        self.ucs_server_profile_template_description = ucs_server_profile_template_description
        self.ucs_server_profile_template_organization = ucs_server_profile_template_organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.ucs_server_type = ucs_server_type
        self.uuid_pool_name = uuid_pool_name
        self.intersight_api_body = {
            "Name": self.ucs_server_profile_template_name,
            "Description": self.ucs_server_profile_template_description,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.ucs_server_profile_template_name}', "
            f"'{self.ucs_server_profile_template_description}', "
            f"'{self.ucs_server_profile_template_organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_type}', "
            f"'{self.uuid_pool_name}')"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.ucs_server_profile_template_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        ucs_server_profile_template_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                         intersight_api_key=None,
                                                                                         object_name=self.ucs_server_profile_template_organization,
                                                                                         intersight_api_path="organization/Organizations?$top=1000",
                                                                                         object_type="Organization",
                                                                                         preconfigured_api_client=self.api_client
                                                                                         )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": ucs_server_profile_template_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.
        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.pool_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.ucs_server_profile_template_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with any provided UUID Pool
        if self.uuid_pool_name and self.ucs_server_type == "FI-Attached":
            self.intersight_api_body["UuidAddressType"] = "POOL"
            uuid_pool_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.uuid_pool_name,
                intersight_api_path="uuidpool/Pools?$top=1000",
                object_type="UUID Pool",
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["UuidPool"] = {
                "Moid": uuid_pool_moid
                }
        else:
            self.intersight_api_body["UuidAddressType"] = "NONE"
            self.intersight_api_body["UuidPool"] = None
        # POST the API body to Intersight
        self._post_intersight_object()


def ucs_server_profile_template_maker(
    intersight_api_key_id,
    intersight_api_key,
    ucs_server_profile_template_name,
    uuid_pool_name="",
    ucs_server_type="FI-Attached",
    ucs_server_profile_template_description="",
    ucs_server_profile_template_organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a UCS Server Profile Template on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_server_profile_template_name (str):
            The name of the UCS Server Profile Template to be created.
        uuid_pool_name (str):
            The name of the pre-existing UUID Pool to be used by the UCS Server
            Profile Template. The default value is an empty string ("").
        ucs_server_type (str):
            Optional; The desired UCS Server type (Target Platform) of the UCS
            Server Profile Template. The accepted values are "FI-Attached" or
            "Standalone". IMM (Intersight Managed Mode) environments should use
            "FI-Attached". The default value is "FI-Attached".
        ucs_server_profile_template_description (str):
            Optional; The description of the UCS Server Profile Template to be
            created. The default value is an empty string ("").
        ucs_server_profile_template_organization (str):
            Optional; The Intersight account organization of the UCS Server
            Profile Template. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            profile template. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool, policy, profile, or profile template on Cisco
        Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create UCS Server Profile Template object in Intersight
    builder(
        UcsServerProfileTemplate(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            ucs_server_profile_template_name=ucs_server_profile_template_name,
            ucs_server_profile_template_description=ucs_server_profile_template_description,
            ucs_server_profile_template_organization=ucs_server_profile_template_organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_type=ucs_server_type,
            uuid_pool_name=uuid_pool_name
            ))


# Establish base classes for configuring IDs, Interfaces, and Objects in Intersight
class IdConfigurator:
    """This class serves as a base class for configuring the IDs of objects in
    Intersight policies. Examples of the objects that would use these IDs are
    ports, VLANs, VSANs, vNICs, vHBAs, and drives.
    """
    object_type = "ID Configurator"
    attributes_that_require_special_handling = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        if id_list is None:
            self.id_list = []
        else:
            self.id_list = id_list
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def enumerated_id_range_retriever(self,
                                      id_dictionary,
                                      id_key
                                      ):
        """This function captures provided ID ranges for enumeration and
        returns the enumerated list.

        Args:
            id_dictionary (dict):
                The dictionary containing the ID or range of IDs to be
                enumerated.
            id_key (str):
                The key name of the ID to be enumerated.

       Returns:
            A list of enumerated integers for the provided IDs in a format
            consumable by the Intersight API.
            
        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the ID type is inaccessible from the
                ID dictionary. The key may be missing or misspelled.       
        """
        # Verify ID range has been configured in provided ID dictionary
        try:
            provided_id_range = id_dictionary[id_key]
        except KeyError:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} "
                  f"settings for the {self.policy_type} named "
                  f"{self.policy_name}, there was an issue accessing the range "
                  f"of IDs to be configured.")
            print(f"Please verify a key named '{id_key}' exists in the "
                  f"ID list variable for the {self.object_type} "
                  "settings.\n")
            print("Please review and resolve any error messages, then "
                  "re-attempt execution.\n")
            print("Exception Message: ")
            traceback.print_exc()
            sys.exit(0)
        return integer_number_list_maker(provided_id_range)

    def attribute_handler(self,
                          staged_intersight_api_body
                          ):
        """
        This function is used to retrieve the MOIDs for provided attributes
        that require them for configuration through the Intersight API.

        Args:
            staged_intersight_api_body (dict):
                The staged Intersight API body dictionary being prepared for
                configuration on Intersight.

        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the name of a required attribute is
                inaccessible from the ID dictionary. The key may be missing or
                misspelled.
        """
        if self.attributes_that_require_special_handling:
            for id_attribute in self.attributes_that_require_special_handling:
                # If provided, add default attribute option to staged Intersight API body
                if id_attribute.get("DefaultOption"):
                    id_attribute_default_option = getattr(self,
                                                          id_attribute.get("DefaultOption")
                                                          )
                    if id_attribute_default_option:
                        if id_attribute["Name"] not in staged_intersight_api_body:
                            staged_intersight_api_body[id_attribute["Name"]] = id_attribute_default_option
                # Verify mandatory attributes are present in the staged Intersight API body
                if id_attribute.get("Mandatory"):
                    try:
                        verify_id_attribute_presence = staged_intersight_api_body[id_attribute["Name"]]
                    except KeyError:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{self.object_type} settings for the "
                              f"{self.policy_type} named {self.policy_name}, "
                              f"there was an issue accessing the value for "
                              f"the {id_attribute['Type']}.")
                        print("Please verify the key named "
                              f"'{id_attribute['Name']}' exists in the "
                              f"ID list variable for the {self.object_type} "
                              "settings.\n")
                        print("Please review and resolve any error messages, "
                              f"then re-attempt execution.\n")
                        print("Exception Message: ")
                        traceback.print_exc()
                        sys.exit(0)
                    # Retrieve MOID if required
                    if id_attribute.get("MoidRequired"):
                        id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                             intersight_api_key=None,
                                                                             object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                             intersight_api_path=f'{id_attribute["IntersightAPIPath"]}?$top=1000',
                                                                             object_type=id_attribute["Type"],
                                                                             organization=self.organization,
                                                                             preconfigured_api_client=self.api_client
                                                                             )
                        staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}
                else:
                    # Retrieve MOID if required for optional attributes
                    if id_attribute.get("MoidRequired"):
                        if staged_intersight_api_body.get(id_attribute["Name"]):
                            id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                 intersight_api_key=None,
                                                                                 object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                                 intersight_api_path=f'{id_attribute["IntersightAPIPath"]}?$top=1000',
                                                                                 object_type=id_attribute["Type"],
                                                                                 organization=self.organization,
                                                                                 preconfigured_api_client=self.api_client
                                                                                 )
                            staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}


class Interface(IdConfigurator):
    """This class serves as a base class for configuring interfaces in
    Intersight policies.
    """
    object_type = "Interface"
    id_type = "Interface"

    def _interface_object_attribute_map_handler(self,
                                                staged_interface_dictionary,
                                                interface_object_attribute_map_dictionary
                                                ):
        """This is a function to handle setting of interface object attributes
        which have mismatched Front-End and Back-End labeling, set provided
        default values, retrieve any required MOIDs, and set/verify Parent
        attributes.
        
        Args:
            staged_interface_dictionary (dict):
                An interface dictionary extracted from the provided
                interface list being prepared and staged for posting to
                Intersight.
            interface_object_attribute_map_dictionary (dict):
                A dictionary containing attribute data, including front-end
                (GUI) to back-end (API) mapped values.
        """
        # Check for attribute front-end name key in the dictionary
        if interface_object_attribute_map_dictionary["FrontEndName"] in staged_interface_dictionary:
            # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
            if interface_object_attribute_map_dictionary["BackEndName"] not in staged_interface_dictionary:
                staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = staged_interface_dictionary.get(interface_object_attribute_map_dictionary["FrontEndName"])
            # Remove the front-end name key from the dictionary
            staged_interface_dictionary.pop(interface_object_attribute_map_dictionary["FrontEndName"])
        # Check if current attribute has a provided default option, if so, add default attribute option to staged dictionary (staged Intersight API body)
        if interface_object_attribute_map_dictionary.get("DefaultOption"):
            interface_object_attribute_default_option = getattr(self,
                                                                interface_object_attribute_map_dictionary.get("DefaultOption")
                                                                )
            if interface_object_attribute_default_option:
                if interface_object_attribute_map_dictionary["BackEndName"] not in staged_interface_dictionary:
                    staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = interface_object_attribute_default_option
        # Establish default automatic insertion status of current attribute
        automatic_insertion_of_attribute_value_performed = False
        # Check if current attribute is mandatory and verify presence in the staged dictionary (staged Intersight API body)
        if interface_object_attribute_map_dictionary.get("Mandatory"):
            if not any(
                attribute_name_key in
                staged_interface_dictionary for
                attribute_name_key in
                (interface_object_attribute_map_dictionary["FrontEndName"],
                 interface_object_attribute_map_dictionary["BackEndName"],
                 interface_object_attribute_map_dictionary["ParentAttributeName"]
                 )
                ):
                if interface_object_attribute_map_dictionary.get("AutomaticInsertion"):
                    staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = interface_object_attribute_map_dictionary.get("AutomaticInsertionValue")
                    automatic_insertion_of_attribute_value_performed = True
                else:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{interface_object_attribute_map_dictionary['Description']}.")
                    print("Please verify the following key exists in the "
                          "appropriate dictionary of the "
                          "associated interface list variable, then "
                          "re-attempt execution:\n")
                    if interface_object_attribute_map_dictionary['FrontEndName']:
                        print(f"'{interface_object_attribute_map_dictionary['FrontEndName']}'\n")
                    else:
                        print(f"'{interface_object_attribute_map_dictionary['BackEndName']}'\n")
                    sys.exit(0)
        # Check for front-end to back-end value mapping
        if interface_object_attribute_map_dictionary.get("FronttoBackEndValueMaps"):
            if (
                interface_object_attribute_map_dictionary["BackEndName"] in
                staged_interface_dictionary and
                not automatic_insertion_of_attribute_value_performed
                ):
                # Retrieve the provided attribute value
                provided_attribute_value = staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"])
                # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                try:
                    provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{interface_object_attribute_map_dictionary['Description']}.")
                    print("The value provided was "
                          f"{provided_attribute_value}.")
                    print("Please verify that the value has been provided "
                          "in an accepted string format.")
                    print("Please review and resolve any error messages, "
                          "then re-attempt execution.\n")
                    sys.exit(0)
                # Create list of known and mapped front-end to back-end values
                front_to_backend_value_maps_key_list = list(interface_object_attribute_map_dictionary["FronttoBackEndValueMaps"])
                # Replace known and reformatted front-end value with known and mapped back-end value
                if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                    provided_attribute_value_mapped = interface_object_attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                    staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                else:
                    print("\nWARNING: An unknown "
                          f"{interface_object_attribute_map_dictionary['Description']} "
                          f"value of '{provided_attribute_value}' has been "
                          f"provided for the {self.object_type} settings!")
                    print("An attempt will be made to configure the "
                          "unknown "
                          f"{interface_object_attribute_map_dictionary['Description']} "
                          "value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{interface_object_attribute_map_dictionary['Description']}, "
                          "then re-attempt execution:\n")
                    print(*interface_object_attribute_map_dictionary["FixedFrontEndValues"],
                          sep=", "
                          )
        # Check if current attribute's MOID is required and retrieve if needed
        if interface_object_attribute_map_dictionary.get("MoidRequired"):
            if staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"]):
                interface_object_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                     intersight_api_key=None,
                                                                     object_name=staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]],
                                                                     intersight_api_path=f'{interface_object_attribute_map_dictionary["IntersightAPIPath"]}?$top=1000',
                                                                     object_type=interface_object_attribute_map_dictionary["Description"],
                                                                     organization=self.organization,
                                                                     preconfigured_api_client=self.api_client
                                                                     )
                staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = {"Moid": interface_object_attribute_moid}
        # Check if current attribute has a back-end Parent attribute and nest as needed
        if interface_object_attribute_map_dictionary.get("ParentAttributeName"):
            if (
                staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"])
                or
                staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"]) == 0
                ):
                if interface_object_attribute_map_dictionary.get("ParentAttributeName") not in staged_interface_dictionary:
                    staged_interface_dictionary[interface_object_attribute_map_dictionary.get("ParentAttributeName")] = {
                        interface_object_attribute_map_dictionary["BackEndName"]: staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"])
                        }
                else:
                    staged_interface_dictionary[interface_object_attribute_map_dictionary.get("ParentAttributeName")].update(
                        {interface_object_attribute_map_dictionary["BackEndName"]: staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"])
                         }
                        )
                staged_interface_dictionary.pop(interface_object_attribute_map_dictionary["BackEndName"], None)


class IntersightObject(IdConfigurator):
    """This class serves as a base class for configuring Intersight Objects in
    Intersight policies.
    """
    object_type = "Intersight Object"
    id_type = "IntersightObject"

    def _intersight_object_attribute_map_handler(self,
                                                 staged_intersight_object_dictionary,
                                                 intersight_object_attribute_map_dictionary,
                                                 object_type=None
                                                 ):
        """This is a function to handle setting of Intersight Object attributes
        which have mismatched Front-End and Back-End labeling, set provided
        default values, retrieve any required MOIDs, and set/verify Parent
        attributes.
        
        Args:
            staged_intersight_object_dictionary (dict):
                An Intersight Object dictionary extracted from the provided
                Intersight Object list being prepared and staged for posting to
                Intersight.
            intersight_object_attribute_map_dictionary (dict):
                A dictionary containing attribute data, including front-end
                (GUI) to back-end (API) mapped values.
            object_type (str):
                Optional; The type of Intersight object. The default value is
                None.
        """
        if object_type is None:
            object_type = self.object_type
        # Check for attribute front-end name key in the dictionary
        if intersight_object_attribute_map_dictionary["FrontEndName"] in staged_intersight_object_dictionary:
            # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
            if intersight_object_attribute_map_dictionary["BackEndName"] not in staged_intersight_object_dictionary:
                staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["FrontEndName"])
            # Remove the front-end name key from the dictionary
            staged_intersight_object_dictionary.pop(intersight_object_attribute_map_dictionary["FrontEndName"])
        # Check if current attribute has a provided default option, if so, add default attribute option to staged dictionary (staged Intersight API body)
        if intersight_object_attribute_map_dictionary.get("DefaultOption"):
            intersight_object_attribute_default_option = getattr(self,
                                                                 intersight_object_attribute_map_dictionary.get("DefaultOption")
                                                                 )
            if intersight_object_attribute_default_option:
                if intersight_object_attribute_map_dictionary["BackEndName"] not in staged_intersight_object_dictionary:
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = intersight_object_attribute_default_option
        # Establish default automatic insertion status of current attribute
        automatic_insertion_of_attribute_value_performed = False
        # Check if current attribute is mandatory and verify presence in the staged dictionary (staged Intersight API body)
        if intersight_object_attribute_map_dictionary.get("Mandatory"):
            if not any(
                attribute_name_key in
                staged_intersight_object_dictionary for
                attribute_name_key in
                (intersight_object_attribute_map_dictionary["FrontEndName"],
                 intersight_object_attribute_map_dictionary["BackEndName"],
                 intersight_object_attribute_map_dictionary["ParentAttributeName"]
                 )
                ):
                if intersight_object_attribute_map_dictionary.get("AutomaticInsertion"):
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = intersight_object_attribute_map_dictionary.get("AutomaticInsertionValue")
                    automatic_insertion_of_attribute_value_performed = True
                else:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{intersight_object_attribute_map_dictionary['Description']}.")
                    print("Please verify the following key exists in the "
                          "appropriate dictionary of the "
                          f"associated {object_type} list variable, then "
                          "re-attempt execution:\n")
                    if intersight_object_attribute_map_dictionary['FrontEndName']:
                        print(f"'{intersight_object_attribute_map_dictionary['FrontEndName']}'\n")
                    else:
                        print(f"'{intersight_object_attribute_map_dictionary['BackEndName']}'\n")
                    sys.exit(0)
        # Check for front-end to back-end value mapping
        if intersight_object_attribute_map_dictionary.get("FronttoBackEndValueMaps"):
            if (
                intersight_object_attribute_map_dictionary["BackEndName"] in
                staged_intersight_object_dictionary and
                not automatic_insertion_of_attribute_value_performed
                ):
                # Retrieve the provided attribute value
                provided_attribute_value = staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"])
                # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                try:
                    provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{intersight_object_attribute_map_dictionary['Description']}.")
                    print("The value provided was "
                          f"{provided_attribute_value}.")
                    print("Please verify that the value has been provided "
                          "in an accepted string format.")
                    print("Please review and resolve any error messages, "
                          "then re-attempt execution.\n")
                    sys.exit(0)
                # Create list of known and mapped front-end to back-end values
                front_to_backend_value_maps_key_list = list(intersight_object_attribute_map_dictionary["FronttoBackEndValueMaps"])
                # Replace known and reformatted front-end value with known and mapped back-end value
                if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                    provided_attribute_value_mapped = intersight_object_attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                else:
                    print("\nWARNING: An unknown "
                          f"{intersight_object_attribute_map_dictionary['Description']} "
                          f"value of '{provided_attribute_value}' has been "
                          f"provided for the {object_type} settings!")
                    print("An attempt will be made to configure the "
                          "unknown "
                          f"{intersight_object_attribute_map_dictionary['Description']} "
                          "value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{intersight_object_attribute_map_dictionary['Description']}, "
                          "then re-attempt execution:\n")
                    print(*intersight_object_attribute_map_dictionary["FixedFrontEndValues"],
                          sep=", "
                          )
        # Check if current attribute's MOID is required and retrieve if needed
        if intersight_object_attribute_map_dictionary.get("MoidRequired"):
            if staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"]):
                intersight_object_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]],
                                                                                    intersight_api_path=f'{intersight_object_attribute_map_dictionary["IntersightAPIPath"]}?$top=1000',
                                                                                    object_type=intersight_object_attribute_map_dictionary["Description"],
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = {"Moid": intersight_object_attribute_moid}
        # Check if current attribute has a back-end Parent attribute and nest as needed
        if intersight_object_attribute_map_dictionary.get("ParentAttributeName"):
            if (
                staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"])
                or
                staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"]) == 0
                ):
                if intersight_object_attribute_map_dictionary.get("ParentAttributeName") not in staged_intersight_object_dictionary:
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary.get("ParentAttributeName")] = {
                        intersight_object_attribute_map_dictionary["BackEndName"]: staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"])
                        }
                else:
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary.get("ParentAttributeName")].update(
                        {intersight_object_attribute_map_dictionary["BackEndName"]: staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"])
                         }
                        )
                staged_intersight_object_dictionary.pop(intersight_object_attribute_map_dictionary["BackEndName"], None)


# Establish classes and functions to make BIOS Policy
class BiosPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a BIOS Policy in Intersight.
    """
    object_type = "BIOS Policy"
    intersight_api_path = "bios/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 bios_settings=None,
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        if bios_settings is None:
            self.bios_settings = {}
        else:
            self.bios_settings = bios_settings

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.bios_settings})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with the provided BIOS settings
        try:
            self.intersight_api_body.update(self.bios_settings)
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the format of "
                  "the value provided for the BIOS settings.")
            print(f"The value provided was {self.bios_settings}.")
            print("To proceed, the value provided for the BIOS settings "
                  "should be in dictionary format.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


def bios_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    bios_settings=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a BIOS Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        bios_settings (dict):
            Optional; A dictionary of BIOS settings to be configured in the
            BIOS Policy. An example entry is: 
            {"CpuPerformance": "enterprise",
             "CpuEnergyPerformance": "balanced-performance",
             }.
            Unspecified settings will be left at platform defaults.
            More BIOS settings can be found at
            https://intersight.com/apidocs/apirefs/bios/Policies/model/.
            The default value is None.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create BIOS Policy object in Intersight
    builder(
        BiosPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            bios_settings=bios_settings
            ))


# Establish classes and functions to make Boot Order Policy
class BootOrderPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Boot Order Policy in Intersight.
    """
    object_type = "Boot Order Policy"
    intersight_api_path = "boot/PrecisionPolicies"
    boot_device_type_maps = {
        "FrontEndName": "Type",
        "BackEndName": "ObjectType",
        "Description": "Boot Device",
        "FixedFrontEndValues": {
            "boot": [
                "iSCSI Boot",
                "Local CDD",
                "Local Disk",
                "NVMe",
                "PCH Storage",
                "PXE Boot",
                "SAN Boot",
                "SD Card",
                "UEFI Shell",
                "USB",
                "Virtual Media"
                ]
            },
        "NestedFronttoBackEndValueMaps": {
            "boot": {
                "iscsiboot": "boot.Iscsi",
                "localcdd": "boot.LocalCdd",
                "localdisk": "boot.LocalDisk",
                "nvme": "boot.Nvme",
                "pchstorage": "boot.PchStorage",
                "pxeboot": "boot.Pxe",
                "sanboot": "boot.San",
                "sdcard": "boot.SdCard",
                "uefishell": "boot.UefiShell",
                "usb": "boot.Usb",
                "virtualmedia": "boot.VirtualMedia"
                }
            }
        }
    boot_device_attribute_maps = [
        {"FrontEndName": "Enable",
         "BackEndName": "Enabled",
         "Description": "Boot Device Enablement",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": True,
         "AutomaticInsertionValue": True
         },
        {"FrontEndName": "Device Name",
         "BackEndName": "Name",
         "Description": "Boot Device Name",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": None,
         "BackEndName": "Slot",
         "Description": "Boot Device Slot",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Sub-Type",
         "BackEndName": "Subtype",
         "Description": "Boot Device Sub-Type",
         "FixedFrontEndValues": {
             "boot.VirtualMedia": [
                 "None",
                 "CIMC MAPPED DVD",
                 "CIMC MAPPED HDD",
                 "KVM MAPPED DVD",
                 "KVM MAPPED HDD",
                 "KVM MAPPED FDD"
                 ],
             "boot.SdCard": [
                 "None",
                 "FlexUtil",
                 "FlexFlash",
                 "SdCard"
                 ],
             "boot.Usb": [
                 "None",
                 "CD",
                 "FDD",
                 "HDD"
                 ]
             },
         "NestedFronttoBackEndValueMaps": {
             "boot.VirtualMedia": {
                 "none": "None",
                 "cimcmappeddvd": "cimc-mapped-dvd",
                 "cimcmappedhdd": "cimc-mapped-hdd",
                 "kvmmappeddvd": "kvm-mapped-dvd",
                 "kvmmappedhdd": "kvm-mapped-hdd",
                 "kvmmappedfdd": "kvm-mapped-fdd"
                 },
             "boot.SdCard": {
                 "none": "None",
                 "flexutil": "flex-util",
                 "flexflash": "flex-flash",
                 "sdcard": "SDCARD"
                 },
             "boot.Usb": {
                 "none": "None",
                 "cd": "usb-cd",
                 "fdd": "usb-fdd",
                 "hdd": "usb-hdd"
                 }
             },
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "IP Type",
         "BackEndName": "IpType",
         "Description": "Boot Device IP Type",
         "FixedFrontEndValues": {
             "boot.Pxe": [
                 "None",
                 "IPv4",
                 "IPv6"
                 ]
             },
         "NestedFronttoBackEndValueMaps": {
             "boot.Pxe": {
                 "none": "None",
                 "ipv4": "IPv4",
                 "ipv6": "IPv6"
                 }
             },
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Interface Name",
         "BackEndName": "InterfaceName",
         "Description": "Boot Device Interface Name",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "MAC Address",
         "BackEndName": "MacAddress",
         "Description": "Boot Device MAC Address",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]
    boot_device_bootloader_attribute_maps = [
        {"FrontEndName": "Bootloader Name",
         "BackEndName": "Name",
         "Description": "Boot Device Bootloader Name",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Bootloader Description",
         "BackEndName": "Description",
         "Description": "Boot Device Bootloader Description",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Bootloader Path",
         "BackEndName": "Path",
         "Description": "Boot Device Bootloader Path",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 boot_devices_list=None,
                 configured_boot_mode="Legacy",
                 enable_uefi_secure_boot=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        if boot_devices_list is None:
            self.boot_devices_list = []
        else:
            self.boot_devices_list = boot_devices_list
        self.configured_boot_mode = configured_boot_mode
        self.enable_uefi_secure_boot = enable_uefi_secure_boot
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "ConfiguredBootMode": self.configured_boot_mode,
            "EnforceUefiSecureBoot": self.enable_uefi_secure_boot
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.boot_devices_list}, "
            f"'{self.configured_boot_mode}', "
            f"{self.enable_uefi_secure_boot})"
            )

    def _update_api_body_boot_device_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for boot devices in the Intersight Boot Policy.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        def boot_device_type_map_handler(provided_boot_device_dictionary):
            """This function captures the provided boot device type and converts it
            for use with the Intersight API.
            """
            try:
                provided_boot_device_type = provided_boot_device_dictionary["Type"]
            except KeyError:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} "
                      f"named {self.policy_name}, there was an issue "
                      "accessing a boot device type.")
                print("Please verify a key named 'Type' exists in the "
                      "dictionary entries of the 'boot_devices_list' variable.\n")
                print("Please review and resolve any error messages, then "
                      "re-attempt execution.\n")
                print("Exception Message: ")
                traceback.print_exc()
                sys.exit(0)
            try:
                provided_boot_device_type_updated_for_fixed_value_mappings = "".join(provided_boot_device_type.lower().split())
            except Exception:
                print("\nA configuration error has occurred!\n")
                print("During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with a value "
                      "provided for a boot device type.")
                print("The value provided was "
                      f"{provided_boot_device_type}.")
                print("Please verify that the value has been provided "
                      "in an accepted string format.")
                print("Please review and resolve any error messages, "
                      "then re-attempt execution.\n")
                sys.exit(0)
            if provided_boot_device_type_updated_for_fixed_value_mappings:                
                boot_device_type_fixed_value_mappings_key_list = list(self.boot_device_type_maps["NestedFronttoBackEndValueMaps"]["boot"].keys())
                for boot_device_type_fixed_value_mappings_key in boot_device_type_fixed_value_mappings_key_list:
                    if boot_device_type_fixed_value_mappings_key == provided_boot_device_type_updated_for_fixed_value_mappings:
                        fixed_value_mappings_boot_device_type_converted = self.boot_device_type_maps["NestedFronttoBackEndValueMaps"]["boot"][boot_device_type_fixed_value_mappings_key]
                        return fixed_value_mappings_boot_device_type_converted
                else:
                    print(f"WARNING: An unknown boot device type named '{provided_boot_device_type}' has been provided!")
                    print(f"The {maker_type} will attempt to configure the unknown boot device.")
                    print(f"If there is an error, please use one of the following known boot devices for the 'Type' key and restart the {maker_type}:")
                    for bootdevice in self.boot_device_type_maps["FixedFrontEndValues"]["boot"]:
                        print(f"'{bootdevice}'")
                    try:
                        unknown_boot_device_type_conversion_split_list = re.split("\s|boot|-", provided_boot_device_type.lower())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with a value "
                              "provided for a boot device type.")
                        print("The value provided was "
                              f"{provided_boot_device_type}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    unknown_boot_device_type_conversion_pre_join_list = []
                    for provided_boot_device_type_term in unknown_boot_device_type_conversion_split_list:
                        unknown_boot_device_type_conversion_pre_join_list.append(provided_boot_device_type_term.title())
                    provided_boot_device_type_updated_for_unknown_value_mappings = "".join(unknown_boot_device_type_conversion_pre_join_list)
                    unknown_value_mappings_boot_device_type_converted = f"boot.{provided_boot_device_type_updated_for_unknown_value_mappings}"
                    return unknown_value_mappings_boot_device_type_converted
            else:
                print("\nA configuration error has occurred!\n")
                print("During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with a value "
                      "provided for a boot device type.")
                print("The value provided was "
                      f"{provided_boot_device_type}.")
                print("Please verify that the value is not empty and has been "
                      "provided in an accepted string format.")
                print("Please review and resolve any error messages, "
                      "then re-attempt execution.\n")
                sys.exit(0)            

        def boot_device_attribute_map_handler(boot_device_attribute_map_dictionary):
            """This is a function to handle boot device attributes with a
            mismatch in the Front-End Name and Back-End Name.

            Args:
                boot_device_attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if boot_device_attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_boot_device_dictionary for
                    attribute_name_key in
                    (boot_device_attribute_map_dictionary["FrontEndName"],
                     boot_device_attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if boot_device_attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_boot_device_dictionary[boot_device_attribute_map_dictionary["BackEndName"]] = boot_device_attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{boot_device_type_maps['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{boot_device_attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{boot_device_type_maps['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if boot_device_attribute_map_dictionary['FrontEndName']:
                            print(f"'{boot_device_attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{boot_device_attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if boot_device_attribute_map_dictionary["FrontEndName"] in staged_boot_device_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if boot_device_attribute_map_dictionary["BackEndName"] not in staged_boot_device_dictionary:
                    staged_boot_device_dictionary[boot_device_attribute_map_dictionary["BackEndName"]] = staged_boot_device_dictionary.get(boot_device_attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_boot_device_dictionary.pop(boot_device_attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if boot_device_attribute_map_dictionary.get("NestedFronttoBackEndValueMaps"):
                if boot_device_attribute_map_dictionary.get("NestedFronttoBackEndValueMaps").get(returned_boot_device_type_map):
                    if (
                        boot_device_attribute_map_dictionary["BackEndName"] in
                        staged_boot_device_dictionary and
                        not automatic_insertion_of_attribute_value_performed
                        ):
                        # Retrieve the provided attribute value
                        provided_attribute_value = staged_boot_device_dictionary.get(boot_device_attribute_map_dictionary["BackEndName"])
                        # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                        try:
                            provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                        except Exception:
                            print("\nA configuration error has occurred!\n")
                            print("During the configuration of the "
                                  f"{boot_device_type_maps['Description']} "
                                  f"settings for the {self.object_type} named "
                                  f"{self.policy_name}, there was an issue with "
                                  "the value for the "
                                  f"{boot_device_attribute_map_dictionary['Description']}.")
                            print("The value provided was "
                                  f"{provided_attribute_value}.")
                            print("Please verify that the value has been provided "
                                  "in an accepted string format.")
                            print("Please review and resolve any error messages, "
                                  "then re-attempt execution.\n")
                            sys.exit(0)
                        # Create list of known and mapped front-end to back-end values
                        front_to_backend_value_maps_key_list = list(boot_device_attribute_map_dictionary["NestedFronttoBackEndValueMaps"][returned_boot_device_type_map].keys())
                        # Replace known and reformatted front-end value with known and mapped back-end value
                        if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                            provided_attribute_value_mapped = boot_device_attribute_map_dictionary["NestedFronttoBackEndValueMaps"][returned_boot_device_type_map][provided_attribute_value_reformatted]
                            staged_boot_device_dictionary[boot_device_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                        else:
                            print("\nWARNING: An unknown "
                                  f"{boot_device_attribute_map_dictionary['Description']} "
                                  f"value of '{provided_attribute_value}' has been "
                                  "provided for the "
                                  f"{boot_device_type_maps['Description']} "
                                  "settings!")
                            print("An attempt will be made to configure the "
                                  "unknown "
                                  f"{boot_device_attribute_map_dictionary['Description']} "
                                  "value.")
                            print("If there is an error, please use one of the "
                                  "following known values for the "
                                  f"{boot_device_attribute_map_dictionary['Description']}, "
                                  "then re-attempt execution:\n")
                            print(*boot_device_attribute_map_dictionary["FixedFrontEndValues"][returned_boot_device_type_map],
                                  sep=", "
                                  )
        
        def boot_device_bootloader_attribute_map_handler(bootloader_attribute_map_dictionary):
            """This is a function to handle bootloader attribute values for applicable
            boot devices.
            """
            # Check for attribute front-end name key in the dictionary
            if staged_boot_device_dictionary.get(bootloader_attribute_map_dictionary["FrontEndName"]):
                # Add required 'Bootloader' key if not present in the staged boot device dictionary
                if not staged_boot_device_dictionary.get("Bootloader"):
                    staged_boot_device_dictionary["Bootloader"] = {}
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                staged_boot_device_dictionary["BootLoader"][bootloader_attribute_map_dictionary["BackEndName"]] = staged_boot_device_dictionary.get(bootloader_attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_boot_device_dictionary.pop(bootloader_attribute_map_dictionary["FrontEndName"])

        # Check for boot device attributes that may need configuration
        if self.boot_devices_list:
            converted_boot_devices_list = []
            for provided_boot_device_dictionary in self.boot_devices_list:
                staged_boot_device_dictionary = copy.deepcopy(provided_boot_device_dictionary)
                returned_boot_device_type_map = boot_device_type_map_handler(staged_boot_device_dictionary)
                # Set boot device 'ClassId' attribute
                staged_boot_device_dictionary["ClassId"] = returned_boot_device_type_map
                # Set boot device 'ObjectType' attribute
                staged_boot_device_dictionary["ObjectType"] = returned_boot_device_type_map
                staged_boot_device_dictionary.pop("Type")
                # Handle setting of attributes which have mismatched Front-End and Back-End labeling
                for boot_device_attribute_map_dictionary in self.boot_device_attribute_maps:
                    boot_device_attribute_map_handler(boot_device_attribute_map_dictionary)
                # Handle setting of bootloader attributes
                for bootloader_attribute_map_dictionary in self.boot_device_bootloader_attribute_maps:
                    boot_device_bootloader_attribute_map_handler(bootloader_attribute_map_dictionary)
                converted_boot_device_dictionary = staged_boot_device_dictionary
                converted_boot_devices_list.append(converted_boot_device_dictionary)
            # Update Intersight API body with the converted boot devices list
            self.intersight_api_body["BootDevices"] = converted_boot_devices_list

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with the provided Boot Order settings
        self._update_api_body_boot_device_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


def boot_order_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    boot_devices_list,
    configured_boot_mode="Legacy",
    enable_uefi_secure_boot=False,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Boot Order Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        boot_devices_list (list):
            A list of ordered dictionary entries containing the configuration
            for each boot device to be configured in the Boot Order Policy. 
            Place each boot device dictionary in the list to match the desired
            boot order (first to last). An example entry is: 
            [{"Type": "Virtual Media",
              "Device Name": "Virtual-Media-1",
              "Sub-Type": "CIMC MAPPED HDD"},
             {"Type": "PXE Boot",
              "Device Name": "PXE-Boot-1",
              "IP Type": "IPv4",
              "Interface Name": "pxe1",
              "Enabled": False},
             {"Type": "Local Disk",
              "Device Name": "Local-Disk-1"},].
        configured_boot_mode (str):
            Optional; The boot mode to be configured. The accepted values are
            "Legacy" or "Uefi". The default value is "Legacy".
        enable_uefi_secure_boot (bool):
            Optional; Enable or disable UEFI secure boot. This option only
            takes effect if "Uefi" is the configured boot mode. The default
            value is False.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Boot Order Policy object in Intersight
    builder(
        BootOrderPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            boot_devices_list=boot_devices_list,
            configured_boot_mode=configured_boot_mode,
            enable_uefi_secure_boot=enable_uefi_secure_boot
            ))


# Establish classes and functions to make Certificate Management Policy
class CertMgmtPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Certificate Management Policy in Intersight.
    """
    object_type = "Certificate Management Policy"
    intersight_api_path = "certificatemanagement/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 certificate="",
                 private_key="",
                 enable_imc_certificate=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.enable_imc_certificate = enable_imc_certificate
        self.certificate = certificate
        self.private_key = private_key

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.enable_imc_certificate}, "
            f"'{self.certificate}', "
            f"'{self.private_key}')"
            )

    def _convert_certificate_input(self,
                                   certificate_input,
                                   certificate_input_type
                                   ):
        """This function converts the provided certificate input into the
        Base64 format accepted by Intersight for creating Certificate
        Management Policies.
        
        Args:
            certificate_input (str):
                The certificate input to be converted. This should be the actual
                certificate value or the certificate private key value.
            certificate_input (str):
                For logging purposes, the type of certificate input to be
                converted. Specify whether the input is the 'certificate' or
                'private key'.

        Returns:
            The certificate input value converted to a Base64 format, then
            decoded to a string in UTF-8 format.
            
        Raises:
            Exception:
                An exception occurred due to an issue converting the provided
                certificate input value. The status code or error message will
                be specified.
        """
        if self.certificate:
            try:
                certificate_input_stripped = certificate_input.strip()
                certificate_input_converted_to_bytes_format = certificate_input_stripped.encode()
                certificate_input_converted_to_base64_format_and_decoded = base64.b64encode(certificate_input_converted_to_bytes_format).decode()
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with the format of "
                      f"the value provided for the {certificate_input_type}.")
                print("To proceed, please verify that the value provided for "
                      f"the {certificate_input_type} is a string with the same "
                      "format and layout as in the source PEM file.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
                
        return certificate_input_converted_to_base64_format_and_decoded
                                  
    
    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # Update the API body with the certificate and private key converted to Base64 format
        converted_certificate = self._convert_certificate_input(self.certificate,
                                                                "certificate"
                                                                )
        converted_private_key = self._convert_certificate_input(self.private_key,
                                                                "certificate private key"
                                                                )
        self.intersight_api_body["Certificates"] = [
            {"Certificate": {
                "PemCertificate": converted_certificate
                },
             "Privatekey": converted_private_key,
             "Enabled": self.enable_imc_certificate,
             "ClassId": "certificatemanagement.Imc",
             "ObjectType": "certificatemanagement.Imc"
             }
            ]
        
        # POST the API body to Intersight
        self._post_intersight_object()


def cert_mgmt_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    certificate,
    private_key,
    enable_imc_certificate=True,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Certificate Management Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        certificate (str):
            The certificate chain in string format. This can be obtained from
            a PEM file by copying and pasting the certificate string in the
            exact same format and layout.
        private_key (str):
            The certificate private key in string format. This can be obtained
            from a PEM file by copying and pasting the private key string in
            the exact same format and layout.
        enable_imc_certificate (bool):
            Optional; Enables the IMC certificate that has been created.
            The default value is True.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Certificate Management Policy object in Intersight
    builder(
        CertMgmtPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            certificate=certificate,
            private_key=private_key,
            enable_imc_certificate=enable_imc_certificate
            ))


# Establish classes and functions to make Ethernet Adapter Policy
class EthernetAdapterPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Adapter Policy in
    Intersight.
    """
    object_type = "Ethernet Adapter Policy"
    intersight_api_path = "vnic/EthAdapterPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ethernet_adapter_default_configuration="",
                 enable_virtual_extensible_lan=False,
                 enable_network_virtualization_using_gre=False,
                 enable_accelerated_receive_flow_steering=False,
                 enable_precision_time_protocol=False,
                 enable_advanced_filter=False,
                 enable_interrupt_scaling=False,
                 enable_geneve_offload=False,
                 enable_rdma_over_converged_ethernet=False,
                 interrupts=8,
                 interrupt_mode="MSIx",
                 interrupt_timer=125,
                 interrupt_coalescing_type="Min",
                 receive_queue_count=4,
                 receive_ring_size=512,
                 transmit_queue_count=1,
                 transmit_ring_size=256,
                 completion_queue_count=5,
                 completion_ring_size=5,
                 uplink_failback_timeout=5,
                 enable_tx_checksum_offload=True,
                 enable_rx_checksum_offload=True,
                 enable_large_send_offload=True,
                 enable_large_receive_offload=True,
                 enable_receive_side_scaling=True,
                 enable_ipv4_hash=True,
                 enable_ipv6_extensions_hash=False,
                 enable_ipv6_hash=True,
                 enable_tcp_and_ipv4_hash=True,
                 enable_tcp_and_ipv6_extensions_hash=False,
                 enable_tcp_and_ipv6_hash=True,
                 enable_udp_and_ipv4_hash=False,
                 enable_udp_and_ipv6_hash=False,
                 roce_class_of_service=5,
                 roce_memory_regions=0,
                 roce_queue_pairs=0,
                 roce_resource_groups=0,
                 roce_version=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ethernet_adapter_default_configuration = ethernet_adapter_default_configuration
        self.enable_virtual_extensible_lan = enable_virtual_extensible_lan
        self.enable_network_virtualization_using_gre = enable_network_virtualization_using_gre
        self.enable_accelerated_receive_flow_steering = enable_accelerated_receive_flow_steering
        self.enable_precision_time_protocol = enable_precision_time_protocol
        self.enable_advanced_filter = enable_advanced_filter
        self.enable_interrupt_scaling = enable_interrupt_scaling
        self.enable_geneve_offload = enable_geneve_offload
        self.enable_rdma_over_converged_ethernet = enable_rdma_over_converged_ethernet
        self.interrupts = interrupts
        self.interrupt_mode = interrupt_mode
        self.interrupt_timer = interrupt_timer
        self.interrupt_coalescing_type = interrupt_coalescing_type
        self.receive_queue_count = receive_queue_count
        self.receive_ring_size = receive_ring_size
        self.transmit_queue_count = transmit_queue_count
        self.transmit_ring_size = transmit_ring_size
        self.completion_queue_count = completion_queue_count
        self.completion_ring_size = completion_ring_size
        self.uplink_failback_timeout = uplink_failback_timeout
        self.enable_tx_checksum_offload = enable_tx_checksum_offload
        self.enable_rx_checksum_offload = enable_rx_checksum_offload
        self.enable_large_send_offload = enable_large_send_offload
        self.enable_large_receive_offload = enable_large_receive_offload
        self.enable_receive_side_scaling = enable_receive_side_scaling
        self.enable_ipv4_hash = enable_ipv4_hash
        self.enable_ipv6_extensions_hash = enable_ipv6_extensions_hash
        self.enable_ipv6_hash = enable_ipv6_hash
        self.enable_tcp_and_ipv4_hash = enable_tcp_and_ipv4_hash
        self.enable_tcp_and_ipv6_extensions_hash = enable_tcp_and_ipv6_extensions_hash
        self.enable_tcp_and_ipv6_hash = enable_tcp_and_ipv6_hash
        self.enable_udp_and_ipv4_hash = enable_udp_and_ipv4_hash
        self.enable_udp_and_ipv6_hash = enable_udp_and_ipv6_hash
        self.roce_class_of_service = roce_class_of_service
        self.roce_memory_regions = roce_memory_regions
        self.roce_queue_pairs = roce_queue_pairs
        self.roce_resource_groups = roce_resource_groups
        self.roce_version = roce_version
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"('{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ethernet_adapter_default_configuration}', "
            f"{self.enable_virtual_extensible_lan}, "
            f"{self.enable_network_virtualization_using_gre}, "
            f"{self.enable_accelerated_receive_flow_steering}, "
            f"{self.enable_precision_time_protocol}, "
            f"{self.enable_advanced_filter}, "
            f"{self.enable_interrupt_scaling}, "
            f"{self.enable_geneve_offload}, "
            f"{self.enable_rdma_over_converged_ethernet}, "
            f"{self.interrupts}, "
            f"'{self.interrupt_mode}', "
            f"{self.interrupt_timer}, "
            f"'{self.interrupt_coalescing_type}', "
            f"{self.receive_queue_count}, "
            f"{self.receive_ring_size}, "
            f"{self.transmit_queue_count}, "
            f"{self.transmit_ring_size}, "
            f"{self.completion_queue_count}, "
            f"{self.completion_ring_size}, "
            f"{self.uplink_failback_timeout}, "
            f"{self.enable_tx_checksum_offload}, "
            f"{self.enable_rx_checksum_offload}, "
            f"{self.enable_large_send_offload}, "
            f"{self.enable_large_receive_offload}, "
            f"{self.enable_receive_side_scaling}, "
            f"{self.enable_ipv4_hash}, "
            f"{self.enable_ipv6_extensions_hash}, "
            f"{self.enable_ipv6_hash}, "
            f"{self.enable_tcp_and_ipv4_hash}, "
            f"{self.enable_tcp_and_ipv6_extensions_hash}, "
            f"{self.enable_tcp_and_ipv6_hash}, "
            f"{self.enable_udp_and_ipv4_hash}, "
            f"{self.enable_udp_and_ipv6_hash}, "
            f"{self.roce_class_of_service}, "
            f"{self.roce_memory_regions}, "
            f"{self.roce_queue_pairs}, "
            f"{self.roce_resource_groups}, "
            f"{self.roce_version})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Reformat the user provided interrupt_coalescing_type variable value to uppercase to prevent potential format issues
        if not self.ethernet_adapter_default_configuration:
            try:
                reformatted_interrupt_coalescing_type_value = self.interrupt_coalescing_type.upper()
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with the value "
                      "provided for the Interrupt Coalescing Type setting.")
                print(f"The value provided was {interrupt_coalescing_type}.")
                print("To proceed, the value provided for the Interrupt "
                      "Coalescing Type setting should be updated to an accepted string "
                      "format.")
                print("The accepted values are 'Min' or 'Idle'.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            if reformatted_interrupt_coalescing_type_value not in ("MIN", "IDLE"):
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with the value "
                      "provided for the Interrupt Coalescing Type setting.")
                print(f"The value provided was {interrupt_coalescing_type}.")
                print("To proceed, the value provided for the UCS "
                      "Coalescing Type setting should be updated to an accepted string "
                      "format.")
                print("The accepted values are 'Min' or 'Idle'.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
        # Retrieve the pre-defined built-in Ethernet Adapter Default Configuration if one has been provided and create dictionary with settings
        if self.ethernet_adapter_default_configuration:
            ethernet_adapter_default_configuration_settings = intersight_object_backup(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_attributes={
                    "Name": self.ethernet_adapter_default_configuration,
                    },
                backup_attribute_list = [
                    "AdvancedFilter",
                    "ArfsSettings",
                    "CompletionQueueSettings",
                    "GeneveEnabled",
                    "InterruptScaling",
                    "InterruptSettings",
                    "NvgreSettings",
                    "PtpSettings",
                    "RoceSettings",
                    "RssHashSettings",
                    "RssSettings",
                    "RxQueueSettings",
                    "TcpOffloadSettings",
                    "TxQueueSettings",
                    "UplinkFailbackTimeout",
                    "VxlanSettings"
                    ],
                intersight_api_path=f"vnic/EthAdapterPolicies?$top=1000&$filter=SharedScope%20eq%20%27shared%27",
                object_type="Ethernet Adapter Default Configuration",
                organization=None,
                preconfigured_api_client=self.api_client
                )
            # Update the API body with the Ethernet Adapter Default Configuration settings dictionary
            self.intersight_api_body.update(ethernet_adapter_default_configuration_settings)
        else:
            # Create dictionary with the user provided Ethernet Adapter Configuration settings
            ethernet_adapter_user_configuration_settings = {
                "AdvancedFilter": self.enable_advanced_filter,
                "ArfsSettings": {
                    "ClassId": "vnic.ArfsSettings",
                    "Enabled": self.enable_accelerated_receive_flow_steering,
                    "ObjectType": "vnic.ArfsSettings"
                    },
                "CompletionQueueSettings": {
                    "ClassId": "vnic.CompletionQueueSettings",
                    "Count": self.completion_queue_count,
                    "ObjectType": "vnic.CompletionQueueSettings",
                    "RingSize": self.completion_ring_size
                    },
                "GeneveEnabled": self.enable_geneve_offload,
                "InterruptScaling": self.enable_interrupt_scaling,
                "InterruptSettings": {
                    "ClassId": "vnic.EthInterruptSettings",
                    "CoalescingTime": self.interrupt_timer,
                    "CoalescingType": reformatted_interrupt_coalescing_type_value,
                    "Count": self.interrupts,
                    "Mode": self.interrupt_mode,
                    "ObjectType": "vnic.EthInterruptSettings"
                    },
                "NvgreSettings": {
                    "ClassId": "vnic.NvgreSettings",
                    "Enabled": self.enable_network_virtualization_using_gre,
                    "ObjectType": "vnic.NvgreSettings"
                    },
                "PtpSettings": {
                    "ClassId": "vnic.PtpSettings",
                    "Enabled": self.enable_precision_time_protocol,
                    "ObjectType": "vnic.PtpSettings"
                    },
                "RoceSettings": {
                    "ClassId": "vnic.RoceSettings",
                    "ClassOfService": self.roce_class_of_service,
                    "Enabled": self.enable_rdma_over_converged_ethernet,
                    "MemoryRegions": self.roce_memory_regions,
                    "ObjectType": "vnic.RoceSettings",
                    "QueuePairs": self.roce_queue_pairs,
                    "ResourceGroups": self.roce_resource_groups,
                    "Version": self.roce_version
                    },
                "RssHashSettings": {
                    "ClassId": "vnic.RssHashSettings",
                    "Ipv4Hash": self.enable_ipv4_hash,
                    "Ipv6ExtHash": self.enable_ipv6_extensions_hash,
                    "Ipv6Hash": self.enable_ipv6_hash,
                    "ObjectType": "vnic.RssHashSettings",
                    "TcpIpv4Hash": self.enable_tcp_and_ipv4_hash,
                    "TcpIpv6ExtHash": self.enable_tcp_and_ipv6_extensions_hash,
                    "TcpIpv6Hash": self.enable_tcp_and_ipv6_hash,
                    "UdpIpv4Hash": self.enable_udp_and_ipv4_hash,
                    "UdpIpv6Hash": self.enable_udp_and_ipv6_hash
                    },
                "RssSettings": self.enable_receive_side_scaling,
                "RxQueueSettings": {
                    "ClassId": "vnic.EthRxQueueSettings",
                    "Count": self.receive_queue_count,
                    "ObjectType": "vnic.EthRxQueueSettings",
                    "RingSize": self.receive_ring_size
                    },
                "TcpOffloadSettings": {
                    "ClassId": "vnic.TcpOffloadSettings",
                    "LargeReceive": self.enable_large_receive_offload,
                    "LargeSend": self.enable_large_send_offload,
                    "ObjectType": "vnic.TcpOffloadSettings",
                    "RxChecksum": self.enable_rx_checksum_offload,
                    "TxChecksum": self.enable_tx_checksum_offload
                    },
                "TxQueueSettings": {
                    "ClassId": "vnic.EthTxQueueSettings",
                    "Count": self.transmit_queue_count,
                    "ObjectType": "vnic.EthTxQueueSettings",
                    "RingSize": self.transmit_ring_size
                    },
                "UplinkFailbackTimeout": self.uplink_failback_timeout,
                "VxlanSettings": {
                    "ClassId": "vnic.VxlanSettings",
                    "Enabled": self.enable_virtual_extensible_lan,
                    "ObjectType": "vnic.VxlanSettings"
                    }
                }
            # Update the API body with the user provided Ethernet Adapter Configuration settings
            self.intersight_api_body.update(ethernet_adapter_user_configuration_settings)
        # POST the API body to Intersight
        self._post_intersight_object()


def ethernet_adapter_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    ethernet_adapter_default_configuration="",
    enable_virtual_extensible_lan=False,
    enable_network_virtualization_using_gre=False,
    enable_accelerated_receive_flow_steering=False,
    enable_precision_time_protocol=False,
    enable_advanced_filter=False,
    enable_interrupt_scaling=False,
    enable_geneve_offload=False,
    enable_rdma_over_converged_ethernet=False,
    interrupts=8,
    interrupt_mode="MSIx",
    interrupt_timer=125,
    interrupt_coalescing_type="Min",
    receive_queue_count=4,
    receive_ring_size=512,
    transmit_queue_count=1,
    transmit_ring_size=256,
    completion_queue_count=5,
    completion_ring_size=5,
    uplink_failback_timeout=5,
    enable_tx_checksum_offload=True,
    enable_rx_checksum_offload=True,
    enable_large_send_offload=True,
    enable_large_receive_offload=True,
    enable_receive_side_scaling=True,
    enable_ipv4_hash=True,
    enable_ipv6_extensions_hash=False,
    enable_ipv6_hash=True,
    enable_tcp_and_ipv4_hash=True,
    enable_tcp_and_ipv6_extensions_hash=False,
    enable_tcp_and_ipv6_hash=True,
    enable_udp_and_ipv4_hash=False,
    enable_udp_and_ipv6_hash=False,
    roce_class_of_service=5,
    roce_memory_regions=0,
    roce_queue_pairs=0,
    roce_resource_groups=0,
    roce_version=1,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Ethernet Adapter Policy on
    Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        ethernet_adapter_default_configuration (str):
            Optional; This setting applies a pre-defined built-in default
            configuration to be used for building the Ethernet Adapter policy.
            Entering a default configuration will override user-provided
            configuration settings/arguments for the Ethernet Adapter that
            reside under the Policy Details category. Accepted values include
            "MQ-SMBd", "SMBServer", "SMBClient", "Solaris", "usNICOracleRAC",
            "WIN-AzureStack", "Win-HPN-SMBd", "Win-HPN", "Linux-NVMe-RoCE",
            "MQ", "usNIC", "SRIOV", "VMWarePassThru", "VMWare", "Windows", and
            "Linux". The default value is an empty string (""), which will
            apply no default configuration and user-provided settings will be
            used.
        enable_virtual_extensible_lan (bool):
            Optional; Enable VXLAN on the interface. The default value is False.
        enable_network_virtualization_using_gre (bool):
            Optional; Enable NVGRE on the interface. The default value is False.
        enable_accelerated_receive_flow_steering (bool):
            Optional; Enable ARFS on the interface. The default value is False.
        enable_precision_time_protocol (bool):
            Optional; Enable PTP on the interface. The default value is False.
        enable_advanced_filter (bool):
            Optional; Enable advanced filtering on the interface. The default
            value is False.
        enable_interrupt_scaling (bool):
            Optional; Enable interrupt scaling on the interface. The default
            value is False.
        enable_geneve_offload (bool):
            Optional; Enable Geneve offload on the interface. The default value
            is False.
        enable_rdma_over_converged_ethernet (bool):
            Optional; Enable RoCE on the interface. The default value is False.
        interrupts (int):
            Optional; The number of interrupts. The accepted values are
            1 - 1024. The default value is 8.
        interrupt_mode (str):
            Optional; The interrupt mode. The accepted values are "MSIx",
            "MSI", or "INTx". The default value is "MSIx".
        interrupt_timer (int):
            Optional; The time to wait between interrupts. The accepted values
            are 0 - 65535. The default value is 125.
        interrupt_coalescing_type (str):
            Optional; The interrupt coalescing type. The accepted values are
            "Min" or "Idle". The default value is "Min".
        receive_queue_count (int):
            Optional; The receive queue count. The accepted values are
            1 - 1000. The default value is 4.
        receive_ring_size (int):
            Optional; The receive ring size. The accepted values are
            64 - 16384. The default value is 512.
        transmit_queue_count (int):
            Optional; The transmit queue count. The accepted values are
            1 - 1000. The default value is 1.
        transmit_ring_size (int):
            Optional; The transmit ring size. The accepted values are
            64 - 16384. The default value is 256.
        completion_queue_count (int):
            Optional; The completion queue count. The accepted values are
            1 - 2000. The default value is 5.
        completion_ring_size (int):
            Optional; The completion ring size. The accepted values are
            1 - 256. The default value is 5.
        uplink_failback_timeout (int):
            Optional; The uplink failback timeout. The accepted values are
            0 - 600. The default value is 5.
        enable_tx_checksum_offload (bool):
            Optional; Enable Tx checksum offload to the hardware. The default
            value is True.
        enable_rx_checksum_offload (bool):
            Optional; Enable Rx checksum offload to the hardware. The default
            value is True.
        enable_large_send_offload (bool):
            Optional; Enable large packet segmentation to the hardware. The
            default value is True.
        enable_large_receive_offload (bool):
            Optional; Enable segmented packet reassembly to the hardware. The
            default value is True.
        enable_receive_side_scaling (bool):
            Optional; Enable Receive Side Scaling. The default value is True.
        enable_ipv4_hash (bool):
            Optional; Enable the IPv4 address for traffic distribution. The
            default value is True.
        enable_ipv6_extensions_hash (bool):
            Optional; Enable the IPv6 extensions for traffic distribution. The
            default value is False.
        enable_ipv6_hash (bool):
            Optional; Enable the IPv6 address for traffic distribution. The
            default value is True.
        enable_tcp_and_ipv4_hash (bool):
            Optional; Enable the IPv4 address and TCP port number for traffic
            distribution. The default value is True.
        enable_tcp_and_ipv6_extensions_hash (bool):
            Optional; Enable the IPv6 extensions and TCP port number for
            traffic distribution. The default value is False.
        enable_tcp_and_ipv6_hash (bool):
            Optional; Enable the IPv6 address and TCP port number for traffic
            distribution. The default value is True.
        enable_udp_and_ipv4_hash (bool):
            Optional; Enable the IPv4 address and UDP port number for traffic
            distribution. The default value is False.
        enable_udp_and_ipv6_hash (bool):
            Optional; Enable the IPv6 address and UDP port number for traffic
            distribution. The default value is False.
        roce_class_of_service (int):
            Optional; The RoCE class of service. The accepted values are 1 - 6.
            The default value is 5.
        roce_memory_regions (int):
            Optional; The RoCE memory regions. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_queue_pairs (int):
            Optional; The RoCE queue pairs. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_resource_groups (int):
            Optional; The RoCE resource groups. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_version (int):
            Optional; The RoCE version. The accepted values are
            1 - 2. The default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Adapter Policy object in Intersight
    builder(
        EthernetAdapterPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ethernet_adapter_default_configuration=ethernet_adapter_default_configuration,
            enable_virtual_extensible_lan=enable_virtual_extensible_lan,
            enable_network_virtualization_using_gre=enable_network_virtualization_using_gre,
            enable_accelerated_receive_flow_steering=enable_accelerated_receive_flow_steering,
            enable_precision_time_protocol=enable_precision_time_protocol,
            enable_advanced_filter=enable_advanced_filter,
            enable_interrupt_scaling=enable_interrupt_scaling,
            enable_geneve_offload=enable_geneve_offload,
            enable_rdma_over_converged_ethernet=enable_rdma_over_converged_ethernet,
            interrupts=interrupts,
            interrupt_mode=interrupt_mode,
            interrupt_timer=interrupt_timer,
            interrupt_coalescing_type=interrupt_coalescing_type,
            receive_queue_count=receive_queue_count,
            receive_ring_size=receive_ring_size,
            transmit_queue_count=transmit_queue_count,
            transmit_ring_size=transmit_ring_size,
            completion_queue_count=completion_queue_count,
            completion_ring_size=completion_ring_size,
            uplink_failback_timeout=uplink_failback_timeout,
            enable_tx_checksum_offload=enable_tx_checksum_offload,
            enable_rx_checksum_offload=enable_rx_checksum_offload,
            enable_large_send_offload=enable_large_send_offload,
            enable_large_receive_offload=enable_large_receive_offload,
            enable_receive_side_scaling=enable_receive_side_scaling,
            enable_ipv4_hash=enable_ipv4_hash,
            enable_ipv6_extensions_hash=enable_ipv6_extensions_hash,
            enable_ipv6_hash=enable_ipv6_hash,
            enable_tcp_and_ipv4_hash=enable_tcp_and_ipv4_hash,
            enable_tcp_and_ipv6_extensions_hash=enable_tcp_and_ipv6_extensions_hash,
            enable_tcp_and_ipv6_hash=enable_tcp_and_ipv6_hash,
            enable_udp_and_ipv4_hash=enable_udp_and_ipv4_hash,
            enable_udp_and_ipv6_hash=enable_udp_and_ipv6_hash,
            roce_class_of_service=roce_class_of_service,
            roce_memory_regions=roce_memory_regions,
            roce_queue_pairs=roce_queue_pairs,
            roce_resource_groups=roce_resource_groups,
            roce_version=roce_version
            ))


# Establish classes and functions to make Ethernet Network Control Policy
class EthernetNetworkControlPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Network Control Policy in
    Intersight.
    """
    object_type = "Ethernet Network Control Policy"
    intersight_api_path = "fabric/EthNetworkControlPolicies"
    object_variable_value_maps = [
        {"VariableName": "mac_register_mode",
         "Description": "MAC Register Mode",
         "AttributeName": "MacRegistrationMode",
         "Values": [
             {"FrontEndValue": "Only Native VLAN",
              "BackEndValue": "nativeVlanOnly"
              },
             {"FrontEndValue": "All Host VLANs",
              "BackEndValue": "allVlans"
              }
             ]
         },
        {"VariableName": "action_on_uplink_fail",
         "Description": "Action on Uplink Fail",
         "AttributeName": "UplinkFailAction",
         "Values": [
             {"FrontEndValue": "Link Down",
              "BackEndValue": "linkDown"
              },
             {"FrontEndValue": "Warning",
              "BackEndValue": "warning"
              }
             ]
         },
        {"VariableName": "mac_forging",
         "Description": "MAC Forging",
         "AttributeName": "ForgeMac",
         "Values": [
             {"FrontEndValue": "Allow",
              "BackEndValue": "allow"
              },
             {"FrontEndValue": "Deny",
              "BackEndValue": "deny"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 enable_cdp=False,
                 mac_register_mode="Only Native VLAN",
                 action_on_uplink_fail="Link Down",
                 mac_forging="Allow",
                 lldp_enable_transmit=False,
                 lldp_enable_receive=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.enable_cdp = enable_cdp
        self.mac_register_mode = mac_register_mode
        self.action_on_uplink_fail = action_on_uplink_fail
        self.mac_forging = mac_forging
        self.lldp_enable_transmit = lldp_enable_transmit
        self.lldp_enable_receive = lldp_enable_receive
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "CdpEnabled": self.enable_cdp,
            "LldpSettings": {
                "TransmitEnabled": self.lldp_enable_transmit,
                "ReceiveEnabled": self.lldp_enable_receive
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"('{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.enable_cdp}, "
            f"'{self.mac_register_mode}', "
            f"'{self.action_on_uplink_fail}', "
            f"'{self.mac_forging}', "
            f"{self.lldp_enable_transmit}, "
            f"{self.lldp_enable_receive})"
            )


def ethernet_network_control_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_cdp=False,
    mac_register_mode="Only Native VLAN",
    action_on_uplink_fail="Link Down",
    mac_forging="Allow",
    lldp_enable_transmit=False,
    lldp_enable_receive=False,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Ethernet Network Control Policy on
    Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_cdp (bool):
            Optional; The administrative state of Cisco Discovery Protocol
            (CDP) on an interface. The default value is False.
        mac_register_mode (str):
            Optional; The MAC address registration mode. The accepted values
            are "Only Native VLAN" and "All Host VLANs". The default value is
            "Only Native VLAN".
        action_on_uplink_fail (str):
            Optional; The state of a virtual interface if an uplink is not
            pinned. The accepted values are "Link Down" or "Warning". The
            "Link Down" option will take down the virtual interface if an
            uplink is not pinned. The "Warning" option will leave the virtual
            interface up even if there is no pinned uplink. The default value
            is "Link Down".
        mac_forging (str):
            Optional; Determines if MAC forging is allowed or denied on an
            interface. The accepted values are "Allow" and "Deny". The default
            value is "Allow".
        lldp_enable_transmit (bool):
            Optional; The administrative state of Link Layer Discovery Protocol
            (LLDP) frames being transmitted on an interface. The default value
            is False.
        lldp_enable_receive (bool):
            Optional; The administrative state of Link Layer Discovery Protocol
            (LLDP) frames being received on an interface. The default value
            is False.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Network Control Policy object in Intersight
    builder(
        EthernetNetworkControlPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            enable_cdp=enable_cdp,
            mac_register_mode=mac_register_mode,
            action_on_uplink_fail=action_on_uplink_fail,
            mac_forging=mac_forging,
            lldp_enable_transmit=lldp_enable_transmit,
            lldp_enable_receive=lldp_enable_receive
            ))


# Establish classes and functions to make Ethernet Network Group Policy
class EthernetNetworkGroupPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Network Group Policy in
    Intersight.
    """
    object_type = "Ethernet Network Group Policy"
    intersight_api_path = "fabric/EthNetworkGroupPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 allowed_vlans="1",
                 native_vlan=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.allowed_vlans = allowed_vlans
        self.native_vlan = native_vlan
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "VlanSettings": {"AllowedVlans": self.allowed_vlans,
                             "NativeVlan": self.native_vlan
                             }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.allowed_vlans}', "
            f"{self.native_vlan})"
            )


def ethernet_network_group_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    allowed_vlans="1",
    native_vlan=1,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Ethernet Network Group Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        allowed_vlans (str):
            Optional; The allowed VLAN IDs of the virtual interface. A list of
            comma separated VLAN IDs and/or VLAN ID ranges. An example entry
            is: "10,11". The default value is an empty string ("").
        native_vlan (int):
            Optional; The native VLAN ID of the virtual interface or the
            corresponding vEthernet on the peer Fabric Interconnect to which
            the virtual interface is connected. If the native VLAN is not a
            part of the allowed VLANs, it will automatically be added to the
            list of allowed VLANs. The default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """

    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Network Group Policy object in Intersight
    builder(
        EthernetNetworkGroupPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            allowed_vlans=allowed_vlans,
            native_vlan=native_vlan
            ))


# Establish classes and functions to make Ethernet QoS Policy
class EthernetQosPolicy(UcsPolicy):
    """This class is used to configure an Ethernet QoS Policy in Intersight.
    """
    object_type = "Ethernet QoS Policy"
    intersight_api_path = "vnic/EthQosPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ethernet_qos_mtu_in_bytes=1500,
                 ethernet_qos_rate_limit_in_mbps=0,
                 ethernet_qos_cos=3,
                 ethernet_qos_burst=1024,
                 ethernet_qos_priority="Best Effort",
                 ethernet_qos_enable_trust_host_cos=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ethernet_qos_mtu_in_bytes = ethernet_qos_mtu_in_bytes
        self.ethernet_qos_rate_limit_in_mbps = ethernet_qos_rate_limit_in_mbps
        self.ethernet_qos_cos = ethernet_qos_cos
        self.ethernet_qos_burst = ethernet_qos_burst
        self.ethernet_qos_priority = ethernet_qos_priority
        self.ethernet_qos_enable_trust_host_cos = ethernet_qos_enable_trust_host_cos
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Mtu": self.ethernet_qos_mtu_in_bytes,
            "RateLimit": self.ethernet_qos_rate_limit_in_mbps,
            "Cos": self.ethernet_qos_cos,
            "Burst": self.ethernet_qos_burst,
            "Priority": self.ethernet_qos_priority,
            "TrustHostCos": self.ethernet_qos_enable_trust_host_cos
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.ethernet_qos_mtu_in_bytes}, "
            f"{self.ethernet_qos_rate_limit_in_mbps}, "
            f"{self.ethernet_qos_cos}, "
            f"{self.ethernet_qos_burst}, "
            f"'{self.ethernet_qos_priority}', "
            f"{self.ethernet_qos_enable_trust_host_cos})"
            )


def ethernet_qos_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    ethernet_qos_mtu_in_bytes=1500,
    ethernet_qos_rate_limit_in_mbps=0,
    ethernet_qos_cos=3,
    ethernet_qos_burst=1024,
    ethernet_qos_priority="Best Effort",
    ethernet_qos_enable_trust_host_cos=False,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Ethernet QoS Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        default_vlan (int):
            Optional; The default VLAN ID setting. Default VLANs can be between
            1-4094. Leave the default of 0 if there is no default VLAN. The
            default value is 0.
        vsan_id (int):
            Optional; The VSAN ID setting. VSAN IDs can be between 1-4094. The
            default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet QoS Policy object in Intersight
    builder(
        EthernetQosPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ethernet_qos_mtu_in_bytes=ethernet_qos_mtu_in_bytes,
            ethernet_qos_rate_limit_in_mbps=ethernet_qos_rate_limit_in_mbps,
            ethernet_qos_cos=ethernet_qos_cos,
            ethernet_qos_burst=ethernet_qos_burst,
            ethernet_qos_priority=ethernet_qos_priority,
            ethernet_qos_enable_trust_host_cos=ethernet_qos_enable_trust_host_cos
            ))


# Establish classes and functions to make FC Zone Policy
class FcZonePolicy(UcsPolicy):
    """This class is used to configure a FC Zone Policy in Intersight.
    """
    object_type = "FC Zone Policy"
    intersight_api_path = "fabric/FcZonePolicies"
    subobject_types = [
        {"SubobjectType": "fabric.FcZoneMember",
         "SubobjectList": "fc_zone_target_list",
         "AttributeName": "FcTargetMembers",
         "Description": "FC Zone Target",
         }
        ]
    subobject_attribute_maps = {
        "fabric.FcZoneMember": [
            {"FrontEndName": None,
             "BackEndName": "Name",
             "Description": "FC Zone Target Name",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "WWPN",
             "BackEndName": "Wwpn",
             "Description": "FC Zone Target WWPN",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Switch ID",
             "BackEndName": "SwitchId",
             "Description": "FC Zone Target Switch ID",
             "FixedFrontEndValues": [
                 "A",
                 "B"
                 ],
             "FronttoBackEndValueMaps": {
                 "a": "A",
                 "b": "B"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "VSAN ID",
             "BackEndName": "VsanId",
             "Description": "FC Zone Target VSAN ID",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }
    object_variable_value_maps = [
        {"VariableName": "fc_target_zoning_type",
         "Description": "FC Target Zoning Type",
         "AttributeName": "FcTargetZoningType",
         "Values": [
             {"FrontEndValue": "Single Initiator Single Target",
              "BackEndValue": "SIST"
              },
             {"FrontEndValue": "Single Initiator Multiple Target",
              "BackEndValue": "SIMT"
              },
             {"FrontEndValue": "None",
              "BackEndValue": "None"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 fc_target_zoning_type="Single Initiator Single Target",
                 fc_zone_target_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.fc_target_zoning_type = fc_target_zoning_type
        if fc_zone_target_list is None:
            self.fc_zone_target_list = []
        else:
            self.fc_zone_target_list = fc_zone_target_list

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.fc_target_zoning_type}', "
            f"{self.fc_zone_target_list})"
            )


def fc_zone_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    fc_target_zoning_type="Single Initiator Single Target",
    fc_zone_target_list=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a FC Zone Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        fc_target_zoning_type (str):
            Optional; The FC target zoning type. The accepted values are
            "Single Initiator Single Target",
            "Single Initiator Multiple Target", or "None". The default value is
            "Single Initiator Single Target".
        fc_zone_target_list (list):
            Optional; The list of dictionary entries for each FC Zone target 
            to be configured. The default value is None. An example entry is:
            [{"Name": "sample-target-1-a",
              "WWPN": "20:00:00:25:B5:AA:00:01",
              "Switch ID": "A",
              "VSAN ID": 1
              },
             {"Name": "sample-target-1-b",
              "WWPN": "20:00:00:25:B5:BB:00:01",
              "Switch ID": "B",
              "VSAN ID": 1
              },
             ]
            For each target dictionary, the following keys can be provided 
            with the specified value types:
            - "Name" key with a string value for the target name. This key is
            mandatory.
            - "WWPN" key with a string value for the target's worldwide port
            name. This key is mandatory.
            - "Switch ID" key with a string value for the target's switch ID.
            The accepted values are "A" or "B".
            - "VSAN ID" key with an integer value for the target's VSAN ID. The
            accepted values 1 - 4093. This key is mandatory.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create FC Zone Policy object in Intersight
    builder(
        FcZonePolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            fc_target_zoning_type=fc_target_zoning_type,
            fc_zone_target_list=fc_zone_target_list
            ))


# Establish classes and functions to make Fibre Channel Adapter Policy
class FibreChannelAdapterPolicy(UcsPolicy):
    """This class is used to configure an Fibre Channel Adapter Policy in
    Intersight.
    """
    object_type = "Fibre Channel Adapter Policy"
    intersight_api_path = "vnic/FcAdapterPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 fibre_channel_adapter_default_configuration="",
                 fcp_error_recovery=False,
                 port_down_timeout_in_ms=10000,
                 link_down_timeout_in_ms=30000,
                 io_retry_timeout_in_seconds=5,
                 port_down_io_retry_in_ms=8,
                 error_detection_timeout=2000,
                 resource_allocation_timeout=10000,
                 flogi_retries=8,
                 flogi_timeout_in_ms=4000,
                 plogi_retries=8,
                 plogi_timeout_in_ms=20000,
                 interrupt_mode="MSIx",
                 io_throttle_count=512,
                 maximum_luns_per_target=1024,
                 lun_queue_depth=20,
                 receive_ring_size=64,
                 transmit_ring_size=64,
                 scsi_io_queues=1,
                 scsi_io_ring_size=512
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.fibre_channel_adapter_default_configuration = fibre_channel_adapter_default_configuration
        self.fcp_error_recovery = fcp_error_recovery
        self.port_down_timeout_in_ms = port_down_timeout_in_ms
        self.link_down_timeout_in_ms = link_down_timeout_in_ms
        self.io_retry_timeout_in_seconds = io_retry_timeout_in_seconds
        self.port_down_io_retry_in_ms = port_down_io_retry_in_ms
        self.error_detection_timeout = error_detection_timeout
        self.resource_allocation_timeout = resource_allocation_timeout
        self.flogi_retries = flogi_retries
        self.flogi_timeout_in_ms = flogi_timeout_in_ms
        self.plogi_retries = plogi_retries
        self.plogi_timeout_in_ms = plogi_timeout_in_ms
        self.interrupt_mode = interrupt_mode
        self.io_throttle_count = io_throttle_count
        self.maximum_luns_per_target = maximum_luns_per_target
        self.lun_queue_depth = lun_queue_depth
        self.receive_ring_size = receive_ring_size
        self.transmit_ring_size = transmit_ring_size
        self.scsi_io_queues = scsi_io_queues
        self.scsi_io_ring_size = scsi_io_ring_size
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"('{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.fibre_channel_adapter_default_configuration}', "
            f"{self.fcp_error_recovery}, "
            f"{self.port_down_timeout_in_ms}, "
            f"{self.link_down_timeout_in_ms}, "
            f"{self.io_retry_timeout_in_seconds}, "
            f"{self.port_down_io_retry_in_ms}, "
            f"{self.error_detection_timeout}, "
            f"{self.resource_allocation_timeout}, "
            f"{self.flogi_retries}, "
            f"{self.flogi_timeout_in_ms}, "
            f"{self.plogi_retries}, "
            f"{self.plogi_timeout_in_ms}, "
            f"'{self.interrupt_mode}', "
            f"{self.io_throttle_count}, "
            f"{self.maximum_luns_per_target}, "
            f"{self.lun_queue_depth}, "
            f"{self.receive_ring_size}, "
            f"{self.transmit_ring_size}, "
            f"{self.scsi_io_queues}, "
            f"{self.scsi_io_ring_size})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Retrieve the pre-defined built-in Fibre Channel Adapter Default Configuration if one has been provided and create dictionary with settings
        if self.fibre_channel_adapter_default_configuration:
            fibre_channel_adapter_default_configuration_settings = intersight_object_backup(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_attributes={
                    "Name": self.fibre_channel_adapter_default_configuration,
                    },
                backup_attribute_list = [
                    "ErrorDetectionTimeout",
                    "ErrorRecoverySettings",
                    "FlogiSettings",
                    "InterruptSettings",
                    "IoThrottleCount",
                    "LunCount",
                    "LunQueueDepth",
                    "PlogiSettings",
                    "ResourceAllocationTimeout",
                    "RxQueueSettings",
                    "ScsiQueueSettings",
                    "TxQueueSettings"
                    ],
                intersight_api_path=f"vnic/FcAdapterPolicies?$top=1000&$filter=SharedScope%20eq%20%27shared%27",
                object_type="Fibre Channel Adapter Default Configuration",
                organization=None,
                preconfigured_api_client=self.api_client
                )
            # Update the API body with the Fibre Channel Adapter Default Configuration settings dictionary
            self.intersight_api_body.update(fibre_channel_adapter_default_configuration_settings)
        else:
            # Create dictionary with the user provided Fibre Channel Adapter Configuration settings
            fibre_channel_adapter_user_configuration_settings = {
                "ErrorDetectionTimeout": self.error_detection_timeout,
                "ErrorRecoverySettings": {
                    "ClassId": "vnic.FcErrorRecoverySettings",
                    "Enabled": self.fcp_error_recovery,
                    "IoRetryCount": self.port_down_io_retry_in_ms,
                    "IoRetryTimeout": self.io_retry_timeout_in_seconds,
                    "LinkDownTimeout": self.link_down_timeout_in_ms,
                    "ObjectType": "vnic.FcErrorRecoverySettings",
                    "PortDownTimeout": self.port_down_timeout_in_ms
                    },
                "FlogiSettings": {
                    "ClassId": "vnic.FlogiSettings",
                    "ObjectType": "vnic.FlogiSettings",
                    "Retries": self.flogi_retries,
                    "Timeout": self.flogi_timeout_in_ms
                    },
                "InterruptSettings": {
                    "ClassId": "vnic.FcInterruptSettings",
                    "Mode": self.interrupt_mode,
                    "ObjectType": "vnic.FcInterruptSettings"
                    },
                "IoThrottleCount": self.io_throttle_count,
                "LunCount": self.maximum_luns_per_target,
                "LunQueueDepth": self.lun_queue_depth,
                "PlogiSettings": {
                    "ClassId": "vnic.PlogiSettings",
                    "ObjectType": "vnic.PlogiSettings",
                    "Retries": self.plogi_retries,
                    "Timeout": self.plogi_timeout_in_ms
                    },
                "ResourceAllocationTimeout": self.resource_allocation_timeout,
                "RxQueueSettings": {
                    "ClassId": "vnic.FcQueueSettings",
                    "ObjectType": "vnic.FcQueueSettings",
                    "RingSize": self.receive_ring_size
                    },
                "ScsiQueueSettings": {
                    "ClassId": "vnic.ScsiQueueSettings",
                    "Count": self.scsi_io_queues,
                    "ObjectType": "vnic.ScsiQueueSettings",
                    "RingSize": self.scsi_io_ring_size
                    },
                "TxQueueSettings": {
                    "ClassId": "vnic.FcQueueSettings",
                    "ObjectType": "vnic.FcQueueSettings",
                    "RingSize": self.transmit_ring_size
                    }
                }
            # Update the API body with the user provided Fibre Channel Adapter Configuration settings
            self.intersight_api_body.update(fibre_channel_adapter_user_configuration_settings)
        # POST the API body to Intersight
        self._post_intersight_object()


def fibre_channel_adapter_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    fibre_channel_adapter_default_configuration="",
    fcp_error_recovery=False,
    port_down_timeout_in_ms=10000,
    link_down_timeout_in_ms=30000,
    io_retry_timeout_in_seconds=5,
    port_down_io_retry_in_ms=8,
    error_detection_timeout=2000,
    resource_allocation_timeout=10000,
    flogi_retries=8,
    flogi_timeout_in_ms=4000,
    plogi_retries=8,
    plogi_timeout_in_ms=20000,
    interrupt_mode="MSIx",
    io_throttle_count=512,
    maximum_luns_per_target=1024,
    lun_queue_depth=20,
    receive_ring_size=64,
    transmit_ring_size=64,
    scsi_io_queues=1,
    scsi_io_ring_size=512,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Fibre Channel Adapter Policy on
    Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        fibre_channel_adapter_default_configuration (str):
            Optional; This setting applies a pre-defined built-in default
            configuration to be used for building the Fibre Channel Adapter
            policy. Entering a default configuration will override
            user-provided configuration settings/arguments for the Fibre
            Channel Adapter that reside under the Policy Details category.
            Accepted values include "WindowsBoot", "Solaris", "FCNVMeTarget",
            "FCNVMeInitiator", "Target", "Initiator", "VMWare", "Windows", and
            "Linux". The default value is an empty string (""), which will
            apply no default configuration and user-provided settings will be
            used.
        fcp_error_recovery (bool):
            Optional; Enable Fibre Channel error recovery on the port. The
            default value is False.
        port_down_timeout_in_ms (int):
            Optional; The amount of time in milliseconds for a remotely
            connected port to be unreachable before being marked as down. The
            accepted values are 0 - 240000. The default value is 10000.
        link_down_timeout_in_ms (int):
            Optional; The amount of time in milliseconds for the uplink port to
            be unreachable before being marked as down. The accepted values are
            0 - 240000. The default value is 30000.
        io_retry_timeout_in_seconds (int):
            Optional; The amount of time in seconds before an I/O transmission
            will be resent if there is no initial response from the target
            device. The accepted values are 1 - 59. The default value is 5.
        port_down_io_retry_in_ms (int):
            Optional; The number of times an I/O request to a remote port is
            returned before labeling the port unavailable. The accepted values
            are 0 - 255. The default value is 8.
        error_detection_timeout (int):
            Optional; The amount of time in milliseconds the system waits before
            determining an error has occurred. The accepted values are
            1000 - 100000. The default value is 2000.
        resource_allocation_timeout (int):
            Optional; The amount of time in milliseconds the system waits before
            determining a resource cannot be allocated. The accepted values are
            5000 - 100000. The default value is 10000.
        flogi_retries (int):
            Optional; The number of times a fabric login will be re-attempted
            after an initial fabric login failure. The accepted values are > 0.
            The default value is 8.
        flogi_timeout_in_ms (int):
            Optional; The amount of time in milliseconds the system waits
            re-attempting a fabric login. The accepted values are
            1000 - 255000. The default value is 4000.
        plogi_retries (int):
            Optional; The number of times a port login will be re-attempted
            after an initial port login failure. The accepted values are
            0 - 255. The default value is 8.
        plogi_timeout_in_ms (int):
            Optional; The amount of time in milliseconds the system waits
            re-attempting a port login. The accepted values are
            1000 - 255000. The default value is 20000.
        interrupt_mode (str):
            Optional; The interrupt mode. The accepted values are "MSIx",
            "MSI", or "INTx". The default value is "MSIx".
        io_throttle_count (int):
            Optional; The maximum number of pending I/O operations allowed. The
            accepted values are 1 - 1024. The default value is 512.
        maximum_luns_per_target (int):
            Optional; The maximum number of LUNs shown per target. This is
            typically limited by the OS. The accepted values are 1 - 1024. The
            default value is 1024.
        lun_queue_depth (int):
            Optional; The maximum number of commands in a transmission that can
            be sent and received by the HBA per LUN. The accepted values are
            1 - 254. The default value is 20.
        receive_ring_size (int):
            Optional; The receive ring size. The accepted values are > 64. The
            default value is 64.
        transmit_ring_size (int):
            Optional; The transmit ring size. The accepted values are > 64. The
            default value is 64.
        scsi_io_queues (int):
            Optional; The maximum number of SCSI I/O queues that can be
            allocated. The accepted values are 1 - 245. The default value is 1.
        scsi_io_ring_size (int):
            Optional; The maximum number of descriptors per SCSI I/O queues.
            The accepted values are 64 - 512. The default value is 512.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Fibre Channel Adapter Policy object in Intersight
    builder(
        FibreChannelAdapterPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            fibre_channel_adapter_default_configuration=fibre_channel_adapter_default_configuration,
            fcp_error_recovery=fcp_error_recovery,
            port_down_timeout_in_ms=port_down_timeout_in_ms,
            link_down_timeout_in_ms=link_down_timeout_in_ms,
            io_retry_timeout_in_seconds=io_retry_timeout_in_seconds,
            port_down_io_retry_in_ms=port_down_io_retry_in_ms,
            error_detection_timeout=error_detection_timeout,
            resource_allocation_timeout=resource_allocation_timeout,
            flogi_retries=flogi_retries,
            flogi_timeout_in_ms=flogi_timeout_in_ms,
            plogi_retries=plogi_retries,
            plogi_timeout_in_ms=plogi_timeout_in_ms,
            interrupt_mode=interrupt_mode,
            io_throttle_count=io_throttle_count,
            maximum_luns_per_target=maximum_luns_per_target,
            lun_queue_depth=lun_queue_depth,
            receive_ring_size=receive_ring_size,
            transmit_ring_size=transmit_ring_size,
            scsi_io_queues=scsi_io_queues,
            scsi_io_ring_size=scsi_io_ring_size
            ))


# Establish classes and functions to make Fibre Channel Network Policy
class FibreChannelNetworkPolicy(UcsPolicy):
    """This class is used to configure a Fibre Channel Network Policy in
    Intersight.
    """
    object_type = "Fibre Channel Network Policy"
    intersight_api_path = "vnic/FcNetworkPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 default_vlan=0,
                 vsan_id=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.default_vlan = default_vlan
        self.vsan_id = vsan_id
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "VsanSettings": {"DefaultVlanId": self.default_vlan, "Id": self.vsan_id}
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.default_vlan}, "
            f"{self.vsan_id})"
            )


def fibre_channel_network_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    default_vlan=0,
    vsan_id=1,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a Fibre Channel Network Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        default_vlan (int):
            Optional; The default VLAN ID setting. Default VLANs can be between
            1-4094. Leave the default of 0 if there is no default VLAN. The
            default value is 0.
        vsan_id (int):
            Optional; The VSAN ID setting. VSAN IDs can be between 1-4094. The
            default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Fibre Channel Network Policy object in Intersight
    builder(
        FibreChannelNetworkPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            default_vlan=default_vlan,
            vsan_id=vsan_id
            ))


# Establish classes and functions to make Fibre Channel QoS Policy
class FibreChannelQosPolicy(UcsPolicy):
    """This class is used to configure a Fibre Channel QoS Policy in Intersight.
    """
    object_type = "Fibre Channel QoS Policy"
    intersight_api_path = "vnic/FcQosPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 fibre_channel_qos_rate_limit_in_mbps=0,
                 fibre_channel_qos_maximum_data_field_size_in_bytes=2112,
                 fibre_channel_qos_cos=3,
                 fibre_channel_qos_burst=10240
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.fibre_channel_qos_rate_limit_in_mbps = fibre_channel_qos_rate_limit_in_mbps
        self.fibre_channel_qos_maximum_data_field_size_in_bytes = fibre_channel_qos_maximum_data_field_size_in_bytes
        self.fibre_channel_qos_cos = fibre_channel_qos_cos
        self.fibre_channel_qos_burst = fibre_channel_qos_burst
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "RateLimit": self.fibre_channel_qos_rate_limit_in_mbps,
            "MaxDataFieldSize": self.fibre_channel_qos_maximum_data_field_size_in_bytes,
            "Cos": self.fibre_channel_qos_cos,
            "Burst": self.fibre_channel_qos_burst
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.fibre_channel_qos_rate_limit_in_mbps}, "
            f"{self.fibre_channel_qos_maximum_data_field_size_in_bytes}, "
            f"{self.fibre_channel_qos_cos}, "
            f"{self.fibre_channel_qos_burst})"
            )


def fibre_channel_qos_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    fibre_channel_qos_rate_limit_in_mbps=0,
    fibre_channel_qos_maximum_data_field_size_in_bytes=2112,
    fibre_channel_qos_cos=3,
    fibre_channel_qos_burst=10240,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a Fibre Channel QoS Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        fibre_channel_qos_rate_limit_in_mbps (int):
            Optional; The fibre channel QoS rate limit in Mbps. The accepted
            values are 0 - 100000. The default value is 0.
        fibre_channel_qos_maximum_data_field_size_in_bytes (int):
            Optional; The fibre channel QoS maximum data field size in
            bytes. The accepted values are 256 - 2112. The default value is
            2112.
        fibre_channel_qos_cos (int):
            Optional; The fibre channel QoS rate limit in Mbps. The accepted
            values are 0 - 6. The default value is 3.
        fibre_channel_qos_burst (int):
            Optional; The fibre channel QoS burst traffic allowed in bytes. The
            accepted values are 1 - 1000000. The default value is 10240.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Fibre Channel QoS Policy object in Intersight
    builder(
        FibreChannelQosPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            fibre_channel_qos_rate_limit_in_mbps=fibre_channel_qos_rate_limit_in_mbps,
            fibre_channel_qos_maximum_data_field_size_in_bytes=fibre_channel_qos_maximum_data_field_size_in_bytes,
            fibre_channel_qos_cos=fibre_channel_qos_cos,
            fibre_channel_qos_burst=fibre_channel_qos_burst
            ))


# Establish classes and functions to make IMC Access Policy
class ImcAccessPolicy(DirectlyAttachedUcsServerAndChassisPolicy):
    """This class is used to configure an IMC Access Policy in Intersight.
    """
    object_type = "IMC Access Policy"
    intersight_api_path = "access/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 ucs_chassis_profile_names="",
                 enable_in_band_configuration=True,
                 in_band_vlan_id=4,
                 enable_in_band_ipv4_configuration=True,
                 enable_in_band_ipv6_configuration=False,
                 default_in_band_ip_pool_name="",
                 enable_out_of_band_configuration=False,
                 default_out_of_band_ip_pool_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names,
                         ucs_chassis_profile_names
                         )
        self.enable_in_band_configuration = enable_in_band_configuration
        self.in_band_vlan_id = in_band_vlan_id
        self.enable_in_band_ipv4_configuration = enable_in_band_ipv4_configuration
        self.enable_in_band_ipv6_configuration = enable_in_band_ipv6_configuration
        self.default_in_band_ip_pool_name = default_in_band_ip_pool_name
        self.enable_out_of_band_configuration = enable_out_of_band_configuration
        self.default_out_of_band_ip_pool_name = default_out_of_band_ip_pool_name
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "ConfigurationType": {
                "ConfigureInband": self.enable_in_band_configuration,
                "ConfigureOutOfBand": self.enable_out_of_band_configuration
                },
            "AddressType": {
                "EnableIpV4": self.enable_in_band_ipv4_configuration,
                "EnableIpV6": self.enable_in_band_ipv6_configuration
                },
            "InbandVlan": self.in_band_vlan_id
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.ucs_chassis_profile_names}', "
            f"{self.enable_in_band_configuration}, "
            f"{self.in_band_vlan_id}, "
            f"{self.enable_in_band_ipv4_configuration}, "
            f"{self.enable_in_band_ipv6_configuration}, "
            f"'{self.default_in_band_ip_pool_name}', "
            f"{self.enable_out_of_band_configuration}, "
            f"'{self.default_out_of_band_ip_pool_name}')"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with any provided In-Band IP Pool
        if self.default_in_band_ip_pool_name:
            default_in_band_ip_pool_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                            intersight_api_key=None,
                                                                            object_name=self.default_in_band_ip_pool_name,
                                                                            intersight_api_path="ippool/Pools?$top=1000",
                                                                            object_type="IP Pool",
                                                                            preconfigured_api_client=self.api_client
                                                                            )
            self.intersight_api_body["InbandIpPool"] = {
                "Moid": default_in_band_ip_pool_moid
                }
        else:
            self.intersight_api_body["InbandIpPool"] = None
        # Update the API body with any provided Out-of-Band IP Pool
        if self.default_out_of_band_ip_pool_name:
            default_out_of_band_ip_pool_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                intersight_api_key=None,
                                                                                object_name=self.default_out_of_band_ip_pool_name,
                                                                                intersight_api_path="ippool/Pools?$top=1000",
                                                                                object_type="IP Pool",
                                                                                preconfigured_api_client=self.api_client
                                                                                )
            self.intersight_api_body["OutOfBandIpPool"] = {
                "Moid": default_out_of_band_ip_pool_moid
                }
        else:
            self.intersight_api_body["OutOfBandIpPool"] = None
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_and_chassis_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


def imc_access_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_in_band_configuration=True,
    in_band_vlan_id=4,
    enable_in_band_ipv4_configuration=True,
    enable_in_band_ipv6_configuration=False,
    default_in_band_ip_pool_name="",
    enable_out_of_band_configuration=False,
    default_out_of_band_ip_pool_name="",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names="",
    ucs_chassis_profile_names=""
    ):
    """This is a function used to make a IMC Access Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_in_band_configuration (bool):
            Optional; The setting to enable in-band IMC access. The
            default value is True.
        in_band_vlan_id (int):
            Optional; The in-band VLAN ID. The accepted values are 4 - 4093.
            The default value is 4.
        enable_in_band_ipv4_configuration (bool):
            Optional; The setting to enable an IPv4 address for the in-band IMC
            access connection. The default value is True.
        enable_in_band_ipv6_configuration (bool):
            Optional; The setting to enable an IPv6 address for the in-band IMC
            access connection. The default value is False.
        default_in_band_ip_pool_name (str):
            Optional; The name of the IP Pool Policy to be used by the in-band
            IMC connection. The provided IP Pool Policy should be configured to
            support the chosen IP address version for the in-band IMC
            connection (IPv4 or IPv6). The default value is an empty string
            ("").
        enable_out_of_band_configuration (bool):
            Optional; The setting to enable out-of-band IMC access. The
            default value is False.
        default_out_of_band_ip_pool_name (str):
            Optional; The name of the IP Pool Policy to be used by the
            out-of-band IMC connection. The default value is an empty string
            ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
        ucs_chassis_profile_names (str):
            Optional; The UCS Chassis Profiles the policy should be attached
            to. If providing more than one UCS Chassis Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create IMC Access Policy object in Intersight
    builder(
        ImcAccessPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            ucs_chassis_profile_names=ucs_chassis_profile_names,
            enable_in_band_configuration=enable_in_band_configuration,
            in_band_vlan_id=in_band_vlan_id,
            enable_in_band_ipv4_configuration=enable_in_band_ipv4_configuration,
            enable_in_band_ipv6_configuration=enable_in_band_ipv6_configuration,
            default_in_band_ip_pool_name=default_in_band_ip_pool_name,
            enable_out_of_band_configuration=enable_out_of_band_configuration,
            default_out_of_band_ip_pool_name=default_out_of_band_ip_pool_name
            ))


# Establish classes and functions to make IPMI Over LAN Policy
class IpmiOverLanPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a IPMI Over LAN Policy in Intersight.
    """
    object_type = "IPMI Over LAN Policy"
    intersight_api_path = "ipmioverlan/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 enable_ipmi_over_lan=True,
                 privilege_level="admin",
                 encryption_key=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.enable_ipmi_over_lan = enable_ipmi_over_lan
        self.privilege_level = privilege_level
        self.encryption_key = encryption_key
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_ipmi_over_lan,
            "Privilege": self.privilege_level,
            "EncryptionKey": self.encryption_key
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.enable_ipmi_over_lan}, "
            f"{self.privilege_level}, "
            f"'{self.encryption_key}')"
            )


def ipmi_over_lan_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_ipmi_over_lan=True,
    privilege_level="admin",
    encryption_key="",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a IPMI Over LAN Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_ipmi_over_lan (bool):
            Optional; The setting to enable the IPMI Over LAN service. The
            default value is True.
        privilege_level (str):
            Optional; The highest privilege level assignable to an IPMI Over
            LAN session. The accepted values are "admin", "user", and
            "read-only". The default value is "admin".
        encryption_key (str):
            Optional; The encryption key for IPMI Over LAN sessions. The
            encryption key should have an even number of hexadecimal characters
            that does not exceed 40 total characters. The default value is ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create IPMI Over LAN Policy object in Intersight
    builder(
        IpmiOverLanPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            enable_ipmi_over_lan=enable_ipmi_over_lan,
            privilege_level=privilege_level,
            encryption_key=encryption_key
            ))


# Establish classes and functions to make IP Pool
class IpPool:
    """This class is used to configure an IP Pool in Intersight.
    """
    object_type = "IP Pool"
    intersight_api_path = "ippool/Pools"
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "IP Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    block_types = [
        {"BlockType": "ippool.IpV4Block",
         "BlocksListVariableName": "ipv4_blocks_list",
         "Description": "IPv4 Block",
         "AttributeName": "IpV4Blocks"
         },
        {"BlockType": "ippool.IpV6Block",
         "BlocksListVariableName": "ipv6_blocks_list",
         "Description": "IPv6 Block",
         "AttributeName": "IpV6Blocks"
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 configure_ipv4_pool,
                 ipv4_netmask,
                 ipv4_gateway,
                 ipv4_primary_dns,
                 ipv4_secondary_dns,
                 ipv4_blocks_list,
                 configure_ipv6_pool=False,
                 ipv6_prefix=0,
                 ipv6_gateway="",
                 ipv6_primary_dns="",
                 ipv6_secondary_dns="",
                 ipv6_blocks_list=None,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.pool_name = pool_name
        self.configure_ipv4_pool = configure_ipv4_pool
        self.ipv4_netmask = ipv4_netmask
        self.ipv4_gateway = ipv4_gateway
        self.ipv4_primary_dns = ipv4_primary_dns
        self.ipv4_secondary_dns = ipv4_secondary_dns
        self.ipv4_blocks_list = ipv4_blocks_list
        self.configure_ipv6_pool = configure_ipv6_pool
        self.ipv6_prefix = ipv6_prefix
        self.ipv6_gateway = ipv6_gateway
        self.ipv6_primary_dns = ipv6_primary_dns
        self.ipv6_secondary_dns = ipv6_secondary_dns
        if ipv6_blocks_list is None:
            self.ipv6_blocks_list = []
        else:
            self.ipv6_blocks_list = ipv6_blocks_list
        self.pool_description = pool_description
        self.pool_assignment_order = pool_assignment_order
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"{self.configure_ipv4_pool}, "
            f"'{self.ipv4_netmask}', "
            f"'{self.ipv4_gateway}', "
            f"'{self.ipv4_primary_dns}', "
            f"'{self.ipv4_secondary_dns}', "
            f"{self.ipv4_blocks_list}, "
            f"{self.configure_ipv6_pool}, "
            f"'{self.ipv6_prefix}', "
            f"'{self.ipv6_gateway}', "
            f"'{self.ipv6_primary_dns}', "
            f"'{self.ipv6_secondary_dns}', "
            f"{self.ipv6_blocks_list}, "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.pool_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        pool_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": pool_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.pool_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def _update_api_body_pool_block_attributes(self):
        """This function updates the Intersight API body with the Pool block
        attributes for the Intersight object. The provided Pool block list is 
        converted for use with the Intersight API.
        """
        for block_type_dictionary in self.block_types:
            blocks_list = getattr(self,
                                  block_type_dictionary.get("BlocksListVariableName")
                                  )
            if blocks_list:
                converted_blocks_list = []
                for provided_block_dictionary in blocks_list:
                    staged_block_dictionary = copy.deepcopy(provided_block_dictionary)
                    returned_block_type = block_type_dictionary["BlockType"]
                    # Set 'ClassId' attribute
                    staged_block_dictionary["ClassId"] = returned_block_type
                    # Set 'ObjectType' attribute
                    staged_block_dictionary["ObjectType"] = returned_block_type
                    converted_block_dictionary = staged_block_dictionary
                    converted_blocks_list.append(converted_block_dictionary)
                # Update Intersight API body with the converted Pool block list value
                self.intersight_api_body[block_type_dictionary["AttributeName"]] = converted_blocks_list

    def object_maker(self):
        """This function makes the targeted pool object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.pool_name}...")
        # Configure IPv4 Pool settings
        if self.configure_ipv4_pool:
            # Set IPv4 configuration dictionary
            ipv4_config_dictionary = {
                "Netmask": self.ipv4_netmask,
                "Gateway": self.ipv4_gateway,
                "PrimaryDns": self.ipv4_primary_dns,
                "SecondaryDns": self.ipv4_secondary_dns,
                "ClassId": "ippool.IpV4Config",
                "ObjectType": "ippool.IpV4Config"
                }
            # Update the API body with the IPv4 Pool configuration dictionary
            self.intersight_api_body["IpV4Config"] = ipv4_config_dictionary
        # Configure IPv6 Pool settings
        if self.configure_ipv6_pool:
            # Set IPv6 configuration dictionary
            ipv6_config_dictionary = {
                "Prefix": self.ipv6_prefix,
                "Gateway": self.ipv6_gateway,
                "PrimaryDns": self.ipv6_primary_dns,
                "SecondaryDns": self.ipv6_secondary_dns,
                "ClassId": "ippool.IpV6Config",
                "ObjectType": "ippool.IpV6Config"
                }
            # Update the API body with the IPv6 Pool configuration dictionary
            self.intersight_api_body["IpV6Config"] = ipv6_config_dictionary
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with individual Pool block list attributes
        self._update_api_body_pool_block_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


def ip_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    configure_ipv4_pool,
    ipv4_netmask,
    ipv4_gateway,
    ipv4_primary_dns,
    ipv4_secondary_dns,
    ipv4_blocks_list,
    configure_ipv6_pool=False,
    ipv6_prefix=0,
    ipv6_gateway="",
    ipv6_primary_dns="",
    ipv6_secondary_dns="",
    ipv6_blocks_list=None,
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an IP Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        configure_ipv4_pool (bool):
            Enable or disable configuring IP version 4 pools.
        ipv4_netmask (str):
            The netmask or subnet address of the IPv4 pools to be created.
        ipv4_gateway (str):
            The gateway of the IPv4 pools to be created.
        ipv4_primary_dns (str):
            The primary DNS server of the IPv4 pools to be created.
        ipv4_secondary_dns (str):
            The secondary DNS server of the IPv4 pools to be created.
        ipv4_blocks_list (list):
            The list of dictionary entries for each IPv4 block to
            be configured. An example entry is:
            [{"From": "192.168.0.20",
              "Size": 100},].
            A "From" key with a string value must be configured to specify the
            first IPv4 address in the block. A "Size" key with an integer value
            must also be configured to specify the size of the block. Optional
            key settings such as "To" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. Multiple dictionaries can be placed in the list to
            configure different block ranges.
        configure_ipv6_pool (bool):
            Optional; Enable or disable configuring IP version 6 pools. The
            default value is False.
        ipv6_prefix (int):
            Optional; The prefix of the IPv6 pools to be created. The default
            value is 0.
        ipv6_gateway (str):
            Optional; The gateway of the IPv6 pools to be created. The default
            value is an empty string ("").
        ipv6_primary_dns (str):
            Optional; The primary DNS server of the IPv6 pools to be created.
            The default value is an empty string ("").
        ipv6_secondary_dns (str):
            Optional; The secondary DNS server of the IPv6 pools to be created.
            The default value is an empty string ("").
        ipv6_blocks_list (list):
            Optional; The list of dictionary entries for each IPv6 block to
            be configured. The default value is None. An
            example entry is:
            [{"From": "2001:DB8:1234::10",
              "Size": 100},].
            A "From" key with a string value must be configured to specify the
            first IPv6 address in the block. A "Size" key with an integer value
            must also be configured to specify the size of the block. Optional
            key settings such as "To" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. Multiple dictionaries can be placed in the list to
            configure different block ranges.
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create IP Pool object in Intersight
    builder(
        IpPool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            configure_ipv4_pool=configure_ipv4_pool,
            ipv4_netmask=ipv4_netmask,
            ipv4_gateway=ipv4_gateway,
            ipv4_primary_dns=ipv4_primary_dns,
            ipv4_secondary_dns=ipv4_secondary_dns,
            ipv4_blocks_list=ipv4_blocks_list,
            configure_ipv6_pool=configure_ipv6_pool,
            ipv6_prefix=ipv6_prefix,
            ipv6_gateway=ipv6_gateway,
            ipv6_primary_dns=ipv6_primary_dns,
            ipv6_secondary_dns=ipv6_secondary_dns,
            ipv6_blocks_list=ipv6_blocks_list,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client
            ))


# Establish classes and functions to make IQN Pool
class IqnPool(UcsPool):
    """This class is used to configure an IQN Pool in Intersight.
    """
    object_type = "IQN Pool"
    intersight_api_path = "iqnpool/Pools"
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "IQN Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    block_types = [
        {"BlockType": "iqnpool.IqnSuffixBlock",
         "BlocksListVariableName": "iqn_blocks_list",
         "Description": "IQN Suffix Block",
         "AttributeName": "IqnSuffixBlocks"
         }
        ]    
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 iqn_blocks_list=None,
                 iqn_prefix="iqn.1987-05.com.cisco"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         pool_name,
                         pool_description,
                         pool_assignment_order,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        if iqn_blocks_list is None:
            self.iqn_blocks_list = []
        else:
            self.iqn_blocks_list = iqn_blocks_list
        self.iqn_prefix = iqn_prefix
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description,
            "Prefix": self.iqn_prefix
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.iqn_blocks_list}, "
            f"'{self.iqn_prefix}')"
            )


def iqn_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    iqn_blocks_list=None,
    iqn_prefix="iqn.1987-05.com.cisco",
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an IQN Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        iqn_blocks_list (list):
            Optional; The list of dictionary entries for each IQN block to
            be configured. The default value is None. An
            example entry is:
            [{"Suffix": "ucs.windows.host",
              "From": 1,
              "Size": 256},
             {"Suffix": "ucs.linux.host",
              "From": 1,
              "Size": 256},].
            A "Suffix" key with a string value must be configured in each
            dictionary of the list to specify the suffix for the block of IQNs 
            to be created. A "From" key with an integer value must also be
            configured to specify the first suffix number in the block.
            A "Size" key with an integer value must also be configured to
            specify the size of the block. Optional key settings such as "To"
            can also be configured in each list dictionary, if the associated
            system default values are not desired. Multiple dictionaries can be
            placed in the list to configure different block ranges.
        iqn_prefix (str):
            Optional; The IQN prefix for all blocks created in the pool. The
            default value is "iqn.1987-05.com.cisco".
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create IQN Pool object in Intersight
    builder(
        IqnPool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            iqn_blocks_list=iqn_blocks_list,
            iqn_prefix=iqn_prefix
            ))


# Establish classes and functions to make iSCSI Adapter Policy
class IscsiAdapterPolicy(UcsPolicy):
    """This class is used to configure a iSCSI Adapter Policy in Intersight.
    """
    object_type = "iSCSI Adapter Policy"
    intersight_api_path = "vnic/IscsiAdapterPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 tcp_connection_timeout=15,
                 dhcp_timeout=60,
                 lun_busy_retry_count=15
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.tcp_connection_timeout = tcp_connection_timeout
        self.dhcp_timeout = dhcp_timeout
        self.lun_busy_retry_count = lun_busy_retry_count
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "ConnectionTimeOut": self.tcp_connection_timeout,
            "DhcpTimeout": self.dhcp_timeout,
            "LunBusyRetryCount": self.lun_busy_retry_count
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.tcp_connection_timeout}, "
            f"{self.dhcp_timeout}, "
            f"{self.lun_busy_retry_count})"
            )


def iscsi_adapter_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    tcp_connection_timeout=15,
    dhcp_timeout=60,
    lun_busy_retry_count=15,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a iSCSI Adapter Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        tcp_connection_timeout (int):
            Optional; The maximum number of seconds to wait for a TCP
            connection to the configured iSCSI target. The accepted values
            are 0 - 255. The default value is 15.
        dhcp_timeout (int):
            Optional; The maximum number of seconds to wait for an IP address
            if using a DHCP server for IP assignment on the initiator.
            The accepted values are 60 - 300. The default value is 60.
        lun_busy_retry_count (int):
            Optional; The maximum number of attempts to retry the connection to
            the configured iSCSI LUN during discovery. The accepted values
            are 0 - 60. The default value is 15.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create iSCSI Adapter Policy object in Intersight
    builder(
        IscsiAdapterPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            tcp_connection_timeout=tcp_connection_timeout,
            dhcp_timeout=dhcp_timeout,
            lun_busy_retry_count=lun_busy_retry_count
            ))


# Establish classes and functions to make iSCSI Boot Policy
class IscsiBootPolicy(UcsPolicy):
    """This class is used to configure a iSCSI Boot Policy in Intersight.
    """
    object_type = "iSCSI Boot Policy"
    intersight_api_path = "vnic/IscsiBootPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 iscsi_adapter_policy_name="",
                 configuration_type_for_target_source="Static",
                 auto_target_dhcp_vendor_id_or_iqn="",
                 primary_static_target_policy_name="",
                 secondary_static_target_policy_name="",
                 static_chap_username="",
                 static_chap_password="",
                 static_mutual_chap_username="",
                 static_mutual_chap_password="",
                 static_initiator_ip_source="DHCP",
                 static_initiator_ip_source_pool_ip_pool_name="",
                 static_initiator_ip_source_static_ip_address="",
                 static_initiator_ip_source_static_subnet_mask="",
                 static_initiator_ip_source_static_default_gateway="",
                 static_initiator_ip_source_static_primary_dns="",
                 static_initiator_ip_source_static_secondary_dns=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.iscsi_adapter_policy_name = iscsi_adapter_policy_name
        self.configuration_type_for_target_source = configuration_type_for_target_source
        self.auto_target_dhcp_vendor_id_or_iqn = auto_target_dhcp_vendor_id_or_iqn
        self.primary_static_target_policy_name = primary_static_target_policy_name
        self.secondary_static_target_policy_name = secondary_static_target_policy_name
        self.static_chap_username = static_chap_username
        self.static_chap_password = static_chap_password
        self.static_mutual_chap_username = static_mutual_chap_username
        self.static_mutual_chap_password = static_mutual_chap_password
        self.static_initiator_ip_source = static_initiator_ip_source
        self.static_initiator_ip_source_pool_ip_pool_name = static_initiator_ip_source_pool_ip_pool_name
        self.static_initiator_ip_source_static_ip_address = static_initiator_ip_source_static_ip_address
        self.static_initiator_ip_source_static_subnet_mask = static_initiator_ip_source_static_subnet_mask
        self.static_initiator_ip_source_static_default_gateway = static_initiator_ip_source_static_default_gateway
        self.static_initiator_ip_source_static_primary_dns = static_initiator_ip_source_static_primary_dns
        self.static_initiator_ip_source_static_secondary_dns = static_initiator_ip_source_static_secondary_dns
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "TargetSourceType": self.configuration_type_for_target_source,
            "AutoTargetvendorName": self.auto_target_dhcp_vendor_id_or_iqn,
            "Chap": {
                "UserId": self.static_chap_username,
                "Password": self.static_chap_password
                },
            "MutualChap": {
                "UserId": self.static_mutual_chap_username,
                "Password": self.static_mutual_chap_password
                },
            "InitiatorIpSource": self.static_initiator_ip_source,
            "InitiatorStaticIpV4Address": self.static_initiator_ip_source_static_ip_address,
            "InitiatorStaticIpV4Config": {
                "Netmask": self.static_initiator_ip_source_static_subnet_mask,
                "Gateway": self.static_initiator_ip_source_static_default_gateway,
                "PrimaryDns": self.static_initiator_ip_source_static_primary_dns,
                "SecondaryDns": self.static_initiator_ip_source_static_secondary_dns
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.iscsi_adapter_policy_name}', "
            f"'{self.configuration_type_for_target_source}', "
            f"'{self.auto_target_dhcp_vendor_id_or_iqn}', "
            f"'{self.primary_static_target_policy_name}', "
            f"'{self.secondary_static_target_policy_name}', "
            f"'{self.static_chap_username}', "
            f"'{self.static_chap_password}', "
            f"'{self.static_mutual_chap_username}', "
            f"'{self.static_mutual_chap_password}', "
            f"'{self.static_initiator_ip_source}', "
            f"'{self.static_initiator_ip_source_pool_ip_pool_name}', "
            f"'{self.static_initiator_ip_source_static_ip_address}', "
            f"'{self.static_initiator_ip_source_static_subnet_mask}', "
            f"'{self.static_initiator_ip_source_static_default_gateway}', "
            f"'{self.static_initiator_ip_source_static_primary_dns}', "
            f"'{self.static_initiator_ip_source_static_secondary_dns}')"
            )


    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with the provided iSCSI Adapter Policy
        if self.iscsi_adapter_policy_name:
            iscsi_adapter_policy_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.iscsi_adapter_policy_name,
                intersight_api_path="vnic/IscsiAdapterPolicies?$top=1000",
                object_type="iSCSI Adapter Policy",
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["IscsiAdapterPolicy"] = {
                "Moid": iscsi_adapter_policy_moid
                }
        else:
            self.intersight_api_body["IscsiAdapterPolicy"] = None
        # Update the API body with the provided primary iSCSI Static Target Policy
        if self.primary_static_target_policy_name:
            static_primary_target_policy_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.primary_static_target_policy_name,
                intersight_api_path="vnic/IscsiStaticTargetPolicies?$top=1000",
                object_type="primary iSCSI Static Target Policy",
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["PrimaryTargetPolicy"] = {
                "Moid": static_primary_target_policy_moid
                }
        else:
            self.intersight_api_body["PrimaryTargetPolicy"] = None
        # Update the API body with the provided secondary iSCSI Static Target Policy
        if self.secondary_static_target_policy_name:
            static_secondary_target_policy_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.secondary_static_target_policy_name,
                intersight_api_path="vnic/IscsiStaticTargetPolicies?$top=1000",
                object_type="secondary iSCSI Static Target Policy",
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["SecondaryTargetPolicy"] = {
                "Moid": static_secondary_target_policy_moid
                }
        else:
            self.intersight_api_body["SecondaryTargetPolicy"] = None
        # Update the API body with the provided Initiator IP Source IP Pool
        if self.static_initiator_ip_source_pool_ip_pool_name:
            static_initiator_ip_source_pool_ip_pool_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.static_initiator_ip_source_pool_ip_pool_name,
                intersight_api_path="ippool/Pools?$top=1000",
                object_type="Initiator IP Source IP Pool",
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["InitiatorIpPool"] = {
                "Moid": static_initiator_ip_source_pool_ip_pool_moid
                }
        else:
            self.intersight_api_body["InitiatorIpPool"] = None
        # POST the API body to Intersight
        self._post_intersight_object()


def iscsi_boot_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    iscsi_adapter_policy_name,
    configuration_type_for_target_source="Static",
    auto_target_dhcp_vendor_id_or_iqn="",
    primary_static_target_policy_name="",
    secondary_static_target_policy_name="",
    static_chap_username="",
    static_chap_password="",
    static_mutual_chap_username="",
    static_mutual_chap_password="",
    static_initiator_ip_source="DHCP",
    static_initiator_ip_source_pool_ip_pool_name="",
    static_initiator_ip_source_static_ip_address="",
    static_initiator_ip_source_static_subnet_mask="",
    static_initiator_ip_source_static_default_gateway="",
    static_initiator_ip_source_static_primary_dns="",
    static_initiator_ip_source_static_secondary_dns="",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a iSCSI Boot Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        iscsi_adapter_policy_name (str):
            The name of the iSCSI Adapter Policy to be used by the iSCSI Boot
            Policy.
        configuration_type_for_target_source (str):
            Optional; The configuration type for the iSCSI target source. The
            accepted values are "Auto" and "Static". The default value is
            "Static".
        auto_target_dhcp_vendor_id_or_iqn (str):
            Optional; The auto target interface that is represented by the
            initiator name (IQN) or the DHCP vendor ID. This value is only
            required for the Auto configuration type under the iSCSI Boot
            Policy. The default value is an empty string ("").
        primary_static_target_policy_name (str):
            Optional; The name of the primary iSCSI Static Target Policy to be
            used by the iSCSI Boot Policy. This value is only required for the
            Static configuration type under the iSCSI Boot Policy. The default
            value is an empty string ("").
        secondary_static_target_policy_name (str):
            Optional; The name of the secondary iSCSI Static Target Policy to
            be used by the iSCSI Boot Policy. This value is only required for
            the Static configuration type under the iSCSI Boot Policy. The
            default value is an empty string ("").
        static_chap_username (str):
            Optional; The CHAP username if CHAP credentials are required. This
            value is only required for the Static configuration type under the
            iSCSI Boot Policy. The default value is an empty string ("").
        static_chap_password (str):
            Optional; The CHAP password if CHAP credentials are required. This
            value is only required for the Static configuration type under the
            iSCSI Boot Policy. The default value is an empty string ("").
        static_mutual_chap_username (str):
            Optional; The mutual CHAP username if mutual CHAP credentials are
            required. This value is only required for the Static configuration
            type under the iSCSI Boot Policy. The default value is an empty
            string ("").
        static_mutual_chap_password (str):
            Optional; The mutual CHAP password if mutual CHAP credentials are
            required. This value is only required for the Static configuration
            type under the iSCSI Boot Policy. The default value is an empty
            string ("").
        static_initiator_ip_source (str):
            Optional; The initiator IP source. The accepted values are "Pool",
            "DHCP", and "Static". This value is only required for the Static
            configuration type under the iSCSI Boot Policy. The default value
            is "DHCP".
        static_initiator_ip_source_pool_ip_pool_name (str):
            Optional; The initiator IP source IP Pool name. This value is
            only required for the Static configuration type under the iSCSI
            Boot Policy using "Pool" as the initiator IP source. The default
            value is an empty string ("").
        static_initiator_ip_source_static_ip_address (str):
            Optional; The initiator IP address. This value is only required for
            the Static configuration type under the iSCSI Boot Policy using
            "Static" as the initiator IP source. The default value is an empty
            string ("").
        static_initiator_ip_source_static_subnet_mask (str):
            Optional; The initiator IP address subnet mask. This value is only
            required for the Static configuration type under the iSCSI Boot
            Policy using "Static" as the initiator IP source. The default value
            is an empty string ("").
        static_initiator_ip_source_static_default_gateway (str):
            Optional; The initiator IP address default gateway. This value is
            only required for the Static configuration type under the iSCSI
            Boot Policy using "Static" as the initiator IP source. The default
            value is an empty string ("").
        static_initiator_ip_source_static_primary_dns (str):
            Optional; The primary DNS server for the initiator IP address. This
            value is only required for the Static configuration type under the
            iSCSI Boot Policy using "Static" as the initiator IP source. The
            default value is an empty string ("").
        static_initiator_ip_source_static_secondary_dns (str):
            Optional; The secondary DNS server for the initiator IP address.
            This value is only required for the Static configuration type under
            the iSCSI Boot Policy using "Static" as the initiator IP source.
            The default value is an empty string ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create iSCSI Boot Policy object in Intersight
    builder(
        IscsiBootPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            iscsi_adapter_policy_name=iscsi_adapter_policy_name,
            configuration_type_for_target_source=configuration_type_for_target_source,
            auto_target_dhcp_vendor_id_or_iqn=auto_target_dhcp_vendor_id_or_iqn,
            primary_static_target_policy_name=primary_static_target_policy_name,
            secondary_static_target_policy_name=secondary_static_target_policy_name,
            static_chap_username=static_chap_username,
            static_chap_password=static_chap_password,
            static_mutual_chap_username=static_mutual_chap_username,
            static_mutual_chap_password=static_mutual_chap_password,
            static_initiator_ip_source=static_initiator_ip_source,
            static_initiator_ip_source_pool_ip_pool_name=static_initiator_ip_source_pool_ip_pool_name,
            static_initiator_ip_source_static_ip_address=static_initiator_ip_source_static_ip_address,
            static_initiator_ip_source_static_subnet_mask=static_initiator_ip_source_static_subnet_mask,
            static_initiator_ip_source_static_default_gateway=static_initiator_ip_source_static_default_gateway,
            static_initiator_ip_source_static_primary_dns=static_initiator_ip_source_static_primary_dns,
            static_initiator_ip_source_static_secondary_dns=static_initiator_ip_source_static_secondary_dns
            ))


# Establish classes and functions to make iSCSI Static Target Policy
class IscsiStaticTargetPolicy(UcsPolicy):
    """This class is used to configure a iSCSI Static Target Policy in Intersight.
    """
    object_type = "iSCSI Static Target Policy"
    intersight_api_path = "vnic/IscsiStaticTargetPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 target_name="",
                 ip_address="",
                 port=1,
                 lun_id=0,
                 lun_is_bootable=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.target_name = target_name
        self.ip_address = ip_address
        self.port = port
        self.lun_id = lun_id
        self.lun_is_bootable = lun_is_bootable
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "TargetName": self.target_name,
            "IpAddress": self.ip_address,
            "Port": self.port,
            "Lun": {
                "LunId": self.lun_id,
                "Bootable": self.lun_is_bootable
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.target_name}', "
            f"'{self.ip_address}', "
            f"{self.port}, "
            f"{self.lun_id}, "
            f"{self.lun_is_bootable})"
            )


def iscsi_static_target_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    target_name,
    ip_address,
    port,
    lun_id,
    lun_is_bootable=False,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a iSCSI Static Target Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        target_name (str):
            The name of the static iSCSI target.
        ip_address (str):
            The IP address of the static iSCSI target.
        port (int):
            The port of the static iSCSI target.
        lun_id (int):
            The LUN ID on the static iSCSI target.
        lun_is_bootable (bool):
            Specification if the LUN on the static iSCSI target is bootable.
            The default value is False.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create iSCSI Static Target Policy object in Intersight
    builder(
        IscsiStaticTargetPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            target_name=target_name,
            ip_address=ip_address,
            port=port,
            lun_id=lun_id,
            lun_is_bootable=lun_is_bootable
            ))


# Establish classes and functions to make LAN Connectivity Policy
class LanConnectivityPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a LAN Connectivity Policy in Intersight.
    """
    object_type = "LAN Connectivity Policy"
    intersight_api_path = "vnic/LanConnectivityPolicies"
    object_variable_value_maps = [
        {"VariableName": "vnic_placement_mode",
         "Description": "vNIC Placement Mode",
         "AttributeName": "PlacementMode",
         "Values": [
             {"FrontEndValue": "Auto",
              "BackEndValue": "auto"
              },
             {"FrontEndValue": "Manual",
              "BackEndValue": "custom"
              },
             {"FrontEndValue": "Custom",
              "BackEndValue": "custom"
              }
             ]
         }
        ]    

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 enable_azure_stack_host_qos=False,
                 iqn_assignment_type="None",
                 iqn_pool_name=None,
                 iqn_static_identifier="",
                 vnic_placement_mode="Auto",
                 ucs_server_type="FI-Attached"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.enable_azure_stack_host_qos = enable_azure_stack_host_qos
        self.iqn_assignment_type = iqn_assignment_type
        self.iqn_pool_name = iqn_pool_name
        self.iqn_static_identifier = iqn_static_identifier
        self.vnic_placement_mode = vnic_placement_mode
        self.ucs_server_type = ucs_server_type
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "AzureQosEnabled": self.enable_azure_stack_host_qos,
            "IqnAllocationType": self.iqn_assignment_type,
            "StaticIqnName": self.iqn_static_identifier
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.enable_azure_stack_host_qos}, "
            f"'{self.iqn_assignment_type}', "
            f"{self.iqn_pool_name}, "
            f"'{self.iqn_static_identifier}', "
            f"'{self.vnic_placement_mode}', "
            f"'{self.ucs_server_type}')"
            )

    def _update_api_body_ucs_server_type(self):
        """This function updates the Intersight API body with the UCS server type
        i.e. target platform in the accepted format.
        
        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """    
        # Update the API body with the provided UCS Server Type (Target Platform)
        # Reformat the user provided ucs_server_type variable value to lowercase and remove spaces to prevent potential format issues
        try:
            reformatted_ucs_server_type_variable_value = "".join(self.ucs_server_type.lower().split())
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        if reformatted_ucs_server_type_variable_value == "fi-attached":
            self.intersight_api_body["TargetPlatform"] = "FIAttached"
        elif reformatted_ucs_server_type_variable_value == "standalone":
            self.intersight_api_body["TargetPlatform"] = "Standalone"
        else:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)

    def object_maker(self):
        """This function makes the targeted policy object.
        """
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with any provided IQN Pool
        if self.iqn_pool_name:
            iqn_pool_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                             intersight_api_key=None,
                                                             object_name=self.iqn_pool_name,
                                                             intersight_api_path="iqnpool/Pools?$top=1000",
                                                             object_type="IQN Pool",
                                                             preconfigured_api_client=self.api_client
                                                             )
            self.intersight_api_body["IqnPool"] = {
                "Moid": iqn_pool_moid
                }
        else:
            self.intersight_api_body["IqnPool"] = None
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # Update the API body with the UCS server type
        self._update_api_body_ucs_server_type()
        # POST the API body to Intersight
        self._post_intersight_object()


class Vnic(Interface):
    """This class serves as a base class for configuring vNICs in Intersight
    policies.
    """
    object_type = "vNIC"
    id_type = "Vnic"
    intersight_api_path = "vnic/EthIfs"
    policy_type = "LAN Connectivity Policy"
    policy_intersight_api_path = "vnic/LanConnectivityPolicies"
    policy_class_name = "LanConnectivityPolicy"
    interface_object_attribute_maps = [
        {"FrontEndName": None,
         "BackEndName": "Name",
         "Description": "vNIC Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Pin Group Name",
         "BackEndName": "PinGroupName",
         "Description": "vNIC Pin Group Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "MAC Address Type",
         "BackEndName": "MacAddressType",
         "Description": "MAC Address Type",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Pool",
             "Static"
             ],
         "FronttoBackEndValueMaps": {
             "pool": "POOL",
             "static": "STATIC"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "MAC Address Pool",
         "BackEndName": "MacPool",
         "Description": "MAC Address Pool",
         "IntersightAPIPath": "macpool/Pools",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_mac_address_pool_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Static MAC Address",
         "BackEndName": "StaticMacAddress",
         "Description": "vNIC Static MAC Address",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Slot ID",
         "BackEndName": "Id",
         "Description": "vNIC Slot ID Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "PCI Link",
         "BackEndName": "PciLink",
         "Description": "vNIC PCI Link Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "Switch ID",
         "BackEndName": "SwitchId",
         "Description": "vNIC Switch ID Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "A",
             "B",
             "None"
             ],
         "FronttoBackEndValueMaps": {
             "a": "A",
             "b": "B",
             "none": "None"
             },
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": None,
         "BackEndName": "Uplink",
         "Description": "vNIC Uplink Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "PCI Order",
         "BackEndName": "Order",
         "Description": "vNIC PCI Order Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": None,
         "BackEndName": "Source",
         "Description": "Consistent Device Naming (CDN) Source",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "vNIC Name",
             "User Defined"
             ],
         "FronttoBackEndValueMaps": {
             "vnicname": "vnic",
             "userdefined": "user"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Cdn"
         },
        {"FrontEndName": None,
         "BackEndName": "Value",
         "Description": "Consistent Device Naming (CDN) Value",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Cdn"
         },
        {"FrontEndName": "Failover",
         "BackEndName": "FailoverEnabled",
         "Description": "vNIC Failover Enablement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet Network Group Policy",
         "BackEndName": "FabricEthNetworkGroupPolicy",
         "Description": "Ethernet Network Group Policy",
         "IntersightAPIPath": "fabric/EthNetworkGroupPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_network_group_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet Network Control Policy",
         "BackEndName": "FabricEthNetworkControlPolicy",
         "Description": "Ethernet Network Control Policy",
         "IntersightAPIPath": "fabric/EthNetworkControlPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_network_control_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet QoS",
         "BackEndName": "EthQosPolicy",
         "Description": "Ethernet QoS Policy",
         "IntersightAPIPath": "vnic/EthQosPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_qos_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet Adapter",
         "BackEndName": "EthAdapterPolicy",
         "Description": "Ethernet Adapter Policy",
         "IntersightAPIPath": "vnic/EthAdapterPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_adapter_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet Network",
         "BackEndName": "EthNetworkPolicy",
         "Description": "Ethernet Network Policy",
         "IntersightAPIPath": "vnic/EthNetworkPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "iSCSI Boot",
         "BackEndName": "IscsiBootPolicy",
         "Description": "iSCSI Boot Policy",
         "IntersightAPIPath": "vnic/IscsiBootPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_iscsi_boot_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Connection Type",
         "BackEndName": "Connection",
         "Description": "Connection Type",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Disabled",
             "usNIC",
             "VMQ"
             ],
         "FronttoBackEndValueMaps": {
             "disabled": "Disabled",
             "usnic": "usNIC",
             "vmq": "VMQ"
             },
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": True,
         "AutomaticInsertionValue": "Disabled",
         "ParentAttributeName": None
         },
        {"FrontEndName": "Number of usNICs",
         "BackEndName": "Count",
         "Description": "Number of usNICs",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "UsnicSettings"
         },
        {"FrontEndName": "usNIC Adapter Policy",
         "BackEndName": "UsnicAdapterPolicy",
         "Description": "usNIC Adapter Policy",
         "IntersightAPIPath": "vnic/EthAdapterPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_usnic_adapter_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "UsnicSettings"
         },
        {"FrontEndName": "Class of Service",
         "BackEndName": "Cos",
         "Description": "usNIC Class of Service",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "UsnicSettings"
         },
        {"FrontEndName": "Enable Virtual Machine Multi-Queue",
         "BackEndName": "MultiQueueSupport",
         "Description": "Virtual Machine Multi-Queue Enablement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         },
        {"FrontEndName": "Number of Sub vNICs",
         "BackEndName": "NumSubVnics",
         "Description": "VMQ Number of Sub vNICs",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         },
        {"FrontEndName": "VMMQ Adapter Policy",
         "BackEndName": "VmmqAdapterPolicy",
         "Description": "VMMQ Adapter Policy",
         "IntersightAPIPath": "vnic/EthAdapterPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_vmmq_adapter_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         },
        {"FrontEndName": "Number of Interrupts",
         "BackEndName": "NumInterrupts",
         "Description": "VMQ Number of Interrupts",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         },
        {"FrontEndName": "Number of Virtual Machine Queues",
         "BackEndName": "NumVmqs",
         "Description": "VMQ Number of Virtual Machine Queues",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_mac_address_pool_name="",
                 default_ethernet_network_group_policy_name="",
                 default_ethernet_network_control_policy_name="",
                 default_ethernet_qos_policy_name="",
                 default_ethernet_adapter_policy_name="",
                 default_iscsi_boot_policy_name="",
                 default_usnic_adapter_policy_name="",
                 default_vmmq_adapter_policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        self.default_mac_address_pool_name = default_mac_address_pool_name
        self.default_ethernet_network_group_policy_name = default_ethernet_network_group_policy_name
        self.default_ethernet_network_control_policy_name = default_ethernet_network_control_policy_name
        self.default_ethernet_qos_policy_name = default_ethernet_qos_policy_name
        self.default_ethernet_adapter_policy_name = default_ethernet_adapter_policy_name
        self.default_iscsi_boot_policy_name = default_iscsi_boot_policy_name
        self.default_usnic_adapter_policy_name = default_usnic_adapter_policy_name
        self.default_vmmq_adapter_policy_name = default_vmmq_adapter_policy_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"'{self.default_mac_address_pool_name}', "
            f"'{self.default_ethernet_network_group_policy_name}', "
            f"'{self.default_ethernet_network_control_policy_name}', "
            f"'{self.default_ethernet_qos_policy_name}', "
            f"'{self.default_ethernet_adapter_policy_name}', "
            f"'{self.default_iscsi_boot_policy_name}', "
            f"'{self.default_usnic_adapter_policy_name}', "
            f"'{self.default_vmmq_adapter_policy_name}')"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def _post_intersight_vnic(vnic_name,
                                  body,
                                  moid=None
                                  ):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                vnic_name (str):
                    The name of the vNIC to be posted on Intersight.
                body (dict):
                    The body of the object to be posted on Intersight.
                moid (str):
                    Optional; The Intersight MOID of the object to be posted
                    on Intersight. The default value is None.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            if moid:
                full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
            else:
                full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                if moid:
                    print(f"The configuration of {self.object_type} "
                          f"{vnic_name} has been updated.")
                else:
                    print(f"The configuration of {self.object_type} "
                          f"{vnic_name} has completed.")
                return "The POST method was successful."
            except intersight.exceptions.ApiException as error:
                error_body_dictionary = ast.literal_eval(error.body)
                if (
                    error.status == 400
                    and
                    error_body_dictionary.get("messageId") == "vnic_duplicate_name"
                    ):
                    print(f"The targeted {self.object_type} {vnic_name} "
                          "appears to already exist.")
                    print("An attempt will be made to update the pre-existing "
                          f"{vnic_name}...")
                    try:
                        existing_intersight_object_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "Name": vnic_name,
                                "LanConnectivityPolicy": {
                                    "ClassId": "mo.MoRef",
                                    "Moid": policy_moid,
                                    "ObjectType": "vnic.LanConnectivityPolicy",
                                    "link": f"https://www.intersight.com/api/v1/vnic/LanConnectivityPolicies/{policy_moid}"
                                    }
                                },
                            intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                            object_type=self.object_type,
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )
                        # Update full Intersight API path with the MOID of the existing object
                        full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                        self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                                 method="POST",
                                                 body=body,
                                                 auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                                 )
                        print(f"The update of the {self.object_type} has "
                              "completed.")
                        print(f"The pre-existing {vnic_name} "
                              "has been updated.")
                        return "The POST method was successful."
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print(f"Unable to update the {self.object_type} under the "
                              "Intersight API resource path "
                              f"'{full_intersight_api_path_with_moid}'.\n")
                        print(f"The pre-existing {vnic_name} "
                              "could not be updated.")
                        print("Exception Message: ")
                        traceback.print_exc()
                        return "The POST method failed."
                elif (
                    error.status == 400
                    and
                    error_body_dictionary.get("messageId") == "vif_duplicate_order_same_slot"
                    ):
                    print("\nA configuration error has occurred!\n")
                    if moid:
                        print(f"Unable to update {self.object_type} "
                              f"{vnic_name} under the "
                              "Intersight API resource path "
                              f"'{full_intersight_api_path}'.\n")
                    else:
                        print(f"Unable to configure {self.object_type} "
                              f"{vnic_name} under the Intersight "
                              f"API resource path '{full_intersight_api_path}'.\n")
                    print("Exception Message: ")
                    traceback.print_exc()
                    print(f"If the {self.object_type} Placement mode is set to "
                          "'Manual' or 'Custom', change the mode to 'Auto' or "
                          "include the appropriate unique values for the "
                          "Placement Slot ID, PCI Link, or PCI Order for each "
                          f"provided {self.object_type} by using the "
                          "'Slot ID', 'PCI Link', or 'PCI Order' dictionary "
                          "keys.")
                    return "The POST method failed."
                else:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to configure the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            except Exception:
                print("\nA configuration error has occurred!\n")
                if moid:
                    print(f"Unable to update {self.object_type} "
                          f"{vnic_name} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                else:
                    print(f"Unable to configure {self.object_type} "
                          f"{vnic_name} under the Intersight "
                          f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."

        def _interface_api_body_staging_updates(id_dictionary):
            """This is a function to handle converting a provided interface
            dictionary into an API body that is prepped and staged for
            posting to Intersight. Attributes are modified and converted for
            compatibility as needed.
            
            Args:
                id_dictionary (dict):
                    An interface dictionary extracted from the provided
                    interface list being prepared and staged for posting to
                    Intersight.

            Returns:
                A dictionary containing API body data compatible with
                Intersight.
            """            
            staged_intersight_api_body = copy.deepcopy(id_dictionary)
            staged_intersight_api_body[self.policy_class_name] = {"Moid": policy_moid}
            # Handle setting of attributes which have mismatched Front-End and Back-End labeling, set provided default values, retrieve any required MOIDs and verify/set Parent attributes
            for interface_object_attribute_map_dictionary in self.interface_object_attribute_maps:
                self._interface_object_attribute_map_handler(
                    staged_interface_dictionary=staged_intersight_api_body,
                    interface_object_attribute_map_dictionary=interface_object_attribute_map_dictionary
                    )
            # Update the Intersight API body with the Ethernet Network Group Policy MOID value to a list format as required by the backend API
            staged_intersight_api_body["FabricEthNetworkGroupPolicy"] = [staged_intersight_api_body["FabricEthNetworkGroupPolicy"]]
            # Establish default Connection settings for usNIC and VMQ (Virtual Machine Queue) options
            connection_usnic_default_settings = {
                "ClassId": "vnic.UsnicSettings",
                "Cos": 5,
                "Count": 0,
                "ObjectType": "vnic.UsnicSettings",
                "UsnicAdapterPolicy": ""
                }
            connection_vmq_default_settings = {
                "ClassId": "vnic.VmqSettings",
                "Enabled": False,
                "MultiQueueSupport": False,
                "NumInterrupts": 16,
                "NumSubVnics": 64,
                "NumVmqs": 4,
                "ObjectType": "vnic.VmqSettings",
                "VmmqAdapterPolicy": ""
                }
            # Update the Intersight API body with the provided Connection settings
            if staged_intersight_api_body.get("Connection") == "Disabled":
                staged_intersight_api_body["UsnicSettings"] = connection_usnic_default_settings
                staged_intersight_api_body["VmqSettings"] = connection_vmq_default_settings
            if staged_intersight_api_body.get("Connection") == "usNIC":
                if staged_intersight_api_body.get("UsnicSettings", {}).get("UsnicAdapterPolicy", {}).get("Moid"):
                    staged_intersight_api_body["UsnicSettings"]["UsnicAdapterPolicy"] = staged_intersight_api_body.get("UsnicSettings", {}).get("UsnicAdapterPolicy", {}).get("Moid")
                staged_intersight_api_body["VmqSettings"] = connection_vmq_default_settings
            if staged_intersight_api_body.get("Connection") == "VMQ":
                if not staged_intersight_api_body.get("VmqSettings", {}).get("Enabled"):
                    staged_intersight_api_body["VmqSettings"]["Enabled"] = True
                if staged_intersight_api_body.get("VmqSettings", {}).get("VmmqAdapterPolicy", {}).get("Moid"):
                    staged_intersight_api_body["VmqSettings"]["VmmqAdapterPolicy"] = staged_intersight_api_body.get("VmqSettings", {}).get("VmmqAdapterPolicy", {}).get("Moid")
                staged_intersight_api_body["UsnicSettings"] = connection_usnic_default_settings
            # Updates to the Intersight API body if a Connection usNIC Adapter Policy is provided
            if staged_intersight_api_body.get("UsnicSettings", {}).get("UsnicAdapterPolicy"):
                staged_intersight_api_body["VmqSettings"] = connection_vmq_default_settings
            # Updates to the Intersight API body if a Connection VMMQ (Virtual Machine Multi-Queue) Adapter Policy is provided
            if staged_intersight_api_body.get("VmqSettings", {}).get("VmmqAdapterPolicy"):
                staged_intersight_api_body["UsnicSettings"] = connection_usnic_default_settings
                staged_intersight_api_body["VmqSettings"]["NumInterrupts"] = connection_vmq_default_settings["NumInterrupts"]
                staged_intersight_api_body["VmqSettings"]["NumVmqs"] = connection_vmq_default_settings["NumVmqs"]
            # Updates to the Intersight API body if Connection VMMQ (Virtual Machine Multi-Queue) is enabled
            if staged_intersight_api_body.get("VmqSettings", {}).get("MultiQueueSupport"):
                staged_intersight_api_body["VmqSettings"]["NumInterrupts"] = connection_vmq_default_settings["NumInterrupts"]
                staged_intersight_api_body["VmqSettings"]["NumVmqs"] = connection_vmq_default_settings["NumVmqs"]
            # Updates to the Intersight API body if Connection VMMQ (Virtual Machine Multi-Queue) is disabled
            if staged_intersight_api_body.get("VmqSettings"):
                if not staged_intersight_api_body.get("VmqSettings", {}).get("MultiQueueSupport"):
                    staged_intersight_api_body["VmqSettings"]["NumSubVnics"] = connection_vmq_default_settings["NumSubVnics"]
                    staged_intersight_api_body["VmqSettings"]["VmmqAdapterPolicy"] = connection_vmq_default_settings["VmmqAdapterPolicy"]                
            # Remove keys not needed for creating the Interface object from the staged_intersight_api_body
            staged_intersight_api_body.pop(vnics_id_key, None)
            staged_intersight_api_body.pop("Connection", None)
            return staged_intersight_api_body

        if self.id_list:
            vnics_id_key = f"{self.id_type}s"
            # Retrieving the LAN Connectivity Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=f"{self.policy_intersight_api_path}?$top=1000",
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           intersight_base_url=self.intersight_base_url,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                if id_dictionary.get(vnics_id_key):
                    vnics_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                                   vnics_id_key
                                                                                   )
                    staged_intersight_api_body = _interface_api_body_staging_updates(id_dictionary)
                    current_vnic_id_name_prefix = id_dictionary.get("Name")
                    for current_vnic_id in vnics_enumerated_id_range:
                        current_vnic_id_full_name = f"{current_vnic_id_name_prefix}{current_vnic_id}"
                        staged_intersight_api_body["Name"] = current_vnic_id_full_name
                        _post_intersight_vnic(
                            current_vnic_id_full_name,
                            staged_intersight_api_body
                            )
                else:
                    staged_intersight_api_body = _interface_api_body_staging_updates(id_dictionary)
                    current_vnic_id_full_name = id_dictionary.get("Name")
                    _post_intersight_vnic(
                        current_vnic_id_full_name,
                        staged_intersight_api_body
                        )
                              

def lan_connectivity_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_azure_stack_host_qos=False,
    iqn_assignment_type="None",
    iqn_pool_name=None,
    iqn_static_identifier="",
    vnic_placement_mode="Auto",
    ucs_server_type="FI-Attached",
    vnic_list=None,
    default_mac_address_pool_name="",
    default_ethernet_network_group_policy_name="",
    default_ethernet_network_control_policy_name="",
    default_ethernet_qos_policy_name="",
    default_ethernet_adapter_policy_name="",
    default_iscsi_boot_policy_name="",
    default_usnic_adapter_policy_name="",
    default_vmmq_adapter_policy_name="",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a LAN Connectivity Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_azure_stack_host_qos (bool):
            Optional; Eanble Azure Stack host QoS. The default value is False.
        iqn_assignment_type (str):
            Optional; The IQN assignment type. The accepted values are "None",
            "Static", and "Pool". The default value is "None".
        iqn_pool_name (str):
            Optional; The pre-existing IQN pool to be used if the IQN
            assignment type has been set to "Pool". The default value is None.
        iqn_static_identifier (str):
            Optional; The IQN static identifier to be used if the IQN
            assignment type has been set to "Static". The default value is an
            empty string ("").
        vnic_placement_mode (str):
            Optional; The vNIC placement mode. The accepted values are "Auto"
            and "Manual". The default value is "Auto".
        ucs_server_type (str):
            Optional; The target UCS server type of the policy. The accepted
            values are "FI-Attached" or "Standalone". IMM
            (Intersight Managed Mode) environments should use "FI-Attached". 
            The default value is "FI-Attached".
        vnic_list (list):
            Optional; The list of dictionary entries for vNICs to
            be configured. The default value is None. An
            example entry is:
            [{"Name": "vnic0",
              "Switch ID": "A"},
             {"Name": "vnic1",
              "Switch ID": "B"},].
            A "Name" key with a string value must be configured to specify the
            vNIC name. A "Switch ID" key with a string value of "A" or "B" to
            specify the fabric of the vNIC is also mandatory. Pre-existing
            Ethernet Network Group, Ethernet Network Control, Ethernet QoS, and
            Ethernet Adapter Policies are also required when configuring vNICs
            and can be provided through the vnic_list argument or corresponding
            arguments for default policies (see and review other arguments of
            the function). If mandatory Policies are not provided using
            corresponding arguments, a corresponding Policy key must also be
            configured in each vNIC dictionary entry to specify a
            pre-existing Policy using a string value. If different Policies
            and/or Pools are desired for different sets of vNICs, the
            corresponding Policy or Pool key should also be used and will
            always override the arguments for default Policies or Pools.
            Optional key settings such as "Pin Group Name", "MAC Address Type",
            "MAC Address Pool", "Static MAC Address", "Slot ID", "PCI Link",
            "Uplink", "PCI Order", "Source", "Value", "Failover",
            "Ethernet Network Group Policy", "Ethernet Network Control Policy",
            "Ethernet QoS", "Ethernet Adapter", "Ethernet Network",
            "iSCSI Boot", "Connection Type", "Number of usNICs",
            "usNIC Adapter Policy", "Class of Service",
            "Enable Virtual Machine Multi-Queue", "Number of Sub vNICs",
            "VMMQ Adapter Policy", "Number of Interrupts", and
            "Number of Virtual Machine Queues" can also be configured in each
            list dictionary, if the associated system default values are not
            desired. For bulk creation of vNICs, a "Vnics" key with a string
            value can be configured in each dictionary of the list to specify a
            range of vNIC IDs with shared values. An example entry is:
            [{"Name": "vnic",
              "Vnics": "0,2,4,6",
              "Switch ID": "A"},
             {"Name": "vnic",
              "Vnics": "1,3,5,7",
              "Switch ID": "B"},].
            When using the "Vnics" key, the "Name" key becomes a prefix for the
            vNIC name value.
        default_mac_address_pool_name (str):
            Optional; The name of the default MAC Address Pool to be used by
            all vNICs in the LAN Connectivity Policy. The default value is an
            empty string ("").
        default_ethernet_network_group_policy_name (str):
            Optional; The name of the default Ethernet Network Group Policy to
            be used by all vNICs in the LAN Connectivity Policy. The default
            value is an empty string ("").
        default_ethernet_network_control_policy_name (str):
            Optional; The name of the default Ethernet Network Control Policy
            to be used by all vNICs in the LAN Connectivity Policy. The default
            value is an empty string ("").
        default_ethernet_qos_policy_name (str):
            Optional; The name of the default Ethernet QoS Policy to be used by
            all vNICs in the LAN Connectivity Policy. The default value is an
            empty string ("").
        default_ethernet_adapter_policy_name (str):
            Optional; The name of the default Ethernet Adapter Policy to be
            used by all vNICs in the LAN Connectivity Policy. The default value
            is an empty string ("").
        default_iscsi_boot_policy_name (str):
            Optional; The name of the default iSCSI Boot Policy to be used by
            all vNICs in the LAN Connectivity Policy. The default value is an
            empty string ("").
        default_usnic_adapter_policy_name (str):
            Optional; The name of the default usNIC Adapter Policy to be used
            by all vNICs in the LAN Connectivity Policy. The default value is
            an empty string ("").
        default_vmmq_adapter_policy_name (str):
            Optional; The name of the default VMMQ
            (Virtual Machine Multi-Queue) Adapter Policy to be used by
            all vNICs in the LAN Connectivity Policy. The default value is an
            empty string ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create LAN Connectivity Policy object in Intersight
    builder(
        LanConnectivityPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            enable_azure_stack_host_qos=enable_azure_stack_host_qos,
            iqn_assignment_type=iqn_assignment_type,
            iqn_pool_name=iqn_pool_name,
            iqn_static_identifier=iqn_static_identifier,
            vnic_placement_mode=vnic_placement_mode,
            ucs_server_type=ucs_server_type            
            ))

    # Define and create vNIC objects in Intersight
    builder(
        Vnic(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            id_list=vnic_list,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            default_mac_address_pool_name=default_mac_address_pool_name,
            default_ethernet_network_group_policy_name=default_ethernet_network_group_policy_name,
            default_ethernet_network_control_policy_name=default_ethernet_network_control_policy_name,
            default_ethernet_qos_policy_name=default_ethernet_qos_policy_name,
            default_ethernet_adapter_policy_name=default_ethernet_adapter_policy_name,
            default_iscsi_boot_policy_name=default_iscsi_boot_policy_name,
            default_usnic_adapter_policy_name=default_usnic_adapter_policy_name,
            default_vmmq_adapter_policy_name=default_vmmq_adapter_policy_name
            ))


# Establish classes and functions to make Local User Policy
class LocalUserPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Local User Policy in Intersight.
    """
    object_type = "Local User Policy"
    intersight_api_path = "iam/EndPointUserPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 enforce_strong_password=True,
                 enable_password_expiry=False,
                 password_expiry_duration=90,
                 password_expiry_notification_period=15,
                 password_expiry_grace_period=0,
                 password_history=5,
                 always_send_user_password=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.enforce_strong_password = enforce_strong_password
        self.enable_password_expiry = enable_password_expiry
        self.password_expiry_duration = password_expiry_duration
        self.password_expiry_notification_period = password_expiry_notification_period
        self.password_expiry_grace_period = password_expiry_grace_period
        self.password_history = password_history
        self.always_send_user_password = always_send_user_password
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "PasswordProperties": {
                "EnforceStrongPassword": self.enforce_strong_password,
                "EnablePasswordExpiry": self.enable_password_expiry,
                "PasswordExpiryDuration": self.password_expiry_duration,
                "NotificationPeriod": self.password_expiry_notification_period,
                "GracePeriod": self.password_expiry_grace_period,
                "PasswordHistory": self.password_history,
                "ForceSendPassword": self.always_send_user_password
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.enforce_strong_password}, "
            f"{self.enable_password_expiry}, "
            f"{self.password_expiry_duration}, "
            f"{self.password_expiry_notification_period}, "
            f"{self.password_expiry_grace_period}, "
            f"{self.password_history}, "
            f"{self.always_send_user_password})"
            )


class LocalUser:
    """This class serves as a base class for configuring Local Users for
    Local User Policies in Intersight.
    """
    object_type = "Local User Account"
    intersight_api_path = "iam/EndPointUsers"
    policy_type = "Local User Policy"
    policy_intersight_api_path = "iam/EndPointUserPolicies"
    local_user_object_attribute_maps = [
        {"FrontEndName": "EndPointUser",
         "BackEndName": "Name",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Username",
         "BackEndName": "Name",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 local_users_list=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        if local_users_list is None:
            self.local_users_list = []
        else:
            self.local_users_list = local_users_list
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.local_users_list})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_local_user(self,
                                    local_user_name,
                                    body,
                                    moid=None
                                    ):
        """This is a function to configure an Intersight Local User object by
        performing a POST through the Intersight API.
        Args:
            local_user_name (str):
                The name of the local user to be posted on Intersight.
            body (dict):
                The body of the object to be posted on Intersight.
            moid (str):
                Optional; The Intersight MOID of the object to be posted
                on Intersight. The default value is None.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        if moid:
            full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
        else:        
            full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            if moid:
                print(f"The configuration of {self.object_type} "
                      f"{local_user_name} has been updated.")
            else:            
                print(f"The configuration of the {self.object_type} "
                      f"for {local_user_name} has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            error_body_dictionary = ast.literal_eval(error.body)
            if error.status == 409:
                print(f"The targeted {self.object_type} for "
                      f"{local_user_name} appears to already exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{self.object_type} for {local_user_name}...")
                try:
                    existing_intersight_local_user_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                           intersight_api_key=None,
                                                                                           object_name=local_user_name,
                                                                                           intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                           object_type=self.object_type,
                                                                                           preconfigured_api_client=self.api_client
                                                                                           )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_local_user_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} for "
                          f"{local_user_name} has completed.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {self.object_type} for "
                          f"{local_user_name} could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            elif (
                error.status == 400
                and
                error_body_dictionary.get("messageId") == "cannot_modify_endpoint_user"
                ):
                print(f"The requested Local User Account {local_user_name} "
                      "already exists and cannot be modified.")
                return "The POST method failed."                
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} "
                      f"for {local_user_name} under the Intersight "
                      f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            if moid:
                print(f"Unable to update {self.object_type} "
                      f"{local_user_name} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
            else:                
                print(f"Unable to configure the {self.object_type} for "
                      f"{local_user_name} under the Intersight API resource "
                      f"path '{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _local_user_object_attribute_map_handler(self,
                                                 staged_local_user_dictionary,
                                                 local_user_object_attribute_map_dictionary
                                                 ):
        """This is a function to handle local user object attributes with a
        mismatch in the Front-End Name and Back-End Name.

        Args:
            staged_local_user_dictionary (dict):
                A local user dictionary extracted from the provided
                local_users_list being prepared and staged for posting to
                Intersight.
            local_user_object_attribute_map_dictionary (dict):
                A dictionary containing attribute data, including front-end
                (GUI) to back-end (API) mapped values.
        """
        # Establish default automatic insertion status of current attribute
        automatic_insertion_of_attribute_value_performed = False
        # Check if current attribute is mandatory
        if local_user_object_attribute_map_dictionary.get("Mandatory"):
            if not any(
                attribute_name_key in
                staged_local_user_dictionary for
                attribute_name_key in
                (local_user_object_attribute_map_dictionary["FrontEndName"],
                 local_user_object_attribute_map_dictionary["BackEndName"]
                 )
                ):
                if local_user_object_attribute_map_dictionary.get("AutomaticInsertion"):
                    staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = local_user_object_attribute_map_dictionary.get("AutomaticInsertionValue")
                    automatic_insertion_of_attribute_value_performed = True
                else:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{local_user_object_attribute_map_dictionary['Description']}.")
                    print("Please verify the following key exists in the "
                          "appropriate dictionary of the "
                          "local_users_list variable, then "
                          "re-attempt execution:\n")
                    if local_user_object_attribute_map_dictionary['FrontEndName']:
                        print(f"'{local_user_object_attribute_map_dictionary['FrontEndName']}'\n")
                    else:
                        print(f"'{local_user_object_attribute_map_dictionary['BackEndName']}'\n")
                    sys.exit(0)
        # Check for attribute front-end name key in the dictionary
        if local_user_object_attribute_map_dictionary["FrontEndName"] in staged_local_user_dictionary:
            # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
            if local_user_object_attribute_map_dictionary["BackEndName"] not in staged_local_user_dictionary:
                staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = staged_local_user_dictionary.get(local_user_object_attribute_map_dictionary["FrontEndName"])
            # Remove the front-end name key from the dictionary
            staged_local_user_dictionary.pop(local_user_object_attribute_map_dictionary["FrontEndName"])
        # Check for front-end to back-end value mapping
        if local_user_object_attribute_map_dictionary.get("FronttoBackEndValueMaps"):
            if (
                local_user_object_attribute_map_dictionary["BackEndName"] in
                staged_local_user_dictionary and
                not automatic_insertion_of_attribute_value_performed
                ):
                # Retrieve the provided attribute value
                provided_attribute_value = staged_local_user_dictionary.get(local_user_object_attribute_map_dictionary["BackEndName"])
                # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                try:
                    provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{local_user_object_attribute_map_dictionary['Description']}.")
                    print("The value provided was "
                          f"{provided_attribute_value}.")
                    print("Please verify that the value has been provided "
                          "in an accepted string format.")
                    print("Please review and resolve any error messages, "
                          "then re-attempt execution.\n")
                    sys.exit(0)
                # Create list of known and mapped front-end to back-end values
                front_to_backend_value_maps_key_list = list(local_user_object_attribute_map_dictionary["FronttoBackEndValueMaps"])
                # Replace known and reformatted front-end value with known and mapped back-end value
                if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                    provided_attribute_value_mapped = local_user_object_attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                    staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                else:
                    print("\nWARNING: An unknown "
                          f"{local_user_object_attribute_map_dictionary['Description']} "
                          f"value of '{provided_attribute_value}' has been "
                          f"provided for the {self.object_type} settings!")
                    print("An attempt will be made to configure the "
                          "unknown "
                          f"{local_user_object_attribute_map_dictionary['Description']} "
                          "value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{local_user_object_attribute_map_dictionary['Description']}, "
                          "then re-attempt execution:\n")
                    print(*local_user_object_attribute_map_dictionary["FixedFrontEndValues"],
                          sep=", "
                          )

    def object_maker(self):
        """This function makes the targeted policy object.
        """
        # Check for Local User object attributes that may need configuration
        if self.local_users_list:
            # Retrieve the Intersight Organization MOID
            policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                        intersight_api_key=None,
                                                                        object_name=self.organization,
                                                                        intersight_api_path="organization/Organizations?$top=1000",
                                                                        object_type="Organization",
                                                                        preconfigured_api_client=self.api_client
                                                                        )
            # Cycle through the Local User dictionaries in the Local Users list
            for provided_local_user_dictionary in self.local_users_list:
                staged_local_user_dictionary = copy.deepcopy(provided_local_user_dictionary)
                # Update the staged_local_user_dictionary/API body with the Intersight Organization MOID
                staged_local_user_dictionary["Organization"] = {"Moid": policy_organization_moid}
                # Handle setting of attributes which have mismatched Front-End and Back-End labeling
                for local_user_object_attribute_map_dictionary in self.local_user_object_attribute_maps:
                    self._local_user_object_attribute_map_handler(
                        staged_local_user_dictionary=staged_local_user_dictionary,
                        local_user_object_attribute_map_dictionary=local_user_object_attribute_map_dictionary
                        )
                # Remove keys not needed for creating the Local User object from the staged_local_user_dictionary/API body
                staged_local_user_dictionary.pop("Enable", None)
                staged_local_user_dictionary.pop("Enabled", None)
                staged_local_user_dictionary.pop("Role", None)
                staged_local_user_dictionary.pop("EndPointRole", None)
                staged_local_user_dictionary.pop("Password", None)
                # Create new Local User object in Intersight
                current_local_user_name = staged_local_user_dictionary.get("Name")
                self._post_intersight_local_user(
                    local_user_name=current_local_user_name,
                    body=staged_local_user_dictionary
                    )


class LocalUserRole(LocalUser):
    """This class is used to configure a Local User Role in Intersight.
    """
    object_type = "Local User Role Permission Level"
    intersight_api_path = "iam/EndPointUserRoles"
    policy_type = "Local User Policy"
    policy_intersight_api_path = "iam/EndPointUserPolicies"
    local_user_object_attribute_maps = [
        {"FrontEndName": "Enable",
         "BackEndName": "Enabled",
         "Description": "Local User Account Enablement",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": True,
         "AutomaticInsertionValue": True
         },
        {"FrontEndName": "Name",
         "BackEndName": "EndPointUser",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Username",
         "BackEndName": "EndPointUser",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Role",
         "BackEndName": "EndPointRole",
         "Description": "Local User Role Permission Level",
         "FixedFrontEndValues": [
             "admin",
             "readonly",
             "user"
             ],
         "FronttoBackEndValueMaps": {
             "admin": "admin",
             "readonly": "readonly",
             "user": "user"
             },
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 local_users_list=None,
                 policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         local_users_list
                         )
        self.policy_name = policy_name
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"{self.local_users_list}, "
            f"'{self.policy_name}')"
            )

    def _post_intersight_local_user_role(self,
                                         local_user_name,
                                         body
                                         ):
        """This is a function to configure an Intersight Local User Role object
        by performing a POST through the Intersight API.
        Args:
            local_user_name (str):
                The name of the local user to be posted on Intersight.
            body (dict):
                The body of the object to be posted on Intersight.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the {self.object_type} "
                  f"for {local_user_name} has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                print(f"The targeted {self.object_type} for "
                      f"{local_user_name} appears to already exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{self.object_type} for {local_user_name}...")
                try:
                    # Create an attribute dictionary for the advanced_intersight_object_moid_retriever function from the provided Local User Role API body
                    existing_intersight_local_user_role_attributes = {}
                    local_user_policy_moid = body["EndPointUserPolicy"]["Moid"]
                    existing_intersight_local_user_role_attributes["EndPointUserPolicy"] = {
                        "ClassId": "mo.MoRef",
                        "Moid": local_user_policy_moid,
                        "ObjectType": "iam.EndPointUserPolicy",
                        "link": f"{self.intersight_base_url}/iam/EndPointUserPolicies/{local_user_policy_moid}"
                        }
                    local_user_moid = body["EndPointUser"]["Moid"]
                    existing_intersight_local_user_role_attributes["EndPointUser"] = {
                        "ClassId": "mo.MoRef",
                        "Moid": local_user_moid,
                        "ObjectType": "iam.EndPointUser",
                        "link": f"{self.intersight_base_url}/iam/EndPointUsers/{local_user_moid}"
                        }
                    # Retrieve pre-existing Local User Role MOID
                    existing_intersight_local_user_role_moid = advanced_intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                                         intersight_api_key=None,
                                                                                                         object_attributes=existing_intersight_local_user_role_attributes,
                                                                                                         intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                                         object_type=self.object_type,
                                                                                                         organization=self.organization,
                                                                                                         preconfigured_api_client=self.api_client
                                                                                                         )                    
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_local_user_role_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} for "
                          f"{local_user_name} has completed.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {self.object_type} for "
                          f"{local_user_name} could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} "
                      f"for {local_user_name} under the Intersight "
                      f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} for "
                  f"{local_user_name} under the Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def object_maker(self):
        """This function makes the targeted policy object.
        """        
        # Check for Local User object attributes that may need configuration
        if self.local_users_list:
            # Verify a Local User Policy name has been provided
            if not self.policy_name:
                print("\nA configuration error has occurred!\n")
                print("During the configuration of the "
                      f"{self.object_type} settings for the "
                      f"{self.policy_type}, there was an issue "
                      f"accessing the value for the {self.policy_type} name.")
                print("Please verify that the value has been provided "
                      "in an accepted string format.")
                print("Please review and resolve any error messages, "
                      "then re-attempt execution.\n")
                sys.exit(0)
            # Retrieving the Local User Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=f"{self.policy_intersight_api_path}?$top=1000",
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           preconfigured_api_client=self.api_client
                                                           )            
            # Cycle through the Local User dictionaries in the Local Users list
            for provided_local_user_dictionary in self.local_users_list:
                staged_local_user_dictionary = copy.deepcopy(provided_local_user_dictionary)
                # Handle setting of attributes which have mismatched Front-End and Back-End labeling
                for local_user_object_attribute_map_dictionary in self.local_user_object_attribute_maps:
                    self._local_user_object_attribute_map_handler(
                        staged_local_user_dictionary=staged_local_user_dictionary,
                        local_user_object_attribute_map_dictionary=local_user_object_attribute_map_dictionary
                        )
                # Obtain Local User name attached to Local User Role
                current_local_user_name = staged_local_user_dictionary.get("EndPointUser")
                # Set Local User Policy MOID
                staged_local_user_dictionary["EndPointUserPolicy"] = {"Moid": policy_moid}
                # Set Local User MOID
                local_user_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                   intersight_api_key=None,
                                                                   object_name=staged_local_user_dictionary["EndPointUser"],
                                                                   intersight_api_path="iam/EndPointUsers?$top=1000",
                                                                   object_type="Local User",
                                                                   organization=self.organization,
                                                                   preconfigured_api_client=self.api_client
                                                                   )
                staged_local_user_dictionary["EndPointUser"] = {"Moid": local_user_moid}
                # Set Local User End Point Role MOID
                local_user_role_moid = advanced_intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                 intersight_api_key=None,
                                                                                 object_attributes={
                                                                                     "Name": staged_local_user_dictionary["EndPointRole"],
                                                                                     "Type": "IMC"
                                                                                     },
                                                                                 intersight_api_path="iam/EndPointRoles?$top=1000",
                                                                                 object_type="Local User End Point Role",
                                                                                 organization=self.organization,
                                                                                 preconfigured_api_client=self.api_client
                                                                                 )
                staged_local_user_dictionary["EndPointRole"] = [{"Moid": local_user_role_moid}]
                # Remove keys not needed for creating the Local User Role object from the staged_local_user_dictionary/API body
                staged_local_user_dictionary.pop("Username", None)
                staged_local_user_dictionary.pop("Name", None)
                # Create new Local User Role object in Intersight
                self._post_intersight_local_user_role(
                    local_user_name=current_local_user_name,
                    body=staged_local_user_dictionary
                    )


def local_user_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enforce_strong_password=True,
    enable_password_expiry=False,
    password_expiry_duration=90,
    password_expiry_notification_period=15,
    password_expiry_grace_period=0,
    password_history=5,
    always_send_user_password=False,
    local_users_list=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Local User Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enforce_strong_password (bool):
            Optional; Enforce strong passwords for local user accounts.
            The default value is True.
        enable_password_expiry (bool):
            Optional; Enable local user passwords to expire.
            The default value is False.
        password_expiry_duration (int):
            Optional; The local user password duration time in days.
            The default value is 90.
        password_expiry_notification_period (int):
            Optional; The period of time in days prior to password
            expiration in which local users will begin to be notified.
            The default value is 15.
        password_expiry_grace_period (int):
            Optional; The period of time in days that local users have to
            continue using their account after the password has expired.
            The default value is 0.
        password_history (int):
            Optional; The number of passwords kept in change history for each
            local user account. A password cannot be re-used if it is still in
            the change history log. The default value is 5.
        always_send_user_password (bool):
            Optional; Always send the local user password to the endpoint
            attached to the Local User Policy.
            The default value is False.
        local_users_list (list):
            Optional; The list of dictionary entries for each local user
            account to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "Username": "adminuser",
              "Password": "C1sco12345",
              "Role": "admin"
              },
             {"Enable": True,
              "Username": "testuser",
              "Password": "C1sco12345",
              "Role": "user"
              },
             {"Enable": True,
              "Username": "readonlyuser",
              "Password": "C1sco12345",
              "Role": "readonly"
              },
             ]
            All key settings with the exception of "Enable" are mandatory.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Local User Policy object in Intersight
    builder(
        LocalUserPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            enforce_strong_password=enforce_strong_password,
            enable_password_expiry=enable_password_expiry,
            password_expiry_duration=password_expiry_duration,
            password_expiry_notification_period=password_expiry_notification_period,
            password_expiry_grace_period=password_expiry_grace_period,
            password_history=password_history,
            always_send_user_password=always_send_user_password
            ))

    # Define and create Local User object in Intersight
    builder(
        LocalUser(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            local_users_list=local_users_list
            ))

    # Define and create Local User Role object in Intersight
    builder(
        LocalUserRole(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            local_users_list=local_users_list,
            policy_name=policy_name
            ))


# Establish classes and functions to make MAC Address Pool
class MacPool(UcsPool):
    """This class is used to configure a MAC Pool in Intersight.
    """
    object_type = "MAC Pool"
    intersight_api_path = "macpool/Pools"
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "MAC Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    block_types = [
        {"BlockType": "macpool.Block",
         "BlocksListVariableName": "mac_blocks_list",
         "Description": "MAC Block",
         "AttributeName": "MacBlocks"
         }
        ]    
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 mac_blocks_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         pool_name,
                         pool_description,
                         pool_assignment_order,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        if mac_blocks_list is None:
            self.mac_blocks_list = []
        else:
            self.mac_blocks_list = mac_blocks_list

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.mac_blocks_list})"
            )


def mac_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    mac_blocks_list=None,
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a MAC Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        mac_blocks_list (list):
            Optional; The list of dictionary entries for each MAC block to
            be configured. The default value is None. An
            example entry is:
            [{"From": "00:25:B5:AA:00:00",
              "Size": 256},
             {"From": "00:25:B5:BB:00:00",
              "Size": 256},].
            A "From" key with a string value must be configured to specify the
            first MAC address in the block. A "Size" key with an integer value
            must also be configured to specify the size of the block. Optional
            key settings such as "To" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. Multiple dictionaries can be placed in the list to
            configure different block ranges.
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create MAC Pool object in Intersight
    builder(
        MacPool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            mac_blocks_list=mac_blocks_list
            ))


# Establish classes and functions to make Power Policy
class PowerPolicy(DirectlyAttachedUcsServerAndChassisPolicy):
    """This class is used to configure a Power Policy in Intersight.
    """
    object_type = "Power Policy"
    intersight_api_path = "power/Policies"
    object_variable_value_maps = [
        {"VariableName": "power_profiling",
         "Description": "Power Profiling Mode",
         "AttributeName": "PowerProfiling",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "power_priority",
         "Description": "Power Priority Mode",
         "AttributeName": "PowerPriority",
         "Values": [
             {"FrontEndValue": "Low",
              "BackEndValue": "Low"
              },
             {"FrontEndValue": "Medium",
              "BackEndValue": "Medium"
              },
             {"FrontEndValue": "High",
              "BackEndValue": "High"
              }
             ]
         },
        {"VariableName": "power_restore",
         "Description": "Power Restore State Mode",
         "AttributeName": "PowerRestoreState",
         "Values": [
             {"FrontEndValue": "Always Off",
              "BackEndValue": "AlwaysOff"
              },
             {"FrontEndValue": "Always On",
              "BackEndValue": "AlwaysOn"
              },
             {"FrontEndValue": "Last State",
              "BackEndValue": "LastState"
              }
             ]
         },
        {"VariableName": "power_redundancy",
         "Description": "Power Redundancy Mode",
         "AttributeName": "RedundancyMode",
         "Values": [
             {"FrontEndValue": "Grid",
              "BackEndValue": "Grid"
              },
             {"FrontEndValue": "Not Redundant",
              "BackEndValue": "NotRedundant"
              },
             {"FrontEndValue": "N+1",
              "BackEndValue": "N+1"
              },
             {"FrontEndValue": "N+2",
              "BackEndValue": "N+2"
              }
             ]
         },
        {"VariableName": "power_save_mode",
         "Description": "Power Save Mode",
         "AttributeName": "PowerSaveMode",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "dynamic_power_rebalancing",
         "Description": "Dynamic Power Rebalancing Mode",
         "AttributeName": "DynamicRebalancing",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "extended_power_capacity",
         "Description": "Extended Power Capacity Mode",
         "AttributeName": "ExtendedPowerCapacity",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 ucs_chassis_profile_names="",
                 power_profiling="Enabled",
                 power_priority="Low",
                 power_restore="Always Off",
                 power_redundancy="Grid",
                 power_save_mode="Enabled",
                 dynamic_power_rebalancing="Enabled",
                 extended_power_capacity="Enabled",                 
                 power_allocation_in_watts=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names,
                         ucs_chassis_profile_names
                         )
        self.power_profiling = power_profiling
        self.power_priority = power_priority
        self.power_restore = power_restore
        self.power_redundancy = power_redundancy
        self.power_save_mode = power_save_mode
        self.dynamic_power_rebalancing = dynamic_power_rebalancing
        self.extended_power_capacity = extended_power_capacity
        self.power_allocation_in_watts = power_allocation_in_watts
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "AllocatedBudget": self.power_allocation_in_watts
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.ucs_chassis_profile_names}', "
            f"'{self.power_profiling}', "
            f"'{self.power_priority}', "
            f"'{self.power_restore}', "
            f"'{self.power_redundancy}', "
            f"'{self.power_save_mode}', "
            f"'{self.dynamic_power_rebalancing}', "
            f"'{self.extended_power_capacity}', "
            f"{self.power_allocation_in_watts})"
            )


def power_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    power_profiling="Enabled",
    power_priority="Low",
    power_restore="Always Off",
    power_redundancy="Grid",
    power_save_mode="Enabled",
    dynamic_power_rebalancing="Enabled",
    extended_power_capacity="Enabled",
    power_allocation_in_watts=True,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names="",
    ucs_chassis_profile_names=""
    ):
    """This is a function used to make a Power Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        power_profiling (str):
            Optional; Sets server power profiling. This setting is only
            supported on UCS X-Series servers. The default value is "Enabled".
        power_priority (str):
            Optional; Sets server power priority. This setting is only
            supported on UCS X-Series servers. The default value is "Low".
        power_restore (str):
            Optional; Sets the state of the server upon the restoration of
            power after power loss. This setting is only supported on UCS
            X-Series servers. The default value is "Always Off".
        power_redundancy (str):
            Optional; Sets chassis power redundancy mode. This setting is only
            supported on UCS X-Series chassis. The default value is "Grid".
        power_save_mode (str):
            Optional; Sets the chassis power save mode. This setting is only
            supported on UCS X-Series chassis. The default value is "Enabled".
        dynamic_power_rebalancing (str):
            Optional; Sets the chassis dynamic power rebalancing mode. This
            setting is only supported on UCS X-Series chassis. The default
            value is "Enabled".
        extended_power_capacity (str):
            Optional; Sets the extended power capacity mode of the chassis.
            This setting is only supported on UCS X-Series chassis. The default
            value is "Enabled".
        power_allocation_in_watts (int):
            Optional; Sets the power allocated to the chassis in watts. This
            setting is only supported on UCS X-Series chassis. The accepted
            values are 0 - 65535. The default value is 0.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
        ucs_chassis_profile_names (str):
            Optional; The UCS Chassis Profiles the policy should be attached
            to. If providing more than one UCS Chassis Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Power Policy object in Intersight
    builder(
        PowerPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            ucs_chassis_profile_names=ucs_chassis_profile_names,
            power_profiling=power_profiling,
            power_priority=power_priority,
            power_restore=power_restore,
            power_redundancy=power_redundancy,
            power_save_mode=power_save_mode,
            dynamic_power_rebalancing=dynamic_power_rebalancing,
            extended_power_capacity=extended_power_capacity,
            power_allocation_in_watts=power_allocation_in_watts
            ))


# Establish classes and functions to make Resource Pool
class ResourcePool:
    """This class is used to configure a Resource Pool in Intersight.
    """
    object_type = "Resource Pool"
    intersight_api_path = "resourcepool/Pools"
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "Resource Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 chassis_resources_list=None,
                 blade_server_resources_list=None,
                 rack_server_resources_list=None,
                 ucs_server_type="FI-Attached",
                 resource_type="Server",
                 pool_type="Static"
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.pool_name = pool_name
        self.pool_description = pool_description
        self.pool_assignment_order = pool_assignment_order
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        if chassis_resources_list is None:
            self.chassis_resources_list = []
        else:
            self.chassis_resources_list = chassis_resources_list
        if blade_server_resources_list is None:
            self.blade_server_resources_list = []
        else:
            self.blade_server_resources_list = blade_server_resources_list
        if rack_server_resources_list is None:
            self.rack_server_resources_list = []
        else:
            self.rack_server_resources_list = rack_server_resources_list
        self.ucs_server_type = ucs_server_type
        self.resource_type = resource_type
        self.pool_type = pool_type
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description,
            "ResourceType": self.resource_type,
            "PoolType": self.pool_type
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.chassis_resources_list}, "
            f"{self.blade_server_resources_list}, "
            f"{self.rack_server_resources_list}, "
            f"'{self.ucs_server_type}', "
            f"'{self.resource_type}', "
            f"'{self.pool_type}')"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.pool_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        pool_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                  intersight_api_key=None,
                                                                  object_name=self.organization,
                                                                  intersight_api_path="organization/Organizations?$top=1000",
                                                                  object_type="Organization",
                                                                  preconfigured_api_client=self.api_client
                                                                  )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": pool_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.pool_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted pool object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.pool_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()

        # Update the API body with the provided Resource Pool UCS Server Type (Management Mode)
        # Reformat the user provided ucs_server_type variable value to lowercase and remove spaces to prevent potential format issues
        try:
            reformatted_ucs_server_type_variable_value = "".join(self.ucs_server_type.lower().split())
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.pool_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        if reformatted_ucs_server_type_variable_value == "fi-attached":
            self.intersight_api_body["ResourcePoolParameters"] = {
                "ClassId": "resourcepool.ServerPoolParameters",
                "ManagementMode": "Intersight",
                "ObjectType": "resourcepool.ServerPoolParameters"
                }
        elif reformatted_ucs_server_type_variable_value == "standalone":
            self.intersight_api_body["ResourcePoolParameters"] = {
                "ClassId": "resourcepool.ServerPoolParameters",
                "ManagementMode": "IntersightStandalone",
                "ObjectType": "resourcepool.ServerPoolParameters"
                }
        else:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.pool_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)

        # Update the API body with the provided Resource Pool Resources
        # Setup lists for MOIDs of retrieved Blade and Rack Servers
        retrieved_blade_server_moid_list = []
        retrieved_rack_server_moid_list = []
        
        # Check for provided Chassis resources
        if self.chassis_resources_list:
            print("Checking for the provided Chassis resources...")
            retrieved_intersight_chassis = get_intersight_objects(
                intersight_api_key_id=None,
                intersight_api_key=None,
                intersight_api_path="equipment/Chasses?$top=1000",
                object_type="Chassis",
                preconfigured_api_client=self.api_client
                )
            if not retrieved_intersight_chassis.get("Results"):
                print("No Chassis were found in the Intersight Account.")
            for chassis_resources_dictionary in self.chassis_resources_list:
                # Chassis Blade Server MOID extraction process if only the Domain Name is provided
                if chassis_resources_dictionary.get("DomainName"):
                    if not any(
                        (chassis_resources_dictionary.get("ChassisIds"),
                         chassis_resources_dictionary.get("SlotIds"),
                         chassis_resources_dictionary.get("Serials")
                         )
                        ):
                        # Get the MOID of the provided Domain Name for the Chassis
                        chassis_domain_name_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "DeviceHostname": [chassis_resources_dictionary["DomainName"]]
                                },
                            intersight_api_path="asset/DeviceRegistrations?$top=1000",
                            object_type="Domain Name",
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )
                        # Search for Chassis in the provided Domain Name under the Intersight Account
                        for chassis in retrieved_intersight_chassis.get("Results"):
                            if (
                                chassis["RegisteredDevice"]["Moid"] == chassis_domain_name_moid
                                and
                                chassis["ManagementMode"] == "Intersight"
                                ):
                                # Extract MOIDs from the Blade Servers in any matched Chassis
                                for chassis_blade_server in chassis["Blades"]:
                                    retrieved_blade_server_moid_list.append(chassis_blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Domain Name and Chassis IDs are provided without any corresponding Slot IDs
                if all(
                    (chassis_resources_dictionary.get("DomainName"),
                     chassis_resources_dictionary.get("ChassisIds")
                     )
                    ):
                    if not chassis_resources_dictionary.get("SlotIds"):
                        # Convert provided Chassis IDs into list format
                        provided_chassis_id_list = integer_number_list_maker(chassis_resources_dictionary["ChassisIds"])
                        # Get the MOID of the provided Domain Name for the Chassis
                        chassis_domain_name_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "DeviceHostname": [chassis_resources_dictionary["DomainName"]]
                                },
                            intersight_api_path="asset/DeviceRegistrations?$top=1000",
                            object_type="Domain Name",
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )
                        # Search for Chassis in the provided Domain Name with matching Chassis IDs under the Intersight Account
                        for chassis in retrieved_intersight_chassis.get("Results"):
                            if (
                                chassis["RegisteredDevice"]["Moid"] == chassis_domain_name_moid
                                and
                                chassis["ChassisId"] in provided_chassis_id_list
                                and
                                chassis["ManagementMode"] == "Intersight"
                                ):
                                # Extract MOIDs from the Blade Servers in any matched Chassis
                                for chassis_blade_server in chassis["Blades"]:
                                    retrieved_blade_server_moid_list.append(chassis_blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Domain Name, Chassis IDs and Slot IDs are provided
                if all(
                    (chassis_resources_dictionary.get("DomainName"),
                     chassis_resources_dictionary.get("ChassisIds"),
                     chassis_resources_dictionary.get("SlotIds")
                     )
                    ):
                    # Convert provided Chassis IDs into list format
                    provided_chassis_id_list = integer_number_list_maker(chassis_resources_dictionary["ChassisIds"])
                    # Convert provided Chassis Blade Server Slot IDs into list format
                    provided_chassis_slot_ids_list = integer_number_list_maker(chassis_resources_dictionary["SlotIds"])
                    # Get the MOID of the provided Domain Name for the Chassis
                    chassis_domain_name_moid = advanced_intersight_object_moid_retriever(
                        intersight_api_key_id=None,
                        intersight_api_key=None,
                        object_attributes={
                            "DeviceHostname": [chassis_resources_dictionary["DomainName"]]
                            },
                        intersight_api_path="asset/DeviceRegistrations?$top=1000",
                        object_type="Domain Name",
                        organization=self.organization,
                        preconfigured_api_client=self.api_client
                        )
                    # Check for Blade Server resources located under the Intersight Account
                    retrieved_intersight_blade_servers = get_intersight_objects(
                        intersight_api_key_id=None,
                        intersight_api_key=None,
                        intersight_api_path=f"compute/Blades?$top=1000&$filter=ManagementMode%20eq%20%27Intersight%27",
                        object_type="Blade Server",
                        preconfigured_api_client=self.api_client
                        )                    
                    # Search for Chassis Blade Servers in the provided Domain Name with matching Chassis and Slot IDs under the Intersight Account
                    for blade_server in retrieved_intersight_blade_servers.get("Results"):
                        if (
                            int(blade_server["ChassisId"]) in provided_chassis_id_list
                            and
                            blade_server["SlotId"] in provided_chassis_slot_ids_list
                            and
                            blade_server["ManagementMode"] == "Intersight"
                            ):
                            current_chassis_id = int(blade_server["ChassisId"])
                            # Search for Chassis in the provided Domain Name with matching Chassis IDs under the Intersight Account
                            for chassis in retrieved_intersight_chassis.get("Results"):
                                if (
                                    chassis["RegisteredDevice"]["Moid"] == chassis_domain_name_moid
                                    and
                                    chassis["ChassisId"] == current_chassis_id
                                    and
                                    chassis["ManagementMode"] == "Intersight"
                                    ):
                                    retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Chassis IDs are provided without the Domain Name or Slot IDs
                if chassis_resources_dictionary.get("ChassisIds"):
                    if not any(
                        (chassis_resources_dictionary.get("DomainName"),
                         chassis_resources_dictionary.get("SlotIds")
                         )
                        ):
                        # Convert provided Chassis IDs into list format
                        provided_chassis_id_list = integer_number_list_maker(chassis_resources_dictionary["ChassisIds"])
                        # Search for Chassis with matching Chassis IDs under the Intersight Account
                        for chassis in retrieved_intersight_chassis.get("Results"):
                            if (
                                chassis["ChassisId"] in provided_chassis_id_list
                                and
                                chassis["ManagementMode"] == "Intersight"
                                ):
                                # Extract MOIDs from the Blade Servers in any matched Chassis
                                for chassis_blade_server in chassis["Blades"]:
                                    retrieved_blade_server_moid_list.append(chassis_blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Chassis IDs and Slot IDs are provided without any corresponding Domain Name
                if all(
                    (chassis_resources_dictionary.get("ChassisIds"),
                     chassis_resources_dictionary.get("SlotIds")
                     )
                    ):
                    if not chassis_resources_dictionary.get("DomainName"):
                        # Convert provided Chassis IDs into list format
                        provided_chassis_id_list = integer_number_list_maker(chassis_resources_dictionary["ChassisIds"])
                        # Convert provided Chassis Blade Server Slot IDs into list format
                        provided_chassis_slot_ids_list = integer_number_list_maker(chassis_resources_dictionary["SlotIds"])
                        # Check for Blade Server resources located under the Intersight Account
                        retrieved_intersight_blade_servers = get_intersight_objects(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            intersight_api_path=f"compute/Blades?$top=1000&$filter=ManagementMode%20eq%20%27Intersight%27",
                            object_type="Blade Server",
                            preconfigured_api_client=self.api_client
                            )                        
                        # Search for Chassis Blade Servers with matching Chassis and Slot IDs under the Intersight Account
                        for blade_server in retrieved_intersight_blade_servers.get("Results"):
                            if (
                                int(blade_server["ChassisId"]) in provided_chassis_id_list
                                and
                                blade_server["SlotId"] in provided_chassis_slot_ids_list
                                and
                                blade_server["ManagementMode"] == "Intersight"
                                ):
                                current_chassis_id = int(blade_server["ChassisId"])
                                # Search for Chassis with matching Chassis IDs under the Intersight Account
                                for chassis in retrieved_intersight_chassis.get("Results"):
                                    if (
                                        chassis["ChassisId"] == current_chassis_id
                                        and
                                        chassis["ManagementMode"] == "Intersight"
                                        ):
                                        retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Slot IDs are provided without the Domain Name or Chassis IDs
                if chassis_resources_dictionary.get("SlotIds"):
                    if not any(
                        (chassis_resources_dictionary.get("DomainName"),
                         chassis_resources_dictionary.get("ChassisIds")
                         )
                        ):
                        # Convert provided Chassis Blade Server Slot IDs into list format
                        provided_chassis_slot_ids_list = integer_number_list_maker(chassis_resources_dictionary["SlotIds"])
                        # Check for Blade Server resources located under the Intersight Account
                        retrieved_intersight_blade_servers = get_intersight_objects(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            intersight_api_path=f"compute/Blades?$top=1000&$filter=ManagementMode%20eq%20%27Intersight%27",
                            object_type="Blade Server",
                            preconfigured_api_client=self.api_client
                            )                        
                        # Search for Chassis Blade Servers in the provided Domain Name with matching Slot IDs under the Intersight Account
                        for blade_server in retrieved_intersight_blade_servers.get("Results"):
                            if (
                                blade_server["SlotId"] in provided_chassis_slot_ids_list
                                and
                                blade_server["ManagementMode"] == "Intersight"
                                ):
                                retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if the Domain Name and Slot IDs are provided without any corresponding Chassis IDs
                if all(
                    (chassis_resources_dictionary.get("DomainName"),
                     chassis_resources_dictionary.get("SlotIds")
                     )
                    ):
                    if not chassis_resources_dictionary.get("ChassisIds"):
                        # Convert provided Chassis Blade Server Slot IDs into list format
                        provided_chassis_slot_ids_list = integer_number_list_maker(chassis_resources_dictionary["SlotIds"])
                        # Get the MOID of the provided Domain Name for the Chassis
                        chassis_domain_name_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "DeviceHostname": [chassis_resources_dictionary["DomainName"]]
                                },
                            intersight_api_path="asset/DeviceRegistrations?$top=1000",
                            object_type="Domain Name",
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )                        
                        # Check for Blade Server resources located under the Intersight Account
                        retrieved_intersight_blade_servers = get_intersight_objects(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            intersight_api_path=f"compute/Blades?$top=1000&$filter=ManagementMode%20eq%20%27Intersight%27",
                            object_type="Blade Server",
                            preconfigured_api_client=self.api_client
                            )                        
                        # Search for Chassis Blade Servers in the provided Domain Name with matching Slot IDs under the Intersight Account
                        for blade_server in retrieved_intersight_blade_servers.get("Results"):
                            if (
                                blade_server["SlotId"] in provided_chassis_slot_ids_list
                                and
                                blade_server["ManagementMode"] == "Intersight"
                                ):
                                # Get the MOID of the Chassis associated with the current Blade Server
                                current_chassis_moid = blade_server["EquipmentChassis"]["Moid"]
                                # Get the associated Chassis object details
                                current_chassis_object = get_single_intersight_object(
                                    intersight_api_key_id=None,
                                    intersight_api_key=None,
                                    intersight_api_path="equipment/Chasses?$top=1000",
                                    object_moid=current_chassis_moid,
                                    object_type="UCS Chassis",
                                    preconfigured_api_client=self.api_client
                                    )
                                # Get the MOID of the Domain Name for the Chassis associated with the current Blade Server
                                current_chassis_object_domain_name_moid = current_chassis_object["RegisteredDevice"]["Moid"]
                                # Retrieve the current Blade Server MOID if the Chassis Domain Name matches the provided Domain Name
                                if current_chassis_object_domain_name_moid == chassis_domain_name_moid:
                                    retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Chassis Blade Server MOID extraction process if any Chassis serials are provided
                if chassis_resources_dictionary.get("Serials"):
                    # Convert provided Chassis serials into list format
                    provided_chassis_serials_list = string_to_list_maker(chassis_resources_dictionary["Serials"])
                    # Search for Chassis with matching serials under the Intersight Account
                    for chassis in retrieved_intersight_chassis.get("Results"):
                        if chassis["Serial"] in provided_chassis_serials_list:
                            # Extract MOIDs from the Blade Servers in any matched Chassis
                            for chassis_blade_server in chassis["Blades"]:
                                retrieved_blade_server_moid_list.append(chassis_blade_server["Moid"])

        # Check for provided Blade Server resources
        if self.blade_server_resources_list:
            print("Checking for the provided Blade Server resources...")
            retrieved_intersight_blade_servers = get_intersight_objects(
                intersight_api_key_id=None,
                intersight_api_key=None,
                intersight_api_path=f"compute/Blades?$top=1000&$filter=ManagementMode%20eq%20%27Intersight%27",
                object_type="Blade Server",
                preconfigured_api_client=self.api_client
                )
            if not retrieved_intersight_blade_servers.get("Results"):
                print("No Blade Servers were found in the Intersight Account.")
            for blade_server_resources_dictionary in self.blade_server_resources_list:
                # Blade Server MOID extraction process if any Blade Server names are provided
                if blade_server_resources_dictionary.get("Names"):
                    # Convert provided Blade Server names into list format
                    provided_blade_server_names_list = string_to_list_maker(blade_server_resources_dictionary["Names"])
                    # Search for Blade Servers with matching names under the Intersight Account
                    for blade_server in retrieved_intersight_blade_servers.get("Results"):
                        if blade_server["Name"] in provided_blade_server_names_list:
                            # Extract MOIDs from the matched Blade Servers
                            retrieved_blade_server_moid_list.append(blade_server["Moid"])
                # Blade Server MOID extraction process if any Blade Server serials are provided
                if blade_server_resources_dictionary.get("Serials"):
                    # Convert provided Blade Server serials into list format
                    provided_blade_server_serials_list = string_to_list_maker(blade_server_resources_dictionary["Serials"])
                    # Search for Blade Servers with matching serials under the Intersight Account
                    for blade_server in retrieved_intersight_blade_servers.get("Results"):
                        if blade_server["Serial"] in provided_blade_server_serials_list:
                            # Extract MOIDs from the matched Blade Servers
                            retrieved_blade_server_moid_list.append(blade_server["Moid"])

        # Setup API body with retrieved Blade Server MOIDs from any provided resources
        if retrieved_blade_server_moid_list:
            try:
                api_ready_retrieved_blade_server_moid_list = tuple(set(retrieved_blade_server_moid_list))
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} "
                      f"named {self.policy_name}, there was an issue with "
                      "retrieving the blade servers under the provided "
                      "chassis resources.\n")
            # Count the number of Blade Servers to be added to the Resource Pool
            number_of_blade_servers_to_be_added = len(api_ready_retrieved_blade_server_moid_list)
            print("Based on the resource criteria provided, the amount of "
                  "Blade Servers to be placed in the Resource Pool is "
                  f"{number_of_blade_servers_to_be_added}.")
            # NOTE - Intersight API Selector attribute will not accept tuple with single element and trailing comma
            # NOTE - Addressed by handling single elements differently
            if number_of_blade_servers_to_be_added == 1:
                for blade_server in api_ready_retrieved_blade_server_moid_list:
                    single_blade_server = blade_server
                if self.intersight_api_body.get("Selectors"):
                    self.intersight_api_body["Selectors"].append(
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/Blades?$filter=(Moid in ('{single_blade_server}'))"
                         }
                        )
                else:
                    self.intersight_api_body["Selectors"] = [
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/Blades?$filter=(Moid in ('{single_blade_server}'))"
                         }
                        ]
            else:
                if self.intersight_api_body.get("Selectors"):
                    self.intersight_api_body["Selectors"].append(
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/Blades?$filter=(Moid in {api_ready_retrieved_blade_server_moid_list})"
                         }
                        )
                else:
                    self.intersight_api_body["Selectors"] = [
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/Blades?$filter=(Moid in {api_ready_retrieved_blade_server_moid_list})"
                         }
                        ]
        else:
            print("Based on the resource criteria provided, no Blade Servers "
                  "will be added to the Resource Pool.")
            if self.intersight_api_body.get("Selectors"):
                self.intersight_api_body["Selectors"].append(
                    {"ClassId": "resource.Selector",
                     "ObjectType": "resource.Selector",
                     "Selector": f"/api/v1/compute/Blades?$filter=(Moid in (''))"
                     }
                    )
            else:
                self.intersight_api_body["Selectors"] = [
                    {"ClassId": "resource.Selector",
                     "ObjectType": "resource.Selector",
                     "Selector": f"/api/v1/compute/Blades?$filter=(Moid in (''))"
                     }
                    ]
    
        # Check for provided Rack Server resources
        if self.rack_server_resources_list:
            print("Checking for the provided Rack Server resources...")
            if reformatted_ucs_server_type_variable_value == "fi-attached":
                retrieved_intersight_rack_servers = get_intersight_objects(
                    intersight_api_key_id=None,
                    intersight_api_key=None,
                    intersight_api_path="compute/RackUnits?$top=1000&$filter=ManagementMode%20eq%20%27Intersight%27",
                    object_type="Rack Server",
                    preconfigured_api_client=self.api_client
                    )
            elif reformatted_ucs_server_type_variable_value == "standalone":
                retrieved_intersight_rack_servers = get_intersight_objects(
                    intersight_api_key_id=None,
                    intersight_api_key=None,
                    intersight_api_path="compute/RackUnits?$top=1000&$filter=ManagementMode%20eq%20%27IntersightStandalone%27",
                    object_type="Rack Server",
                    preconfigured_api_client=self.api_client
                    )
            if not retrieved_intersight_rack_servers.get("Results"):
                print("No Rack Servers were found in the Intersight Account.")
            for rack_server_resources_dictionary in self.rack_server_resources_list:
                # Rack Server MOID extraction process if any Rack Server names are provided
                if rack_server_resources_dictionary.get("Names"):
                    # Convert provided Rack Server names into list format
                    provided_rack_server_names_list = string_to_list_maker(rack_server_resources_dictionary["Names"])
                    # Search for Rack Servers with matching names under the Intersight Account
                    for rack_server in retrieved_intersight_rack_servers.get("Results"):
                        if rack_server["Name"] in provided_rack_server_names_list:
                            # Extract MOIDs from the matched Rack Servers
                            retrieved_rack_server_moid_list.append(rack_server["Moid"])
                # Rack Server MOID extraction process if any Rack Server serials are provided
                if rack_server_resources_dictionary.get("Serials"):
                    # Convert provided Rack Server serials into list format
                    provided_rack_server_serials_list = string_to_list_maker(rack_server_resources_dictionary["Serials"])
                    # Search for Rack Servers with matching serials under the Intersight Account
                    for rack_server in retrieved_intersight_rack_servers.get("Results"):
                        if rack_server["Serial"] in provided_rack_server_serials_list:
                            # Extract MOIDs from the matched Rack Servers
                            retrieved_rack_server_moid_list.append(rack_server["Moid"])

        # Setup API body with retrieved Rack Server MOIDs from any provided resources
        if retrieved_rack_server_moid_list:
            try:
                api_ready_retrieved_rack_server_moid_list = tuple(set(retrieved_rack_server_moid_list))
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} "
                      f"named {self.policy_name}, there was an issue with "
                      "retrieving the rack servers under the provided "
                      "chassis resources.\n")
            # Count the number of Rack Servers to be added to the Resource Pool
            number_of_rack_servers_to_be_added = len(api_ready_retrieved_rack_server_moid_list)
            print("Based on the resource criteria provided, the amount of "
                  "Rack Servers to be placed in the Resource Pool is "
                  f"{number_of_rack_servers_to_be_added}.")
            # NOTE - Intersight API Selector attribute will not accept tuple with single element and trailing comma
            # NOTE - Addressed by handling single elements differently
            if number_of_rack_servers_to_be_added == 1:
                for rack_server in api_ready_retrieved_rack_server_moid_list:
                    single_rack_server = rack_server
                if self.intersight_api_body.get("Selectors"):
                    self.intersight_api_body["Selectors"].append(
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in ('{single_rack_server}'))"
                         }
                        )
                else:
                    self.intersight_api_body["Selectors"] = [
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in ('{single_rack_server}'))"
                         }
                        ]
            else:
                if self.intersight_api_body.get("Selectors"):
                    self.intersight_api_body["Selectors"].append(
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in {api_ready_retrieved_rack_server_moid_list})"
                         }
                        )
                else:
                    self.intersight_api_body["Selectors"] = [
                        {"ClassId": "resource.Selector",
                         "ObjectType": "resource.Selector",
                         "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in {api_ready_retrieved_rack_server_moid_list})"
                         }
                        ]
        else:
            print("Based on the resource criteria provided, no Rack Servers "
                  "will be added to the Resource Pool.")
            if self.intersight_api_body.get("Selectors"):
                self.intersight_api_body["Selectors"].append(
                    {"ClassId": "resource.Selector",
                     "ObjectType": "resource.Selector",
                     "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in (''))"
                     }
                    )
            else:
                self.intersight_api_body["Selectors"] = [
                    {"ClassId": "resource.Selector",
                     "ObjectType": "resource.Selector",
                     "Selector": f"/api/v1/compute/RackUnits?$filter=(Moid in (''))"
                     }
                    ]

        # POST the API body to Intersight
        self._post_intersight_object()


def resource_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    chassis_resources_list=None,
    blade_server_resources_list=None,
    rack_server_resources_list=None,
    ucs_server_type="FI-Attached",
    resource_type="Server",
    pool_type="Static",
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Resource Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        chassis_resources_list (list):
            Optional; The list of dictionary entries for blade servers to be
            added to the resource pool based on chassis membership. This is the
            easiest way to add multiple blades at once with minimal
            configuration. The default value is None. An example entry is:
            [{"DomainName": "UCS-IMM-Pod",
              "ChassisIds": "1",
              "SlotIds": "1,2,3,4,5-8",
              "Serials": ""},].
            The above example entry will add the blade servers in slots
            1 through 8 of chassis 1 under the UCS domain named UCS-IMM-Pod.
            A "DomainName" key with a string value can be configured to specify
            the domain of the targeted chassis. If only the "DomainName" key is
            provided, the blade servers of all chassis in the domain under
            Intersight Managed Mode will be added to the resource pool. A
            "ChassisIds" key with a string value can be configured to specify
            the IDs of the targeted chassis. If only the "ChassisIds" key is
            provided, the blade servers of the listed chassis (regardless of
            UCS domain) under Intersight Managed Mode will be added to the
            resource pool. A "SlotIds" key with a string value can be
            configured to specify the IDs of the targeted chassis slots. If
            only the "SlotIds" key is provided, the blade servers in the listed
            chassis slots of any available chassis (regardless of UCS domain)
            under Intersight Managed Mode will be added to the resource pool.
            Combined use of the above keys will have greater specificity in
            targeting desired blade servers for the resource pool. A "Serials"
            key with a string value can also be configured to specify the
            serials of targeted chassis. When using the "Serials" key, all
            blades in the targeted chassis will be added to the resource pool.
            Multiple dictionaries can be placed in the list to configure
            different resource criteria and ranges. All keys are optional.
        blade_server_resources_list (list):
            Optional; The list of dictionary entries for blade servers to be
            added to the resource pool based on the blade server name or
            serial. The default value is None.
            An example entry is: 
            [{"Names": "UCS-IMM-Pod-1-7, UCS-IMM-Pod-1-8",
              "Serials": ""},].
            The above example entry will add the two blade servers named
            UCS-IMM-Pod-1-7 and UCS-IMM-Pod-1-8. A "Names" key with a string
            value can be configured to specify the names of the targeted blade
            servers. A "Serials" key with a string value can also be configured
            to specify the serials of targeted blade servers. Multiple
            dictionaries can be placed in the list to configure different
            resource criteria and ranges. All keys are optional.
        rack_server_resources_list (list):
            Optional; The list of dictionary entries for rack servers to be
            added to the resource pool based on the rack server name or serial.
            The default value is None. An example entry is: 
            [{"Names": "UCS-IMM-Pod-1, UCS-IMM-Pod-2, UCS-IMM-Pod-3",
              "Serials": ""},].
            The above example entry will add the three rack servers named
            UCS-IMM-Pod-1, UCS-IMM-Pod-2 and UCS-IMM-Pod-3. A "Names" key with
            a string value can be configured to specify the names of the
            targeted rack servers. A "Serials" key with a string value can also
            be configured to specify the serials of targeted rack servers. 
            Multiple dictionaries can be placed in the list to configure
            different resource criteria and ranges. All keys are optional.
        ucs_server_type (str):
            Optional; The target UCS server type of the resource pool. The
            accepted values are "FI-Attached" or "Standalone". IMM
            (Intersight Managed Mode) environments should use "FI-Attached". 
            The default value is "FI-Attached".
        resource_type (str):
            Optional; The resource type of the pool. The accepted values are 
            "Server" or "None". The default value is "Server".
        pool_type (str):
            Optional; The resource management type of the pool. Static pools
            will not change unless manually updated by a user. The accepted
            values are "Static" or "Dynamic". The default value is "Static".
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Resource Pool object in Intersight
    builder(
        ResourcePool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            chassis_resources_list=chassis_resources_list,
            blade_server_resources_list=blade_server_resources_list,
            rack_server_resources_list=rack_server_resources_list,
            ucs_server_type=ucs_server_type,
            resource_type=resource_type,
            pool_type=pool_type
            ))


# Establish classes and functions to make SAN Connectivity Policy
class SanConnectivityPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a SAN Connectivity Policy in Intersight.
    """
    object_type = "SAN Connectivity Policy"
    intersight_api_path = "vnic/SanConnectivityPolicies"
    object_variable_value_maps = [
        {"VariableName": "vhba_placement_mode",
         "Description": "vHBA Placement Mode",
         "AttributeName": "PlacementMode",
         "Values": [
             {"FrontEndValue": "Auto",
              "BackEndValue": "auto"
              },
             {"FrontEndValue": "Manual",
              "BackEndValue": "custom"
              },
             {"FrontEndValue": "Custom",
              "BackEndValue": "custom"
              }
             ]
         },
        {"VariableName": "wwnn_address_type",
         "Description": "WWNN Address Type",
         "AttributeName": "WwnnAddressType",
         "Values": [
             {"FrontEndValue": "Pool",
              "BackEndValue": "POOL"
              },
             {"FrontEndValue": "Static",
              "BackEndValue": "STATIC"
              }
             ]
         }
        ]    

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 wwnn_address_type="None",
                 wwnn_pool_name=None,
                 wwnn_static_address="",
                 vhba_placement_mode="Auto",
                 ucs_server_type="FI-Attached"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.wwnn_address_type = wwnn_address_type
        self.wwnn_pool_name = wwnn_pool_name
        self.wwnn_static_address = wwnn_static_address
        self.vhba_placement_mode = vhba_placement_mode
        self.ucs_server_type = ucs_server_type
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "WwnnAddressType": self.wwnn_address_type,
            "StaticWwnnAddress": self.wwnn_static_address
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.wwnn_address_type}', "
            f"{self.wwnn_pool_name}, "
            f"'{self.wwnn_static_address}', "
            f"'{self.vhba_placement_mode}', "
            f"'{self.ucs_server_type}')"
            )

    def _update_api_body_ucs_server_type(self):
        """This function updates the Intersight API body with the UCS server type
        i.e. target platform in the accepted format.
        
        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """    
        # Update the API body with the provided UCS Server Type (Target Platform)
        # Reformat the user provided ucs_server_type variable value to lowercase and remove spaces to prevent potential format issues
        try:
            reformatted_ucs_server_type_variable_value = "".join(self.ucs_server_type.lower().split())
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        if reformatted_ucs_server_type_variable_value == "fi-attached":
            self.intersight_api_body["TargetPlatform"] = "FIAttached"
        elif reformatted_ucs_server_type_variable_value == "standalone":
            self.intersight_api_body["TargetPlatform"] = "Standalone"
        else:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)

    def object_maker(self):
        """This function makes the targeted policy object.
        """
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with any provided WWNN Pool
        if self.wwnn_pool_name:
            wwnn_pool_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                             intersight_api_key=None,
                                                             object_name=self.wwnn_pool_name,
                                                             intersight_api_path="fcpool/Pools?$top=1000",
                                                             object_type="WWNN Pool",
                                                             preconfigured_api_client=self.api_client
                                                             )
            self.intersight_api_body["WwnnPool"] = {
                "Moid": wwnn_pool_moid
                }
        else:
            self.intersight_api_body["WwnnPool"] = None
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # Update the API body with the UCS server type
        self._update_api_body_ucs_server_type()
        # POST the API body to Intersight
        self._post_intersight_object()


class Vhba(Interface):
    """This class serves as a base class for configuring vHBAs in Intersight
    policies.
    """
    object_type = "vHBA"
    id_type = "Vhba"
    intersight_api_path = "vnic/FcIfs"
    policy_type = "SAN Connectivity Policy"
    policy_intersight_api_path = "vnic/SanConnectivityPolicies"
    policy_class_name = "SanConnectivityPolicy"
    interface_object_attribute_maps = [
        {"FrontEndName": None,
         "BackEndName": "Name",
         "Description": "vHBA Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "vHBA Type",
         "BackEndName": "Type",
         "Description": "vHBA Type",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "fc-initiator",
             "fc-nvme-initiator",
             "fc-nvme-target",
             "fc-target"
             ],
         "FronttoBackEndValueMaps": {
             "fc-initiator": "fc-initiator",
             "fc-nvme-initiator": "fc-nvme-initiator",
             "fc-nvme-target": "fc-nvme-target",
             "fc-target": "fc-target"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Pin Group Name",
         "BackEndName": "PinGroupName",
         "Description": "vHBA Pin Group Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "WWPN Address Type",
         "BackEndName": "WwpnAddressType",
         "Description": "WWPN Address Type",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Pool",
             "Static"
             ],
         "FronttoBackEndValueMaps": {
             "pool": "POOL",
             "static": "STATIC"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "WWPN Address Pool",
         "BackEndName": "WwpnPool",
         "Description": "WWPN Address Pool",
         "IntersightAPIPath": "fcpool/Pools",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_wwpn_address_pool_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Static WWPN Address",
         "BackEndName": "StaticWwpnAddress",
         "Description": "vHBA Static WWPN Address",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Slot ID",
         "BackEndName": "Id",
         "Description": "vHBA Slot ID Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "PCI Link",
         "BackEndName": "PciLink",
         "Description": "vHBA PCI Link Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "Switch ID",
         "BackEndName": "SwitchId",
         "Description": "vHBA Switch ID Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "A",
             "B",
             "None"
             ],
         "FronttoBackEndValueMaps": {
             "a": "A",
             "b": "B",
             "none": "None"
             },
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": None,
         "BackEndName": "Uplink",
         "Description": "vHBA Uplink Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "PCI Order",
         "BackEndName": "Order",
         "Description": "vHBA PCI Order Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Persistent LUN Bindings",
         "BackEndName": "PersistentBindings",
         "Description": "vHBA Persistent LUN Bindings Enablement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Fibre Channel Network",
         "BackEndName": "FcNetworkPolicy",
         "Description": "Fibre Channel Network Policy",
         "IntersightAPIPath": "vnic/FcNetworkPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_fibre_channel_network_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Fibre Channel QoS",
         "BackEndName": "FcQosPolicy",
         "Description": "Fibre Channel QoS Policy",
         "IntersightAPIPath": "vnic/FcQosPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_fibre_channel_qos_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Fibre Channel Adapter",
         "BackEndName": "FcAdapterPolicy",
         "Description": "Fibre Channel Adapter Policy",
         "IntersightAPIPath": "vnic/FcAdapterPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_fibre_channel_adapter_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "FC Zone",
         "BackEndName": "FcZonePolicies",
         "Description": "FC Zone Policy",
         "IntersightAPIPath": "fabric/FcZonePolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": "default_fc_zone_policy_names",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_wwpn_address_pool_name="",
                 default_fibre_channel_network_policy_name="",
                 default_fibre_channel_qos_policy_name="",
                 default_fibre_channel_adapter_policy_name="",
                 default_fc_zone_policy_names=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        self.default_wwpn_address_pool_name = default_wwpn_address_pool_name
        self.default_fibre_channel_network_policy_name = default_fibre_channel_network_policy_name
        self.default_fibre_channel_qos_policy_name = default_fibre_channel_qos_policy_name
        self.default_fibre_channel_adapter_policy_name = default_fibre_channel_adapter_policy_name
        if default_fc_zone_policy_names is None:
            self.default_fc_zone_policy_names = []
        else:
            self.default_fc_zone_policy_names = default_fc_zone_policy_names

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"'{self.default_wwpn_address_pool_name}', "
            f"'{self.default_fibre_channel_network_policy_name}', "
            f"'{self.default_fibre_channel_qos_policy_name}', "
            f"'{self.default_fibre_channel_adapter_policy_name}', "
            f"'{self.default_fc_zone_policy_names}')"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def _post_intersight_vhba(vhba_name,
                                  body,
                                  moid=None
                                  ):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                vhba_name (str):
                    The name of the vHBA to be posted on Intersight.
                body (dict):
                    The body of the object to be posted on Intersight.
                moid (str):
                    Optional; The Intersight MOID of the object to be posted
                    on Intersight. The default value is None.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            if moid:
                full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
            else:
                full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                if moid:
                    print(f"The configuration of {self.object_type} "
                          f"{vhba_name} has been updated.")
                else:
                    print(f"The configuration of {self.object_type} "
                          f"{vhba_name} has completed.")
                return "The POST method was successful."
            except intersight.exceptions.ApiException as error:
                error_body_dictionary = ast.literal_eval(error.body)
                if (
                    error.status == 400
                    and
                    error_body_dictionary.get("messageId") == "vhba_duplicate_name"
                    ):
                    print(f"The targeted {self.object_type} {vhba_name} "
                          "appears to already exist.")
                    print("An attempt will be made to update the pre-existing "
                          f"{vhba_name}...")
                    try:
                        existing_intersight_object_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "Name": vhba_name,
                                "SanConnectivityPolicy": {
                                    "ClassId": "mo.MoRef",
                                    "Moid": policy_moid,
                                    "ObjectType": "vnic.SanConnectivityPolicy",
                                    "link": f"https://www.intersight.com/api/v1/vnic/SanConnectivityPolicies/{policy_moid}"
                                    }
                                },
                            intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                            object_type=self.object_type,
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )
                        # Update full Intersight API path with the MOID of the existing object
                        full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                        self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                                 method="POST",
                                                 body=body,
                                                 auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                                 )
                        print(f"The update of the {self.object_type} has "
                              "completed.")
                        print(f"The pre-existing {vhba_name} "
                              "has been updated.")
                        return "The POST method was successful."
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print(f"Unable to update the {self.object_type} under the "
                              "Intersight API resource path "
                              f"'{full_intersight_api_path_with_moid}'.\n")
                        print(f"The pre-existing {vhba_name} "
                              "could not be updated.")
                        print("Exception Message: ")
                        traceback.print_exc()
                        return "The POST method failed."
                elif (
                    error.status == 400
                    and
                    error_body_dictionary.get("messageId") == "vif_duplicate_order_same_slot"
                    ):
                    print("\nA configuration error has occurred!\n")
                    if moid:
                        print(f"Unable to update {self.object_type} "
                              f"{vhba_name} under the "
                              "Intersight API resource path "
                              f"'{full_intersight_api_path}'.\n")
                    else:
                        print(f"Unable to configure {self.object_type} "
                              f"{vhba_name} under the Intersight "
                              f"API resource path '{full_intersight_api_path}'.\n")
                    print("Exception Message: ")
                    traceback.print_exc()
                    print(f"If the {self.object_type} Placement mode is set to "
                          "'Manual' or 'Custom', change the mode to 'Auto' or "
                          "include the appropriate unique values for the "
                          "Placement Slot ID, PCI Link, or PCI Order for each "
                          f"provided {self.object_type} by using the "
                          "'Slot ID', 'PCI Link', or 'PCI Order' dictionary "
                          "keys.")
                    return "The POST method failed."
                else:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to configure the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            except Exception:
                print("\nA configuration error has occurred!\n")
                if moid:
                    print(f"Unable to update {self.object_type} "
                          f"{vhba_name} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                else:
                    print(f"Unable to configure {self.object_type} "
                          f"{vhba_name} under the Intersight "
                          f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."

        def _interface_api_body_staging_updates(id_dictionary):
            """This is a function to handle converting a provided interface
            dictionary into an API body that is prepped and staged for
            posting to Intersight. Attributes are modified and converted for
            compatibility as needed.
            
            Args:
                id_dictionary (dict):
                    An interface dictionary extracted from the provided
                    interface list being prepared and staged for posting to
                    Intersight.

            Returns:
                A dictionary containing API body data compatible with
                Intersight.
            """            
            staged_intersight_api_body = copy.deepcopy(id_dictionary)
            staged_intersight_api_body[self.policy_class_name] = {"Moid": policy_moid}
            # Handle setting of attributes which have mismatched Front-End and Back-End labeling, set provided default values, retrieve any required MOIDs and verify/set Parent attributes
            for interface_object_attribute_map_dictionary in self.interface_object_attribute_maps:
                self._interface_object_attribute_map_handler(
                    staged_interface_dictionary=staged_intersight_api_body,
                    interface_object_attribute_map_dictionary=interface_object_attribute_map_dictionary
                    )
            # Update the Intersight API body with the FC Zone Policy MOID values and convert to a list format if needed, as required by the backend API
            if staged_intersight_api_body.get("FcZonePolicies"):
                provided_fc_zone_policy_names = staged_intersight_api_body.get("FcZonePolicies")
                # If the provided FC Zone Policies are in list format, gather MOIDS for each FC Zone Policy and update the Intersight API body with the new values
                if isinstance(provided_fc_zone_policy_names, list):
                    converted_fc_zone_policy_names_list = []
                    for fc_zone_policy_name in provided_fc_zone_policy_names:
                        fc_zone_policy_name_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=fc_zone_policy_name,
                                                                                    intersight_api_path="fabric/FcZonePolicies?$top=1000",
                                                                                    object_type="FC Zone Policy",
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                        converted_fc_zone_policy_names_list.append({"Moid": fc_zone_policy_name_moid})
                    staged_intersight_api_body["FcZonePolicies"] = converted_fc_zone_policy_names_list
                # If a single FC Zone Policy is provided in string format, gather the single MOID and place in a list as required by the backend API and update the Intersight API body with the new values
                if isinstance(provided_fc_zone_policy_names, str):
                    fc_zone_policy_name_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                intersight_api_key=None,
                                                                                object_name=provided_fc_zone_policy_names,
                                                                                intersight_api_path="fabric/FcZonePolicies?$top=1000",
                                                                                object_type="FC Zone Policy",
                                                                                organization=self.organization,
                                                                                preconfigured_api_client=self.api_client
                                                                                )
                    staged_intersight_api_body["FcZonePolicies"] = [{"Moid": fc_zone_policy_name_moid}]
            # Remove keys not needed for creating the Interface object from the staged_intersight_api_body
            staged_intersight_api_body.pop(vhbas_id_key, None)
            return staged_intersight_api_body

        if self.id_list:
            vhbas_id_key = f"{self.id_type}s"
            # Retrieving the SAN Connectivity Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=f"{self.policy_intersight_api_path}?$top=1000",
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           intersight_base_url=self.intersight_base_url,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                if id_dictionary.get(vhbas_id_key):
                    vhbas_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                                   vhbas_id_key
                                                                                   )
                    staged_intersight_api_body = _interface_api_body_staging_updates(id_dictionary)
                    current_vhba_id_name_prefix = id_dictionary.get("Name")
                    for current_vhba_id in vhbas_enumerated_id_range:
                        current_vhba_id_full_name = f"{current_vhba_id_name_prefix}{current_vhba_id}"
                        staged_intersight_api_body["Name"] = current_vhba_id_full_name
                        _post_intersight_vhba(
                            current_vhba_id_full_name,
                            staged_intersight_api_body
                            )
                else:
                    staged_intersight_api_body = _interface_api_body_staging_updates(id_dictionary)
                    current_vhba_id_full_name = id_dictionary.get("Name")
                    _post_intersight_vhba(
                        current_vhba_id_full_name,
                        staged_intersight_api_body
                        )
                              

def san_connectivity_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    wwnn_address_type="None",
    wwnn_pool_name=None,
    wwnn_static_address="",
    vhba_placement_mode="Auto",
    ucs_server_type="FI-Attached",
    vhba_list=None,
    default_wwpn_address_pool_name="",
    default_fibre_channel_network_policy_name="",
    default_fibre_channel_qos_policy_name="",
    default_fibre_channel_adapter_policy_name="",
    default_fc_zone_policy_names=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a SAN Connectivity Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        wwnn_address_type (str):
            Optional; The WWNN address type. The accepted values are "None",
            "Static", and "Pool". The default value is "None".
        wwnn_pool_name (str):
            Optional; The pre-existing WWNN pool to be used if the WWNN
            address type has been set to "Pool". The default value is None.
        wwnn_static_address (str):
            Optional; The WWNN static address to be used if the WWNN
            address type has been set to "Static". The default value is an
            empty string ("").
        vhba_placement_mode (str):
            Optional; The vHBA placement mode. The accepted values are "Auto"
            and "Manual". The default value is "Auto".
        ucs_server_type (str):
            Optional; The target UCS server type of the policy. The accepted
            values are "FI-Attached" or "Standalone". IMM
            (Intersight Managed Mode) environments should use "FI-Attached". 
            The default value is "FI-Attached".
        vhba_list (list):
            Optional; The list of dictionary entries for vHBAs to
            be configured. The default value is None. An
            example entry is:
            [{"Name": "vhba0",
              "Switch ID": "A"},
             {"Name": "vhba1",
              "Switch ID": "B"},].
            A "Name" key with a string value must be configured to specify the
            vHBA name. A "Switch ID" key with a string value of "A" or "B" to
            specify the fabric of the vHBA is also mandatory. Pre-existing
            Fibre Channel Network, Fibre Channel QoS, and
            Fibre Channel Adapter Policies are also required when configuring vHBAs
            and can be provided through the vhba_list argument or corresponding
            arguments for default policies (see and review other arguments of
            the function). If mandatory Policies are not provided using
            corresponding arguments, a corresponding Policy key must also be
            configured in each vHBA dictionary entry to specify a
            pre-existing Policy using a string value. If different Policies
            and/or Pools are desired for different sets of vHBAs, the
            corresponding Policy or Pool key should also be used and will
            always override the arguments for default Policies or Pools.
            Optional key settings such as "Pin Group Name", "vHBA Type",
            "WWPN Address Type", "WWPN Address Pool", "Static WWPN Address",
            "Slot ID", "PCI Link", "Uplink", "PCI Order",
            "Persistent LUN Bindings", "Fibre Channel Network",
            "Fibre Channel QoS", "Fibre Channel Adapter", and "FC Zone" can
            also be configured in each list dictionary, if the associated
            system default values are not desired. For bulk creation of vHBAs,
            a "Vhbas" key with a string value can be configured in each
            dictionary of the list to specify a range of vHBA IDs with shared
            values. An example entry is:
            [{"Name": "vhba",
              "Vhbas": "0,2,4,6",
              "Switch ID": "A"},
             {"Name": "vhba",
              "Vhbas": "1,3,5,7",
              "Switch ID": "B"},].
            When using the "Vhbas" key, the "Name" key becomes a prefix for the
            vHBA name value.
        default_wwpn_address_pool_name (str):
            Optional; The name of the default WWPN Address Pool to be used by
            all vHBAs in the SAN Connectivity Policy. The default value is an
            empty string ("").
        default_fibre_channel_network_policy_name (str):
            Optional; The name of the default Fibre Channel Network Policy to
            be used by all vHBAs in the SAN Connectivity Policy. The default
            value is an empty string ("").
        default_fibre_channel_qos_policy_name (str):
            Optional; The name of the default Fibre Channel QoS Policy to be used by
            all vHBAs in the SAN Connectivity Policy. The default value is an
            empty string ("").
        default_fibre_channel_adapter_policy_name (str):
            Optional; The name of the default Fibre Channel Adapter Policy to be
            used by all vHBAs in the SAN Connectivity Policy. The default value
            is an empty string ("").
        default_fc_zone_policy_names (list):
            Optional; A list of the default FC Zone Policy names to be used by
            all vHBAs in the SAN Connectivity Policy. The default value is None.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create SAN Connectivity Policy object in Intersight
    builder(
        SanConnectivityPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            wwnn_address_type=wwnn_address_type,
            wwnn_pool_name=wwnn_pool_name,
            wwnn_static_address=wwnn_static_address,
            vhba_placement_mode=vhba_placement_mode,
            ucs_server_type=ucs_server_type            
            ))

    # Define and create vHBA objects in Intersight
    builder(
        Vhba(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            id_list=vhba_list,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            default_wwpn_address_pool_name=default_wwpn_address_pool_name,
            default_fibre_channel_network_policy_name=default_fibre_channel_network_policy_name,
            default_fibre_channel_qos_policy_name=default_fibre_channel_qos_policy_name,
            default_fibre_channel_adapter_policy_name=default_fibre_channel_adapter_policy_name,
            default_fc_zone_policy_names=default_fc_zone_policy_names
            ))


# Establish classes and functions to make SD Card Policy
class SdCardPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a SD Card Policy in Intersight.
    """
    object_type = "SD Card Policy"
    intersight_api_path = "sdcard/Policies"
    object_variable_value_maps = [
        {"VariableName": "sd_card_mode",
         "Description": "SD Card Mode",
         "AttributeName": "SdCardMode",
         "Values": [
             {"FrontEndValue": "Operating System Only",
              "BackEndValue": "OperatingSystemOnly"
              },
             {"FrontEndValue": "Utility Only",
              "BackEndValue": "UtilityOnly"
              },
             {"FrontEndValue": "Operating System + Utility",
              "BackEndValue": "OperatingSystem+Utility"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 sd_card_mode="Operating System Only",
                 enable_operating_system=False,
                 operating_system_partition_name="Hypervisor",
                 enable_utility_diagnostics=False,
                 enable_utility_drivers=False,
                 enable_utility_host_upgrade_utility=False,
                 enable_utility_server_configuration_utility=False,
                 enable_utility_user_partition=False,
                 utility_user_partition_name="UserPartition"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.sd_card_mode = sd_card_mode
        self.enable_operating_system = enable_operating_system
        self.operating_system_partition_name = operating_system_partition_name
        self.enable_utility_diagnostics = enable_utility_diagnostics
        self.enable_utility_drivers = enable_utility_drivers
        self.enable_utility_host_upgrade_utility = enable_utility_host_upgrade_utility
        self.enable_utility_server_configuration_utility = enable_utility_server_configuration_utility
        self.enable_utility_user_partition = enable_utility_user_partition
        self.utility_user_partition_name = utility_user_partition_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.sd_card_mode}', "
            f"{self.enable_operating_system}, "
            f"'{self.operating_system_partition_name}', "
            f"{self.enable_utility_diagnostics}, "
            f"{self.enable_utility_drivers}, "
            f"{self.enable_utility_host_upgrade_utility}, "
            f"{self.enable_utility_server_configuration_utility}, "
            f"{self.enable_utility_user_partition}, "
            f"'{self.utility_user_partition_name}')"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with the SD Card Mode settings
        self.intersight_api_body["Partitions"] = []
        operating_system_configuration = {
            "ClassId": "sdcard.Partition",
            "ObjectType": "sdcard.Partition",
            "Type": "OS",
            "VirtualDrives": [
                {"ClassId": "sdcard.OperatingSystem",
                 "Enable": self.enable_operating_system,
                 "Name": self.operating_system_partition_name,
                 "ObjectType": "sdcard.OperatingSystem"
                 }
                ]
            }
        utility_configuration = {
            "ClassId": "sdcard.Partition",
            "ObjectType": "sdcard.Partition",
            "Type": "Utility",
            "VirtualDrives": [
                {"ClassId": "sdcard.Diagnostics",
                 "Enable": self.enable_utility_diagnostics,
                 "ObjectType": "sdcard.Diagnostics"
                 },
                {"ClassId": "sdcard.Drivers",
                 "Enable": self.enable_utility_drivers,
                 "ObjectType": "sdcard.Drivers"
                 },
                {"ClassId": "sdcard.HostUpgradeUtility",
                 "Enable": self.enable_utility_host_upgrade_utility,
                 "ObjectType": "sdcard.HostUpgradeUtility"
                 },
                {"ClassId": "sdcard.ServerConfigurationUtility",
                 "Enable": self.enable_utility_server_configuration_utility,
                 "ObjectType": "sdcard.ServerConfigurationUtility"
                 },
                {"ClassId": "sdcard.UserPartition",
                 "Enable": self.enable_utility_user_partition,
                 "Name": self.utility_user_partition_name,
                 "ObjectType": "sdcard.UserPartition"
                 }
                ]
            }        
        if self.intersight_api_body["SdCardMode"] == "UtilityOnly":
            self.intersight_api_body["Partitions"].append(
                utility_configuration
                )
        elif self.intersight_api_body["SdCardMode"] == "OperatingSystem+Utility":
            self.intersight_api_body["Partitions"].extend(
                [operating_system_configuration, utility_configuration]
                )
        else:
            self.intersight_api_body["Partitions"].append(
                operating_system_configuration
                )
        self.intersight_api_body.pop("SdCardMode", None)
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()

        
def sd_card_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    sd_card_mode="Operating System Only",
    enable_operating_system=False,
    operating_system_partition_name="Hypervisor",
    enable_utility_diagnostics=False,
    enable_utility_drivers=False,
    enable_utility_host_upgrade_utility=False,
    enable_utility_server_configuration_utility=False,
    enable_utility_user_partition=False,
    utility_user_partition_name="UserPartition",    
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a SD Card Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        sd_card_mode (str):
            Optional; The setting to select the SD Card mode. The accepted
            values are "Operating System Only", "Utility Only", and
            "Operating System + Utility". The default value is
            "Operating System Only".
        enable_operating_system (bool):
            Optional; Enable an operating system virtual drive. The default
            value is False.
        operating_system_partition_name (str):
            Optional; Set an operating system partition name. The default value
            is "Hypervisor".
        enable_utility_diagnostics (bool):
            Optional; Enable a utility diagnostics virtual drive. The default
            value is False.
        enable_utility_drivers (bool):
            Optional; Enable a utility drivers virtual drive. The default
            value is False.
        enable_utility_host_upgrade_utility (bool):
            Optional; Enable a utility host upgrade utility virtual drive. The
            default value is False.
        enable_utility_server_configuration_utility (bool):
            Optional; Enable a utility server configuration utility virtual
            drive. The default value is False.
        enable_utility_user_partition (bool):
            Optional; Enable a utility user partition virtual drive. The
            default value is False.
        utility_user_partition_name (str):
            Optional; Set a utility user partition name. The default value
            is "UserPartition".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create SD Card Policy object in Intersight
    builder(
        SdCardPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            sd_card_mode=sd_card_mode,
            enable_operating_system=enable_operating_system,
            operating_system_partition_name=operating_system_partition_name,
            enable_utility_diagnostics=enable_utility_diagnostics,
            enable_utility_drivers=enable_utility_drivers,
            enable_utility_host_upgrade_utility=enable_utility_host_upgrade_utility,
            enable_utility_server_configuration_utility=enable_utility_server_configuration_utility,
            enable_utility_user_partition=enable_utility_user_partition,
            utility_user_partition_name=utility_user_partition_name
            ))


# Establish classes and functions to make Serial Over LAN Policy
class SerialOverLanPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Serial Over LAN Policy in Intersight.
    """
    object_type = "Serial Over LAN Policy"
    intersight_api_path = "sol/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 enable_serial_over_lan=True,
                 com_port="com0",
                 baud_rate=9600,
                 ssh_port=2400
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.enable_serial_over_lan = enable_serial_over_lan
        self.com_port = com_port
        self.baud_rate = baud_rate
        self.ssh_port = ssh_port
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_serial_over_lan,
            "ComPort": self.com_port,
            "BaudRate": self.baud_rate,
            "SshPort": self.ssh_port
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.enable_serial_over_lan}, "
            f"{self.com_port}, "
            f"{self.baud_rate}, "
            f"{self.ssh_port})"
            )


def serial_over_lan_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_serial_over_lan=True,
    com_port="com0",
    baud_rate=9600,
    ssh_port=2400,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Serial Over LAN Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_serial_over_lan (bool):
            Optional; The setting to enable the Serial Over LAN service. The
            default value is True.
        com_port (str):
            Optional; The serial port used for Serial Over LAN sessions. The
            accepted values are "com0" or "com1". The default value is "com0".
        baud_rate (int):
            Optional; The baud rate used for Serial Over LAN sessions. The
            accepted values are 9600, 19200, 38400, 57600, or 115200. The
            default value is 9600.
        ssh_port (int):
            Optional; The SSH port used for Serial Over LAN sessions. The
            accepted values are 1024 - 65535. The default value is 2400.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Serial Over LAN Policy object in Intersight
    builder(
        SerialOverLanPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            enable_serial_over_lan=enable_serial_over_lan,
            com_port=com_port,
            baud_rate=baud_rate,
            ssh_port=ssh_port
            ))


# Establish classes and functions to make SNMP Policy
class SnmpPolicy(DirectlyAttachedUcsServerChassisAndDomainPolicy):
    """This class is used to configure a SNMP Policy in Intersight.
    """
    object_type = "SNMP Policy"
    intersight_api_path = "snmp/Policies"
    subobject_types = [
        {"SubobjectType": "snmp.User",
         "SubobjectList": "snmp_users_list",
         "AttributeName": "SnmpUsers",
         "Description": "SNMP User",
         },
        {"SubobjectType": "snmp.Trap",
         "SubobjectList": "snmp_trap_destinations_list",
         "AttributeName": "SnmpTraps",
         "Description": "SNMP Trap Destination",
         }
        ]
    subobject_attribute_maps = {
        "snmp.User": [
            {"FrontEndName": None,
             "BackEndName": "Name",
             "Description": "User Name",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Security Level",
             "BackEndName": "SecurityLevel",
             "Description": "Security Level",
             "FixedFrontEndValues": [
                 "AuthPriv",
                 "NoAuthNoPriv",
                 "AuthNoPriv"
                 ],
             "FronttoBackEndValueMaps": {
                 "authpriv": "AuthPriv",
                 "noauthnopriv": "NoAuthNoPriv",
                 "authnopriv": "AuthNoPriv"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Auth Type",
             "BackEndName": "AuthType",
             "Description": "Authentication Type",
             "FixedFrontEndValues": [
                 "NA",
                 "MD5",
                 "SHA",
                 "SHA-224",
                 "SHA-256",
                 "SHA-384",
                 "SHA-512"
                 ],
             "FronttoBackEndValueMaps": {
                 "na": "NA",
                 "md5": "MD5",
                 "sha": "SHA",
                 "sha-224": "SHA-224",
                 "sha-256": "SHA-256",
                 "sha-384": "SHA-384",
                 "sha-512": "SHA-512"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Auth Password",
             "BackEndName": "AuthPassword",
             "Description": "Authentication Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Privacy Type",
             "BackEndName": "PrivacyType",
             "Description": "Privacy Type",
             "FixedFrontEndValues": [
                 "NA",
                 "DES",
                 "AES"
                 ],
             "FronttoBackEndValueMaps": {
                 "na": "NA",
                 "des": "DES",
                 "aes": "AES"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Privacy Password",
             "BackEndName": "PrivacyPassword",
             "Description": "Privacy Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ],
        "snmp.Trap": [
            {"FrontEndName": "Enable",
             "BackEndName": "Enabled",
             "Description": "SNMP Trap Destination Enablement",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "SNMP Version",
             "BackEndName": "Version",
             "Description": "SNMP Version",
             "FixedFrontEndValues": [
                 "V3",
                 "V2"
                 ],
             "FronttoBackEndValueMaps": {
                 "v3": "V3",
                 "v2": "V2"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "User",
             "Description": "SNMP v3 Trap User",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Community String",
             "BackEndName": "Community",
             "Description": "SNMP v2c Community String",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Trap Type",
             "BackEndName": "Type",
             "Description": "Trap Type",
             "FixedFrontEndValues": [
                 "Trap",
                 "Inform"
                 ],
             "FronttoBackEndValueMaps": {
                 "trap": "Trap",
                 "inform": "Inform"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Destination Address",
             "BackEndName": "Destination",
             "Description": "SNMP Trap Destination Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Port",
             "Description": "Port",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 ucs_chassis_profile_names="",
                 ucs_domain_profile_names="",
                 enable_snmp=True,
                 snmp_v2c_features=True,
                 snmp_v3_features=True,
                 snmp_port=161,
                 system_contact="Administrator",
                 system_location="N/A",
                 access_community_string="N/A",
                 snmp_community_access="Disabled",
                 trap_community_string="N/A",
                 snmp_engine_input_id="N/A",
                 snmp_users_list=None,
                 snmp_trap_destinations_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names,
                         ucs_chassis_profile_names,
                         ucs_domain_profile_names,
                         fabric_interconnect="AB"
                         )
        self.enable_snmp = enable_snmp
        self.snmp_v2c_features = snmp_v2c_features
        self.snmp_v3_features = snmp_v3_features
        self.snmp_port = snmp_port
        self.system_contact = system_contact
        self.system_location = system_location
        self.access_community_string = access_community_string
        self.snmp_community_access = snmp_community_access
        self.trap_community_string = trap_community_string
        self.snmp_engine_input_id = snmp_engine_input_id
        if snmp_users_list is None:
            self.snmp_users_list = []
        else:
            self.snmp_users_list = snmp_users_list
        if snmp_trap_destinations_list is None:
            self.snmp_trap_destinations_list = []
        else:
            self.snmp_trap_destinations_list = snmp_trap_destinations_list
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_snmp,
            "V2Enabled": self.snmp_v2c_features,
            "V3Enabled": self.snmp_v3_features,
            "SnmpPort": self.snmp_port,
            "SysContact": self.system_contact,
            "SysLocation": self.system_location,
            "AccessCommunityString": self.access_community_string,
            "CommunityAccess": self.snmp_community_access,
            "TrapCommunity": self.trap_community_string,
            "EngineId": self.snmp_engine_input_id
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.ucs_chassis_profile_names}', "
            f"'{self.ucs_domain_profile_names}', "
            f"{self.enable_snmp}, "
            f"{self.snmp_v2c_features}, "
            f"{self.snmp_v3_features}, "
            f"{self.snmp_port}, "
            f"'{self.system_contact}', "
            f"'{self.system_location}', "
            f"'{self.access_community_string}', "
            f"'{self.snmp_community_access}', "
            f"'{self.trap_community_string}', "
            f"'{self.snmp_engine_input_id}', "
            f"{self.snmp_users_list}, "
            f"{self.snmp_trap_destinations_list})"
            )


def snmp_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_snmp=True,
    snmp_v2c_features=True,
    snmp_v3_features=True,
    snmp_port=161,
    system_contact="Administrator",
    system_location="N/A",
    access_community_string="N/A",
    snmp_community_access="Disabled",
    trap_community_string="N/A",
    snmp_engine_input_id="N/A",
    snmp_users_list=None,
    snmp_trap_destinations_list=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names="",
    ucs_chassis_profile_names="",
    ucs_domain_profile_names=""
    ):
    """This is a function used to make a SNMP Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_snmp (bool):
            Optional; Enablement of the SNMP Policy on the attached endpoint.
            The default value is True.
        snmp_v2c_features (bool):
            Optional; Enablement of SNMP version 2c features in the SNMP
            Policy. The default value is True.
        snmp_v3_features (bool):
            Optional; Enablement of SNMP version 3 features in the SNMP
            Policy. The default value is True.
        snmp_port (int):
            Optional; The SNMP agent port. The default value is 161.
        system_contact (str):
            Optional; The contact for the system running the SNMP agent. The
            default value is "Administrator".
        system_location (str):
            Optional; The location of the system running the SNMP agent. The
            default value is "N/A".
        access_community_string (str):
            Optional; The access community string for the system running the
            SNMP agent. The default value is "N/A".
        snmp_community_access (str):
            Optional; The SNMP community access level for the system running
            the SNMP agent. The default value is "Disabled".
        trap_community_string (str):
            Optional; The trap community string for the system running the
            SNMP agent. The default value is "N/A".
        snmp_engine_input_id (str):
            Optional; The SNMP engine input ID for the system running the SNMP
            agent. The default value is "N/A".
        snmp_users_list (list):
            Optional; The list of dictionary entries for each SNMP user to be
            configured. The default value is None. An example entry is:
            [{"Name": "demouser",
              "Security Level": "AuthPriv",
              "Auth Type": "SHA",
              "Auth Password": "C1sco12345",
              "Privacy Type": "AES",
              "Privacy Password": "C1sco12345"
              },
             ]
            A "Name" key with a string value must be configured in each
            dictionary of the list to specify the SNMP user's name. The key
            "Auth Password" is mandatory and specifies the authentication
            password. The key "Privacy Password" is mandatory and specifies the
            privacy password. Optional key settings include "Security Level",
            "Auth Type", and "Privacy Type".
        snmp_trap_destinations_list (list):
            Optional; The list of dictionary entries for each SNMP trap
            destination to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "SNMP Version": "V3",
              "User": "demouser",
              "Trap Type": "Inform",
              "Destination Address": "192.168.0.101",
              "Port": 162
              },
             {"Enable": True,
              "SNMP Version": "V2",
              "Community String": "demo_trap_string",
              "Trap Type": "Trap",
              "Destination Address": "192.168.0.102",
              "Port": 162
              },
             ]
            For SNMP version 3, a "User" key with a string value must be
            configured in the associated dictionary of the list to specify the
            SNMP trap destination's user name. For SNMP version 2c, a
            "Community String" key with a string value must be configured in
            the associated dictionary of the list to specify the SNMP trap
            destination community string. The key "Destination Address" is
            mandatory and specifies the SNMP trap destination address. Optional
            key settings include "Enable", "SNMP Version", "Trap Type", and
            "Port".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
        ucs_chassis_profile_names (str):
            Optional; The UCS Chassis Profiles the policy should be attached
            to. If providing more than one UCS Chassis Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_domain_profile_names (str):
            Optional; The UCS Domain Profile the policy should be attached
            to. If providing more than one UCS Domain Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create SNMP Policy object in Intersight
    builder(
        SnmpPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            ucs_chassis_profile_names=ucs_chassis_profile_names,
            ucs_domain_profile_names=ucs_domain_profile_names,
            enable_snmp=enable_snmp,
            snmp_v2c_features=snmp_v2c_features,
            snmp_v3_features=snmp_v3_features,
            snmp_port=snmp_port,
            system_contact=system_contact,
            system_location=system_location,
            access_community_string=access_community_string,
            snmp_community_access=snmp_community_access,
            trap_community_string=trap_community_string,
            snmp_engine_input_id=snmp_engine_input_id,
            snmp_users_list=snmp_users_list,
            snmp_trap_destinations_list=snmp_trap_destinations_list
            ))


# Establish classes and functions to make Storage Policy
class StoragePolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Storage Policy in Intersight.
    """
    object_type = "Storage Policy"
    intersight_api_path = "storage/StoragePolicies"
    object_variable_value_maps = [
        {"VariableName": "unused_disks_state",
         "Description": "Unused Disks State",
         "AttributeName": "UnusedDisksState",
         "Values": [
             {"FrontEndValue": "No Change",
              "BackEndValue": "NoChange"
              },
             {"FrontEndValue": "Unconfigured Good",
              "BackEndValue": "UnconfiguredGood"
              },
             {"FrontEndValue": "JBOD",
              "BackEndValue": "Jbod"
              }
             ],
         "ParentAttributeName": None
         },
        {"VariableName": "m2_raid_controller_slot_for_virtual_drive_creation",
         "Description": "M.2 RAID Controller Slot for Virtual Drive Creation",
         "AttributeName": "ControllerSlot",
         "Values": [
             {"FrontEndValue": "MSTOR-RAID-1 (MSTOR-RAID)",
              "BackEndValue": "MSTOR-RAID-1"
              },
             {"FrontEndValue": "MSTOR-RAID-1",
              "BackEndValue": "MSTOR-RAID-1"
              },
             {"FrontEndValue": "MSTOR-RAID",
              "BackEndValue": "MSTOR-RAID-1"
              },
             {"FrontEndValue": "MSTOR-RAID-2",
              "BackEndValue": "MSTOR-RAID-2"
              },
             {"FrontEndValue": "MSTOR-RAID-1,MSTOR-RAID-2",
              "BackEndValue": "MSTOR-RAID-1,MSTOR-RAID-2"
              }
             ],
         "ParentAttributeName": "M2VirtualDrive"
         },
        {"VariableName": "access_policy",
         "Description": "Access Policy for MRAID/RAID Single Drive RAID0 Configuration",
         "AttributeName": "AccessPolicy",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "Default"
              },
             {"FrontEndValue": "Read Write",
              "BackEndValue": "ReadWrite"
              },
             {"FrontEndValue": "Read Only",
              "BackEndValue": "ReadOnly"
              },
             {"FrontEndValue": "Blocked",
              "BackEndValue": "Blocked"
              }
             ],
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"VariableName": "read_policy",
         "Description": "Read Policy for MRAID/RAID Single Drive RAID0 Configuration",
         "AttributeName": "ReadPolicy",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "Default"
              },
             {"FrontEndValue": "Always Read Ahead",
              "BackEndValue": "ReadAhead"
              },
             {"FrontEndValue": "No Read Ahead",
              "BackEndValue": "NoReadAhead"
              }
             ],
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"VariableName": "write_policy",
         "Description": "Write Policy for MRAID/RAID Single Drive RAID0 Configuration",
         "AttributeName": "WritePolicy",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "Default"
              },
             {"FrontEndValue": "Write Through",
              "BackEndValue": "WriteThrough"
              },
             {"FrontEndValue": "Write Back Good BBU",
              "BackEndValue": "WriteBackGoodBbu"
              },
             {"FrontEndValue": "Always Write Back",
              "BackEndValue": "AlwaysWriteBack"
              }
             ],
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"VariableName": "disk_cache",
         "Description": "Disk Cache Policy for MRAID/RAID Single Drive RAID0 Configuration",
         "AttributeName": "DriveCache",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "Default"
              },
             {"FrontEndValue": "Unchanged",
              "BackEndValue": "NoChange"
              },
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enable"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disable"
              }
             ],
         "ParentAttributeName": "VirtualDrivePolicy"
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 use_jbod_drives_for_virtual_drive_creation=False,
                 unused_disks_state="No Change",
                 enable_m2_raid_configuration=False,
                 m2_raid_controller_slot_for_virtual_drive_creation="MSTOR-RAID-1 (MSTOR-RAID)",
                 global_hot_spares="",
                 enable_mraid_raid_single_drive_raid0_configuration=False,
                 drive_slots="",
                 strip_size_in_kib=64,
                 access_policy="Default",
                 read_policy="Default",
                 write_policy="Default",
                 disk_cache="Default"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.use_jbod_drives_for_virtual_drive_creation = use_jbod_drives_for_virtual_drive_creation
        self.unused_disks_state = unused_disks_state
        self.enable_m2_raid_configuration = enable_m2_raid_configuration
        self.m2_raid_controller_slot_for_virtual_drive_creation = m2_raid_controller_slot_for_virtual_drive_creation
        self.global_hot_spares = global_hot_spares
        self.enable_mraid_raid_single_drive_raid0_configuration = enable_mraid_raid_single_drive_raid0_configuration
        self.drive_slots = drive_slots
        self.strip_size_in_kib = strip_size_in_kib
        self.access_policy = access_policy
        self.read_policy = read_policy
        self.write_policy = write_policy
        self.disk_cache = disk_cache
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "UseJbodForVdCreation": self.use_jbod_drives_for_virtual_drive_creation,
            "M2VirtualDrive": {
                "Enable": self.enable_m2_raid_configuration
                },
            "GlobalHotSpares": self.global_hot_spares,
            "Raid0Drive": {
                "Enable": self.enable_mraid_raid_single_drive_raid0_configuration,
                "DriveSlots": self.drive_slots
                },
            "VirtualDrivePolicy": {
                "StripSize": self.strip_size_in_kib
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.use_jbod_drives_for_virtual_drive_creation}, "
            f"'{self.unused_disks_state}', "
            f"{self.enable_m2_raid_configuration}, "
            f"'{self.m2_raid_controller_slot_for_virtual_drive_creation}', "
            f"'{self.global_hot_spares}', "
            f"{self.enable_mraid_raid_single_drive_raid0_configuration}, "
            f"'{self.drive_slots}', "
            f"{self.strip_size_in_kib}, "
            f"'{self.access_policy}', "
            f"'{self.read_policy}', "
            f"'{self.write_policy}', "
            f"'{self.disk_cache}')"
            )

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                # Check if current attribute has a back-end Parent attribute and nest as needed, otherwise place in known attribute name directly
                if object_variable.get("ParentAttributeName"):
                    if object_variable.get("ParentAttributeName") not in self.intersight_api_body:
                        self.intersight_api_body[object_variable.get("ParentAttributeName")] = {
                            object_variable["AttributeName"]: backend_object_variable_value
                            }
                    else:
                        self.intersight_api_body[object_variable.get("ParentAttributeName")].update(
                            {object_variable["AttributeName"]: backend_object_variable_value
                             }
                            )
                    self.intersight_api_body.pop(object_variable["AttributeName"], None)
                else:
                    self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with the "VirtualDrivePolicy" dictionary nested under the "Raid0Drive" key
        if self.intersight_api_body.get("VirtualDrivePolicy"):
            self.intersight_api_body["Raid0Drive"].update(
                {"VirtualDrivePolicy": self.intersight_api_body.get("VirtualDrivePolicy")
                 }
                )                
            self.intersight_api_body.pop("VirtualDrivePolicy")
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class DriveGroup(IntersightObject):
    """This class serves as a base class for configuring Drive Groups in Intersight
    policies.
    """
    object_type = "Drive Group"
    id_type = "DriveGroup"
    intersight_api_path = "storage/DriveGroups"
    policy_type = "Storage Policy"
    policy_intersight_api_path = "storage/StoragePolicies"
    policy_class_name = "StoragePolicy"
    intersight_object_attribute_maps = [
        {"FrontEndName": "Drive Group Name",
         "BackEndName": "Name",
         "Description": "Drive Group Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "RAID Level",
         "BackEndName": "RaidLevel",
         "Description": "RAID Level",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "RAID0",
             "RAID1",
             "RAID5",
             "RAID6",
             "RAID10",
             "RAID50",
             "RAID60"
             ],
         "FronttoBackEndValueMaps": {
             "raid0": "Raid0",
             "raid1": "Raid1",
             "raid5": "Raid5",
             "raid6": "Raid6",
             "raid10": "Raid10",
             "raid50": "Raid50",
             "raid60": "Raid60"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 0",
         "BackEndName": "DriveArraySpan0",
         "Description": "Drive Array Span 0",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 1",
         "BackEndName": "DriveArraySpan1",
         "Description": "Drive Array Span 1",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 2",
         "BackEndName": "DriveArraySpan2",
         "Description": "Drive Array Span 2",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 3",
         "BackEndName": "DriveArraySpan3",
         "Description": "Drive Array Span 3",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 4",
         "BackEndName": "DriveArraySpan4",
         "Description": "Drive Array Span 4",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 5",
         "BackEndName": "DriveArraySpan5",
         "Description": "Drive Array Span 5",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 6",
         "BackEndName": "DriveArraySpan6",
         "Description": "Drive Array Span 6",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 7",
         "BackEndName": "DriveArraySpan7",
         "Description": "Drive Array Span 7",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Dedicated Hot Spares",
         "BackEndName": "DedicatedHotSpares",
         "Description": "Dedicated Hot Spares",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "ManualDriveGroup"
         }
        ]
    virtual_drive_object_type = "Virtual Drive"
    virtual_drive_id_type = "VirtualDrive"
    virtual_drive_attribute_maps = [
        {"FrontEndName": "Drive Group",
         "BackEndName": "DriveGroup",
         "Description": "Drive Group",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Number of Copies",
         "BackEndName": "NumberofCopies",
         "Description": "Number of Copies",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Virtual Drive Name",
         "BackEndName": "Name",
         "Description": "Virtual Drive Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": None,
         "BackEndName": "Size",
         "Description": "Virtual Drive Size",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Expand to Available",
         "BackEndName": "ExpandToAvailable",
         "Description": "Expand to Available",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Set as Boot Drive",
         "BackEndName": "BootDrive",
         "Description": "Set as Boot Drive",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Strip Size",
         "BackEndName": "StripSize",
         "Description": "Strip Size",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"FrontEndName": "Access Policy",
         "BackEndName": "AccessPolicy",
         "Description": "Access Policy",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Default",
             "Read Write",
             "Read Only",
             "Blocked"
             ],
         "FronttoBackEndValueMaps": {
             "default": "Default",
             "readwrite": "ReadWrite",
             "readonly": "ReadOnly",
             "blocked": "Blocked"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"FrontEndName": "Read Policy",
         "BackEndName": "ReadPolicy",
         "Description": "Read Policy",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Default",
             "Always Read Ahead",
             "No Read Ahead"
             ],
         "FronttoBackEndValueMaps": {
             "default": "Default",
             "alwaysreadahead": "ReadAhead",
             "noreadahead": "NoReadAhead"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"FrontEndName": "Write Policy",
         "BackEndName": "WritePolicy",
         "Description": "Write Policy",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Default",
             "Write Through",
             "Write Back Good BBU",
             "Always Write Back"
             ],
         "FronttoBackEndValueMaps": {
             "default": "Default",
             "writethrough": "WriteThrough",
             "writebackgoodbbu": "WriteBackGoodBbu",
             "alwayswriteback": "AlwaysWriteBack"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"FrontEndName": "Disk Cache",
         "BackEndName": "DriveCache",
         "Description": "Disk Cache",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Default",
             "Unchanged",
             "Enabled",
             "Disabled"
             ],
         "FronttoBackEndValueMaps": {
             "default": "Default",
             "unchanged": "NoChange",
             "enabled": "Enable",
             "disabled": "Disable"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 virtual_drive_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        if virtual_drive_list is None:
            self.virtual_drive_list = []            
        else:
            self.virtual_drive_list = virtual_drive_list

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.virtual_drive_list})"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def _post_intersight_drive_group(drive_group_name,
                                         body,
                                         moid=None
                                         ):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                drive_group_name (str):
                    The name of the Drive Group to be posted on Intersight.
                body (dict):
                    The body of the object to be posted on Intersight.
                moid (str):
                    Optional; The Intersight MOID of the object to be posted
                    on Intersight. The default value is None.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            if moid:
                full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
            else:
                full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                if moid:
                    print(f"The configuration of {self.object_type} "
                          f"{drive_group_name} has been updated.")
                else:
                    print(f"The configuration of {self.object_type} "
                          f"{drive_group_name} has completed.")
                return "The POST method was successful."
            except Exception:
                print("\nA configuration error has occurred!\n")
                if moid:
                    print(f"Unable to update {self.object_type} "
                          f"{drive_group_name} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                else:
                    print(f"Unable to configure {self.object_type} "
                          f"{drive_group_name} under the Intersight "
                          f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."

        def _intersight_object_api_body_staging_updates(object_dictionary,
                                                        remove_key_list=None,
                                                        object_type=None,
                                                        intersight_object_attribute_maps=None,
                                                        insert_policy_moid=True
                                                        ):
            """This is a function to handle converting a provided Intersight Object
            dictionary into an API body that is prepped and staged for
            posting to Intersight. Attributes are modified and converted for
            compatibility as needed.
            
            Args:
                object_dictionary (dict):
                    An Intersight Object dictionary extracted from the provided
                    Intersight Object list being prepared and staged for posting to
                    Intersight.
                remove_key_list (list):
                    The list of keys to be removed from the Intersight API
                    body, prior to posting to Intersight. The default value is
                    None.
                object_type (str):
                    Optional; The type of Intersight object. The default value
                    is None.
                intersight_object_attribute_maps (list):
                    Optional; The type of Intersight object attribute maps. The
                    default value is None.
                insert_policy_moid (bool):
                    Determines if the MOID of the parent Intersight policy is
                    inserted into the Intersight API body prior to posting to 
                    Intersight. The default value is True.

            Returns:
                A dictionary containing API body data compatible with
                Intersight.
            """
            if remove_key_list is None:
                remove_key_list = []
            if object_type is None:
                object_type = self.object_type
            if intersight_object_attribute_maps is None:
                intersight_object_attribute_maps = self.intersight_object_attribute_maps
            staged_intersight_api_body = copy.deepcopy(object_dictionary)
            if insert_policy_moid:
                staged_intersight_api_body[self.policy_class_name] = {"Moid": policy_moid}
            # Handle setting of attributes which have mismatched Front-End and Back-End labeling, set provided default values, retrieve any required MOIDs and verify/set Parent attributes
            for intersight_object_attribute_map_dictionary in intersight_object_attribute_maps:
                self._intersight_object_attribute_map_handler(
                    staged_intersight_object_dictionary=staged_intersight_api_body,
                    intersight_object_attribute_map_dictionary=intersight_object_attribute_map_dictionary,
                    object_type=object_type
                    )
            # Remove keys not needed for posting or patching the Intersight Object from the staged_intersight_api_body
            for key in remove_key_list:
                staged_intersight_api_body.pop(key, None)
            return staged_intersight_api_body

        def _drive_array_span_configurator(drive_group_intersight_api_body,
                                           drive_array_span_maximum=8
                                           ):
            """This is a function to handle updating the Drive Group Intersight
            API body with the provided Drive Array Spans in the correct order
            and nested under the "SpanGroups" key, as required by the backend
            Intersight API.

            Args:
                drive_group_intersight_api_body (dict):
                    A Drive Group Intersight API body being prepared
                    and staged for posting to Intersight.
                drive_array_span_maximum (int):
                    The maximum number of allowed Drive Array Spans for a
                    Drive Group in Intersight. The default value is 8.
            """
            # Establish Drive Array Span Group list
            span_group_list = []
            # Cycle through present Drive Array Spans and add to span_group_list
            for drive_array_span_id in range(drive_array_span_maximum):
                if drive_group_intersight_api_body.get(f"DriveArraySpan{drive_array_span_id}"):
                    span_group_list.append(
                        {"ClassId": "storage.SpanDrives",
                         "ObjectType": "storage.SpanDrives",
                         "Slots": drive_group_intersight_api_body.get(f"DriveArraySpan{drive_array_span_id}")
                         }
                        )
                    drive_group_intersight_api_body.pop(f"DriveArraySpan{drive_array_span_id}")
            # Nest provided Drive Array Spans in span_group_list under "SpanGroups" key
            if "ManualDriveGroup" not in drive_group_intersight_api_body:
                drive_group_intersight_api_body["ManualDriveGroup"] = {
                    "SpanGroups": span_group_list
                    }
            else:
                drive_group_intersight_api_body["ManualDriveGroup"].update(
                    {"SpanGroups": span_group_list
                     }
                    )    

        def _virtual_drive_configurator(virtual_drive_list,
                                        drive_group_intersight_api_body
                                        ):
            """This is a function to handle updating the Drive Group Intersight
            API body with the provided Virtual Drives, nested under the
            "VirtualDrives" key, as required by the backend Intersight API.

            Args:
                virtual_drive_list (list):
                    A list of Virtual Drive dictionaries ready to be added 
                    to a matching Drive Group Intersight API body.
                drive_group_intersight_api_body (dict):
                    A Drive Group Intersight API body being prepared
                    and staged for posting to Intersight.
            """
            # Cycle through virtual_drive_list and add Virtual Drives to matching Drive Group
            for virtual_drive in virtual_drive_list:
                if virtual_drive.get("DriveGroup") == drive_group_intersight_api_body.get("Name"):
                    # Nest provided Virtual Drives in virtual_drive_list under "VirtualDrives" key
                    if "VirtualDrives" not in drive_group_intersight_api_body:
                        virtual_drive.pop("DriveGroup")
                        drive_group_intersight_api_body["VirtualDrives"] = [virtual_drive]
                    else:
                        virtual_drive.pop("DriveGroup")
                        drive_group_intersight_api_body["VirtualDrives"].append(virtual_drive)

        def _stage_virtual_drives(staged_virtual_drive_intersight_api_body,
                                  staged_virtual_drive_list,
                                  maximum_number_of_virtual_drive_copies=10
                                  ):
            """This is a function to handle staging provided Virtual Drives in the
            staged_virtual_drive_list including any Virtual Drive copies that have been
            specified through the 'NumberofCopies' key.

            Args:
                staged_virtual_drive_list (dict):
                    A Virtual Drive Intersight API body that has been
                    staged by the _intersight_object_api_body_staging_updates
                    function and is being prepared to be added 
                    to a matching Drive Group Intersight API body.
                staged_virtual_drive_list (list):
                    A list that will contain staged Virtual Drive
                    dictionaries that are ready to be added 
                    to a matching Drive Group Intersight API body.
                maximum_number_of_virtual_drive_copies (int):
                    The maximum number of Virtual Drive copies allowed
                    by Intersight. The amount of Virtual Drive copies
                    configured will be limited by this value. The default value
                    is 10.
            """
            current_number_of_virtual_drive_copies = 0

            if staged_virtual_drive_intersight_api_body.get("NumberofCopies"):
                original_virtual_drive_name = staged_virtual_drive_intersight_api_body.get("Name")
                provided_virtual_drive_copy_number = staged_virtual_drive_intersight_api_body.get("NumberofCopies")
                staged_virtual_drive_intersight_api_body.pop("NumberofCopies")
                staged_virtual_drive_list.append(staged_virtual_drive_intersight_api_body)
                if not staged_virtual_drive_intersight_api_body.get("ExpandToAvailable"):
                    target_drive_group = staged_virtual_drive_intersight_api_body.get("DriveGroup")
                    try:
                        for copy_id in range(provided_virtual_drive_copy_number):
                            if current_number_of_virtual_drive_copies >= maximum_number_of_virtual_drive_copies:
                                print("\nA configuration warning has occurred!\n")
                                print(f"A number of {provided_virtual_drive_copy_number} copies has been requested "
                                      f"for the Virtual Drive named {original_virtual_drive_name}.")
                                print(f"However the maximum number of {maximum_number_of_virtual_drive_copies} "
                                      "copies has been reached for "
                                      f"{original_virtual_drive_name}.")
                                print("No more Virtual Drive copies can be "
                                      f"configured for {original_virtual_drive_name}.")
                                print("An attempt will still be made to "
                                      "configure up to "
                                      f"{maximum_number_of_virtual_drive_copies} copies.\n")
                                break
                            copy_virtual_drive_name = f"{original_virtual_drive_name}-{copy_id + 1:02d}"
                            staged_virtual_drive_intersight_api_body_copy = copy.deepcopy(staged_virtual_drive_intersight_api_body)
                            staged_virtual_drive_intersight_api_body_copy["Name"] = copy_virtual_drive_name
                            staged_virtual_drive_intersight_api_body_copy["BootDrive"] = False
                            staged_virtual_drive_list.append(staged_virtual_drive_intersight_api_body_copy)
                            current_number_of_virtual_drive_copies += 1
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print(f"During the configuration of the {self.object_type} "
                              f"settings for the {self.policy_type} named "
                              f"{self.policy_name}, there was an issue creating copies "
                              f"of the Virtual Drive named {original_virtual_drive_name}")
                        print(f"Please verify the key for the Number of Copies in the "
                              "virtual_drive_list variable has an accepted integer value.\n")
                        print("Exception Message: ")
                        traceback.print_exc()        
                else:
                    print("\nA configuration warning has occurred!\n")
                    print(f"A number of {provided_virtual_drive_copy_number} copies has been requested "
                          f"for the Virtual Drive named {original_virtual_drive_name}.")
                    print(f"However {original_virtual_drive_name} is set to "
                          "enable 'Expand to Available' for disk space, so the "
                          "copy request cannot be fulfilled.")
                    print("An attempt will still be made to configure the original "
                          f"Virtual Drive {original_virtual_drive_name}.\n")
            else:
                staged_virtual_drive_intersight_api_body.pop("NumberofCopies", None)
                staged_virtual_drive_list.append(staged_virtual_drive_intersight_api_body)

        # Create list of Virtual Drives provided from virtual_drive_list
        staged_virtual_drive_list = []
        if self.virtual_drive_list:
            print("Configuring the requested Virtual Drives for the Drive Groups...")
            virtual_drives_id_key = f"{self.virtual_drive_id_type}s"
            for virtual_drive_dictionary in self.virtual_drive_list:
                if virtual_drive_dictionary.get(virtual_drives_id_key):
                    virtual_drives_enumerated_id_range = self.enumerated_id_range_retriever(virtual_drive_dictionary,
                                                                                            virtual_drives_id_key
                                                                                            )
                    staged_virtual_drive_intersight_api_body = _intersight_object_api_body_staging_updates(object_dictionary=virtual_drive_dictionary,
                                                                                                           remove_key_list=[
                                                                                                               virtual_drives_id_key
                                                                                                               ],
                                                                                                           object_type=self.virtual_drive_object_type,
                                                                                                           intersight_object_attribute_maps=self.virtual_drive_attribute_maps,
                                                                                                           insert_policy_moid=False
                                                                                                           )
                    current_virtual_drive_id_name_prefix = staged_virtual_drive_intersight_api_body.get("Name")
                    current_virtual_drive_id_instance = 0
                    for current_virtual_drive_id in virtual_drives_enumerated_id_range:
                        current_virtual_drive_id_full_name = f"{current_virtual_drive_id_name_prefix}{current_virtual_drive_id}"
                        staged_virtual_drive_intersight_api_body_id_instance = copy.deepcopy(staged_virtual_drive_intersight_api_body)
                        staged_virtual_drive_intersight_api_body_id_instance["Name"] = current_virtual_drive_id_full_name
                        if current_virtual_drive_id_instance >= 1:
                            staged_virtual_drive_intersight_api_body_id_instance["BootDrive"] = False    
                        _stage_virtual_drives(
                            staged_virtual_drive_intersight_api_body_id_instance,
                            staged_virtual_drive_list
                            )
                        current_virtual_drive_id_instance += 1
                else:
                    staged_virtual_drive_intersight_api_body = _intersight_object_api_body_staging_updates(object_dictionary=virtual_drive_dictionary,
                                                                                                           remove_key_list=[
                                                                                                               virtual_drives_id_key
                                                                                                               ],
                                                                                                           object_type=self.virtual_drive_object_type,
                                                                                                           intersight_object_attribute_maps=self.virtual_drive_attribute_maps,
                                                                                                           insert_policy_moid=False
                                                                                                           )
                    _stage_virtual_drives(
                        staged_virtual_drive_intersight_api_body,
                        staged_virtual_drive_list
                        )

        # Create and post Intersight API body for each provided Drive Group from id_list
        if self.id_list:
            drive_groups_id_key = f"{self.id_type}s"
            # Retrieving the Storage Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=f"{self.policy_intersight_api_path}?$top=1000",
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           intersight_base_url=self.intersight_base_url,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                if id_dictionary.get(drive_groups_id_key):
                    drive_groups_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                                          drive_groups_id_key
                                                                                          )
                    staged_drive_group_intersight_api_body = _intersight_object_api_body_staging_updates(object_dictionary=id_dictionary,
                                                                                                         remove_key_list=[drive_groups_id_key],
                                                                                                         )
                    _drive_array_span_configurator(staged_drive_group_intersight_api_body)
                    _virtual_drive_configurator(
                        staged_virtual_drive_list,
                        staged_drive_group_intersight_api_body
                        )
                    current_drive_group_id_name_prefix = staged_drive_group_intersight_api_body.get("Name")
                    for current_drive_group_id in drive_groups_enumerated_id_range:
                        current_drive_group_id_full_name = f"{current_drive_group_id_name_prefix}{current_drive_group_id}"
                        staged_drive_group_intersight_api_body["Name"] = current_drive_group_id_full_name
                        _post_intersight_drive_group(
                            current_drive_group_id_full_name,
                            staged_drive_group_intersight_api_body
                            )
                else:
                    staged_drive_group_intersight_api_body = _intersight_object_api_body_staging_updates(object_dictionary=id_dictionary,
                                                                                                         remove_key_list=[drive_groups_id_key],
                                                                                                         )
                    _drive_array_span_configurator(staged_drive_group_intersight_api_body)
                    _virtual_drive_configurator(
                        staged_virtual_drive_list,
                        staged_drive_group_intersight_api_body
                        )
                    current_drive_group_id_full_name = staged_drive_group_intersight_api_body.get("Name")
                    _post_intersight_drive_group(
                        current_drive_group_id_full_name,
                        staged_drive_group_intersight_api_body
                        )


def storage_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    use_jbod_drives_for_virtual_drive_creation=False,
    unused_disks_state="No Change",
    enable_m2_raid_configuration=False,
    m2_raid_controller_slot_for_virtual_drive_creation="MSTOR-RAID-1 (MSTOR-RAID)",
    enable_mraid_raid_controller_configuration=False,
    global_hot_spares="",
    drive_group_list=None,
    virtual_drive_list=None,
    enable_mraid_raid_single_drive_raid0_configuration=False,
    drive_slots="",
    strip_size_in_kib=64,
    access_policy="Default",
    read_policy="Default",
    write_policy="Default",
    disk_cache="Default",    
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Storage Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        use_jbod_drives_for_virtual_drive_creation (bool):
            Optional; Enable using JBOD (Just a Bunch of Disks) drives for
            creating Virtual Drives. The default value is False.
        unused_disks_state (str):
            Optional; The default state of unused disks. The accepted values
            are "No Change", "Unconfigured Good", and "JBOD". The default value
            is "No Change".
        enable_m2_raid_configuration (bool):
            Optional; Enable setting M.2 RAID configuration. The default value
            is False.
        global_hot_spares (str):
            Optional; A set of disks that can be used as global hot spares for
            all RAID groups. The provided value can be a single number or range
            of numbers in string format e.g. "4", "4-7", or "4,5,6,7". The
            default value is an empty string ("").
        drive_group_list (list):
            Optional; The list of dictionary entries for Drive Groups to
            be configured. The default value is None. An example entry is:
            [{"Drive Group Name": "dg0",
              "RAID Level": "RAID5",
              "Drive Array Span 0": "0-2",
              "Dedicated Hot Spares": "3"},
             {"Drive Group Name": "dg1",
              "RAID Level": "RAID10",
              "Drive Array Span 0": "4-5",
              "Drive Array Span 1": "6-7",
              "Dedicated Hot Spares": "8"},].
            A "Drive Group Name" key with a string value must be configured to
            specify the Drive Group name. A "RAID Level" key can be set to
            specify the RAID level with a string value of "RAID0", "RAID1",
            "RAID5", "RAID6", "RAID10", "RAID50", or "RAID60". The default
            value is "RAID0". A "Drive Array Span 0" key with a string value
            specifying the disks assigned to drive array span 0 is mandatory.
            The disks should be provided in a comma or hyphen separated range.
            Depending on the RAID level, up to an additional seven drive arrays
            can be assigned using the keys "Drive Array Span 1",
            "Drive Array Span 2", "Drive Array Span 3", "Drive Array Span 4",
            "Drive Array Span 5", "Drive Array Span 6", and
            "Drive Array Span 7". Level RAID 10 and above require a minimum of
            two drive array spans. Optional key settings such as
            "Dedicated Hot Spares" can also be configured in each list
            dictionary. If configuring Drive Groups, an associated Virtual
            Drive must also be configured using the virtual_drive_list argument.
        virtual_drive_list (list):
            Optional; The list of dictionary entries for Virtual Drives to
            be configured. The default value is None. An example entry is:
            [{"Drive Group": "dg0",
              "Number of Copies": 0,
              "Virtual Drive Name": "vd0",
              "Size": 0,
              "Expand to Available": True,
              "Set as Boot Drive": True,
              "Strip Size": 64,
              "Access Policy": "Default",
              "Read Policy": "Default",
              "Write Policy": "Default",
              "Disk Cache": "Default"},
             {"Drive Group": "dg1",
              "Number of Copies": 0,
              "Virtual Drive Name": "vd1",
              "Size": 1000,
              "Expand to Available": False,
              "Set as Boot Drive": False,
              "Strip Size": 64,
              "Access Policy": "Default",
              "Read Policy": "Default",
              "Write Policy": "Default",
              "Disk Cache": "Default"},].
            A "Drive Group" key with a string value must be configured to
            specify the associated Drive Group name. A "Virtual Drive Name" key
            must also be configured to specify the name of the Virtual Drive.
            A "Size" key with an integer value can be configured to specify the
            size of the Virtual Drive in MiB. An "Expand to Available" key can
            also be set with the value True for the Virtual Drive to use all
            the available disk space in the associated Drive Group. Optional
            key settings such as "Number of Copies", "Set as Boot Drive",
            "Strip Size", "Access Policy", "Read Policy", "Write Policy", and
            "Disk Cache" can also be configured in each list dictionary, if the
            associated system default values are not desired. For bulk creation
            of Virtual Drives, a " VirtualDrives" key with a string value can
            be configured in each dictionary of the list to specify a range of
            Virtual Drive IDs with shared values. An example entry is:
            [{"Drive Group": "dg0",
              "VirtualDrives": "2,4,6,8,10,12,20-25",
              "Virtual Drive Name": "vd",
              "Size": 1000},].
            When using the " VirtualDrives" key, the "Virtual Drive Name" key
            becomes a prefix for the Virtual Drive name value. The
            "VirtualDrives" key provides more precision in the naming and
            numbering of the Virtual Drives compared to the "Number of Copies"
            key.
        enable_mraid_raid_single_drive_raid0_configuration (bool):
            Optional; Enable MRAID/RAID single drive RAID 0 configuration. The
            default value is False.
        drive_slots (str):
            Optional; The drive slots for the MRAID/RAID single drive RAID 0
            configuration. The default value is an empty string ("").
        strip_size_in_kib (int):
            Optional; The strip size in KiB for the MRAID/RAID single drive
            RAID 0 configuration. The accepted values are 64, 128, 256, 512,
            and 1024. The default value is 64.
        access_policy (str):
            Optional; The access policy for the MRAID/RAID single drive RAID 0
            configuration. The accepted values are "Default", "Read Write",
            "Read Only", and "Blocked". The default value is "Default".
        read_policy (str):
            Optional; The read policy for the MRAID/RAID single drive RAID 0
            configuration. The accepted values are "Default",
            "Always Read Ahead", and "No Read Ahead". The default value is
            "Default".
        write_policy (str):
            Optional; The write policy for the MRAID/RAID single drive RAID 0
            configuration. The accepted values are "Default", "Write Through",
            "Write Back Good BBU", and "Always Write Back". The default value
            is "Default".
        disk_cache (str):
            Optional; The disk cache policy for the MRAID/RAID single drive
            RAID 0 configuration. The accepted values are "Default",
            "Unchanged", "Enabled", and "Disabled". The default value is
            "Default".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Storage Policy object in Intersight
    builder(
        StoragePolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            use_jbod_drives_for_virtual_drive_creation=use_jbod_drives_for_virtual_drive_creation,
            unused_disks_state=unused_disks_state,
            enable_m2_raid_configuration=enable_m2_raid_configuration,
            m2_raid_controller_slot_for_virtual_drive_creation=m2_raid_controller_slot_for_virtual_drive_creation,
            global_hot_spares=global_hot_spares,
            enable_mraid_raid_single_drive_raid0_configuration=enable_mraid_raid_single_drive_raid0_configuration,
            drive_slots=drive_slots,
            strip_size_in_kib=strip_size_in_kib,
            access_policy=access_policy,
            read_policy=read_policy,
            write_policy=write_policy,
            disk_cache=disk_cache
            ))

    # Define and create Drive Group objects in Intersight
    if enable_mraid_raid_controller_configuration:
        builder(
            DriveGroup(
                intersight_api_key_id=intersight_api_key_id,
                intersight_api_key=intersight_api_key,
                policy_name=policy_name,
                id_list=drive_group_list,
                organization=organization,
                intersight_base_url=intersight_base_url,
                preconfigured_api_client=preconfigured_api_client,
                virtual_drive_list=virtual_drive_list
                ))


# Establish classes and functions to make Syslog Policy
class SyslogPolicy(DirectlyAttachedUcsServerAndDomainPolicy):
    """This class is used to configure a Syslog Policy in Intersight.
    """
    object_type = "Syslog Policy"
    intersight_api_path = "syslog/Policies"
    subobject_types = [
        {"SubobjectType": "syslog.RemoteLoggingClient",
         "SubobjectList": "syslog_remote_logging_server_list",
         "AttributeName": "RemoteClients",
         "Description": "Remote Logging Syslog Server"
         }
        ]
    subobject_attribute_maps = {
        "syslog.RemoteLoggingClient": [
            {"FrontEndName": "Enable",
             "BackEndName": "Enabled",
             "Description": "Remote Logging Syslog Server Enablement",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Hostname/IP Address",
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "IP Address",
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Port",
             "Description": "Port",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Protocol",
             "Description": "Protocol",
             "FixedFrontEndValues": [
                 "UDP",
                 "TCP"
                 ],
             "FronttoBackEndValueMaps": {
                 "udp": "udp",
                 "tcp": "tcp"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Minimum Severity To Report",
             "BackEndName": "MinSeverity",
             "Description": "Minimum Severity To Report",
             "FixedFrontEndValues": [
                 "warning",
                 "emergency",
                 "alert",
                 "critical",
                 "error",
                 "notice",
                 "informational",
                 "debug"
                 ],
             "FronttoBackEndValueMaps": {
                 "warning": "warning",
                 "emergency": "emergency",
                 "alert": "alert",
                 "critical": "critical",
                 "error": "error",
                 "notice": "notice",
                 "informational": "informational",
                 "debug": "debug"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Minimum Severity",
             "BackEndName": "MinSeverity",
             "Description": "Minimum Severity To Report",
             "FixedFrontEndValues": [
                 "warning",
                 "emergency",
                 "alert",
                 "critical",
                 "error",
                 "notice",
                 "informational",
                 "debug"
                 ],
             "FronttoBackEndValueMaps": {
                 "warning": "warning",
                 "emergency": "emergency",
                 "alert": "alert",
                 "critical": "critical",
                 "error": "error",
                 "notice": "notice",
                 "informational": "informational",
                 "debug": "debug"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 ucs_domain_profile_names="",
                 syslog_local_logging_minimum_severity_to_report="warning",
                 syslog_remote_logging_server_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names,
                         ucs_domain_profile_names,
                         fabric_interconnect="AB"
                         )
        self.syslog_local_logging_minimum_severity_to_report = syslog_local_logging_minimum_severity_to_report
        if syslog_remote_logging_server_list is None:
            self.syslog_remote_logging_server_list = []
        else:
            self.syslog_remote_logging_server_list = syslog_remote_logging_server_list
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "LocalClients": [
                {"MinSeverity": self.syslog_local_logging_minimum_severity_to_report,
                 "ClassId": "syslog.LocalFileLoggingClient",
                 "ObjectType": "syslog.LocalFileLoggingClient"
                 }
                ]
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"'{self.ucs_domain_profile_names}', "
            f"'{self.syslog_local_logging_minimum_severity_to_report}', "
            f"{self.syslog_remote_logging_server_list})"
            )


def syslog_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    syslog_local_logging_minimum_severity_to_report="warning",
    syslog_remote_logging_server_list=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names="",
    ucs_domain_profile_names=""
    ):
    """This is a function used to make a Syslog Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        syslog_local_logging_minimum_severity_to_report (str):
            Optional; The lowest level of Syslog messages to be included in the
            local log. The default value is "warning". Other values include
            "emergency", "alert", "critical", "error", "notice",
            "informational", and "debug"
        syslog_remote_logging_server_list (list):
            Optional; The list of dictionary entries for each Syslog remote
            logging server to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "Hostname/IP Address": "192.168.0.201",
              "Port": 514,
              "Protocol": "TCP",
              "Minimum Severity To Report": "alert"
              },
             {"Enable": False,
              "Hostname/IP Address": "0.0.0.0",
              "Port": 514,
              "Protocol": "UDP",
              "Minimum Severity To Report": "warning"
              },
             ]
            A "Hostname/IP Address" key with a string value must be configured
            in each dictionary of the list to specify the remote logging Syslog
            server. Optional key settings include "Enable", "Port", "Protocol,
            and "Minimum Severity To Report".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
        ucs_domain_profile_names (str):
            Optional; The UCS Domain Profile the policy should be attached
            to. If providing more than one UCS Domain Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Syslog Policy object in Intersight
    builder(
        SyslogPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            ucs_domain_profile_names=ucs_domain_profile_names,
            syslog_local_logging_minimum_severity_to_report=syslog_local_logging_minimum_severity_to_report,
            syslog_remote_logging_server_list=syslog_remote_logging_server_list
            ))


# Establish classes and functions to make UUID Pool
class UuidPool(UcsPool):
    """This class is used to configure an UUID Pool in Intersight.
    """
    object_type = "UUID Pool"
    intersight_api_path = "uuidpool/Pools"
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "UUID Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    block_types = [
        {"BlockType": "uuidpool.UuidBlock",
         "BlocksListVariableName": "uuid_blocks_list",
         "Description": "UUID Suffix Block",
         "AttributeName": "UuidSuffixBlocks"
         }
        ]    
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 uuid_blocks_list=None,
                 uuid_prefix="F733776E-1ED8-11E2"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         pool_name,
                         pool_description,
                         pool_assignment_order,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        if uuid_blocks_list is None:
            self.uuid_blocks_list = []
        else:
            self.uuid_blocks_list = uuid_blocks_list
        self.uuid_prefix = uuid_prefix
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description,
            "Prefix": self.uuid_prefix
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.uuid_blocks_list}, "
            f"'{self.uuid_prefix}')"
            )


def uuid_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    uuid_blocks_list=None,
    uuid_prefix="F733776E-1ED8-11E2",
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an UUID Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        uuid_blocks_list (list):
            Optional; The list of dictionary entries for each UUID block to
            be configured. The default value is None. An
            example entry is:
            [{"From": "0000-000000000001",
              "Size": 256},].
            A "From" key with an integer value must also be configured to
            specify the first suffix number in the block.
            A "Size" key with an integer value must also be configured to
            specify the size of the block. Optional key settings such as "To"
            can also be configured in each list dictionary, if the associated
            system default values are not desired. Multiple dictionaries can be
            placed in the list to configure different block ranges.
        uuid_prefix (str):
            Optional; The UUID prefix for all blocks created in the pool. The
            default value is "F733776E-1ED8-11E2".
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create UUID Pool object in Intersight
    builder(
        UuidPool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            uuid_blocks_list=uuid_blocks_list,
            uuid_prefix=uuid_prefix
            ))


# Establish classes and functions to make Virtual KVM Policy
class VirtualKvmPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Virtual KVM Policy in Intersight.
    """
    object_type = "Virtual KVM Policy"
    intersight_api_path = "kvm/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 enable_virtual_kvm=True,
                 max_sessions=4,
                 remote_port=2068,
                 enable_video_encryption=True,
                 enable_local_server_video=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.enable_virtual_kvm = enable_virtual_kvm
        self.max_sessions = max_sessions
        self.remote_port = remote_port
        self.enable_video_encryption = enable_video_encryption
        self.enable_local_server_video = enable_local_server_video
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_virtual_kvm,
            "MaximumSessions": self.max_sessions,
            "RemotePort": self.remote_port,
            "EnableVideoEncryption": self.enable_video_encryption,
            "EnableLocalServerVideo": self.enable_local_server_video
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.enable_virtual_kvm}, "
            f"{self.max_sessions}, "
            f"{self.remote_port}, "
            f"{self.enable_video_encryption}, "
            f"{self.enable_local_server_video})"
            )


def virtual_kvm_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_virtual_kvm=True,
    max_sessions=4,
    remote_port=2068,
    enable_video_encryption=True,
    enable_local_server_video=True,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Virtual KVM Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_virtual_kvm (bool):
            Optional; The setting to enable the virtual KVM service. The
            default value is True.
        max_sessions (int):
            Optional; The maximum number of concurrent virtual KVM sessions.
            The accepted values are 1 - 4. The default value is 4.
        remote_port (int):
            Optional; The port used for virtual KVM sessions. The accepted values
            are 1 - 65535. The default value is 2068.
        enable_video_encryption (bool):
            Optional; The setting to encrypt all video sent through virtual KVM. The
            default value is True.
        enable_local_server_video (bool):
            Optional; The setting to display a virtual KVM session on any
            monitor attached to the server. The default value is True.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Virtual KVM Policy object in Intersight
    builder(
        VirtualKvmPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            enable_virtual_kvm=enable_virtual_kvm,
            max_sessions=max_sessions,
            remote_port=remote_port,
            enable_video_encryption=enable_video_encryption,
            enable_local_server_video=enable_local_server_video
            ))


# Establish classes and functions to make Virtual Media Policy
class VirtualMediaPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Virtual Media Policy in Intersight.
    """
    object_type = "Virtual Media Policy"
    intersight_api_path = "vmedia/Policies"
    subobject_types = [
        {"SubobjectType": "vmedia.Mapping",
         "SubobjectList": "virtual_media_mapping_list",
         "AttributeName": "Mappings",
         "Description": "Virtual Media Mapping",
         }
        ]
    subobject_attribute_maps = {
        "vmedia.Mapping": [
            {"FrontEndName": "Virtual Media Type",
             "BackEndName": "DeviceType",
             "Description": "Virtual Media Type",
             "FixedFrontEndValues": [
                 "CDD",
                 "HDD"
                 ],
             "FronttoBackEndValueMaps": {
                 "cdd": "cdd",
                 "hdd": "hdd"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Virtual Media Protocol",
             "BackEndName": "MountProtocol",
             "Description": "Virtual Media Protocol",
             "FixedFrontEndValues": [
                 "NFS",
                 "CIFS",
                 "HTTP",
                 "HTTPS",
                 "HTTP/HTTPS"
                 ],
             "FronttoBackEndValueMaps": {
                 "nfs": "nfs",
                 "cifs": "cifs",
                 "http": "http",
                 "https": "https",
                 "http/https": "https"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Name",
             "BackEndName": "VolumeName",
             "Description": "Virtual Media Mapping Name",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "File Location",
             "BackEndName": "FileLocation",
             "Description": "Virtual Media File Location",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Mount Options",
             "BackEndName": "MountOptions",
             "Description": "Virtual Media Mount Options",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Username",
             "Description": "Virtual Media Mapping Username",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Password",
             "Description": "Virtual Media Mapping Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Authentication Protocol",
             "BackEndName": "AuthenticationProtocol",
             "Description": "Virtual Media Authentication Protocol",
             "FixedFrontEndValues": [
                 
                 ],
             "FronttoBackEndValueMaps": {
                 "none": "none",
                 "ntlm": "ntlm",
                 "ntlmi": "ntlmi",
                 "ntlmv2": "ntlmv2",
                 "ntlmv2i": "ntlmv2i",
                 "ntlmssp": "ntlmssp",
                 "ntlmsspi": "ntlmsspi"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Host Name",
             "BackEndName": "HostName",
             "Description": "Virtual Media Host Name",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Remote File",
             "BackEndName": "RemoteFile",
             "Description": "Virtual Media Remote File",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Remote Path",
             "BackEndName": "RemotePath",
             "Description": "Virtual Media Remote Path",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 enable_virtual_media=True,
                 enable_virtual_media_encryption=True,
                 enable_low_power_usb=True,
                 virtual_media_mapping_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.enable_virtual_media = enable_virtual_media
        self.enable_virtual_media_encryption = enable_virtual_media_encryption
        self.enable_low_power_usb = enable_low_power_usb
        if virtual_media_mapping_list is None:
            self.virtual_media_mapping_list = []
        else:
            self.virtual_media_mapping_list = virtual_media_mapping_list
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_virtual_media,
            "Encryption": self.enable_virtual_media_encryption,
            "LowPowerUsb": self.enable_low_power_usb
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.enable_virtual_media}, "
            f"{self.enable_virtual_media_encryption}, "
            f"{self.enable_low_power_usb}, "
            f"{self.virtual_media_mapping_list})"
            )


def virtual_media_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_virtual_media=True,
    enable_virtual_media_encryption=True,
    enable_low_power_usb=True,
    virtual_media_mapping_list=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Virtual Media Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_virtual_media (bool):
            Optional; Enable the virtual media service. The default value is
            True.
        enable_virtual_media_encryption (bool):
            Optional; Enable virtual media encryption. The default value is
            True.
        enable_low_power_usb (bool):
            Optional; Enables mapped virtual media to be present on the server
            boot selection screen menu after server reboot. The default value
            is True.
        virtual_media_mapping_list (list):
            Optional; The list of dictionary entries for each virtual media
            mapping to be configured. The default value is None. An example
            entry is:
            [{"Virtual Media Type": "CDD",
              "Virtual Media Protocol": "NFS",
              "Name": "sample-mapping-1",
              "File Location": "hostname-or-IP/filePath/fileName.iso",
              "Mount Options": ""
              },
             {"Virtual Media Type": "HDD",
              "Virtual Media Protocol": "CIFS",
              "Name": "sample-mapping-2",
              "File Location": "hostname-or-IP/filePath/fileName.img",
              "Mount Options": "soft",
              "Username": "sampleuser",
              "Password": "C1sco12345",
              "Authentication Protocol": "ntlm"
              },
             {"Virtual Media Type": "CDD",
              "Virtual Media Protocol": "HTTPS",
              "Name": "sample-mapping-3",
              "File Location": "https://hostname-or-IP/filePath/fileName.iso",
              "Mount Options": ""
              },
             ]
            For each mapping dictionary, the following keys can be provided 
            with the specified value types:
            - "Virtual Media Type" key with a string value for the virtual
            media device type. The accepted values are "CDD" and "HDD". The
            default value is "CDD".
            - "Virtual Media Protocol" key with a string value for the virtual
            media protocol type. The accepted values are "NFS", "CIFS", "HTTP"
            or "HTTPS". The default value is "NFS".
            - "Name" key with a string value for the mapping name. This key is
            mandatory.
            - "File Location" key with a string value for the virtual media
            file location. An example value for the NFS or CIFS protocol is
            "hostname-or-IP/filePath/fileName.iso". An example value for
            HTTP or HTTPs is "https://hostname-or-IP/filePath/fileName.img".
            This key is mandatory. Virtual media with the CDD device type
            selected must have a .iso extension. HDD virtual media must
            have a .img extension. 
            - "Mount Options" key with a string value for the virtual media
            mount options. Multiple mount options can be comma separated within
            the string value. Supported options include:
                - NFS: ro, rw, nolock, noexec, soft, port=VALUE, timeo=VALUE,
                retry=VALUE
                - CIFS: soft, nounix, noserverino, guest. CIFS versions below
                version 3.0 require the option vers=VALUE e.g. vers=2.0
                - HTTP/HTTPS: noauto
            - "Username" key with a string value for the virtual media mapping
            username.
            - "Password" key with a string value for the virtual media mapping
            password.
            - "Authentication Protocol" key with a string value for the virtual
            media authentication protocol. Accepted values include "none",
            "ntlm", "ntlmi", "ntlmv2", "ntlmv2i", "ntlmssp", and "ntlmsspi".
            - Additional keys supported include "Host Name", "Remote File" and
            "Remote Path". These keys appear to not be needed when using the
            "File Location" key and may have been superseded. This may vary on
            a case-by-case basis.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Virtual Media Policy object in Intersight
    builder(
        VirtualMediaPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            enable_virtual_media=enable_virtual_media,
            enable_virtual_media_encryption=enable_virtual_media_encryption,
            enable_low_power_usb=enable_low_power_usb,
            virtual_media_mapping_list=virtual_media_mapping_list
            ))


# Establish classes and functions to make WWNN Pool
class WwnnPool(UcsPool):
    """This class is used to configure a WWNN Pool in Intersight.
    """
    object_type = "WWNN Pool"
    intersight_api_path = "fcpool/Pools"
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "WWNN Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    block_types = [
        {"BlockType": "fcpool.Block",
         "BlocksListVariableName": "wwnn_blocks_list",
         "Description": "WWNN Block",
         "AttributeName": "IdBlocks"
         }
        ]    
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 wwnn_blocks_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         pool_name,
                         pool_description,
                         pool_assignment_order,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        if wwnn_blocks_list is None:
            self.wwnn_blocks_list = []
        else:
            self.wwnn_blocks_list = wwnn_blocks_list
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description,
            "PoolPurpose": "WWNN"
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.wwnn_blocks_list})"
            )


def wwnn_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    wwnn_blocks_list=None,
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a WWNN Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        wwnn_blocks_list (list):
            Optional; The list of dictionary entries for each WWNN block to
            be configured. The default value is None. An
            example entry is:
            [{"From": "20:00:00:25:B5:00:00:00",
              "Size": 256},].
            A "From" key with a string value must be configured to specify the
            first WWNN address in the block. A "Size" key with an integer value
            must also be configured to specify the size of the block. Optional
            key settings such as "To" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. Multiple dictionaries can be placed in the list to
            configure different block ranges.
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create WWNN Pool object in Intersight
    builder(
        WwnnPool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            wwnn_blocks_list=wwnn_blocks_list
            ))


# Establish classes and functions to make WWPN Pool
class WwpnPool(UcsPool):
    """This class is used to configure a WWPN Pool in Intersight.
    """
    object_type = "WWPN Pool"
    intersight_api_path = "fcpool/Pools"
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "WWPN Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    block_types = [
        {"BlockType": "fcpool.Block",
         "BlocksListVariableName": "wwpn_blocks_list",
         "Description": "WWPN Block",
         "AttributeName": "IdBlocks"
         }
        ]    
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 wwpn_blocks_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         pool_name,
                         pool_description,
                         pool_assignment_order,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        if wwpn_blocks_list is None:
            self.wwpn_blocks_list = []
        else:
            self.wwpn_blocks_list = wwpn_blocks_list
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description,
            "PoolPurpose": "WWPN"
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.wwpn_blocks_list})"
            )


def wwpn_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    wwpn_blocks_list=None,
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make a WWPN Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        wwpn_blocks_list (list):
            Optional; The list of dictionary entries for each WWPN block to
            be configured. The default value is None. An
            example entry is:
            [{"From": "20:00:00:25:B5:00:00:00",
              "Size": 256},].
            A "From" key with a string value must be configured to specify the
            first WWPN address in the block. A "Size" key with an integer value
            must also be configured to specify the size of the block. Optional
            key settings such as "To" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. Multiple dictionaries can be placed in the list to
            configure different block ranges.
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create WWPN Pool object in Intersight
    builder(
        WwpnPool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            wwpn_blocks_list=wwpn_blocks_list
            ))


def main():

    # Establish UCS Server Deployment Tool specific variables
    deployment_tool_type = "Intersight UCS Server Deployment Tool"

    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the UCS Server Deployment Tool for Cisco Intersight
    print(f"\nStarting the {deployment_tool_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Establish the initial UCS Server Deployment Tool default pre-requisite and support Pool, Policy and/or Profile names
    deployment_tool_ucs_server_profile_names = ""
    deployment_tool_ucs_server_profile_template_name = ""
    deployment_tool_in_band_ip_pool_name = ""
    deployment_tool_out_of_band_ip_pool_name = ""
    deployment_tool_iqn_pool_name = ""
    deployment_tool_mac_pool_name = ""
    deployment_tool_ethernet_network_group_policy_name = ""
    deployment_tool_ethernet_network_control_policy_name = ""
    deployment_tool_ethernet_qos_policy_name = ""
    deployment_tool_ethernet_adapter_policy_name = ""
    deployment_tool_iscsi_adapter_policy_name = ""
    deployment_tool_primary_iscsi_static_target_policy_name = ""
    deployment_tool_secondary_iscsi_static_target_policy_name = ""
    deployment_tool_iscsi_boot_policy_name = ""
    deployment_tool_usnic_adapter_policy_name = ""
    deployment_tool_vmmq_adapter_policy_name = ""
    deployment_tool_wwnn_pool_name = ""
    deployment_tool_wwpn_pool_name = ""
    deployment_tool_fibre_channel_network_policy_name = ""
    deployment_tool_fibre_channel_qos_policy_name = ""
    deployment_tool_fibre_channel_adapter_policy_name = ""
    deployment_tool_fc_zone_policy_name = ""

    # Create the UUID Pool in Intersight
    if deploy_uuid_pool:
        # Update Pool name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_uuid_pool_name = f"{deployment_name_prefix}{uuid_pool_name}{deployment_name_suffix}"
        uuid_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_uuid_pool_name,
            uuid_blocks_list=uuid_pool_uuid_blocks_list,
            uuid_prefix=uuid_pool_uuid_prefix,
            pool_description=uuid_pool_description,
            pool_assignment_order=uuid_pool_uuid_assignment_order,
            organization=ucs_server_profile_organization,
            tags=uuid_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    ## Establish default support UUID Pool names for UCS Server Profiles and UCS Server Profile Templates
    if ucs_server_profile_uuid_pool_name == uuid_pool_name:
        deployment_tool_ucs_server_profile_uuid_pool_name = deployment_tool_uuid_pool_name
    else:
        deployment_tool_ucs_server_profile_uuid_pool_name = ucs_server_profile_uuid_pool_name

    # Create the Resource Pool in Intersight
    if deploy_resource_pool:
        # Update Pool name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_resource_pool_name = f"{deployment_name_prefix}{resource_pool_name}{deployment_name_suffix}"
        resource_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_resource_pool_name,
            chassis_resources_list=resource_pool_chassis_resources_list,
            blade_server_resources_list=resource_pool_blade_server_resources_list,
            rack_server_resources_list=resource_pool_rack_server_resources_list,
            ucs_server_type=resource_pool_ucs_server_type,
            resource_type=resource_pool_resource_type,
            pool_type=resource_pool_pool_type,
            pool_description=resource_pool_description,
            pool_assignment_order=resource_pool_resource_assignment_order,
            organization=ucs_server_profile_organization,
            tags=resource_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the UCS Server Profile Template in Intersight
    if ucs_server_profile_template_creation_during_deployment and ucs_server_profile_template_name:
        # Update UCS Server Profile Template name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_ucs_server_profile_template_name = f"{deployment_name_prefix}{ucs_server_profile_template_name}{deployment_name_suffix}"
        # Create the Profile in Intersight
        ucs_server_profile_template_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            ucs_server_profile_template_name=deployment_tool_ucs_server_profile_template_name,
            uuid_pool_name=deployment_tool_ucs_server_profile_uuid_pool_name,
            ucs_server_type=ucs_server_profile_ucs_server_type,
            ucs_server_profile_template_description=ucs_server_profile_description,
            ucs_server_profile_template_organization=ucs_server_profile_organization,
            tags=ucs_server_profile_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the UCS Server Profile(s) in Intersight
    staged_ucs_server_profile_names_list = []
    for ucs_server_profile_config in ucs_server_profile_names_and_assignments:
        if ucs_server_profile_config.get('Server Profile Name'):
            # Update UCS Server Profile name with UCS Server Deployment Tool provided prefix and/or suffix
            deployment_tool_ucs_server_profile_name = f"{deployment_name_prefix}{ucs_server_profile_config['Server Profile Name']}{deployment_name_suffix}"
            # Create the Profile in Intersight
            ucs_server_profile_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                ucs_server_profile_name=deployment_tool_ucs_server_profile_name,
                uuid_pool_name=deployment_tool_ucs_server_profile_uuid_pool_name,
                uuid_assignment_type=ucs_server_profile_uuid_assignment_type,
                uuid_static_address=ucs_server_profile_uuid_static_address,
                ucs_server_profile_template_name_for_attachment=deployment_tool_ucs_server_profile_template_name,
                overwrite_conflicting_ucs_server_profile_template_attachments=True,                
                ucs_server_type=ucs_server_profile_ucs_server_type,
                ucs_server_profile_description=ucs_server_profile_description,
                ucs_server_profile_organization=ucs_server_profile_organization,
                tags=ucs_server_profile_tags,
                preconfigured_api_client=main_intersight_api_client
                )
            staged_ucs_server_profile_names_list.append(deployment_tool_ucs_server_profile_name)
    deployment_tool_ucs_server_profile_names = ', '.join(staged_ucs_server_profile_names_list)

    # Create the BIOS Policy in Intersight
    if deploy_bios_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_bios_policy_name = f"{deployment_name_prefix}{bios_policy_name}{deployment_name_suffix}"
        bios_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_bios_policy_name,
            bios_settings=bios_policy_bios_settings,
            policy_description=bios_policy_description,
            organization=ucs_server_profile_organization,
            tags=bios_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Boot Order Policy in Intersight
    if deploy_boot_order_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_boot_order_policy_name = f"{deployment_name_prefix}{boot_order_policy_name}{deployment_name_suffix}"
        boot_order_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_boot_order_policy_name,
            boot_devices_list=boot_order_policy_boot_devices_list,
            configured_boot_mode=boot_order_policy_configured_boot_mode,
            enable_uefi_secure_boot=boot_order_policy_enable_uefi_secure_boot,
            policy_description=boot_order_policy_description,
            organization=ucs_server_profile_organization,
            tags=boot_order_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Power Policy in Intersight
    if deploy_power_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_power_policy_name = f"{deployment_name_prefix}{power_policy_name}{deployment_name_suffix}"
        power_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_power_policy_name,
            power_profiling=power_policy_power_profiling,
            power_priority=power_policy_power_priority,
            power_restore=power_policy_power_restore,
            power_redundancy=power_policy_power_redundancy,
            power_save_mode=power_policy_power_save_mode,
            dynamic_power_rebalancing=power_policy_dynamic_power_rebalancing,
            extended_power_capacity=power_policy_extended_power_capacity,        
            power_allocation_in_watts=power_policy_power_allocation_in_watts,
            policy_description=power_policy_description,
            organization=ucs_server_profile_organization,
            tags=power_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Virtual Media Policy in Intersight
    if deploy_virtual_media_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_virtual_media_policy_name = f"{deployment_name_prefix}{virtual_media_policy_name}{deployment_name_suffix}"
        virtual_media_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_virtual_media_policy_name,
            enable_virtual_media=virtual_media_policy_enable_virtual_media,
            enable_virtual_media_encryption=virtual_media_policy_enable_virtual_media_encryption,
            enable_low_power_usb=virtual_media_policy_enable_low_power_usb,
            virtual_media_mapping_list=virtual_media_policy_virtual_media_mapping_list,
            policy_description=virtual_media_policy_description,
            organization=ucs_server_profile_organization,
            tags=virtual_media_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Certificate Management Policy in Intersight
    if deploy_cert_mgmt_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_cert_mgmt_policy_name = f"{deployment_name_prefix}{cert_mgmt_policy_name}{deployment_name_suffix}"
        cert_mgmt_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_cert_mgmt_policy_name,
            certificate=cert_mgmt_policy_certificate,
            private_key=cert_mgmt_policy_private_key,
            enable_imc_certificate=cert_mgmt_policy_enable_imc_certificate,
            policy_description=cert_mgmt_policy_description,
            organization=ucs_server_profile_organization,
            tags=cert_mgmt_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the In-Band IP Pool in Intersight
    if deploy_ip_pool_in_band:
        # Update Pool name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_in_band_ip_pool_name = f"{deployment_name_prefix}{in_band_ip_pool_name}{deployment_name_suffix}"
        ip_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_in_band_ip_pool_name,
            configure_ipv4_pool=in_band_ip_pool_configure_ipv4_pool,
            ipv4_netmask=in_band_ip_pool_ipv4_netmask,
            ipv4_gateway=in_band_ip_pool_ipv4_gateway,
            ipv4_primary_dns=in_band_ip_pool_ipv4_primary_dns,
            ipv4_secondary_dns=in_band_ip_pool_ipv4_secondary_dns,
            ipv4_blocks_list=in_band_ip_pool_ipv4_blocks_list,
            configure_ipv6_pool=in_band_ip_pool_configure_ipv6_pool,
            ipv6_prefix=in_band_ip_pool_ipv6_prefix,
            ipv6_gateway=in_band_ip_pool_ipv6_gateway,
            ipv6_primary_dns=in_band_ip_pool_ipv6_primary_dns,
            ipv6_secondary_dns=in_band_ip_pool_ipv6_secondary_dns,
            ipv6_blocks_list=in_band_ip_pool_ipv6_blocks_list,
            pool_description=in_band_ip_pool_description,
            pool_assignment_order=in_band_ip_pool_ip_assignment_order,
            organization=ucs_server_profile_organization,
            tags=in_band_ip_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Out-Of-Band IP Pool in Intersight
    if deploy_ip_pool_out_of_band:
        # Update Pool name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_out_of_band_ip_pool_name = f"{deployment_name_prefix}{out_of_band_ip_pool_name}{deployment_name_suffix}"
        ip_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_out_of_band_ip_pool_name,
            configure_ipv4_pool=out_of_band_ip_pool_configure_ipv4_pool,
            ipv4_netmask=out_of_band_ip_pool_ipv4_netmask,
            ipv4_gateway=out_of_band_ip_pool_ipv4_gateway,
            ipv4_primary_dns=out_of_band_ip_pool_ipv4_primary_dns,
            ipv4_secondary_dns=out_of_band_ip_pool_ipv4_secondary_dns,
            ipv4_blocks_list=out_of_band_ip_pool_ipv4_blocks_list,
            configure_ipv6_pool=out_of_band_ip_pool_configure_ipv6_pool,
            ipv6_prefix=out_of_band_ip_pool_ipv6_prefix,
            ipv6_gateway=out_of_band_ip_pool_ipv6_gateway,
            ipv6_primary_dns=out_of_band_ip_pool_ipv6_primary_dns,
            ipv6_secondary_dns=out_of_band_ip_pool_ipv6_secondary_dns,
            ipv6_blocks_list=out_of_band_ip_pool_ipv6_blocks_list,
            pool_description=out_of_band_ip_pool_description,
            pool_assignment_order=out_of_band_ip_pool_ip_assignment_order,
            organization=ucs_server_profile_organization,
            tags=out_of_band_ip_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the IMC Access Policy in Intersight
    if deploy_imc_access_policy:
        # Establish default pre-requisite and support Pool and/or Policy names for IMC Access Policies
        ## In-Band IP Pool
        if imc_access_policy_default_in_band_ip_pool_name == in_band_ip_pool_name:
            deployment_tool_imc_access_policy_default_in_band_ip_pool_name = deployment_tool_in_band_ip_pool_name
        else:
            deployment_tool_imc_access_policy_default_in_band_ip_pool_name = imc_access_policy_default_in_band_ip_pool_name
            
        ## Out-Of-Band IP Pool
        if imc_access_policy_default_out_of_band_ip_pool_name == out_of_band_ip_pool_name:
            deployment_tool_imc_access_policy_default_out_of_band_ip_pool_name = deployment_tool_out_of_band_ip_pool_name
        else:
            deployment_tool_imc_access_policy_default_out_of_band_ip_pool_name = imc_access_policy_default_out_of_band_ip_pool_name
            
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_imc_access_policy_name = f"{deployment_name_prefix}{imc_access_policy_name}{deployment_name_suffix}"
        imc_access_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_imc_access_policy_name,
            enable_in_band_configuration=imc_access_policy_enable_in_band_configuration,
            in_band_vlan_id=imc_access_policy_in_band_vlan_id,
            enable_in_band_ipv4_configuration=imc_access_policy_enable_in_band_ipv4_configuration,
            enable_in_band_ipv6_configuration=imc_access_policy_enable_in_band_ipv6_configuration,
            default_in_band_ip_pool_name=deployment_tool_imc_access_policy_default_in_band_ip_pool_name,
            enable_out_of_band_configuration=imc_access_policy_enable_out_of_band_configuration,
            default_out_of_band_ip_pool_name=deployment_tool_imc_access_policy_default_out_of_band_ip_pool_name,
            policy_description=imc_access_policy_description,
            organization=ucs_server_profile_organization,
            tags=imc_access_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the IPMI Over LAN Policy in Intersight
    if deploy_ipmi_over_lan_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_ipmi_over_lan_policy_name = f"{deployment_name_prefix}{ipmi_over_lan_policy_name}{deployment_name_suffix}"
        ipmi_over_lan_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ipmi_over_lan_policy_name,
            enable_ipmi_over_lan=ipmi_over_lan_policy_enable_ipmi_over_lan,
            privilege_level=ipmi_over_lan_policy_privilege_level,
            encryption_key=ipmi_over_lan_policy_encryption_key,
            policy_description=ipmi_over_lan_policy_description,
            organization=ucs_server_profile_organization,
            tags=ipmi_over_lan_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Local User Policy in Intersight
    if deploy_local_user_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_local_user_policy_name = f"{deployment_name_prefix}{local_user_policy_name}{deployment_name_suffix}"
        local_user_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_local_user_policy_name,
            enforce_strong_password=local_user_policy_enforce_strong_password,
            enable_password_expiry=local_user_policy_enable_password_expiry,
            password_expiry_duration=local_user_policy_password_expiry_duration,
            password_expiry_notification_period=local_user_policy_password_expiry_notification_period,
            password_expiry_grace_period=local_user_policy_password_expiry_grace_period,
            password_history=local_user_policy_password_history,
            always_send_user_password=local_user_policy_always_send_user_password,
            local_users_list=local_user_policy_local_users_list,
            policy_description=local_user_policy_description,
            organization=ucs_server_profile_organization,
            tags=local_user_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Serial Over LAN Policy in Intersight
    if deploy_serial_over_lan_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_serial_over_lan_policy_name = f"{deployment_name_prefix}{serial_over_lan_policy_name}{deployment_name_suffix}"
        serial_over_lan_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_serial_over_lan_policy_name,
            enable_serial_over_lan=serial_over_lan_policy_enable_serial_over_lan,
            com_port=serial_over_lan_policy_com_port,
            baud_rate=serial_over_lan_policy_baud_rate,
            ssh_port=serial_over_lan_policy_ssh_port,
            policy_description=serial_over_lan_policy_description,
            organization=ucs_server_profile_organization,
            tags=serial_over_lan_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the SNMP Policy in Intersight
    if deploy_snmp_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_snmp_policy_name = f"{deployment_name_prefix}{snmp_policy_name}{deployment_name_suffix}"
        snmp_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_snmp_policy_name,
            enable_snmp=snmp_policy_enable_snmp,
            snmp_v2c_features=snmp_policy_v2c_features,
            snmp_v3_features=snmp_policy_v3_features,
            snmp_port=snmp_policy_port,
            system_contact=snmp_policy_system_contact,
            system_location=snmp_policy_system_location,
            access_community_string=snmp_policy_access_community_string,
            snmp_community_access=snmp_policy_community_access,
            trap_community_string=snmp_policy_trap_community_string,
            snmp_engine_input_id=snmp_policy_engine_input_id,
            snmp_users_list=snmp_policy_users_list,
            snmp_trap_destinations_list=snmp_policy_trap_destinations_list,
            policy_description=snmp_policy_description,
            organization=ucs_server_profile_organization,
            tags=snmp_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Syslog Policy in Intersight
    if deploy_syslog_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_syslog_policy_name = f"{deployment_name_prefix}{syslog_policy_name}{deployment_name_suffix}"
        syslog_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_syslog_policy_name,
            syslog_local_logging_minimum_severity_to_report=syslog_policy_syslog_local_logging_minimum_severity_to_report,
            syslog_remote_logging_server_list=syslog_policy_syslog_remote_logging_server_list,
            policy_description=syslog_policy_description,
            organization=ucs_server_profile_organization,
            tags=syslog_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Virtual KVM Policy in Intersight
    if deploy_virtual_kvm_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_virtual_kvm_policy_name = f"{deployment_name_prefix}{virtual_kvm_policy_name}{deployment_name_suffix}"
        virtual_kvm_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_virtual_kvm_policy_name,
            enable_virtual_kvm=virtual_kvm_policy_enable_virtual_kvm,
            max_sessions=virtual_kvm_policy_max_sessions,
            remote_port=virtual_kvm_policy_remote_port,
            enable_video_encryption=virtual_kvm_policy_enable_video_encryption,
            enable_local_server_video=virtual_kvm_policy_enable_local_server_video,
            policy_description=virtual_kvm_policy_description,
            organization=ucs_server_profile_organization,
            tags=virtual_kvm_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the SD Card Policy in Intersight
    if deploy_sd_card_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_sd_card_policy_name = f"{deployment_name_prefix}{sd_card_policy_name}{deployment_name_suffix}"
        sd_card_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_sd_card_policy_name,
            sd_card_mode=sd_card_policy_sd_card_mode,
            enable_operating_system=sd_card_policy_enable_operating_system,
            operating_system_partition_name=sd_card_policy_operating_system_partition_name,
            enable_utility_diagnostics=sd_card_policy_enable_utility_diagnostics,
            enable_utility_drivers=sd_card_policy_enable_utility_drivers,
            enable_utility_host_upgrade_utility=sd_card_policy_enable_utility_host_upgrade_utility,
            enable_utility_server_configuration_utility=sd_card_policy_enable_utility_server_configuration_utility,
            enable_utility_user_partition=sd_card_policy_enable_utility_user_partition,
            utility_user_partition_name=sd_card_policy_utility_user_partition_name,
            policy_description=sd_card_policy_description,
            organization=ucs_server_profile_organization,
            tags=sd_card_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the Storage Policy in Intersight
    if deploy_storage_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_storage_policy_name = f"{deployment_name_prefix}{storage_policy_name}{deployment_name_suffix}"
        storage_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_storage_policy_name,
            use_jbod_drives_for_virtual_drive_creation=storage_policy_use_jbod_drives_for_virtual_drive_creation,
            unused_disks_state=storage_policy_unused_disks_state,
            enable_m2_raid_configuration=storage_policy_enable_m2_raid_configuration,
            m2_raid_controller_slot_for_virtual_drive_creation=storage_policy_m2_raid_controller_slot_for_virtual_drive_creation,
            enable_mraid_raid_controller_configuration=storage_policy_enable_mraid_raid_controller_configuration,
            global_hot_spares=storage_policy_global_hot_spares,
            drive_group_list=storage_policy_drive_group_list,
            virtual_drive_list=storage_policy_virtual_drive_list,
            enable_mraid_raid_single_drive_raid0_configuration=storage_policy_enable_mraid_raid_single_drive_raid0_configuration,
            drive_slots=storage_policy_drive_slots,
            strip_size_in_kib=storage_policy_strip_size_in_kib,
            access_policy=storage_policy_access_policy,
            read_policy=storage_policy_read_policy,
            write_policy=storage_policy_write_policy,
            disk_cache=storage_policy_disk_cache,
            policy_description=storage_policy_description,
            organization=ucs_server_profile_organization,
            tags=storage_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the IQN Pool in Intersight
    if deploy_iqn_pool:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_iqn_pool_name = f"{deployment_name_prefix}{iqn_pool_name}{deployment_name_suffix}"
        iqn_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_iqn_pool_name,
            iqn_blocks_list=iqn_pool_iqn_blocks_list,
            iqn_prefix=iqn_pool_iqn_prefix,
            pool_description=iqn_pool_description,
            pool_assignment_order=iqn_pool_iqn_assignment_order,
            organization=ucs_server_profile_organization,
            tags=iqn_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the MAC Address Pool in Intersight
    if deploy_mac_pool:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_mac_pool_name = f"{deployment_name_prefix}{mac_pool_name}{deployment_name_suffix}"
        mac_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_mac_pool_name,
            mac_blocks_list=mac_pool_mac_blocks_list,
            pool_description=mac_pool_description,
            pool_assignment_order=mac_pool_mac_assignment_order,
            organization=ucs_server_profile_organization,
            tags=mac_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet Network Group Policy in Intersight
    if deploy_ethernet_network_group_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_network_group_policy_name = f"{deployment_name_prefix}{ethernet_network_group_policy_name}{deployment_name_suffix}"
        ethernet_network_group_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_network_group_policy_name,
            allowed_vlans=ethernet_network_group_policy_allowed_vlans,
            native_vlan=ethernet_network_group_policy_native_vlan,
            policy_description=ethernet_network_group_policy_description,
            organization=ucs_server_profile_organization,
            tags=ethernet_network_group_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet Network Control Policy in Intersight
    if deploy_ethernet_network_control_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_network_control_policy_name = f"{deployment_name_prefix}{ethernet_network_control_policy_name}{deployment_name_suffix}"
        ethernet_network_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_network_control_policy_name,
            enable_cdp=ethernet_network_control_policy_enable_cdp,
            mac_register_mode=ethernet_network_control_policy_mac_register_mode,
            action_on_uplink_fail=ethernet_network_control_policy_action_on_uplink_fail,
            mac_forging=ethernet_network_control_policy_mac_forging,
            lldp_enable_transmit=ethernet_network_control_policy_lldp_enable_transmit,
            lldp_enable_receive=ethernet_network_control_policy_lldp_enable_receive,
            policy_description=ethernet_network_control_policy_description,
            organization=ucs_server_profile_organization,
            tags=ethernet_network_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet QoS Policy in Intersight
    if deploy_ethernet_qos_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_qos_policy_name = f"{deployment_name_prefix}{ethernet_qos_policy_name}{deployment_name_suffix}"
        ethernet_qos_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_qos_policy_name,
            ethernet_qos_mtu_in_bytes=ethernet_qos_policy_ethernet_qos_mtu_in_bytes,
            ethernet_qos_rate_limit_in_mbps=ethernet_qos_policy_ethernet_qos_rate_limit_in_mbps,
            ethernet_qos_cos=ethernet_qos_policy_ethernet_qos_cos,
            ethernet_qos_burst=ethernet_qos_policy_ethernet_qos_burst,
            ethernet_qos_priority=ethernet_qos_policy_ethernet_qos_priority,
            ethernet_qos_enable_trust_host_cos=ethernet_qos_policy_ethernet_qos_enable_trust_host_cos,
            policy_description=ethernet_qos_policy_description,
            organization=ucs_server_profile_organization,
            tags=ethernet_qos_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet Adapter Policy in Intersight
    if deploy_ethernet_adapter_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_adapter_policy_name = f"{deployment_name_prefix}{ethernet_adapter_policy_name}{deployment_name_suffix}"
        ethernet_adapter_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_adapter_policy_name,
            ethernet_adapter_default_configuration=ethernet_adapter_policy_ethernet_adapter_default_configuration,
            enable_virtual_extensible_lan=ethernet_adapter_policy_enable_virtual_extensible_lan,
            enable_network_virtualization_using_gre=ethernet_adapter_policy_enable_network_virtualization_using_gre,
            enable_accelerated_receive_flow_steering=ethernet_adapter_policy_enable_accelerated_receive_flow_steering,
            enable_precision_time_protocol=ethernet_adapter_policy_enable_precision_time_protocol,
            enable_advanced_filter=ethernet_adapter_policy_enable_advanced_filter,
            enable_interrupt_scaling=ethernet_adapter_policy_enable_interrupt_scaling,
            enable_geneve_offload=ethernet_adapter_policy_enable_geneve_offload,
            enable_rdma_over_converged_ethernet=ethernet_adapter_policy_enable_rdma_over_converged_ethernet,
            interrupts=ethernet_adapter_policy_interrupts,
            interrupt_mode=ethernet_adapter_policy_interrupt_mode,
            interrupt_timer=ethernet_adapter_policy_interrupt_timer,
            interrupt_coalescing_type=ethernet_adapter_policy_interrupt_coalescing_type,
            receive_queue_count=ethernet_adapter_policy_receive_queue_count,
            receive_ring_size=ethernet_adapter_policy_receive_ring_size,
            transmit_queue_count=ethernet_adapter_policy_transmit_queue_count,
            transmit_ring_size=ethernet_adapter_policy_transmit_ring_size,
            completion_queue_count=ethernet_adapter_policy_completion_queue_count,
            completion_ring_size=ethernet_adapter_policy_completion_ring_size,
            uplink_failback_timeout=ethernet_adapter_policy_uplink_failback_timeout,
            enable_tx_checksum_offload=ethernet_adapter_policy_enable_tx_checksum_offload,
            enable_rx_checksum_offload=ethernet_adapter_policy_enable_rx_checksum_offload,
            enable_large_send_offload=ethernet_adapter_policy_enable_large_send_offload,
            enable_large_receive_offload=ethernet_adapter_policy_enable_large_receive_offload,
            enable_receive_side_scaling=ethernet_adapter_policy_enable_receive_side_scaling,
            enable_ipv4_hash=ethernet_adapter_policy_enable_ipv4_hash,
            enable_ipv6_extensions_hash=ethernet_adapter_policy_enable_ipv6_extensions_hash,
            enable_ipv6_hash=ethernet_adapter_policy_enable_ipv6_hash,
            enable_tcp_and_ipv4_hash=ethernet_adapter_policy_enable_tcp_and_ipv4_hash,
            enable_tcp_and_ipv6_extensions_hash=ethernet_adapter_policy_enable_tcp_and_ipv6_extensions_hash,
            enable_tcp_and_ipv6_hash=ethernet_adapter_policy_enable_tcp_and_ipv6_hash,
            enable_udp_and_ipv4_hash=ethernet_adapter_policy_enable_udp_and_ipv4_hash,
            enable_udp_and_ipv6_hash=ethernet_adapter_policy_enable_udp_and_ipv6_hash,
            roce_class_of_service=ethernet_adapter_policy_roce_class_of_service,
            roce_memory_regions=ethernet_adapter_policy_roce_memory_regions,
            roce_queue_pairs=ethernet_adapter_policy_roce_queue_pairs,
            roce_resource_groups=ethernet_adapter_policy_roce_resource_groups,
            roce_version=ethernet_adapter_policy_roce_version,
            policy_description=ethernet_adapter_policy_description,
            organization=ucs_server_profile_organization,
            tags=ethernet_adapter_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the iSCSI Adapter Policy in Intersight
    if deploy_iscsi_adapter_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_iscsi_adapter_policy_name = f"{deployment_name_prefix}{iscsi_adapter_policy_name}{deployment_name_suffix}"
        iscsi_adapter_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_iscsi_adapter_policy_name,
            tcp_connection_timeout=iscsi_adapter_policy_tcp_connection_timeout,
            dhcp_timeout=iscsi_adapter_policy_dhcp_timeout,
            lun_busy_retry_count=iscsi_adapter_policy_lun_busy_retry_count,
            policy_description=iscsi_adapter_policy_description,
            organization=ucs_server_profile_organization,
            tags=iscsi_adapter_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Primary iSCSI Static Target Policy in Intersight
    if deploy_iscsi_static_target_policy_primary:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_primary_iscsi_static_target_policy_name = f"{deployment_name_prefix}{primary_iscsi_static_target_policy_name}{deployment_name_suffix}"
        iscsi_static_target_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_primary_iscsi_static_target_policy_name,
            target_name=primary_iscsi_static_target_policy_target_name,
            ip_address=primary_iscsi_static_target_policy_ip_address,
            port=primary_iscsi_static_target_policy_port,
            lun_id=primary_iscsi_static_target_policy_lun_id,
            lun_is_bootable=primary_iscsi_static_target_policy_lun_is_bootable,
            policy_description=primary_iscsi_static_target_policy_description,
            organization=ucs_server_profile_organization,
            tags=primary_iscsi_static_target_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Secondary iSCSI Static Target Policy in Intersight
    if deploy_iscsi_static_target_policy_secondary:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_secondary_iscsi_static_target_policy_name = f"{deployment_name_prefix}{secondary_iscsi_static_target_policy_name}{deployment_name_suffix}"
        iscsi_static_target_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_secondary_iscsi_static_target_policy_name,
            target_name=secondary_iscsi_static_target_policy_target_name,
            ip_address=secondary_iscsi_static_target_policy_ip_address,
            port=secondary_iscsi_static_target_policy_port,
            lun_id=secondary_iscsi_static_target_policy_lun_id,
            lun_is_bootable=secondary_iscsi_static_target_policy_lun_is_bootable,
            policy_description=secondary_iscsi_static_target_policy_description,
            organization=ucs_server_profile_organization,
            tags=secondary_iscsi_static_target_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the iSCSI Boot IP Pool in Intersight
    if deploy_ip_pool_iscsi_boot:
        # Update Pool name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_iscsi_boot_ip_pool_name = f"{deployment_name_prefix}{iscsi_boot_ip_pool_name}{deployment_name_suffix}"
        ip_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_iscsi_boot_ip_pool_name,
            configure_ipv4_pool=iscsi_boot_ip_pool_configure_ipv4_pool,
            ipv4_netmask=iscsi_boot_ip_pool_ipv4_netmask,
            ipv4_gateway=iscsi_boot_ip_pool_ipv4_gateway,
            ipv4_primary_dns=iscsi_boot_ip_pool_ipv4_primary_dns,
            ipv4_secondary_dns=iscsi_boot_ip_pool_ipv4_secondary_dns,
            ipv4_blocks_list=iscsi_boot_ip_pool_ipv4_blocks_list,
            configure_ipv6_pool=iscsi_boot_ip_pool_configure_ipv6_pool,
            ipv6_prefix=iscsi_boot_ip_pool_ipv6_prefix,
            ipv6_gateway=iscsi_boot_ip_pool_ipv6_gateway,
            ipv6_primary_dns=iscsi_boot_ip_pool_ipv6_primary_dns,
            ipv6_secondary_dns=iscsi_boot_ip_pool_ipv6_secondary_dns,
            ipv6_blocks_list=iscsi_boot_ip_pool_ipv6_blocks_list,
            pool_description=iscsi_boot_ip_pool_description,
            pool_assignment_order=iscsi_boot_ip_pool_ip_assignment_order,
            organization=ucs_server_profile_organization,
            tags=iscsi_boot_ip_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the iSCSI Boot Policy in Intersight
    if deploy_iscsi_boot_policy:
        # Establish default pre-requisite and support Pool and/or Policy names for LAN Connectivity Policies
        ## iSCSI Adapter Policy
        if iscsi_boot_policy_iscsi_adapter_policy_name == iscsi_adapter_policy_name:
            deployment_tool_iscsi_boot_policy_iscsi_adapter_policy_name = deployment_tool_iscsi_adapter_policy_name
        else:
            deployment_tool_iscsi_boot_policy_iscsi_adapter_policy_name = iscsi_boot_policy_iscsi_adapter_policy_name
            
        ## Primary iSCSI Static Target Policy
        if iscsi_boot_policy_primary_static_target_policy_name == primary_iscsi_static_target_policy_name:
            deployment_tool_iscsi_boot_policy_primary_static_target_policy_name = deployment_tool_primary_iscsi_static_target_policy_name
        else:
            deployment_tool_iscsi_boot_policy_primary_static_target_policy_name = iscsi_boot_policy_primary_static_target_policy_name
            
        ## Secondary iSCSI Static Target Policy
        if iscsi_boot_policy_secondary_static_target_policy_name == secondary_iscsi_static_target_policy_name:
            deployment_tool_iscsi_boot_policy_secondary_static_target_policy_name = deployment_tool_secondary_iscsi_static_target_policy_name
        else:
            deployment_tool_iscsi_boot_policy_secondary_static_target_policy_name = iscsi_boot_policy_secondary_static_target_policy_name
            
        ## iSCSI Boot IP Pool
        if iscsi_boot_policy_static_initiator_ip_source_pool_ip_pool_name == iscsi_boot_ip_pool_name:
            deployment_tool_iscsi_boot_policy_static_initiator_ip_source_pool_ip_pool_name = deployment_tool_iscsi_boot_ip_pool_name
        else:
            deployment_tool_iscsi_boot_policy_static_initiator_ip_source_pool_ip_pool_name = iscsi_boot_policy_static_initiator_ip_source_pool_ip_pool_name            
            
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_iscsi_boot_policy_name = f"{deployment_name_prefix}{iscsi_boot_policy_name}{deployment_name_suffix}"
        iscsi_boot_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_iscsi_boot_policy_name,
            iscsi_adapter_policy_name=deployment_tool_iscsi_boot_policy_iscsi_adapter_policy_name,
            configuration_type_for_target_source=iscsi_boot_policy_configuration_type_for_target_source,
            auto_target_dhcp_vendor_id_or_iqn=iscsi_boot_policy_auto_target_dhcp_vendor_id_or_iqn,
            primary_static_target_policy_name=deployment_tool_iscsi_boot_policy_primary_static_target_policy_name,
            secondary_static_target_policy_name=deployment_tool_iscsi_boot_policy_secondary_static_target_policy_name,
            static_chap_username=iscsi_boot_policy_static_chap_username,
            static_chap_password=iscsi_boot_policy_static_chap_password,
            static_mutual_chap_username=iscsi_boot_policy_static_mutual_chap_username,
            static_mutual_chap_password=iscsi_boot_policy_static_mutual_chap_password,
            static_initiator_ip_source=iscsi_boot_policy_static_initiator_ip_source,
            static_initiator_ip_source_pool_ip_pool_name=deployment_tool_iscsi_boot_policy_static_initiator_ip_source_pool_ip_pool_name,
            static_initiator_ip_source_static_ip_address=iscsi_boot_policy_static_initiator_ip_source_static_ip_address,
            static_initiator_ip_source_static_subnet_mask=iscsi_boot_policy_static_initiator_ip_source_static_subnet_mask,
            static_initiator_ip_source_static_default_gateway=iscsi_boot_policy_static_initiator_ip_source_static_default_gateway,
            static_initiator_ip_source_static_primary_dns=iscsi_boot_policy_static_initiator_ip_source_static_primary_dns,
            static_initiator_ip_source_static_secondary_dns=iscsi_boot_policy_static_initiator_ip_source_static_secondary_dns,
            policy_description=iscsi_boot_policy_description,
            organization=ucs_server_profile_organization,
            tags=iscsi_boot_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the usNIC Ethernet Adapter Policy in Intersight
    if deploy_usnic_ethernet_adapter_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_usnic_adapter_policy_name = f"{deployment_name_prefix}{usnic_adapter_policy_name}{deployment_name_suffix}"
        ethernet_adapter_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_usnic_adapter_policy_name,
            ethernet_adapter_default_configuration=usnic_adapter_policy_ethernet_adapter_default_configuration,
            enable_virtual_extensible_lan=usnic_adapter_policy_enable_virtual_extensible_lan,
            enable_network_virtualization_using_gre=usnic_adapter_policy_enable_network_virtualization_using_gre,
            enable_accelerated_receive_flow_steering=usnic_adapter_policy_enable_accelerated_receive_flow_steering,
            enable_precision_time_protocol=usnic_adapter_policy_enable_precision_time_protocol,
            enable_advanced_filter=usnic_adapter_policy_enable_advanced_filter,
            enable_interrupt_scaling=usnic_adapter_policy_enable_interrupt_scaling,
            enable_geneve_offload=usnic_adapter_policy_enable_geneve_offload,
            enable_rdma_over_converged_ethernet=usnic_adapter_policy_enable_rdma_over_converged_ethernet,
            interrupts=usnic_adapter_policy_interrupts,
            interrupt_mode=usnic_adapter_policy_interrupt_mode,
            interrupt_timer=usnic_adapter_policy_interrupt_timer,
            interrupt_coalescing_type=usnic_adapter_policy_interrupt_coalescing_type,
            receive_queue_count=usnic_adapter_policy_receive_queue_count,
            receive_ring_size=usnic_adapter_policy_receive_ring_size,
            transmit_queue_count=usnic_adapter_policy_transmit_queue_count,
            transmit_ring_size=usnic_adapter_policy_transmit_ring_size,
            completion_queue_count=usnic_adapter_policy_completion_queue_count,
            completion_ring_size=usnic_adapter_policy_completion_ring_size,
            uplink_failback_timeout=usnic_adapter_policy_uplink_failback_timeout,
            enable_tx_checksum_offload=usnic_adapter_policy_enable_tx_checksum_offload,
            enable_rx_checksum_offload=usnic_adapter_policy_enable_rx_checksum_offload,
            enable_large_send_offload=usnic_adapter_policy_enable_large_send_offload,
            enable_large_receive_offload=usnic_adapter_policy_enable_large_receive_offload,
            enable_receive_side_scaling=usnic_adapter_policy_enable_receive_side_scaling,
            enable_ipv4_hash=usnic_adapter_policy_enable_ipv4_hash,
            enable_ipv6_extensions_hash=usnic_adapter_policy_enable_ipv6_extensions_hash,
            enable_ipv6_hash=usnic_adapter_policy_enable_ipv6_hash,
            enable_tcp_and_ipv4_hash=usnic_adapter_policy_enable_tcp_and_ipv4_hash,
            enable_tcp_and_ipv6_extensions_hash=usnic_adapter_policy_enable_tcp_and_ipv6_extensions_hash,
            enable_tcp_and_ipv6_hash=usnic_adapter_policy_enable_tcp_and_ipv6_hash,
            enable_udp_and_ipv4_hash=usnic_adapter_policy_enable_udp_and_ipv4_hash,
            enable_udp_and_ipv6_hash=usnic_adapter_policy_enable_udp_and_ipv6_hash,
            roce_class_of_service=usnic_adapter_policy_roce_class_of_service,
            roce_memory_regions=usnic_adapter_policy_roce_memory_regions,
            roce_queue_pairs=usnic_adapter_policy_roce_queue_pairs,
            roce_resource_groups=usnic_adapter_policy_roce_resource_groups,
            roce_version=usnic_adapter_policy_roce_version,
            policy_description=usnic_adapter_policy_description,
            organization=ucs_server_profile_organization,
            tags=usnic_adapter_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the VMMQ Ethernet Adapter Policy in Intersight
    if deploy_vmmq_ethernet_adapter_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_vmmq_adapter_policy_name = f"{deployment_name_prefix}{vmmq_adapter_policy_name}{deployment_name_suffix}"
        ethernet_adapter_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_vmmq_adapter_policy_name,
            ethernet_adapter_default_configuration=vmmq_adapter_policy_ethernet_adapter_default_configuration,
            enable_virtual_extensible_lan=vmmq_adapter_policy_enable_virtual_extensible_lan,
            enable_network_virtualization_using_gre=vmmq_adapter_policy_enable_network_virtualization_using_gre,
            enable_accelerated_receive_flow_steering=vmmq_adapter_policy_enable_accelerated_receive_flow_steering,
            enable_precision_time_protocol=vmmq_adapter_policy_enable_precision_time_protocol,
            enable_advanced_filter=vmmq_adapter_policy_enable_advanced_filter,
            enable_interrupt_scaling=vmmq_adapter_policy_enable_interrupt_scaling,
            enable_geneve_offload=vmmq_adapter_policy_enable_geneve_offload,
            enable_rdma_over_converged_ethernet=vmmq_adapter_policy_enable_rdma_over_converged_ethernet,
            interrupts=vmmq_adapter_policy_interrupts,
            interrupt_mode=vmmq_adapter_policy_interrupt_mode,
            interrupt_timer=vmmq_adapter_policy_interrupt_timer,
            interrupt_coalescing_type=vmmq_adapter_policy_interrupt_coalescing_type,
            receive_queue_count=vmmq_adapter_policy_receive_queue_count,
            receive_ring_size=vmmq_adapter_policy_receive_ring_size,
            transmit_queue_count=vmmq_adapter_policy_transmit_queue_count,
            transmit_ring_size=vmmq_adapter_policy_transmit_ring_size,
            completion_queue_count=vmmq_adapter_policy_completion_queue_count,
            completion_ring_size=vmmq_adapter_policy_completion_ring_size,
            uplink_failback_timeout=vmmq_adapter_policy_uplink_failback_timeout,
            enable_tx_checksum_offload=vmmq_adapter_policy_enable_tx_checksum_offload,
            enable_rx_checksum_offload=vmmq_adapter_policy_enable_rx_checksum_offload,
            enable_large_send_offload=vmmq_adapter_policy_enable_large_send_offload,
            enable_large_receive_offload=vmmq_adapter_policy_enable_large_receive_offload,
            enable_receive_side_scaling=vmmq_adapter_policy_enable_receive_side_scaling,
            enable_ipv4_hash=vmmq_adapter_policy_enable_ipv4_hash,
            enable_ipv6_extensions_hash=vmmq_adapter_policy_enable_ipv6_extensions_hash,
            enable_ipv6_hash=vmmq_adapter_policy_enable_ipv6_hash,
            enable_tcp_and_ipv4_hash=vmmq_adapter_policy_enable_tcp_and_ipv4_hash,
            enable_tcp_and_ipv6_extensions_hash=vmmq_adapter_policy_enable_tcp_and_ipv6_extensions_hash,
            enable_tcp_and_ipv6_hash=vmmq_adapter_policy_enable_tcp_and_ipv6_hash,
            enable_udp_and_ipv4_hash=vmmq_adapter_policy_enable_udp_and_ipv4_hash,
            enable_udp_and_ipv6_hash=vmmq_adapter_policy_enable_udp_and_ipv6_hash,
            roce_class_of_service=vmmq_adapter_policy_roce_class_of_service,
            roce_memory_regions=vmmq_adapter_policy_roce_memory_regions,
            roce_queue_pairs=vmmq_adapter_policy_roce_queue_pairs,
            roce_resource_groups=vmmq_adapter_policy_roce_resource_groups,
            roce_version=vmmq_adapter_policy_roce_version,
            policy_description=vmmq_adapter_policy_description,
            organization=ucs_server_profile_organization,
            tags=vmmq_adapter_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the LAN Connectivity Policy in Intersight
    if deploy_lan_connectivity_policy:
        # Establish default pre-requisite and support Pool and/or Policy names for LAN Connectivity Policies
        ## IQN Pool
        if lan_connectivity_policy_iqn_pool_name == iqn_pool_name:
            deployment_tool_lan_connectivity_policy_iqn_pool_name = deployment_tool_iqn_pool_name
        else:
            deployment_tool_lan_connectivity_policy_iqn_pool_name = lan_connectivity_policy_iqn_pool_name
            
        ## MAC Address Pool
        if custom_default_mac_address_pool_name:
            lan_connectivity_policy_default_mac_address_pool_name = custom_default_mac_address_pool_name
        else:
            lan_connectivity_policy_default_mac_address_pool_name = deployment_tool_mac_pool_name
            
        ## Ethernet Network Group Policy
        if custom_default_ethernet_network_group_policy_name:
            lan_connectivity_policy_default_ethernet_network_group_policy_name = custom_default_ethernet_network_group_policy_name
        else:
            lan_connectivity_policy_default_ethernet_network_group_policy_name = deployment_tool_ethernet_network_group_policy_name
            
        ## Ethernet Network Control Policy
        if custom_default_ethernet_network_control_policy_name:
            lan_connectivity_policy_default_ethernet_network_control_policy_name = custom_default_ethernet_network_control_policy_name
        else:
            lan_connectivity_policy_default_ethernet_network_control_policy_name = deployment_tool_ethernet_network_control_policy_name
            
        ## Ethernet QoS Policy
        if custom_default_ethernet_qos_policy_name:
            lan_connectivity_policy_default_ethernet_qos_policy_name = custom_default_ethernet_qos_policy_name
        else:
            lan_connectivity_policy_default_ethernet_qos_policy_name = deployment_tool_ethernet_qos_policy_name
            
        ## Ethernet Adapter Policy
        if custom_default_ethernet_adapter_policy_name:
            lan_connectivity_policy_default_ethernet_adapter_policy_name = custom_default_ethernet_adapter_policy_name
        else:
            lan_connectivity_policy_default_ethernet_adapter_policy_name = deployment_tool_ethernet_adapter_policy_name
            
        ## iSCSI Boot Policy
        if custom_default_iscsi_boot_policy_name:
            lan_connectivity_policy_default_iscsi_boot_policy_name = custom_default_iscsi_boot_policy_name
        else:
            lan_connectivity_policy_default_iscsi_boot_policy_name = deployment_tool_iscsi_boot_policy_name
            
        ## usNIC Adapter Policy
        if custom_default_usnic_adapter_policy_name:
            lan_connectivity_policy_default_usnic_adapter_policy_name = custom_default_usnic_adapter_policy_name
        else:
            lan_connectivity_policy_default_usnic_adapter_policy_name = deployment_tool_usnic_adapter_policy_name
            
        ## VMMQ Adapter Policy
        if custom_default_vmmq_adapter_policy_name:
            lan_connectivity_policy_default_vmmq_adapter_policy_name = custom_default_vmmq_adapter_policy_name
        else:
            lan_connectivity_policy_default_vmmq_adapter_policy_name = deployment_tool_vmmq_adapter_policy_name
            
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_lan_connectivity_policy_name = f"{deployment_name_prefix}{lan_connectivity_policy_name}{deployment_name_suffix}"
        lan_connectivity_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_lan_connectivity_policy_name,
            enable_azure_stack_host_qos=lan_connectivity_policy_enable_azure_stack_host_qos,
            iqn_assignment_type=lan_connectivity_policy_iqn_assignment_type,
            iqn_pool_name=deployment_tool_lan_connectivity_policy_iqn_pool_name,
            iqn_static_identifier=lan_connectivity_policy_iqn_static_identifier,
            vnic_placement_mode=lan_connectivity_policy_vnic_placement_mode,
            ucs_server_type=lan_connectivity_policy_ucs_server_type,
            vnic_list=lan_connectivity_policy_vnic_list,
            default_mac_address_pool_name=lan_connectivity_policy_default_mac_address_pool_name,
            default_ethernet_network_group_policy_name=lan_connectivity_policy_default_ethernet_network_group_policy_name,
            default_ethernet_network_control_policy_name=lan_connectivity_policy_default_ethernet_network_control_policy_name,
            default_ethernet_qos_policy_name=lan_connectivity_policy_default_ethernet_qos_policy_name,
            default_ethernet_adapter_policy_name=lan_connectivity_policy_default_ethernet_adapter_policy_name,
            default_iscsi_boot_policy_name=lan_connectivity_policy_default_iscsi_boot_policy_name,
            default_usnic_adapter_policy_name=lan_connectivity_policy_default_usnic_adapter_policy_name,
            default_vmmq_adapter_policy_name=lan_connectivity_policy_default_vmmq_adapter_policy_name,
            policy_description=lan_connectivity_policy_description,
            organization=ucs_server_profile_organization,
            tags=lan_connectivity_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Create the WWNN Pool in Intersight
    if deploy_wwnn_pool:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_wwnn_pool_name = f"{deployment_name_prefix}{wwnn_pool_name}{deployment_name_suffix}"
        wwnn_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_wwnn_pool_name,
            wwnn_blocks_list=wwnn_pool_wwnn_blocks_list,
            pool_description=wwnn_pool_description,
            pool_assignment_order=wwnn_pool_wwnn_assignment_order,
            organization=ucs_server_profile_organization,
            tags=wwnn_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the WWPN Pool in Intersight
    if deploy_wwpn_pool:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_wwpn_pool_name = f"{deployment_name_prefix}{wwpn_pool_name}{deployment_name_suffix}"
        wwpn_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_wwpn_pool_name,
            wwpn_blocks_list=wwpn_pool_wwpn_blocks_list,
            pool_description=wwpn_pool_description,
            pool_assignment_order=wwpn_pool_wwpn_assignment_order,
            organization=ucs_server_profile_organization,
            tags=wwpn_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Fibre Channel Network Policy in Intersight
    if deploy_fibre_channel_network_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_fibre_channel_network_policy_name = f"{deployment_name_prefix}{fibre_channel_network_policy_name}{deployment_name_suffix}"
        fibre_channel_network_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_fibre_channel_network_policy_name,
            default_vlan=fibre_channel_network_policy_default_vlan,
            vsan_id=fibre_channel_network_policy_vsan_id,
            policy_description=fibre_channel_network_policy_description,
            organization=ucs_server_profile_organization,
            tags=fibre_channel_network_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Fibre Channel QoS Policy in Intersight
    if deploy_fibre_channel_qos_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_fibre_channel_qos_policy_name = f"{deployment_name_prefix}{fibre_channel_qos_policy_name}{deployment_name_suffix}"
        fibre_channel_qos_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_fibre_channel_qos_policy_name,
            fibre_channel_qos_rate_limit_in_mbps=fibre_channel_qos_policy_fibre_channel_qos_rate_limit_in_mbps,
            fibre_channel_qos_maximum_data_field_size_in_bytes=fibre_channel_qos_policy_fibre_channel_qos_maximum_data_field_size_in_bytes,
            fibre_channel_qos_cos=fibre_channel_qos_policy_fibre_channel_qos_cos,
            fibre_channel_qos_burst=fibre_channel_qos_policy_fibre_channel_qos_burst,
            policy_description=fibre_channel_qos_policy_description,
            organization=ucs_server_profile_organization,
            tags=fibre_channel_qos_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Fibre Channel Adapter Policy in Intersight
    if deploy_fibre_channel_adapter_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_fibre_channel_adapter_policy_name = f"{deployment_name_prefix}{fibre_channel_adapter_policy_name}{deployment_name_suffix}"
        fibre_channel_adapter_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_fibre_channel_adapter_policy_name,
            fibre_channel_adapter_default_configuration=fibre_channel_adapter_policy_fibre_channel_adapter_default_configuration,
            fcp_error_recovery=fibre_channel_adapter_policy_fcp_error_recovery,
            port_down_timeout_in_ms=fibre_channel_adapter_policy_port_down_timeout_in_ms,
            link_down_timeout_in_ms=fibre_channel_adapter_policy_link_down_timeout_in_ms,
            io_retry_timeout_in_seconds=fibre_channel_adapter_policy_io_retry_timeout_in_seconds,
            port_down_io_retry_in_ms=fibre_channel_adapter_policy_port_down_io_retry_in_ms,
            error_detection_timeout=fibre_channel_adapter_policy_error_detection_timeout,
            resource_allocation_timeout=fibre_channel_adapter_policy_resource_allocation_timeout,
            flogi_retries=fibre_channel_adapter_policy_flogi_retries,
            flogi_timeout_in_ms=fibre_channel_adapter_policy_flogi_timeout_in_ms,
            plogi_retries=fibre_channel_adapter_policy_plogi_retries,
            plogi_timeout_in_ms=fibre_channel_adapter_policy_plogi_timeout_in_ms,
            interrupt_mode=fibre_channel_adapter_policy_interrupt_mode,
            io_throttle_count=fibre_channel_adapter_policy_io_throttle_count,
            maximum_luns_per_target=fibre_channel_adapter_policy_maximum_luns_per_target,
            lun_queue_depth=fibre_channel_adapter_policy_lun_queue_depth,
            receive_ring_size=fibre_channel_adapter_policy_receive_ring_size,
            transmit_ring_size=fibre_channel_adapter_policy_transmit_ring_size,
            scsi_io_queues=fibre_channel_adapter_policy_scsi_io_queues,
            scsi_io_ring_size=fibre_channel_adapter_policy_scsi_io_ring_size,
            policy_description=fibre_channel_adapter_policy_description,
            organization=ucs_server_profile_organization,
            tags=fibre_channel_adapter_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the FC Zone Policy in Intersight
    if deploy_fc_zone_policy:
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_fc_zone_policy_name = f"{deployment_name_prefix}{fc_zone_policy_name}{deployment_name_suffix}"
        fc_zone_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_fc_zone_policy_name,
            fc_target_zoning_type=fc_zone_policy_fc_target_zoning_type,
            fc_zone_target_list=fc_zone_policy_fc_zone_target_list,
            policy_description=fc_zone_policy_description,
            organization=ucs_server_profile_organization,
            tags=fc_zone_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the SAN Connectivity Policy in Intersight
    if deploy_san_connectivity_policy:
        # Establish default pre-requisite and support Pool and/or Policy names for SAN Connectivity Policies
        ## WWNN Pool
        if san_connectivity_policy_wwnn_pool_name == wwnn_pool_name:
            deployment_tool_san_connectivity_policy_wwnn_pool_name = deployment_tool_wwnn_pool_name
        else:
            deployment_tool_san_connectivity_policy_wwnn_pool_name = san_connectivity_policy_wwnn_pool_name
            
        ## WWPN Pool
        if custom_default_wwpn_address_pool_name:
            san_connectivity_policy_default_wwpn_address_pool_name = custom_default_wwpn_address_pool_name
        else:
            san_connectivity_policy_default_wwpn_address_pool_name = deployment_tool_wwpn_pool_name
            
        ## Fibre Channel Network Policy
        if custom_default_fibre_channel_network_policy_name:
            san_connectivity_policy_default_fibre_channel_network_policy_name = custom_default_fibre_channel_network_policy_name
        else:
            san_connectivity_policy_default_fibre_channel_network_policy_name = deployment_tool_fibre_channel_network_policy_name
            
        ## Fibre Channel QoS Policy
        if custom_default_fibre_channel_qos_policy_name:
            san_connectivity_policy_default_fibre_channel_qos_policy_name = custom_default_fibre_channel_qos_policy_name
        else:
            san_connectivity_policy_default_fibre_channel_qos_policy_name = deployment_tool_fibre_channel_qos_policy_name
            
        ## Fibre Channel Adapter Policy
        if custom_default_fibre_channel_adapter_policy_name:
            san_connectivity_policy_default_fibre_channel_adapter_policy_name = custom_default_fibre_channel_adapter_policy_name
        else:
            san_connectivity_policy_default_fibre_channel_adapter_policy_name = deployment_tool_fibre_channel_adapter_policy_name
            
        ## FC Zone Policy
        if custom_default_fc_zone_policy_names:
            san_connectivity_policy_default_fc_zone_policy_names = custom_default_fc_zone_policy_names
        else:
            san_connectivity_policy_default_fc_zone_policy_names = deployment_tool_fc_zone_policy_name
            
        # Update Policy name with UCS Server Deployment Tool provided prefix and/or suffix
        deployment_tool_san_connectivity_policy_name = f"{deployment_name_prefix}{san_connectivity_policy_name}{deployment_name_suffix}"
        san_connectivity_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_san_connectivity_policy_name,
            wwnn_address_type=san_connectivity_policy_wwnn_address_type,
            wwnn_pool_name=deployment_tool_san_connectivity_policy_wwnn_pool_name,
            wwnn_static_address=san_connectivity_policy_wwnn_static_address,
            vhba_placement_mode=san_connectivity_policy_vhba_placement_mode,
            ucs_server_type=san_connectivity_policy_ucs_server_type,
            vhba_list=san_connectivity_policy_vhba_list,
            default_wwpn_address_pool_name=san_connectivity_policy_default_wwpn_address_pool_name,
            default_fibre_channel_network_policy_name=san_connectivity_policy_default_fibre_channel_network_policy_name,
            default_fibre_channel_qos_policy_name=san_connectivity_policy_default_fibre_channel_qos_policy_name,
            default_fibre_channel_adapter_policy_name=san_connectivity_policy_default_fibre_channel_adapter_policy_name,
            default_fc_zone_policy_names=san_connectivity_policy_default_fc_zone_policy_names,
            policy_description=san_connectivity_policy_description,
            organization=ucs_server_profile_organization,
            tags=san_connectivity_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_server_profile_names=deployment_tool_ucs_server_profile_names,
            ucs_server_profile_template_names=deployment_tool_ucs_server_profile_template_name
            )

    # Assign the UCS Server Profile to an Intersight Target
    for ucs_server_profile_config in ucs_server_profile_names_and_assignments:
        if ucs_server_profile_config.get('Server Profile Name') and ucs_server_profile_config.get("Assign Server Profile"):
            # Establish default pre-requisite and support Pool and/or Policy names for UCS Server Profile(s)
            ## Resource Pool
            if ucs_server_profile_config.get("Server Resource Pool") == resource_pool_name:
                deployment_tool_ucs_server_profile_resource_pool_name = deployment_tool_resource_pool_name
            else:
                deployment_tool_ucs_server_profile_resource_pool_name = ucs_server_profile_config.get("Server Resource Pool")

            # Update UCS Server Profile name with UCS Server Deployment Tool provided prefix and/or suffix
            deployment_tool_ucs_server_profile_name = f"{deployment_name_prefix}{ucs_server_profile_config['Server Profile Name']}{deployment_name_suffix}"            
            assign_and_deploy_ucs_server_profile(
                intersight_api_key_id=None,
                intersight_api_key=None,
                ucs_server_profile_name=deployment_tool_ucs_server_profile_name,
                resource_pool_name=deployment_tool_ucs_server_profile_resource_pool_name,
                ucs_server_assignment_identifier=ucs_server_profile_config.get("Server Assignment Identifier"),
                ucs_server_form_factor=ucs_server_profile_ucs_server_form_factor,
                ucs_server_type=ucs_server_profile_ucs_server_type,
                assign_ucs_server_profile=True,
                deploy_ucs_server_profile=False,
                deployment_start_delay=0,
                ucs_server_profile_organization=ucs_server_profile_organization,
                preconfigured_api_client=main_intersight_api_client
                )

    # Deploy the UCS Server Profile to an Intersight Target
    if ucs_server_profile_deployment_start_delay:
        print("\nA UCS Server Profile Deployment start delay of "
              f"{ucs_server_profile_deployment_start_delay} seconds has been "
              "set, please wait...\n")
        delay_timer(ucs_server_profile_deployment_start_delay)
        print("\n")
    for ucs_server_profile_config in ucs_server_profile_names_and_assignments:
        if ucs_server_profile_config.get('Server Profile Name') and ucs_server_profile_config.get("Assign Server Profile"):
            # Update UCS Server Profile name with UCS Server Deployment Tool provided prefix and/or suffix
            deployment_tool_ucs_server_profile_name = f"{deployment_name_prefix}{ucs_server_profile_config['Server Profile Name']}{deployment_name_suffix}"            
            assign_and_deploy_ucs_server_profile(
                intersight_api_key_id=None,
                intersight_api_key=None,
                ucs_server_profile_name=deployment_tool_ucs_server_profile_name,
                resource_pool_name="",
                ucs_server_assignment_identifier="",
                ucs_server_form_factor=ucs_server_profile_ucs_server_form_factor,
                ucs_server_type=ucs_server_profile_ucs_server_type,
                assign_ucs_server_profile=False,
                deploy_ucs_server_profile=ucs_server_profile_config.get("Deploy Server Profile", False),
                deployment_start_delay=0,
                ucs_server_profile_organization=ucs_server_profile_organization,
                preconfigured_api_client=main_intersight_api_client
                )

    # UCS Server Deployment Tool completion
    print(f"\nThe {deployment_tool_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the UCS Server Deployment Tool for Cisco Intersight
sys.exit(0)
