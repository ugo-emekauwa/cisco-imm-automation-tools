"""
UCS Chassis Deployment Tool for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The UCS Chassis Deployment Tool for Cisco Intersight automates the
         comprehensive build and deployment of UCS Chassis Profiles, Policies
         and Pools for Cisco IMM (Intersight Managed Mode).
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


import sys
import traceback
import json
import copy
import intersight
import re
import time
import base64
import urllib3

########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
UCS Chassis Profile on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######


#----------------------------------Section 01----------------------------------#

# GENERAL DEPLOYMENT CONFIGURATION

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

# Global Deployment Name Settings (Optional - These settings will attach a global prefix or suffix to the names of the created UCS Chassis Profile, Policies, and Pools)
deployment_name_prefix = ""
## If a deployment name suffix is desired, change the value of the following deployment_name_suffix variable, for example: deployment_name_suffix = "-1"
## A timestamp can also be used as a suffix, for example: deployment_name_suffix = f"_{int(time.time())}"
deployment_name_suffix = ""


#----------------------------------Section 02----------------------------------#

# UCS CHASSIS PROFILE CONFIGURATION

# General Settings
ucs_chassis_profile_description = "A Cisco Intersight UCS Chassis Profile generated by the UCS Chassis Deployment Tool."
ucs_chassis_profile_organization = "default"
ucs_chassis_profile_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ucs_chassis_profile_tags dictionary if no tags are needed, for example: ucs_chassis_profile_tags = {}

# UCS Chassis Assignment Settings
## NOTE - For the "Chassis Assignment Identifier" key below, the accepted values are the Chassis serial, name, model, or PID (product ID). This information can be found in Intersight, if needed.
## If there are Chassis with duplicate names, models, or PIDs, please use the serial to ensure the correct Chassis is selected.
## Here is an example using the Chassis serial: "Chassis Assignment Identifier": "FOX1337G777"
## Here is an example using the Chassis name: "Chassis Assignment Identifier": "UCS-IMM-Pod-1"
## Here is an example using the Chassis model: "Chassis Assignment Identifier": "N20-C6508"
## Here is an example using the Chassis PID: "Chassis Assignment Identifier": "N20-C6508"
## For the "Deploy Chassis Profile" key, setting to False will allow for only assignment of Chassis profiles to valid Chassis identifiers. Set to True for full deployment.
ucs_chassis_profile_names_and_assignments = [
    {"Chassis Profile Name": "UCS-Chassis-Profile-1", "Chassis Assignment Identifier": "UCS-IMM-Pod-1", "Deploy Chassis Profile": True},
    {"Chassis Profile Name": "UCS-Chassis-Profile-2", "Chassis Assignment Identifier": "", "Deploy Chassis Profile": False},
    {"Chassis Profile Name": "UCS-Chassis-Profile-3", "Chassis Assignment Identifier": "", "Deploy Chassis Profile": False},
    ]

# UCS Chassis Profile Policy and Pool Enablement
## NOTE - The following variables enable creation and deployment of the corresponding named Policy. To disable a specific Policy, change the value to False.
deploy_in_band_ip_pool = True
deploy_out_of_band_ip_pool = True
deploy_imc_access_policy = True
deploy_power_policy = True
deploy_snmp_policy = True
deploy_thermal_policy = True


#----------------------------------Section 03----------------------------------#

# IN-BAND IP POOL CONFIGURATION

# General Settings
in_band_ip_pool_name = "In-Band-IP-Pool-1"
in_band_ip_pool_description = "A Cisco Intersight IP Pool generated by the UCS Chassis Deployment Tool."
in_band_ip_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ip_pool_tags dictionary if no tags are needed, for example: ip_pool_tags = {}

# Pool Detail Settings
in_band_ip_pool_configure_ipv4_pool = True
in_band_ip_pool_ipv4_netmask = "255.255.255.0"
in_band_ip_pool_ipv4_gateway = "192.168.0.1"
in_band_ip_pool_ipv4_primary_dns = "192.168.133.1"
in_band_ip_pool_ipv4_secondary_dns = ""
in_band_ip_pool_configure_ipv6_pool = False
in_band_ip_pool_ipv6_prefix = 0
in_band_ip_pool_ipv6_gateway = ""
in_band_ip_pool_ipv6_primary_dns = ""
in_band_ip_pool_ipv6_secondary_dns = ""

## NOTE! - For the IP blocks lists, place each IP block dictionary in the list to match the desired order (first to last).
in_band_ip_pool_ipv4_blocks_list = [
    {"From": "192.168.0.20", "Size": 100},
    ]
in_band_ip_pool_ipv6_blocks_list = []

# Pool Default Settings (Change only if needed)
in_band_ip_pool_ip_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 04----------------------------------#

# OUT-OF-BAND IP POOL CONFIGURATION

# General Settings
out_of_band_ip_pool_name = "Out-Of-Band-IP-Pool-1"
out_of_band_ip_pool_description = "A Cisco Intersight IP Pool generated by the UCS Chassis Deployment Tool."
out_of_band_ip_pool_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ip_pool_tags dictionary if no tags are needed, for example: ip_pool_tags = {}

# Pool Detail Settings
out_of_band_ip_pool_configure_ipv4_pool = True
out_of_band_ip_pool_ipv4_netmask = "255.255.255.0"
out_of_band_ip_pool_ipv4_gateway = "192.168.0.1"
out_of_band_ip_pool_ipv4_primary_dns = "192.168.133.1"
out_of_band_ip_pool_ipv4_secondary_dns = ""
out_of_band_ip_pool_configure_ipv6_pool = False
out_of_band_ip_pool_ipv6_prefix = 0
out_of_band_ip_pool_ipv6_gateway = ""
out_of_band_ip_pool_ipv6_primary_dns = ""
out_of_band_ip_pool_ipv6_secondary_dns = ""

## NOTE! - For the IP blocks lists, place each IP block dictionary in the list to match the desired order (first to last).
out_of_band_ip_pool_ipv4_blocks_list = [
    {"From": "192.168.0.20", "Size": 100},
    ]
out_of_band_ip_pool_ipv6_blocks_list = []

# Pool Default Settings (Change only if needed)
out_of_band_ip_pool_ip_assignment_order = "default"       # Options: "default", "sequential"


#----------------------------------Section 05----------------------------------#

# IMC ACCESS POLICY CONFIGURATION

# General Settings
imc_access_policy_name = "IMC-Access-Policy-1"
imc_access_policy_description = "A Cisco Intersight IMC Access Policy generated by the UCS Chassis Deployment Tool."
imc_access_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the imc_access_policy_tags dictionary if no tags are needed, for example: imc_access_policy_tags = {}

# Policy Detail Settings
## NOTE - A pre-existing IP Pool must be provided when configuring in-band of out-of-band IMC Access.
## A default IP Pool can be provided using the in_band_ip_pool_name or out_of_band_ip_pool_name variables below.
imc_access_policy_enable_in_band_configuration = True
imc_access_policy_in_band_vlan_id = 5        # Options: 4 - 4093
imc_access_policy_enable_in_band_ipv4_configuration = True
imc_access_policy_enable_in_band_ipv6_configuration = False
imc_access_policy_in_band_ip_pool_name = "In-Band-IP-Pool-1"
imc_access_policy_enable_out_of_band_configuration = True
imc_access_policy_out_of_band_ip_pool_name = "Out-Of-Band-IP-Pool-1"


#----------------------------------Section 06----------------------------------#

# POWER POLICY CONFIGURATION

# General Settings
power_policy_name = "Power-Policy-1"
power_policy_description = "A Cisco Intersight Power Policy generated by the UCS Chassis Deployment Tool."
power_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the power_policy_tags dictionary if no tags are needed, for example: power_policy_tags = {}

# Policy Detail Settings
power_policy_power_profiling = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_power_priority = "Low"      # Options: "Low", "Medium", "High"
power_policy_power_restore = "Always Off"        # Options: "Always Off",  "Always On", "Last State"
power_policy_power_redundancy = "Grid"       # Options: "Grid", "Not Redundant", "N+1", "N+2"
power_policy_power_save_mode = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_dynamic_power_rebalancing = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_extended_power_capacity = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_power_allocation_in_watts = 0       # Options: 0 - 65535


#----------------------------------Section 07----------------------------------#

# SNMP POLICY CONFIGURATION

# General Settings
snmp_policy_name = "SNMP-Policy-1"
snmp_policy_description = "A Cisco Intersight SNMP Policy generated by the UCS Chassis Deployment Tool."
snmp_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the snmp_policy_tags dictionary if no tags are needed, for example: snmp_policy_tags = {}

# Policy Detail Settings
snmp_policy_enable_snmp = True
snmp_policy_v2c_features = True
snmp_policy_v3_features = True
snmp_policy_port = 161
snmp_policy_system_contact = "Administrator"
snmp_policy_system_location = "Datacenter 001"
snmp_policy_access_community_string = "demo_access_string"
snmp_policy_community_access = "Disabled"      # Options: "Disabled", "Limited", "Full"
snmp_policy_trap_community_string = "demo_trap_string"
snmp_policy_engine_input_id = "0123456789ABC"
snmp_policy_users_list = [
    {"Name": "demouser",
     "Security Level": "AuthPriv",
     "Auth Type": "SHA",
     "Auth Password": "C1sco12345",
     "Privacy Type": "AES",
     "Privacy Password": "C1sco12345"
     },
    ]
snmp_policy_trap_destinations_list = [
    {"Enable": True,
     "SNMP Version": "V3",
     "User": "demouser",
     "Trap Type": "Trap",
     "Destination Address": "192.168.0.101",
     "Port": 162
     },
    {"Enable": True,
     "SNMP Version": "V2",
     "Community String": "demo_trap_string",
     "Trap Type": "Trap",
     "Destination Address": "192.168.0.102",
     "Port": 162
     },
    ]


#----------------------------------Section 08----------------------------------#

# THERMAL POLICY CONFIGURATION

# General Settings
thermal_policy_name = "Thermal-Policy-1"
thermal_policy_description = "A Cisco Intersight Thermal Policy generated by the UCS Chassis Deployment Tool."
thermal_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the thermal_policy_tags dictionary if no tags are needed, for example: thermal_policy_tags = {}

# Policy Detail Settings
## Fan Control
thermal_policy_fan_control_mode = "Balanced"       # Options: "Balanced", "Low Power", "High Power", "Maximum Power", "Acoustic"


####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to convert a list of strings in string type format to list type format.
def string_to_list_maker(string_list,
                         remove_duplicate_elements_in_list=True
                         ):
    """This function converts a list of strings in string type format to list
    type format. The provided string should contain commas, semicolons, or
    spaces as the separator between strings. For each string in the list,
    leading and rear spaces will be removed. Duplicate strings in the list are
    removed by default.

    Args:
        string_list (str):
            A string containing an element or range of elements.

        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements are
            removed from the provided string list. The default value is True.

    Returns:
        A list of elements.   
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.

            separator (str):
                The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.   
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            provided_list (list): A list of elements to be separated.

            separator (str): The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.        
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element, separator)
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    staged_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list, " ")
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list, ",")
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list, ";")
    # Split provided list by hyphens.
    for post_semicolon_split_string_set in post_semicolon_split_list:
        staged_list.append(post_semicolon_split_string_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        final_list = list(set(staged_list))
    return final_list


# Establish base classes for configuring Intersight UCS Policies
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       organization=self.organization,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsChassisPolicy(UcsPolicy):
    """This class is used to configure a UCS Chassis Policy in Intersight that
    is logically directly attached to UCS Chassis through UCS
    Chassis Profiles.
    """
    object_type = "Directly Attached UCS Chassis Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_chassis_profile_names=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_chassis_profile_names = ucs_chassis_profile_names

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_chassis_profile_names}')"
            )

    def _attach_ucs_chassis_profile(self):
        """This is a function to attach Intersight UCS Chassis Profiles to an
        Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []        
        # Attach UCS Chassis Profile
        if self.ucs_chassis_profile_names:
            provided_ucs_chassis_profile_list = string_to_list_maker(self.ucs_chassis_profile_names)
            for provided_ucs_chassis_profile in provided_ucs_chassis_profile_list:                
                print("Attaching the UCS Chassis Profile named "
                      f"{provided_ucs_chassis_profile}...")
                # Get UCS Chassis Profile MOID
                ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                            intersight_api_key=None,
                                                                            object_name=provided_ucs_chassis_profile,
                                                                            intersight_api_path="chassis/Profiles?$top=1000",
                                                                            object_type="UCS Chassis Profile",
                                                                            organization=self.organization,
                                                                            preconfigured_api_client=self.api_client
                                                                            )
                # Update the API body with the appropriate Chassis Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_chassis_profile_moid,
                     "ObjectType": "chassis.Profile"}
                    )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Chassis Profile attached, if specified
        self._attach_ucs_chassis_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerAndChassisPolicy(UcsPolicy):
    """This class is used to configure a UCS Server and/or UCS Chassis Policy
    in Intersight that is logically directly attached to UCS Servers through
    UCS Server Profiles and/or UCS Chassis through UCS Chassis Profiles.
    """
    object_type = "Directly Attached UCS Server and Chassis Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_chassis_profile_names=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_names = ucs_server_profile_names
        self.ucs_chassis_profile_names = ucs_chassis_profile_names

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_chassis_profile_names}')"
            )

    def _attach_ucs_server_and_chassis_profiles(self):
        """This is a function to attach Intersight UCS Server Profiles and/or
        UCS Chassis Profiles to an Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []
        # Attach UCS Server Profile
        if self.ucs_server_profile_names:
            provided_ucs_server_profile_list = string_to_list_maker(self.ucs_server_profile_names)
            for provided_ucs_server_profile in provided_ucs_server_profile_list:
                print("Attaching the UCS Server Profile named "
                      f"{provided_ucs_server_profile}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_server_profile,
                                                                           intersight_api_path="server/Profiles?$top=1000",
                                                                           object_type="UCS Server Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_moid,
                     "ObjectType": "server.Profile"}
                    )
        # Attach UCS Chassis Profile
        if self.ucs_chassis_profile_names:
            provided_ucs_chassis_profile_list = string_to_list_maker(self.ucs_chassis_profile_names)
            for provided_ucs_chassis_profile in provided_ucs_chassis_profile_list:                
                print("Attaching the UCS Chassis Profile named "
                      f"{provided_ucs_chassis_profile}...")
                # Get UCS Chassis Profile MOID
                ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                            intersight_api_key=None,
                                                                            object_name=provided_ucs_chassis_profile,
                                                                            intersight_api_path="chassis/Profiles?$top=1000",
                                                                            object_type="UCS Chassis Profile",
                                                                            organization=self.organization,
                                                                            preconfigured_api_client=self.api_client
                                                                            )
                # Update the API body with the appropriate Chassis Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_chassis_profile_moid,
                     "ObjectType": "chassis.Profile"}
                    )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server and/or UCS Chassis Profile attached, if specified
        self._attach_ucs_server_and_chassis_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerChassisAndDomainPolicy(UcsPolicy):
    """This class is used to configure a UCS Server, UCS Chassis and/or
    UCS Domain Policy in Intersight that is logically directly attached to UCS
    Servers through UCS Server Profiles, UCS Chassis through UCS Chassis
    Profiles and/or UCS Fabric Interconnects through UCS Domain Profiles.
    """
    object_type = "Directly Attached UCS Server, Chassis and Domain Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_chassis_profile_names="",
                 ucs_domain_profile_names="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_names = ucs_server_profile_names
        self.ucs_chassis_profile_names = ucs_chassis_profile_names
        self.ucs_domain_profile_names = ucs_domain_profile_names
        self.fabric_interconnect = fabric_interconnect

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_chassis_profile_names}', "
            f"'{self.ucs_domain_profile_names}', "
            f"'{self.fabric_interconnect}')"
            )

    def _attach_ucs_server_chassis_and_domain_profiles(self):
        """This is a function to attach Intersight UCS Server, UCS Chassis
        and/or UCS Domain Profiles to an Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []
        # Attach UCS Server Profile
        if self.ucs_server_profile_names:
            provided_ucs_server_profile_list = string_to_list_maker(self.ucs_server_profile_names)
            for provided_ucs_server_profile in provided_ucs_server_profile_list:
                print("Attaching the UCS Server Profile named "
                      f"{provided_ucs_server_profile}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_server_profile,
                                                                           intersight_api_path="server/Profiles?$top=1000",
                                                                           object_type="UCS Server Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_moid,
                     "ObjectType": "server.Profile"}
                    )
        # Attach UCS Chassis Profile
        if self.ucs_chassis_profile_names:
            provided_ucs_chassis_profile_list = string_to_list_maker(self.ucs_chassis_profile_names)
            for provided_ucs_chassis_profile in provided_ucs_chassis_profile_list:
                print("Attaching the UCS Chassis Profile named "
                      f"{provided_ucs_chassis_profile}...")
                # Get UCS Chassis Profile MOID
                ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                            intersight_api_key=None,
                                                                            object_name=provided_ucs_chassis_profile,
                                                                            intersight_api_path="chassis/Profiles?$top=1000",
                                                                            object_type="UCS Chassis Profile",
                                                                            organization=self.organization,
                                                                            preconfigured_api_client=self.api_client
                                                                            )
                # Update the API body with the appropriate Chassis Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_chassis_profile_moid,
                     "ObjectType": "chassis.Profile"}
                    )
        # Attach UCS Domain Profile
        if self.ucs_domain_profile_names:
            provided_ucs_domain_profile_list = string_to_list_maker(self.ucs_domain_profile_names)
            for provided_ucs_domain_profile in provided_ucs_domain_profile_list:            
                print("Attaching the UCS Domain Profile named "
                      f"{provided_ucs_domain_profile}...")
                # Get UCS Domain Profile MOID
                ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_domain_profile,
                                                                           intersight_api_path="fabric/SwitchClusterProfiles?$top=1000",
                                                                           object_type="UCS Domain Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Get UCS Domain Profile object dictionary attributes
                ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                                         intersight_api_key=None,
                                                                         intersight_api_path="fabric/SwitchClusterProfiles",
                                                                         object_moid=ucs_domain_profile_moid,
                                                                         object_type="UCS Domain Profile",
                                                                         preconfigured_api_client=self.api_client
                                                                         )
                # Get Switch Profiles that are attached to the UCS Domain Profile
                ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
                if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
                    print("\nA configuration error has occurred!\n")
                    print("The provided UCS Domain Profile named "
                          f"{provided_ucs_domain_profile} is not configured with "
                          "two attached Switch Profiles.")
                    print("To proceed, two Switch Profiles must be attached to the "
                          "provided UCS Domain Profile.")
                    print("Please update the configuration of the provided UCS "
                          f"Domain Profile, then re-attempt execution.\n")
                    sys.exit(0)
                else:
                    fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
                    fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
                # Update the API body with the appropriate Switch Profile MOIDs based on selected Fabric Interconnects
                if self.fabric_interconnect not in ("AB", "BA", "A", "B"):
                    print("\nA configuration error has occurred!\n")
                    print("The provided UCS Domain Profile Fabric Interconnect "
                          "value of "
                          f"'{self.fabric_interconnect}' "
                          "is not supported.")
                    print("To proceed, the Fabric Interconnect value for the "
                          "UCS Domain Profile must be 'AB', 'A', or 'B'.")
                    print("Please update the configuration of the provided UCS "
                          "Domain Profile Fabric Interconnect, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                else:
                    if self.fabric_interconnect == "A":
                        print("The attachment will be made to Fabric Interconnect "
                              "A.")
                        self.intersight_api_body["Profiles"].append(
                            {"Moid": fabric_interconnect_a_switch_profile_moid,
                             "ObjectType": "fabric.SwitchProfile"}
                            )
                    elif self.fabric_interconnect == "B":
                        print("The attachment will be made to Fabric Interconnect "
                              "B.")
                        self.intersight_api_body["Profiles"].append(
                            {"Moid": fabric_interconnect_b_switch_profile_moid,
                             "ObjectType": "fabric.SwitchProfile"}
                            )
                    else:
                        print("The attachment will be made to Fabric Interconnects "
                              "A and B.")
                        self.intersight_api_body["Profiles"].extend(
                            [{"Moid": fabric_interconnect_a_switch_profile_moid,
                              "ObjectType": "fabric.SwitchProfile"},
                             {"Moid": fabric_interconnect_b_switch_profile_moid,
                              "ObjectType": "fabric.SwitchProfile"}
                             ]
                            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server, UCS Chassis and/or UCS Domain Profile attached, if specified
        self._attach_ucs_server_chassis_and_domain_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


# Establish classes and functions to make UCS Chassis Profile
class UcsChassisProfile:
    """This class is used to configure a UCS Chassis Profile in Intersight.
    """
    object_type = "UCS Chassis Profile"
    intersight_api_path = "chassis/Profiles"
    attributes_that_require_special_handling = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 ucs_chassis_profile_name,
                 ucs_chassis_profile_description="",
                 ucs_chassis_profile_organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.ucs_chassis_profile_name = ucs_chassis_profile_name
        self.ucs_chassis_profile_description = ucs_chassis_profile_description
        self.ucs_chassis_profile_organization = ucs_chassis_profile_organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.ucs_chassis_profile_name,
            "Description": self.ucs_chassis_profile_description,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.ucs_chassis_profile_name}', "
            f"'{self.ucs_chassis_profile_description}', "
            f"'{self.ucs_chassis_profile_organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.ucs_chassis_profile_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       organization=self.ucs_chassis_profile_organization,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        ucs_chassis_profile_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                intersight_api_key=None,
                                                                                object_name=self.ucs_chassis_profile_organization,
                                                                                intersight_api_path="organization/Organizations?$top=1000",
                                                                                object_type="Organization",
                                                                                preconfigured_api_client=self.api_client
                                                                                )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": ucs_chassis_profile_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.ucs_chassis_profile_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


def ucs_chassis_profile_maker(intersight_api_key_id,
                              intersight_api_key,
                              ucs_chassis_profile_name,
                              ucs_chassis_profile_description="",
                              ucs_chassis_profile_organization="default",
                              intersight_base_url="https://www.intersight.com/api/v1",
                              tags=None,
                              preconfigured_api_client=None
                              ):
    """This is a function used to make a UCS Chassis Profile on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_chassis_profile_name (str):
            The name of the UCS Chassis Profile to be created.
        ucs_chassis_profile_description (str):
            Optional; The description of the UCS Chassis Profile to be created.
            The default value is an empty string ("").
        ucs_chassis_profile_organization (str):
            Optional; The Intersight account organization of the UCS Chassis
            Profile. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            profile. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool, policy, or profile on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create UCS Chassis Profile object in Intersight
    builder(UcsChassisProfile(intersight_api_key_id=intersight_api_key_id,
                              intersight_api_key=intersight_api_key,
                              ucs_chassis_profile_name=ucs_chassis_profile_name,
                              ucs_chassis_profile_description=ucs_chassis_profile_description,
                              ucs_chassis_profile_organization=ucs_chassis_profile_organization,
                              intersight_base_url=intersight_base_url,
                              tags=tags,
                              preconfigured_api_client=preconfigured_api_client
                              ))


# Establish function to assign Chassis profile
def assign_and_deploy_ucs_chassis_profile(intersight_api_key_id,
                                          intersight_api_key,
                                          ucs_chassis_profile_name,
                                          ucs_chassis_assignment_identifier="",
                                          assign_ucs_chassis_profile=True,
                                          deploy_ucs_chassis_profile=False,
                                          ucs_chassis_profile_organization="default",
                                          intersight_base_url="https://www.intersight.com/api/v1",
                                          preconfigured_api_client=None
                                          ):
    """This is a function to assign and deploy a UCS Chassis Profile.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_chassis_profile_name (str):
            The name of the UCS Chassis Profile to be assigned and/or deployed.
        ucs_chassis_assignment_identifier (str):
            Optional; The identifier of the Chassis that the provided UCS
            Chassis Profile should be assigned to. The accepted values are the
            Chassis serial, name, model, or PID (product ID) in string format.
            The default value is an empty string (""). An empty string or None
            can be provided if no Chassis identifier is being set or the UCS
            Chassis Profile is already assigned.
        assign_ucs_chassis_profile (bool):
            Optional; This argument enables or disables the option to assign
            the provided UCS Chassis Profile to the provided Chassis.
            The default value is True.
        deploy_ucs_chassis_profile (bool):
            Optional; This argument enables or disables the option to deploy
            the provided UCS Chassis Profile to the provided Chassis or a
            previously assigned Chassis. The default value is False.
        ucs_chassis_profile_organization (str):
            Optional; The Intersight account organization of the UCS Chassis
            Profile. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def post_intersight_chassis_profile_update(chassis_profile_moid,
                                               chassis_profile_api_body
                                               ):
        """This is a function to update an Intersight Chassis Profile by
        performing a POST through the Intersight API.

        Args:
            chassis_profile_moid (str):
                The Intersight MOID of the UCS Chassis Profile to be updated
                on Intersight.
            chassis_profile_api_body (dict):
                The updated UCS Chassis Profile Intersight API body.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/chassis/Profiles/{chassis_profile_moid}"
        try:
            api_client.call_api(resource_path=full_intersight_api_path,
                                method="POST",
                                body=chassis_profile_api_body,
                                auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                )
            print("The configuration of the UCS Chassis Profile has been "
                  "updated.")
            print("Any accompanying Intersight Requests will be initiated.")
            return "The POST method was successful."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("Unable to update the UCS Chassis Profile.")
            print("The Intersight API resource path for the UCS Chassis "
                  f"Profile is '{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."
    
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Get UCS Chassis Profile MOID
    ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                intersight_api_key=None,
                                                                object_name=ucs_chassis_profile_name,
                                                                intersight_api_path="chassis/Profiles?$top=1000",
                                                                object_type="UCS Chassis Profile",
                                                                organization=ucs_chassis_profile_organization,
                                                                preconfigured_api_client=api_client
                                                                )
    # Get UCS Chassis Profile object dictionary attributes
    ucs_chassis_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                              intersight_api_key=None,
                                                              intersight_api_path="chassis/Profiles",
                                                              object_moid=ucs_chassis_profile_moid,
                                                              object_type="UCS Chassis Profile",
                                                              preconfigured_api_client=api_client
                                                              )
    # Assign UCS Chassis Profile
    if assign_ucs_chassis_profile:
        print("\nAssigning the UCS Chassis Profile named "
              f"{ucs_chassis_profile_name}...")
        print("The provided Chassis identifier for assignment is "
              f"'{ucs_chassis_assignment_identifier}'.")
        # Convert provided Chassis Identifier
        if ucs_chassis_assignment_identifier:
            provided_chassis_identifiers = string_to_list_maker(ucs_chassis_assignment_identifier)
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the UCS Chassis "
                  "Profile to a Chassis in Intersight.")
            print("In order to assign the provided UCS Chassis Profile, a "
                  "Chassis identifier must also be provided.")
            print("Please check the value provided for the "
                  "Chassis identifier.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)            
        # Find provided Chassis
        retrieved_intersight_chassis = get_intersight_objects(
            intersight_api_key_id=None,
            intersight_api_key=None,
            intersight_api_path=f"equipment/Chasses?$top=1000&$filter=ManagementMode%20eq%20%27Intersight%27",
            object_type="Chassis",
            preconfigured_api_client=api_client
            )
        if retrieved_intersight_chassis.get("Results"):
            matching_intersight_chassis = None
            for intersight_chassis in retrieved_intersight_chassis.get("Results"):
                chassis_serial = intersight_chassis.get("Serial", "")
                chassis_name = intersight_chassis.get("Name", "")
                chassis_model = intersight_chassis.get("Model", "")
                chassis_pid = intersight_chassis.get("Pid", "")
                for chassis_identifier in provided_chassis_identifiers:
                    if chassis_identifier in [chassis_serial,
                                              chassis_name,
                                              chassis_model,
                                              chassis_pid
                                              ]:
                        matching_intersight_chassis = intersight_chassis
                        break
                if matching_intersight_chassis:
                    break
            else:
                print("\nA configuration error has occurred!\n")
                print("There was an issue assigning the UCS Chassis Profile to "
                      "a Chassis in Intersight.")
                print("A Chassis with the provided identifier of "
                      f"'{ucs_chassis_assignment_identifier}' was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      "Chassis identifier is present.")
                print("If any associated Intersight Target is missing, such as "
                      "an Intersight Managed Domain through an attached Fabric "
                      "Interconnect pair, claiming it first may be required.")
                print(f"Once the issue has been resolved, re-attempt "
                      "execution.\n")
                sys.exit(0)
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the UCS Chassis Profile to a "
                  "Chassis in Intersight.")
            print(f"The Chassis with the provided identifier of "
                  f"'{ucs_chassis_assignment_identifier}' was not found.")
            print("No Chassis are currently available in the "
                  f"Intersight account named {intersight_account_name}.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed Chassis is "
                  "present.")
            print("If any associated Intersight Target is missing, such as an "
                  "Intersight Managed Domain through an attached Fabric "
                  "Interconnect pair, claiming it first may be required.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
        # Log name of found matching Chassis
        matching_intersight_chassis_name = matching_intersight_chassis.get("Name")
        print(f"A matching Chassis named {matching_intersight_chassis_name} "
              "has been found for assignment.")
        # Assign the UCS Chassis Profile
        print("Assigning the UCS Chassis Profile...")
        matching_intersight_chassis_moid = matching_intersight_chassis.get("Moid")
        ucs_chassis_profile_assignment_api_body = {
            "AssignedChassis": {"Moid": matching_intersight_chassis_moid}
            }
        post_intersight_chassis_profile_update(
            chassis_profile_moid=ucs_chassis_profile_moid,
            chassis_profile_api_body=ucs_chassis_profile_assignment_api_body
            )
    # Deploy UCS Chassis Profile
    if deploy_ucs_chassis_profile:
        print("\nDeploying the UCS Chassis Profile named "
              f"{ucs_chassis_profile_name}...")
        # Deploy the UCS Chassis Profile
        print("Deploying the UCS Chassis Profile...")
        ucs_chassis_profile_deployment_api_body = {
            "Action": "Deploy"
            }
        post_intersight_chassis_profile_update(
            chassis_profile_moid=ucs_chassis_profile_moid,
            chassis_profile_api_body=ucs_chassis_profile_deployment_api_body
            )


# Establish classes and functions to make IP Pool
class IpPool:
    """This class is used to configure an IP Pool in Intersight.
    """
    object_type = "IP Pool"
    intersight_api_path = "ippool/Pools"
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = [
        {"VariableName": "pool_assignment_order",
         "Description": "IP Pool Assignment Order",
         "AttributeName": "AssignmentOrder",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "default"
              },
             {"FrontEndValue": "Sequential",
              "BackEndValue": "sequential"
              }
             ]
         }
        ]
    block_types = [
        {"BlockType": "ippool.IpV4Block",
         "BlocksListVariableName": "ipv4_blocks_list",
         "Description": "IPv4 Block",
         "AttributeName": "IpV4Blocks"
         },
        {"BlockType": "ippool.IpV6Block",
         "BlocksListVariableName": "ipv6_blocks_list",
         "Description": "IPv6 Block",
         "AttributeName": "IpV6Blocks"
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 pool_name,
                 configure_ipv4_pool,
                 ipv4_netmask,
                 ipv4_gateway,
                 ipv4_primary_dns,
                 ipv4_secondary_dns,
                 ipv4_blocks_list,
                 configure_ipv6_pool=False,
                 ipv6_prefix=0,
                 ipv6_gateway="",
                 ipv6_primary_dns="",
                 ipv6_secondary_dns="",
                 ipv6_blocks_list=None,
                 pool_description="",
                 pool_assignment_order="default",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.pool_name = pool_name
        self.configure_ipv4_pool = configure_ipv4_pool
        self.ipv4_netmask = ipv4_netmask
        self.ipv4_gateway = ipv4_gateway
        self.ipv4_primary_dns = ipv4_primary_dns
        self.ipv4_secondary_dns = ipv4_secondary_dns
        self.ipv4_blocks_list = ipv4_blocks_list
        self.configure_ipv6_pool = configure_ipv6_pool
        self.ipv6_prefix = ipv6_prefix
        self.ipv6_gateway = ipv6_gateway
        self.ipv6_primary_dns = ipv6_primary_dns
        self.ipv6_secondary_dns = ipv6_secondary_dns
        if ipv6_blocks_list is None:
            self.ipv6_blocks_list = []
        else:
            self.ipv6_blocks_list = ipv6_blocks_list
        self.pool_description = pool_description
        self.pool_assignment_order = pool_assignment_order
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.pool_name,
            "Description": self.pool_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.pool_name}', "
            f"{self.configure_ipv4_pool}, "
            f"'{self.ipv4_netmask}', "
            f"'{self.ipv4_gateway}', "
            f"'{self.ipv4_primary_dns}', "
            f"'{self.ipv4_secondary_dns}', "
            f"{self.ipv4_blocks_list}, "
            f"{self.configure_ipv6_pool}, "
            f"'{self.ipv6_prefix}', "
            f"'{self.ipv6_gateway}', "
            f"'{self.ipv6_primary_dns}', "
            f"'{self.ipv6_secondary_dns}', "
            f"{self.ipv6_blocks_list}, "
            f"'{self.pool_description}', "
            f"'{self.pool_assignment_order}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.pool_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       organization=self.organization,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        pool_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": pool_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.pool_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.pool_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def _update_api_body_pool_block_attributes(self):
        """This function updates the Intersight API body with the Pool block
        attributes for the Intersight object. The provided Pool block list is 
        converted for use with the Intersight API.
        """
        for block_type_dictionary in self.block_types:
            blocks_list = getattr(self,
                                  block_type_dictionary.get("BlocksListVariableName")
                                  )
            if blocks_list:
                converted_blocks_list = []
                for provided_block_dictionary in blocks_list:
                    staged_block_dictionary = copy.deepcopy(provided_block_dictionary)
                    returned_block_type = block_type_dictionary["BlockType"]
                    # Set 'ClassId' attribute
                    staged_block_dictionary["ClassId"] = returned_block_type
                    # Set 'ObjectType' attribute
                    staged_block_dictionary["ObjectType"] = returned_block_type
                    converted_block_dictionary = staged_block_dictionary
                    converted_blocks_list.append(converted_block_dictionary)
                # Update Intersight API body with the converted Pool block list value
                self.intersight_api_body[block_type_dictionary["AttributeName"]] = converted_blocks_list

    def object_maker(self):
        """This function makes the targeted pool object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.pool_name}...")
        # Configure IPv4 Pool settings
        if self.configure_ipv4_pool:
            # Set IPv4 configuration dictionary
            ipv4_config_dictionary = {
                "Netmask": self.ipv4_netmask,
                "Gateway": self.ipv4_gateway,
                "PrimaryDns": self.ipv4_primary_dns,
                "SecondaryDns": self.ipv4_secondary_dns,
                "ClassId": "ippool.IpV4Config",
                "ObjectType": "ippool.IpV4Config"
                }
            # Update the API body with the IPv4 Pool configuration dictionary
            self.intersight_api_body["IpV4Config"] = ipv4_config_dictionary
        # Configure IPv6 Pool settings
        if self.configure_ipv6_pool:
            # Set IPv6 configuration dictionary
            ipv6_config_dictionary = {
                "Prefix": self.ipv6_prefix,
                "Gateway": self.ipv6_gateway,
                "PrimaryDns": self.ipv6_primary_dns,
                "SecondaryDns": self.ipv6_secondary_dns,
                "ClassId": "ippool.IpV6Config",
                "ObjectType": "ippool.IpV6Config"
                }
            # Update the API body with the IPv6 Pool configuration dictionary
            self.intersight_api_body["IpV6Config"] = ipv6_config_dictionary
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with individual Pool block list attributes
        self._update_api_body_pool_block_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


def ip_pool_maker(
    intersight_api_key_id,
    intersight_api_key,
    pool_name,
    configure_ipv4_pool,
    ipv4_netmask,
    ipv4_gateway,
    ipv4_primary_dns,
    ipv4_secondary_dns,
    ipv4_blocks_list,
    configure_ipv6_pool=False,
    ipv6_prefix=0,
    ipv6_gateway="",
    ipv6_primary_dns="",
    ipv6_secondary_dns="",
    ipv6_blocks_list=None,
    pool_description="",
    pool_assignment_order="default",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an IP Pool on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        pool_name (str):
            The name of the pool to be created.
        configure_ipv4_pool (bool):
            Enable or disable configuring IP version 4 pools.
        ipv4_netmask (str):
            The netmask or subnet address of the IPv4 pools to be created.
        ipv4_gateway (str):
            The gateway of the IPv4 pools to be created.
        ipv4_primary_dns (str):
            The primary DNS server of the IPv4 pools to be created.
        ipv4_secondary_dns (str):
            The secondary DNS server of the IPv4 pools to be created.
        ipv4_blocks_list (list):
            The list of dictionary entries for each IPv4 block to
            be configured. An example entry is:
            [{"From": "192.168.0.20",
              "Size": 100},].
            A "From" key with a string value must be configured to specify the
            first IPv4 address in the block. A "Size" key with an integer value
            must also be configured to specify the size of the block. Optional
            key settings such as "To" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. Multiple dictionaries can be placed in the list to
            configure different block ranges.
        configure_ipv6_pool (bool):
            Optional; Enable or disable configuring IP version 6 pools. The
            default value is False.
        ipv6_prefix (int):
            Optional; The prefix of the IPv6 pools to be created. The default
            value is 0.
        ipv6_gateway (str):
            Optional; The gateway of the IPv6 pools to be created. The default
            value is an empty string ("").
        ipv6_primary_dns (str):
            Optional; The primary DNS server of the IPv6 pools to be created.
            The default value is an empty string ("").
        ipv6_secondary_dns (str):
            Optional; The secondary DNS server of the IPv6 pools to be created.
            The default value is an empty string ("").
        ipv6_blocks_list (list):
            Optional; The list of dictionary entries for each IPv6 block to
            be configured. The default value is None. An
            example entry is:
            [{"From": "2001:DB8:1234::10",
              "Size": 100},].
            A "From" key with a string value must be configured to specify the
            first IPv6 address in the block. A "Size" key with an integer value
            must also be configured to specify the size of the block. Optional
            key settings such as "To" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. Multiple dictionaries can be placed in the list to
            configure different block ranges.
        pool_description (str):
            Optional; The description of the pool to be created. The default
            value is an empty string ("").
        pool_assignment_order (str):
            Optional; The assignment order of identifiers in the pool.
            Available options are "sequential" for sequential assignment of
            identifiers and "default" which leaves assignment order up to the
            system. The default value is "default".
        organization (str):
            Optional; The Intersight account organization of the pool.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            pool. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or pool on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create IP Pool object in Intersight
    builder(
        IpPool(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            pool_name=pool_name,
            configure_ipv4_pool=configure_ipv4_pool,
            ipv4_netmask=ipv4_netmask,
            ipv4_gateway=ipv4_gateway,
            ipv4_primary_dns=ipv4_primary_dns,
            ipv4_secondary_dns=ipv4_secondary_dns,
            ipv4_blocks_list=ipv4_blocks_list,
            configure_ipv6_pool=configure_ipv6_pool,
            ipv6_prefix=ipv6_prefix,
            ipv6_gateway=ipv6_gateway,
            ipv6_primary_dns=ipv6_primary_dns,
            ipv6_secondary_dns=ipv6_secondary_dns,
            ipv6_blocks_list=ipv6_blocks_list,
            pool_description=pool_description,
            pool_assignment_order=pool_assignment_order,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client
            ))


# Establish classes and functions to make IMC Access Policy
class ImcAccessPolicy(DirectlyAttachedUcsServerAndChassisPolicy):
    """This class is used to configure an IMC Access Policy in Intersight.
    """
    object_type = "IMC Access Policy"
    intersight_api_path = "access/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_chassis_profile_names="",
                 enable_in_band_configuration=True,
                 in_band_vlan_id=4,
                 enable_in_band_ipv4_configuration=True,
                 enable_in_band_ipv6_configuration=False,
                 in_band_ip_pool_name="",
                 enable_out_of_band_configuration=False,
                 out_of_band_ip_pool_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_chassis_profile_names
                         )
        self.enable_in_band_configuration = enable_in_band_configuration
        self.in_band_vlan_id = in_band_vlan_id
        self.enable_in_band_ipv4_configuration = enable_in_band_ipv4_configuration
        self.enable_in_band_ipv6_configuration = enable_in_band_ipv6_configuration
        self.in_band_ip_pool_name = in_band_ip_pool_name
        self.enable_out_of_band_configuration = enable_out_of_band_configuration
        self.out_of_band_ip_pool_name = out_of_band_ip_pool_name
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "ConfigurationType": {
                "ConfigureInband": self.enable_in_band_configuration,
                "ConfigureOutOfBand": self.enable_out_of_band_configuration
                },
            "AddressType": {
                "EnableIpV4": self.enable_in_band_ipv4_configuration,
                "EnableIpV6": self.enable_in_band_ipv6_configuration
                },
            "InbandVlan": self.in_band_vlan_id
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_chassis_profile_names}', "
            f"{self.enable_in_band_configuration}, "
            f"{self.in_band_vlan_id}, "
            f"{self.enable_in_band_ipv4_configuration}, "
            f"{self.enable_in_band_ipv6_configuration}, "
            f"'{self.in_band_ip_pool_name}', "
            f"{self.enable_out_of_band_configuration}, "
            f"'{self.out_of_band_ip_pool_name}')"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with any provided In-Band IP Pool
        if self.in_band_ip_pool_name:
            in_band_ip_pool_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.in_band_ip_pool_name,
                intersight_api_path="ippool/Pools?$top=1000",
                object_type="IP Pool",
                organization=self.organization,
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["InbandIpPool"] = {
                "Moid": in_band_ip_pool_moid
                }
        else:
            self.intersight_api_body["InbandIpPool"] = self.in_band_ip_pool_name
        # Update the API body with any provided Out-of-Band IP Pool
        if self.out_of_band_ip_pool_name:
            out_of_band_ip_pool_moid = intersight_object_moid_retriever(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_name=self.out_of_band_ip_pool_name,
                intersight_api_path="ippool/Pools?$top=1000",
                object_type="IP Pool",
                organization=self.organization,
                preconfigured_api_client=self.api_client
                )
            self.intersight_api_body["OutOfBandIpPool"] = {
                "Moid": out_of_band_ip_pool_moid
                }
        else:
            self.intersight_api_body["OutOfBandIpPool"] = self.out_of_band_ip_pool_name
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_and_chassis_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


def imc_access_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_in_band_configuration=True,
    in_band_vlan_id=4,
    enable_in_band_ipv4_configuration=True,
    enable_in_band_ipv6_configuration=False,
    in_band_ip_pool_name="",
    enable_out_of_band_configuration=False,
    out_of_band_ip_pool_name="",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_chassis_profile_names=""
    ):
    """This is a function used to make a IMC Access Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_in_band_configuration (bool):
            Optional; The setting to enable in-band IMC access. The
            default value is True.
        in_band_vlan_id (int):
            Optional; The in-band VLAN ID. The accepted values are 4 - 4093.
            The default value is 4.
        enable_in_band_ipv4_configuration (bool):
            Optional; The setting to enable an IPv4 address for the in-band IMC
            access connection. The default value is True.
        enable_in_band_ipv6_configuration (bool):
            Optional; The setting to enable an IPv6 address for the in-band IMC
            access connection. The default value is False.
        in_band_ip_pool_name (str):
            Optional; The name of the IP Pool Policy to be used by the in-band
            IMC connection. The provided IP Pool Policy should be configured to
            support the chosen IP address version for the in-band IMC
            connection (IPv4 or IPv6). The default value is an empty string
            ("").
        enable_out_of_band_configuration (bool):
            Optional; The setting to enable out-of-band IMC access. The
            default value is False.
        out_of_band_ip_pool_name (str):
            Optional; The name of the IP Pool Policy to be used by the
            out-of-band IMC connection. The default value is an empty string
            ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_chassis_profile_names (str):
            Optional; The UCS Chassis Profiles the policy should be attached
            to. If providing more than one UCS Chassis Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create IMC Access Policy object in Intersight
    builder(
        ImcAccessPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_chassis_profile_names=ucs_chassis_profile_names,
            enable_in_band_configuration=enable_in_band_configuration,
            in_band_vlan_id=in_band_vlan_id,
            enable_in_band_ipv4_configuration=enable_in_band_ipv4_configuration,
            enable_in_band_ipv6_configuration=enable_in_band_ipv6_configuration,
            in_band_ip_pool_name=in_band_ip_pool_name,
            enable_out_of_band_configuration=enable_out_of_band_configuration,
            out_of_band_ip_pool_name=out_of_band_ip_pool_name
            ))


# Establish classes and functions to make Power Policy
class PowerPolicy(DirectlyAttachedUcsServerAndChassisPolicy):
    """This class is used to configure a Power Policy in Intersight.
    """
    object_type = "Power Policy"
    intersight_api_path = "power/Policies"
    object_variable_value_maps = [
        {"VariableName": "power_profiling",
         "Description": "Power Profiling Mode",
         "AttributeName": "PowerProfiling",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "power_priority",
         "Description": "Power Priority Mode",
         "AttributeName": "PowerPriority",
         "Values": [
             {"FrontEndValue": "Low",
              "BackEndValue": "Low"
              },
             {"FrontEndValue": "Medium",
              "BackEndValue": "Medium"
              },
             {"FrontEndValue": "High",
              "BackEndValue": "High"
              }
             ]
         },
        {"VariableName": "power_restore",
         "Description": "Power Restore State Mode",
         "AttributeName": "PowerRestoreState",
         "Values": [
             {"FrontEndValue": "Always Off",
              "BackEndValue": "AlwaysOff"
              },
             {"FrontEndValue": "Always On",
              "BackEndValue": "AlwaysOn"
              },
             {"FrontEndValue": "Last State",
              "BackEndValue": "LastState"
              }
             ]
         },
        {"VariableName": "power_redundancy",
         "Description": "Power Redundancy Mode",
         "AttributeName": "RedundancyMode",
         "Values": [
             {"FrontEndValue": "Grid",
              "BackEndValue": "Grid"
              },
             {"FrontEndValue": "Not Redundant",
              "BackEndValue": "NotRedundant"
              },
             {"FrontEndValue": "N+1",
              "BackEndValue": "N+1"
              },
             {"FrontEndValue": "N+2",
              "BackEndValue": "N+2"
              }
             ]
         },
        {"VariableName": "power_save_mode",
         "Description": "Power Save Mode",
         "AttributeName": "PowerSaveMode",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "dynamic_power_rebalancing",
         "Description": "Dynamic Power Rebalancing Mode",
         "AttributeName": "DynamicRebalancing",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "extended_power_capacity",
         "Description": "Extended Power Capacity Mode",
         "AttributeName": "ExtendedPowerCapacity",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_chassis_profile_names="",
                 power_profiling="Enabled",
                 power_priority="Low",
                 power_restore="Always Off",
                 power_redundancy="Grid",
                 power_save_mode="Enabled",
                 dynamic_power_rebalancing="Enabled",
                 extended_power_capacity="Enabled",                 
                 power_allocation_in_watts=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_chassis_profile_names
                         )
        self.power_profiling = power_profiling
        self.power_priority = power_priority
        self.power_restore = power_restore
        self.power_redundancy = power_redundancy
        self.power_save_mode = power_save_mode
        self.dynamic_power_rebalancing = dynamic_power_rebalancing
        self.extended_power_capacity = extended_power_capacity
        self.power_allocation_in_watts = power_allocation_in_watts
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "AllocatedBudget": self.power_allocation_in_watts
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_chassis_profile_names}', "
            f"'{self.power_profiling}', "
            f"'{self.power_priority}', "
            f"'{self.power_restore}', "
            f"'{self.power_redundancy}', "
            f"'{self.power_save_mode}', "
            f"'{self.dynamic_power_rebalancing}', "
            f"'{self.extended_power_capacity}', "
            f"{self.power_allocation_in_watts})"
            )


def power_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    power_profiling="Enabled",
    power_priority="Low",
    power_restore="Always Off",
    power_redundancy="Grid",
    power_save_mode="Enabled",
    dynamic_power_rebalancing="Enabled",
    extended_power_capacity="Enabled",
    power_allocation_in_watts=True,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_chassis_profile_names=""
    ):
    """This is a function used to make a Power Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        power_profiling (str):
            Optional; Sets server power profiling. This setting is only
            supported on UCS X-Series servers. The default value is "Enabled".
        power_priority (str):
            Optional; Sets server power priority. This setting is only
            supported on UCS X-Series servers. The default value is "Low".
        power_restore (str):
            Optional; Sets the state of the server upon the restoration of
            power after power loss. This setting is only supported on UCS
            X-Series servers. The default value is "Always Off".
        power_redundancy (str):
            Optional; Sets chassis power redundancy mode. This setting is only
            supported on UCS X-Series chassis. The default value is "Grid".
        power_save_mode (str):
            Optional; Sets the chassis power save mode. This setting is only
            supported on UCS X-Series chassis. The default value is "Enabled".
        dynamic_power_rebalancing (str):
            Optional; Sets the chassis dynamic power rebalancing mode. This
            setting is only supported on UCS X-Series chassis. The default
            value is "Enabled".
        extended_power_capacity (str):
            Optional; Sets the extended power capacity mode of the chassis.
            This setting is only supported on UCS X-Series chassis. The default
            value is "Enabled".
        power_allocation_in_watts (int):
            Optional; Sets the power allocated to the chassis in watts. This
            setting is only supported on UCS X-Series chassis. The accepted
            values are 0 - 65535. The default value is 0.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_chassis_profile_names (str):
            Optional; The UCS Chassis Profiles the policy should be attached
            to. If providing more than one UCS Chassis Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Power Policy object in Intersight
    builder(
        PowerPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_chassis_profile_names=ucs_chassis_profile_names,
            power_profiling=power_profiling,
            power_priority=power_priority,
            power_restore=power_restore,
            power_redundancy=power_redundancy,
            power_save_mode=power_save_mode,
            dynamic_power_rebalancing=dynamic_power_rebalancing,
            extended_power_capacity=extended_power_capacity,
            power_allocation_in_watts=power_allocation_in_watts
            ))


# Establish classes and functions to make SNMP Policy
class SnmpPolicy(DirectlyAttachedUcsServerChassisAndDomainPolicy):
    """This class is used to configure a SNMP Policy in Intersight.
    """
    object_type = "SNMP Policy"
    intersight_api_path = "snmp/Policies"
    subobject_types = [
        {"SubobjectType": "snmp.User",
         "SubobjectList": "snmp_users_list",
         "AttributeName": "SnmpUsers",
         "Description": "SNMP User",
         },
        {"SubobjectType": "snmp.Trap",
         "SubobjectList": "snmp_trap_destinations_list",
         "AttributeName": "SnmpTraps",
         "Description": "SNMP Trap Destination",
         }
        ]
    subobject_attribute_maps = {
        "snmp.User": [
            {"FrontEndName": None,
             "BackEndName": "Name",
             "Description": "User Name",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Security Level",
             "BackEndName": "SecurityLevel",
             "Description": "Security Level",
             "FixedFrontEndValues": [
                 "AuthPriv",
                 "NoAuthNoPriv",
                 "AuthNoPriv"
                 ],
             "FronttoBackEndValueMaps": {
                 "authpriv": "AuthPriv",
                 "noauthnopriv": "NoAuthNoPriv",
                 "authnopriv": "AuthNoPriv"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Auth Type",
             "BackEndName": "AuthType",
             "Description": "Authentication Type",
             "FixedFrontEndValues": [
                 "NA",
                 "MD5",
                 "SHA",
                 "SHA-224",
                 "SHA-256",
                 "SHA-384",
                 "SHA-512"
                 ],
             "FronttoBackEndValueMaps": {
                 "na": "NA",
                 "md5": "MD5",
                 "sha": "SHA",
                 "sha-224": "SHA-224",
                 "sha-256": "SHA-256",
                 "sha-384": "SHA-384",
                 "sha-512": "SHA-512"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Auth Password",
             "BackEndName": "AuthPassword",
             "Description": "Authentication Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Privacy Type",
             "BackEndName": "PrivacyType",
             "Description": "Privacy Type",
             "FixedFrontEndValues": [
                 "NA",
                 "DES",
                 "AES"
                 ],
             "FronttoBackEndValueMaps": {
                 "na": "NA",
                 "des": "DES",
                 "aes": "AES"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Privacy Password",
             "BackEndName": "PrivacyPassword",
             "Description": "Privacy Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ],
        "snmp.Trap": [
            {"FrontEndName": "Enable",
             "BackEndName": "Enabled",
             "Description": "SNMP Trap Destination Enablement",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "SNMP Version",
             "BackEndName": "Version",
             "Description": "SNMP Version",
             "FixedFrontEndValues": [
                 "V3",
                 "V2"
                 ],
             "FronttoBackEndValueMaps": {
                 "v3": "V3",
                 "v2": "V2"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "User",
             "Description": "SNMP v3 Trap User",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Community String",
             "BackEndName": "Community",
             "Description": "SNMP v2c Community String",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Trap Type",
             "BackEndName": "Type",
             "Description": "Trap Type",
             "FixedFrontEndValues": [
                 "Trap",
                 "Inform"
                 ],
             "FronttoBackEndValueMaps": {
                 "trap": "Trap",
                 "inform": "Inform"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Destination Address",
             "BackEndName": "Destination",
             "Description": "SNMP Trap Destination Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Port",
             "Description": "Port",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_chassis_profile_names="",
                 ucs_domain_profile_names="",
                 enable_snmp=True,
                 snmp_v2c_features=True,
                 snmp_v3_features=True,
                 snmp_port=161,
                 system_contact="Administrator",
                 system_location="N/A",
                 access_community_string="N/A",
                 snmp_community_access="Disabled",
                 trap_community_string="N/A",
                 snmp_engine_input_id="N/A",
                 snmp_users_list=None,
                 snmp_trap_destinations_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_chassis_profile_names,
                         ucs_domain_profile_names,
                         fabric_interconnect="AB"
                         )
        self.enable_snmp = enable_snmp
        self.snmp_v2c_features = snmp_v2c_features
        self.snmp_v3_features = snmp_v3_features
        self.snmp_port = snmp_port
        self.system_contact = system_contact
        self.system_location = system_location
        self.access_community_string = access_community_string
        self.snmp_community_access = snmp_community_access
        self.trap_community_string = trap_community_string
        self.snmp_engine_input_id = snmp_engine_input_id
        if snmp_users_list is None:
            self.snmp_users_list = []
        else:
            self.snmp_users_list = snmp_users_list
        if snmp_trap_destinations_list is None:
            self.snmp_trap_destinations_list = []
        else:
            self.snmp_trap_destinations_list = snmp_trap_destinations_list
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_snmp,
            "V2Enabled": self.snmp_v2c_features,
            "V3Enabled": self.snmp_v3_features,
            "SnmpPort": self.snmp_port,
            "SysContact": self.system_contact,
            "SysLocation": self.system_location,
            "AccessCommunityString": self.access_community_string,
            "CommunityAccess": self.snmp_community_access,
            "TrapCommunity": self.trap_community_string,
            "EngineId": self.snmp_engine_input_id
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_chassis_profile_names}', "
            f"'{self.ucs_domain_profile_names}', "
            f"{self.enable_snmp}, "
            f"{self.snmp_v2c_features}, "
            f"{self.snmp_v3_features}, "
            f"{self.snmp_port}, "
            f"'{self.system_contact}', "
            f"'{self.system_location}', "
            f"'{self.access_community_string}', "
            f"'{self.snmp_community_access}', "
            f"'{self.trap_community_string}', "
            f"'{self.snmp_engine_input_id}', "
            f"{self.snmp_users_list}, "
            f"{self.snmp_trap_destinations_list})"
            )


def snmp_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_snmp=True,
    snmp_v2c_features=True,
    snmp_v3_features=True,
    snmp_port=161,
    system_contact="Administrator",
    system_location="N/A",
    access_community_string="N/A",
    snmp_community_access="Disabled",
    trap_community_string="N/A",
    snmp_engine_input_id="N/A",
    snmp_users_list=None,
    snmp_trap_destinations_list=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_chassis_profile_names="",
    ucs_domain_profile_names=""
    ):
    """This is a function used to make a SNMP Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_snmp (bool):
            Optional; Enablement of the SNMP Policy on the attached endpoint.
            The default value is True.
        snmp_v2c_features (bool):
            Optional; Enablement of SNMP version 2c features in the SNMP
            Policy. The default value is True.
        snmp_v3_features (bool):
            Optional; Enablement of SNMP version 3 features in the SNMP
            Policy. The default value is True.
        snmp_port (int):
            Optional; The SNMP agent port. The default value is 161.
        system_contact (str):
            Optional; The contact for the system running the SNMP agent. The
            default value is "Administrator".
        system_location (str):
            Optional; The location of the system running the SNMP agent. The
            default value is "N/A".
        access_community_string (str):
            Optional; The access community string for the system running the
            SNMP agent. The default value is "N/A".
        snmp_community_access (str):
            Optional; The SNMP community access level for the system running
            the SNMP agent. The default value is "Disabled".
        trap_community_string (str):
            Optional; The trap community string for the system running the
            SNMP agent. The default value is "N/A".
        snmp_engine_input_id (str):
            Optional; The SNMP engine input ID for the system running the SNMP
            agent. The default value is "N/A".
        snmp_users_list (list):
            Optional; The list of dictionary entries for each SNMP user to be
            configured. The default value is None. An example entry is:
            [{"Name": "demouser",
              "Security Level": "AuthPriv",
              "Auth Type": "SHA",
              "Auth Password": "C1sco12345",
              "Privacy Type": "AES",
              "Privacy Password": "C1sco12345"
              },
             ]
            A "Name" key with a string value must be configured in each
            dictionary of the list to specify the SNMP user's name. The key
            "Auth Password" is mandatory and specifies the authentication
            password. The key "Privacy Password" is mandatory and specifies the
            privacy password. Optional key settings include "Security Level",
            "Auth Type", and "Privacy Type".
        snmp_trap_destinations_list (list):
            Optional; The list of dictionary entries for each SNMP trap
            destination to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "SNMP Version": "V3",
              "User": "demouser",
              "Trap Type": "Inform",
              "Destination Address": "192.168.0.101",
              "Port": 162
              },
             {"Enable": True,
              "SNMP Version": "V2",
              "Community String": "demo_trap_string",
              "Trap Type": "Trap",
              "Destination Address": "192.168.0.102",
              "Port": 162
              },
             ]
            For SNMP version 3, a "User" key with a string value must be
            configured in the associated dictionary of the list to specify the
            SNMP trap destination's user name. For SNMP version 2c, a
            "Community String" key with a string value must be configured in
            the associated dictionary of the list to specify the SNMP trap
            destination community string. The key "Destination Address" is
            mandatory and specifies the SNMP trap destination address. Optional
            key settings include "Enable", "SNMP Version", "Trap Type", and
            "Port".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_chassis_profile_names (str):
            Optional; The UCS Chassis Profiles the policy should be attached
            to. If providing more than one UCS Chassis Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_domain_profile_names (str):
            Optional; The UCS Domain Profile the policy should be attached
            to. If providing more than one UCS Domain Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create SNMP Policy object in Intersight
    builder(
        SnmpPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_chassis_profile_names=ucs_chassis_profile_names,
            ucs_domain_profile_names=ucs_domain_profile_names,
            enable_snmp=enable_snmp,
            snmp_v2c_features=snmp_v2c_features,
            snmp_v3_features=snmp_v3_features,
            snmp_port=snmp_port,
            system_contact=system_contact,
            system_location=system_location,
            access_community_string=access_community_string,
            snmp_community_access=snmp_community_access,
            trap_community_string=trap_community_string,
            snmp_engine_input_id=snmp_engine_input_id,
            snmp_users_list=snmp_users_list,
            snmp_trap_destinations_list=snmp_trap_destinations_list
            ))


# Establish classes and functions to make Thermal Policy
class ThermalPolicy(DirectlyAttachedUcsChassisPolicy):
    """This class is used to configure a Thermal Policy in Intersight.
    """
    object_type = "Thermal Policy"
    intersight_api_path = "thermal/Policies"
    object_variable_value_maps = [
        {"VariableName": "fan_control_mode",
         "Description": "Fan Control Mode",
         "AttributeName": "FanControlMode",
         "Values": [
             {"FrontEndValue": "Balanced",
              "BackEndValue": "Balanced"
              },
             {"FrontEndValue": "Low Power",
              "BackEndValue": "LowPower"
              },
             {"FrontEndValue": "High Power",
              "BackEndValue": "HighPower"
              },
             {"FrontEndValue": "Maximum Power",
              "BackEndValue": "MaximumPower"
              },
             {"FrontEndValue": "Acoustic",
              "BackEndValue": "Acoustic"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_chassis_profile_names="",
                 fan_control_mode="Balanced"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_chassis_profile_names
                         )
        self.fan_control_mode = fan_control_mode
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_chassis_profile_names}', "
            f"'{self.fan_control_mode}')"
            )


def thermal_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    fan_control_mode="Balanced",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_chassis_profile_names=""
    ):
    """This is a function used to make a Thermal Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        fan_control_mode (str):
            Optional; The fan control mode. The available options are
            "Balanced", "Low Power", "High Power", "Maximum Power", and
            "Acoustic". The default value is "Balanced".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_chassis_profile_names (str):
            Optional; The UCS Chassis Profiles the policy should be attached
            to. If providing more than one UCS Chassis Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Thermal Policy object in Intersight
    builder(
        ThermalPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_chassis_profile_names=ucs_chassis_profile_names,
            fan_control_mode=fan_control_mode
            ))


def main():

    # Establish UCS Chassis Deployment Tool specific variables
    deployment_tool_type = "Intersight UCS Chassis Deployment Tool"

    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the UCS Chassis Deployment Tool for Cisco Intersight
    print(f"\nStarting the {deployment_tool_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Establish the initial UCS Chassis Deployment Tool default pre-requisite and support Pool, Policy and/or Profile names
    deployment_tool_ucs_chassis_profile_names = ""
    deployment_tool_in_band_ip_pool_name = ""
    deployment_tool_out_of_band_ip_pool_name = ""
    
    # Create the UCS Chassis Profile(s) in Intersight
    staged_ucs_chassis_profile_names_list = []
    for ucs_chassis_profile_config in ucs_chassis_profile_names_and_assignments:
        if ucs_chassis_profile_config.get('Chassis Profile Name'):
            deployment_tool_ucs_chassis_profile_name = f"{deployment_name_prefix}{ucs_chassis_profile_config['Chassis Profile Name']}{deployment_name_suffix}"
            # Create the Profile in Intersight
            ucs_chassis_profile_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                ucs_chassis_profile_name=deployment_tool_ucs_chassis_profile_name,
                ucs_chassis_profile_description=ucs_chassis_profile_description,
                ucs_chassis_profile_organization=ucs_chassis_profile_organization,
                tags=ucs_chassis_profile_tags,
                preconfigured_api_client=main_intersight_api_client
                )
            staged_ucs_chassis_profile_names_list.append(deployment_tool_ucs_chassis_profile_name)
    deployment_tool_ucs_chassis_profile_names = ', '.join(staged_ucs_chassis_profile_names_list)

    # Create the In-Band IP Pool in Intersight
    if deploy_in_band_ip_pool:
        # Update Pool name with UCS Chassis Deployment Tool provided prefix and/or suffix
        deployment_tool_in_band_ip_pool_name = f"{deployment_name_prefix}{in_band_ip_pool_name}{deployment_name_suffix}"
        ip_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_in_band_ip_pool_name,
            configure_ipv4_pool=in_band_ip_pool_configure_ipv4_pool,
            ipv4_netmask=in_band_ip_pool_ipv4_netmask,
            ipv4_gateway=in_band_ip_pool_ipv4_gateway,
            ipv4_primary_dns=in_band_ip_pool_ipv4_primary_dns,
            ipv4_secondary_dns=in_band_ip_pool_ipv4_secondary_dns,
            ipv4_blocks_list=in_band_ip_pool_ipv4_blocks_list,
            configure_ipv6_pool=in_band_ip_pool_configure_ipv6_pool,
            ipv6_prefix=in_band_ip_pool_ipv6_prefix,
            ipv6_gateway=in_band_ip_pool_ipv6_gateway,
            ipv6_primary_dns=in_band_ip_pool_ipv6_primary_dns,
            ipv6_secondary_dns=in_band_ip_pool_ipv6_secondary_dns,
            ipv6_blocks_list=in_band_ip_pool_ipv6_blocks_list,
            pool_description=in_band_ip_pool_description,
            pool_assignment_order=in_band_ip_pool_ip_assignment_order,
            organization=ucs_chassis_profile_organization,
            tags=in_band_ip_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Out-Of-Band IP Pool in Intersight
    if deploy_out_of_band_ip_pool:
        # Update Pool name with UCS Chassis Deployment Tool provided prefix and/or suffix
        deployment_tool_out_of_band_ip_pool_name = f"{deployment_name_prefix}{out_of_band_ip_pool_name}{deployment_name_suffix}"
        ip_pool_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            pool_name=deployment_tool_out_of_band_ip_pool_name,
            configure_ipv4_pool=out_of_band_ip_pool_configure_ipv4_pool,
            ipv4_netmask=out_of_band_ip_pool_ipv4_netmask,
            ipv4_gateway=out_of_band_ip_pool_ipv4_gateway,
            ipv4_primary_dns=out_of_band_ip_pool_ipv4_primary_dns,
            ipv4_secondary_dns=out_of_band_ip_pool_ipv4_secondary_dns,
            ipv4_blocks_list=out_of_band_ip_pool_ipv4_blocks_list,
            configure_ipv6_pool=out_of_band_ip_pool_configure_ipv6_pool,
            ipv6_prefix=out_of_band_ip_pool_ipv6_prefix,
            ipv6_gateway=out_of_band_ip_pool_ipv6_gateway,
            ipv6_primary_dns=out_of_band_ip_pool_ipv6_primary_dns,
            ipv6_secondary_dns=out_of_band_ip_pool_ipv6_secondary_dns,
            ipv6_blocks_list=out_of_band_ip_pool_ipv6_blocks_list,
            pool_description=out_of_band_ip_pool_description,
            pool_assignment_order=out_of_band_ip_pool_ip_assignment_order,
            organization=ucs_chassis_profile_organization,
            tags=out_of_band_ip_pool_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the IMC Access Policy in Intersight
    if deploy_imc_access_policy:
        # Establish default pre-requisite and support Pool and/or Policy names for IMC Access Policies
        ## In-Band IP Pool
        if imc_access_policy_in_band_ip_pool_name == in_band_ip_pool_name:
            deployment_tool_imc_access_policy_in_band_ip_pool_name = deployment_tool_in_band_ip_pool_name
        else:
            deployment_tool_imc_access_policy_in_band_ip_pool_name = imc_access_policy_in_band_ip_pool_name
        ## Out-Of-Band IP Pool
        if imc_access_policy_out_of_band_ip_pool_name == out_of_band_ip_pool_name:
            deployment_tool_imc_access_policy_out_of_band_ip_pool_name = deployment_tool_out_of_band_ip_pool_name
        else:
            deployment_tool_imc_access_policy_out_of_band_ip_pool_name = imc_access_policy_out_of_band_ip_pool_name
            
        # Update Policy name with UCS Chassis Deployment Tool provided prefix and/or suffix
        deployment_tool_imc_access_policy_name = f"{deployment_name_prefix}{imc_access_policy_name}{deployment_name_suffix}"
        imc_access_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_imc_access_policy_name,
            enable_in_band_configuration=imc_access_policy_enable_in_band_configuration,
            in_band_vlan_id=imc_access_policy_in_band_vlan_id,
            enable_in_band_ipv4_configuration=imc_access_policy_enable_in_band_ipv4_configuration,
            enable_in_band_ipv6_configuration=imc_access_policy_enable_in_band_ipv6_configuration,
            in_band_ip_pool_name=deployment_tool_imc_access_policy_in_band_ip_pool_name,
            enable_out_of_band_configuration=imc_access_policy_enable_out_of_band_configuration,
            out_of_band_ip_pool_name=deployment_tool_imc_access_policy_out_of_band_ip_pool_name,
            policy_description=imc_access_policy_description,
            organization=ucs_chassis_profile_organization,
            tags=imc_access_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_chassis_profile_names=deployment_tool_ucs_chassis_profile_names
            )

    # Create the Power Policy in Intersight
    if deploy_power_policy:
        # Update Policy name with UCS Chassis Deployment Tool provided prefix and/or suffix
        deployment_tool_power_policy_name = f"{deployment_name_prefix}{power_policy_name}{deployment_name_suffix}"
        power_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_power_policy_name,
            power_profiling=power_policy_power_profiling,
            power_priority=power_policy_power_priority,
            power_restore=power_policy_power_restore,
            power_redundancy=power_policy_power_redundancy,
            power_save_mode=power_policy_power_save_mode,
            dynamic_power_rebalancing=power_policy_dynamic_power_rebalancing,
            extended_power_capacity=power_policy_extended_power_capacity,        
            power_allocation_in_watts=power_policy_power_allocation_in_watts,
            policy_description=power_policy_description,
            organization=ucs_chassis_profile_organization,
            tags=power_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_chassis_profile_names=deployment_tool_ucs_chassis_profile_names
            )

    # Create the SNMP Policy in Intersight
    if deploy_snmp_policy:
        # Update Policy name with UCS Chassis Deployment Tool provided prefix and/or suffix
        deployment_tool_snmp_policy_name = f"{deployment_name_prefix}{snmp_policy_name}{deployment_name_suffix}"
        snmp_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_snmp_policy_name,
            enable_snmp=snmp_policy_enable_snmp,
            snmp_v2c_features=snmp_policy_v2c_features,
            snmp_v3_features=snmp_policy_v3_features,
            snmp_port=snmp_policy_port,
            system_contact=snmp_policy_system_contact,
            system_location=snmp_policy_system_location,
            access_community_string=snmp_policy_access_community_string,
            snmp_community_access=snmp_policy_community_access,
            trap_community_string=snmp_policy_trap_community_string,
            snmp_engine_input_id=snmp_policy_engine_input_id,
            snmp_users_list=snmp_policy_users_list,
            snmp_trap_destinations_list=snmp_policy_trap_destinations_list,
            policy_description=snmp_policy_description,
            organization=ucs_chassis_profile_organization,
            tags=snmp_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_chassis_profile_names=deployment_tool_ucs_chassis_profile_names
            )

    # Create the Thermal Policy in Intersight
    if deploy_thermal_policy:
        # Update Policy name with UCS Chassis Deployment Tool provided prefix and/or suffix
        deployment_tool_thermal_policy_name = f"{deployment_name_prefix}{thermal_policy_name}{deployment_name_suffix}"
        thermal_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_thermal_policy_name,
            fan_control_mode=thermal_policy_fan_control_mode,
            policy_description=thermal_policy_description,
            organization=ucs_chassis_profile_organization,
            tags=thermal_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_chassis_profile_names=deployment_tool_ucs_chassis_profile_names
            )

    # Assign and Deploy the UCS Chassis Profile to an Intersight Target
    for ucs_chassis_profile_config in ucs_chassis_profile_names_and_assignments:
        if ucs_chassis_profile_config.get('Chassis Profile Name') and ucs_chassis_profile_config.get("Chassis Assignment Identifier"):
            assign_and_deploy_ucs_chassis_profile(
                intersight_api_key_id=None,
                intersight_api_key=None,
                ucs_chassis_profile_name=ucs_chassis_profile_config.get("Chassis Profile Name"),
                ucs_chassis_assignment_identifier=ucs_chassis_profile_config.get("Chassis Assignment Identifier"),
                deploy_ucs_chassis_profile=ucs_chassis_profile_config.get("Deploy Chassis Profile", False),
                ucs_chassis_profile_organization=ucs_chassis_profile_organization,
                preconfigured_api_client=main_intersight_api_client
                )      

    # UCS Chassis Deployment Tool completion
    print(f"\nThe {deployment_tool_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the UCS Chassis Deployment Tool for Cisco Intersight
sys.exit(0)
