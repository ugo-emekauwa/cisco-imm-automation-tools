"""
UCS Domain Deployment Tool for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The UCS Domain Deployment Tool for Cisco Intersight automates the
         comprehensive build and deployment of UCS Domain Profiles and Policies
         for Cisco IMM (Intersight Managed Mode).
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


import sys
import traceback
import json
import copy
import intersight
import re
import time
import urllib3

########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
UCS Domain Profile on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######


#----------------------------------Section 01----------------------------------#

# GENERAL DEPLOYMENT CONFIGURATION

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

# Global Deployment Name Settings (Optional - These settings will attach a global prefix or suffix to the names of the created UCS Domain Profile and Policies)
deployment_name_prefix = ""
deployment_name_suffix = f"_{int(time.time())}"     # If no suffix is desired, change the value to an empty string, for example: deployment_name_suffix = ""


#----------------------------------Section 02----------------------------------#

# UCS DOMAIN PROFILE CONFIGURATION

# General Settings
ucs_domain_profile_name = "UCS-Domain-Profile-1"
ucs_domain_profile_description = "A Cisco Intersight UCS Domain Profile generated by the UCS Domain Deployment Tool."
ucs_domain_profile_organization = "default"
ucs_domain_profile_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ucs_domain_profile_tags dictionary if no tags are needed, for example: ucs_domain_profile_tags = {}

# UCS Domain Assignment Settings
## NOTE - For the Intersight Target identifier, the accepted values are the Target Name, IP Address or Target ID (Serial Numbers) as found in the Intersight GUI Targets section.
## If there are targets with duplicate names or duplicate IP addresses, please use the Target ID (Serial Numbers) to ensure the correct Intersight Target is selected.
## Here is an example using the Target Name: target_assignment_identifier = "UCS-IMM-Pod"
## Here is an example using the Target ID (Serial Numbers): target_assignment_identifier = "FXO17840D7U,FXO47840D11"
## Here is an example using the Target IP Address: target_assignment_identifier = "192.168.0.11,192.168.0.12"
## For the Target ID (Serial Numbers) or Target IP Address which are listed as pairs in the Intersight GUI, for convenience, one entry from the pair can also be provided.
## Here is an example using one entry in the Target ID (Serial Numbers) pair : target_assignment_identifier = "FXO17840D7U"
## Here is an example using one entry in the Target IP Address pair: target_assignment_identifier = "192.168.0.11"
target_assignment_identifier = ""
assign_ucs_domain_profile = False
deploy_ucs_domain_profile = False

# UCS Domain Profile Policy Enablement
## NOTE - The following variables enable creation of the corresponding Policy.
enable_multicast_policy = True      # Multicast Policies are required by VLAN Policies.
enable_vlan_policy = True
enable_vsan_policy = True
enable_ethernet_network_group_policy = True     # Ethernet Network Group Policies are required for Appliance Ports in Port Policies
enable_ethernet_network_control_policy = True       # Ethernet Network Control Policies are required for Appliance Ports in Port Policies
enable_flow_control_policy = True
enable_link_control_policy = True
enable_link_aggregation_policy = True
enable_port_policy = True
enable_ntp_policy = True
enable_syslog_policy = True
enable_network_connectivity_policy = True
enable_snmp_policy = True
enable_system_qos_policy = True     # System QOS Policies are absolutely mandatory for UCS Domain Profile Deployment to succeed after job initiation.
enable_switch_control_policy = True


#----------------------------------Section 03----------------------------------#

# MULTICAST POLICY CONFIGURATION

# General Settings
multicast_policy_name = "Multicast-Policy-1"
multicast_policy_description = "A Cisco Intersight Multicast Policy generated by the UCS Domain Deployment Tool."
multicast_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the multicast_policy_tags dictionary if no tags are needed, for example: multicast_policy_tags = {}

# Policy Detail Settings
multicast_policy_snooping_state = "Enabled"      # Options: "Enabled", "Disabled"
multicast_policy_querier_state = "Disabled"      # Options: "Enabled", "Disabled"
multicast_policy_querier_ip_address = ""
multicast_policy_querier_ip_address_peer = ""


#----------------------------------Section 04----------------------------------#

# VLAN POLICY CONFIGURATION - FABRIC INTERCONNECT A

# General Settings
vlan_policy_a_name = "VLAN-Policy-1-A"
vlan_policy_a_description = "A Cisco Intersight VLAN Policy generated by the UCS Domain Deployment Tool."
vlan_policy_a_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the vlan_policy_a_tags dictionary if no tags are needed, for example: vlan_policy_a_tags = {}

# Policy Detail Settings
## NOTE - To not configure any VLANs, leave the corresponding list empty, for example: vlan_policy_a_vlan_list = []
## NOTE - A Multicast Policy must be provided when configuring VLANs. The Deployment Tool will automatically create and provide the Multicast Policy.
## To override the Multicast Policy created by the Deployment Tool, a "MulticastPolicy" key can be provided for each set of VLAN dictionaries in the VLAN list variable.
## Here is an example for vlan_policy_a_vlan_list: vlan_policy_a_vlan_list = [{"Vlans": "10-12,20,25", "Name": "Infra", "MulticastPolicy": "Multicast-Policy-1"}]
vlan_policy_a_vlan_list = [
    {"Vlans": "10-12,20,25", "Name": "Infra"},
    {"Vlans": "40-43", "Name": "Mgmt", "AutoAllowOnUplinks": False},
    ]
vlan_policy_a_native_vlan_id = None     # Leave the value as None or provide an integer value for the Native VLAN ID, for example: vlan_policy_a_native_vlan_id = 10


#----------------------------------Section 05----------------------------------#

# VLAN POLICY CONFIGURATION - FABRIC INTERCONNECT B

# NOTE!!!!!!! - If using the same VLAN Policy for both Fabric Interconnects, set the following setting to True and skip to the next section.
shared_vlan_policy_for_both_fabric_interconnects = False

# General Settings
vlan_policy_b_name = "VLAN-Policy-1-B"
vlan_policy_b_description = "A Cisco Intersight VLAN Policy generated by the UCS Domain Deployment Tool."
vlan_policy_b_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the vlan_policy_b_tags dictionary if no tags are needed, for example: vlan_policy_b_tags = {}

# Policy Detail Settings
## NOTE - To not configure any VLANs, leave the corresponding list empty, for example: vlan_policy_b_vlan_list = []
## NOTE - A Multicast Policy must be provided when configuring VLANs. The Deployment Tool will automatically create and provide the Multicast Policy.
## To override the Multicast Policy created by the Deployment Tool, a "MulticastPolicy" key can be provided for each set of VLAN dictionaries in the VLAN list variable.
## Here is an example for vlan_policy_b_vlan_list: vlan_policy_b_vlan_list = [{"Vlans": "10-12,20,25", "Name": "Infra", "MulticastPolicy": "Multicast-Policy-1"}]
vlan_policy_b_vlan_list = [
    {"Vlans": "10-12,20,25", "Name": "Infra"},
    {"Vlans": "40-43", "Name": "Mgmt", "AutoAllowOnUplinks": False},
    ]
vlan_policy_b_native_vlan_id = None     # Leave the value as None or provide an integer value for the Native VLAN ID, for example: vlan_policy_b_native_vlan_id = 10


#----------------------------------Section 06----------------------------------#

# VSAN POLICY CONFIGURATION - FABRIC INTERCONNECT A

# General Settings
vsan_policy_a_name = "VSAN-Policy-1-A"
vsan_policy_a_description = "A Cisco Intersight VSAN Policy generated by the UCS Domain Deployment Tool."
vsan_policy_a_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the vsan_policy_a_tags dictionary if no tags are needed, for example: vsan_policy_a_tags = {}

# Policy Detail Settings
## NOTE - To not configure any VSANs, leave the corresponding list empty, for example: vsan_policy_a_vsan_list = []
vsan_policy_a_vsan_list = [
    {"Vsans": "100", "Name": "ESXi_FC_Storage", "FcoeVlans": "1000"},
    {"Vsans": "101-102,150,170", "Name": "Hyper-V_FC_Storage", "FcoeVlans": "1001-1002,1050,1070", "DefaultZoning": "Disabled"},
    {"Vsans": "175-177", "Name": "Xen_FC_Storage", "FcoeVlans": "1075-1077", "DefaultZoning": "Enabled"},
    ]
vsan_policy_a_enable_uplink_trunking = False


#----------------------------------Section 07----------------------------------#

# VSAN POLICY CONFIGURATION - FABRIC INTERCONNECT B

# NOTE!!!!!!! - If using the same VSAN Policy for both Fabric Interconnects, set the following setting to True and skip to the next section. Typically different VSAN numbers are used per fabric.
shared_vsan_policy_for_both_fabric_interconnects = False

# General Settings
vsan_policy_b_name = "VSAN-Policy-1-B"
vsan_policy_b_description = "A Cisco Intersight VSAN Policy generated by the UCS Domain Deployment Tool."
vsan_policy_b_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the vsan_policy_b_tags dictionary if no tags are needed, for example: vsan_policy_b_tags = {}

# Policy Detail Settings
## NOTE - To not configure any VSANs, leave the corresponding list empty, for example: vsan_policy_b_vsan_list = []
vsan_policy_b_vsan_list = [
    {"Vsans": "200", "Name": "ESXi_FC_Storage", "FcoeVlans": "2000"},
    {"Vsans": "201-202,250,270", "Name": "Hyper-V_FC_Storage", "FcoeVlans": "2001-2002,2050,2070", "DefaultZoning": "Disabled"},
    {"Vsans": "275-277", "Name": "Xen_FC_Storage", "FcoeVlans": "2075-2077", "DefaultZoning": "Enabled"},
    ]
vsan_policy_b_enable_uplink_trunking = False


#----------------------------------Section 08----------------------------------#

# ETHERNET NETWORK GROUP POLICY CONFIGURATION

# General Settings
ethernet_network_group_policy_name = "Eth-Net-Group-Policy-1"
ethernet_network_group_policy_description = "A Cisco Intersight Ethernet Network Group Policy generated by the UCS Domain Deployment Tool."
ethernet_network_group_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_network_group_policy_tags dictionary if no tags are needed, for example: ethernet_network_group_policy_tags = {}

# Policy Detail Settings
## NOTE - For the "Allowed VLANs" setting, the provided value must be a string. Ranges of VLANs can be split with a hyphen or commas with no spaces. Allowed VLANs can be between 1-4093.
ethernet_network_group_policy_allowed_vlans = "10,11"

## NOTE - For the "Native VLAN" setting, the provided value must be an integer. Native VLANs can be between 1-4093.
ethernet_network_group_policy_native_vlan = 1


#----------------------------------Section 09----------------------------------#

# ETHERNET NETWORK CONTROL POLICY CONFIGURATION

# General Settings
ethernet_network_control_policy_name = "Eth-Net-Control-Policy-1"
ethernet_network_control_policy_description = "A Cisco Intersight Ethernet Network Control Policy generated by the UCS Domain Deployment Tool."
ethernet_network_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_network_control_policy_tags dictionary if no tags are needed, for example: ethernet_network_control_policy_tags = {}

# Policy Detail Settings
ethernet_network_control_policy_enable_cdp = False
ethernet_network_control_policy_mac_register_mode = "Only Native VLAN"        # Options: "Only Native VLAN", "All Host VLANs"
ethernet_network_control_policy_action_on_uplink_fail = "Link Down"      # Options: "Link Down", "Warning"
ethernet_network_control_policy_mac_forging = "Allow"        # Options: "Allow", "Deny"
ethernet_network_control_policy_lldp_enable_transmit = False
ethernet_network_control_policy_lldp_enable_receive = False


#----------------------------------Section 10----------------------------------#

# FLOW CONTROL POLICY CONFIGURATION

# General Settings
flow_control_policy_name = "Flow-Control-Policy-1"
flow_control_policy_description = "A Cisco Intersight Flow Control Policy generated by the UCS Domain Deployment Tool."
flow_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the flow_control_policy_tags dictionary if no tags are needed, for example: flow_control_policy_tags = {}

# Policy Detail Settings
flow_control_policy_priority = "Auto"       # Options: "Auto", "On"
flow_control_policy_receive = "Disabled"        # Options: "Enabled", "Disabled"
flow_control_policy_send = "Disabled"       # Options: "Enabled", "Disabled"


#----------------------------------Section 11----------------------------------#

# LINK CONTROL POLICY CONFIGURATION

# General Settings
link_control_policy_name = "Link-Control-Policy-1"
link_control_policy_description = "A Cisco Intersight Link Control Policy generated by the UCS Domain Deployment Tool."
link_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the link_control_policy_tags dictionary if no tags are needed, for example: link_control_policy_tags = {}

# Policy Detail Settings
link_control_policy_admin_state = "Enabled"     # Options: "Enabled", "Disabled"
link_control_policy_mode = "Normal"     # Options: "Normal", "Aggressive"


#----------------------------------Section 12----------------------------------#

# LINK AGGREGATION POLICY CONFIGURATION

# General Settings
link_aggregation_policy_name = "Link-Aggregation-Policy-1"
link_aggregation_policy_description = "A Cisco Intersight Link Aggregation Policy generated by the UCS Domain Deployment Tool."
link_aggregation_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the link_aggregation_policy_tags dictionary if no tags are needed, for example: link_aggregation_policy_tags = {}

# Policy Detail Settings
link_aggregation_policy_suspend_individual = False
link_aggregation_policy_lacp_rate = "Normal"        # Options: "Normal", "Fast"


#----------------------------------Section 13----------------------------------#

# PORT POLICY CONFIGURATION - FABRIC INTERCONNECT A

# General Settings
port_policy_a_name = "Port-Policy-1-A"
port_policy_a_description = "A Cisco Intersight Port Policy generated by the UCS Domain Deployment Tool."
port_policy_a_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the port_policy_a_tags dictionary if no tags are needed, for example: port_policy_a_tags = {}
port_policy_a_fabric_interconnect_model = "UCS-FI-6454"

# Unified Port Settings (These values should be set based on the Fabric Interconnect model)
port_policy_a_fc_port_mode_list = [{"Ports": "1-8"}]  # Empty the fc_port_mode_list list if no FC ports are needed, for example: port_policy_a_fc_port_mode_list = []

# Port Role Settings
## NOTE - To not configure a port role, leave the corresponding list empty, for example: port_policy_a_server_port_list = []
port_policy_a_server_port_list = [{"Ports": "9, 14-17, 22, 24-27"},]
port_policy_a_ethernet_uplink_port_list = [{"Ports": "28"},]
port_policy_a_fcoe_uplink_port_list = [
    {"Ports": "29, 31-32"},
    {"Ports": "33-34", "AdminSpeed": "25Gbps", "Fec": "Cl91"},
    {"Ports": "35-37", "AdminSpeed": "10Gbps"},
    ]
port_policy_a_fc_uplink_port_list = [{"Ports": "1-2", "AdminSpeed": "32Gbps", "VsanId": 100},]
port_policy_a_ethernet_uplink_port_channel_list = [{"PcId": 1, "Ports": "38-40"},]
port_policy_a_fcoe_uplink_port_channel_list = [
    {"PcId": 2, "Ports": "41, 42-44"},
    {"PcId": 3, "Ports": "45-46", "AdminSpeed": "10Gbps"},
    ]
port_policy_a_fc_uplink_port_channel_list = [{"PcId": 4, "Ports": "3-4", "AdminSpeed": "32Gbps", "VsanId": 101},]

## NOTE - An Ethernet Network Group Policy and Ethernet Network Control Policy must be provided when configuring Appliance Ports.
## The Deployment Tool will automatically create and provide the Ethernet Network Group Policy and Ethernet Network Control Policy.
## To override the policies created by the Deployment Tool, "EthNetworkGroupPolicy" and "EthNetworkControlPolicy" attribute keys can be provided for each set of Appliance Port dictionaries in the Appliance Port list variables.
## Here is an example for port_policy_a_appliance_port_list: port_policy_a_appliance_port_list = [{"Ports": "10", "EthNetworkGroupPolicy":"Eth-Net-Group-1", "EthNetworkControlPolicy":"Eth-Net-Control-1"}]
## Here is an example for port_policy_a_appliance_port_channel_list: port_policy_a_appliance_port_channel_list = [{"PcId": 5, "Ports": "11-13", "EthNetworkGroupPolicy":"Eth-Net-Group-1", "EthNetworkControlPolicy":"Eth-Net-Control-1"}]
port_policy_a_appliance_port_list = []
port_policy_a_appliance_port_channel_list = []


#----------------------------------Section 14----------------------------------#

# PORT POLICY CONFIGURATION - FABRIC INTERCONNECT B

# NOTE!!!!!!! - If using the same Port Policy for both Fabric Interconnects, set the following setting to True and skip to the next section.
shared_port_policy_for_both_fabric_interconnects = False

# General Settings
port_policy_b_name = "Port-Policy-1-B"
port_policy_b_description = "A Cisco Intersight Port Policy generated by the UCS Domain Deployment Tool."
port_policy_b_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the port_policy_b_tags dictionary if no tags are needed, for example: port_policy_b_tags = {}
port_policy_b_fabric_interconnect_model = "UCS-FI-6454"

# Unified Port Settings (These values should be set based on the Fabric Interconnect model)
port_policy_b_fc_port_mode_list = [{"Ports": "1-8"}]  # Empty the fc_port_mode_list list if no FC ports are needed, for example: port_policy_b_fc_port_mode_list = []

# Port Role Settings
## NOTE - To not configure a port role, leave the corresponding list empty, for example: port_policy_b_server_port_list = []
port_policy_b_server_port_list = [{"Ports": "9, 14-17, 22, 24-27"},]
port_policy_b_ethernet_uplink_port_list = [{"Ports": "28"},]
port_policy_b_fcoe_uplink_port_list = [
    {"Ports": "29, 31-32"},
    {"Ports": "33-34", "AdminSpeed": "25Gbps", "Fec": "Cl91"},
    {"Ports": "35-37", "AdminSpeed": "10Gbps"},
    ]
port_policy_b_fc_uplink_port_list = [{"Ports": "1-2", "AdminSpeed": "32Gbps", "VsanId": 200},]
port_policy_b_ethernet_uplink_port_channel_list = [{"PcId": 1, "Ports": "38-40"},]
port_policy_b_fcoe_uplink_port_channel_list = [
    {"PcId": 2, "Ports": "41, 42-44"},
    {"PcId": 3, "Ports": "45-46", "AdminSpeed": "10Gbps"},
    ]
port_policy_b_fc_uplink_port_channel_list = [{"PcId": 4, "Ports": "3-4", "AdminSpeed": "32Gbps", "VsanId": 201},]

## NOTE - An Ethernet Network Group Policy and Ethernet Network Control Policy must be provided when configuring Appliance Ports.
## The Deployment Tool will automatically create and provide the Ethernet Network Group Policy and Ethernet Network Control Policy.
## To override the policies created by the Deployment Tool, "EthNetworkGroupPolicy" and "EthNetworkControlPolicy" attribute keys can be provided for each set of Appliance Port dictionaries in the Appliance Port list variables.
## Here is an example for port_policy_b_appliance_port_list: port_policy_b_appliance_port_list = [{"Ports": "10", "EthNetworkGroupPolicy":"Eth-Net-Group-1", "EthNetworkControlPolicy":"Eth-Net-Control-1"}]
## Here is an example for port_policy_b_appliance_port_channel_list: port_policy_b_appliance_port_channel_list = [{"PcId": 5, "Ports": "11-13", "EthNetworkGroupPolicy":"Eth-Net-Group-1", "EthNetworkControlPolicy":"Eth-Net-Control-1"}]
port_policy_b_appliance_port_list = []
port_policy_b_appliance_port_channel_list = []


#----------------------------------Section 15----------------------------------#

# PORT POLICY CONFIGURATION - SHARED DEFAULT SETTINGS (Change only if needed, these settings can also be overridden on a per-port basis using the Port Role lists)

# Default Fabric Interconnect Hardware Slot ID Settings 
port_policy_default_slot_id_of_server_ports = 1
port_policy_default_slot_id_of_ethernet_uplink_ports = 1
port_policy_default_slot_id_of_fcoe_uplink_ports = 1
port_policy_default_slot_id_of_fc_uplink_ports = 1
port_policy_default_slot_id_of_appliance_ports = 1

# Default Fabric Interconnect Hardware Aggregate Port ID Settings
port_policy_default_aggregate_port_id_of_server_ports = 0
port_policy_default_aggregate_port_id_of_ethernet_uplink_ports = 0
port_policy_default_aggregate_port_id_of_fcoe_uplink_ports = 0
port_policy_default_aggregate_port_id_of_fc_uplink_ports = 0
port_policy_default_aggregate_port_id_of_appliance_ports = 0


#----------------------------------Section 16----------------------------------#

# NTP POLICY CONFIGURATION

# General Settings
ntp_policy_name = "NTP-Policy-1"
ntp_policy_description = "A Cisco Intersight NTP Policy generated by the UCS Domain Deployment Tool."
ntp_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ntp_policy_tags dictionary if no tags are needed, for example: ntp_policy_tags = {}

# Policy Detail Settings
ntp_policy_enable_ntp = True
ntp_policy_ntp_servers = ["192.168.1.11",]
ntp_policy_timezone = "America/New_York"       # Options: Timezone options can be found at https://intersight.com/apidocs/apirefs/ntp/Policies/model


#----------------------------------Section 17----------------------------------#

# SYSLOG POLICY CONFIGURATION

# General Settings
syslog_policy_name = "Syslog-Policy-1"
syslog_policy_description = "A Cisco Intersight Syslog Policy generated by the UCS Domain Deployment Tool."
syslog_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the syslog_policy_tags dictionary if no tags are needed, for example: syslog_policy_tags = {}

# Policy Detail Settings
syslog_policy_local_logging_minimum_severity_to_report = "warning"     # Options: "warning", "emergency", "alert", "critical", "error", "notice", "informational", "debug"
syslog_policy_remote_logging_server_list = [
    {"Enable": True,
     "Hostname/IP Address": "192.168.0.201",
     "Port": 514,
     "Protocol": "TCP",
     "Minimum Severity To Report": "alert"
     },
    {"Enable": False,
     "Hostname/IP Address": "0.0.0.0",
     "Port": 514,
     "Protocol": "UDP",
     "Minimum Severity To Report": "warning"
     },
    ]


#----------------------------------Section 18----------------------------------#

# NETWORK CONNECTIVITY POLICY CONFIGURATION

# General Settings
network_connectivity_policy_name = "Net-Connect-Policy-1"
network_connectivity_policy_description = "A Cisco Intersight Network Connectivity Policy generated by the UCS Domain Deployment Tool."
network_connectivity_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the network_connectivity_policy_tags dictionary if no tags are needed, for example: network_connectivity_policy_tags = {}

# Policy Detail Settings
network_connectivity_policy_obtain_ipv4_dns_server_from_dhcp = False
network_connectivity_policy_preferred_ipv4_dns_server = "192.168.1.10"
network_connectivity_policy_alternate_ipv4_dns_server = "0.0.0.0"
network_connectivity_policy_enable_dynamic_dns = False
network_connectivity_policy_dynamic_dns_update_domain = ""
network_connectivity_policy_enable_ipv6 = False
network_connectivity_policy_obtain_ipv6_dns_server_from_dhcp = False
network_connectivity_policy_preferred_ipv6_dns_server = ""
network_connectivity_policy_alternate_ipv6_dns_server = ""


#----------------------------------Section 19----------------------------------#

# SNMP POLICY CONFIGURATION

# General Settings
snmp_policy_name = "SNMP-Policy-1"
snmp_policy_description = "A Cisco Intersight SNMP Policy generated by the UCS Domain Deployment Tool."
snmp_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the snmp_policy_tags dictionary if no tags are needed, for example: snmp_policy_tags = {}

# Policy Detail Settings
snmp_policy_enable_snmp = True
snmp_policy_v2c_features = True
snmp_policy_v3_features = True
snmp_policy_port = 161
snmp_policy_system_contact = "Administrator"
snmp_policy_system_location = "Datacenter 001"
snmp_policy_access_community_string = "demo_access_string"
snmp_policy_community_access = "Disabled"      # Options: "Disabled", "Limited", "Full"
snmp_policy_trap_community_string = "demo_trap_string"
snmp_policy_engine_input_id = "0123456789ABC"
snmp_policy_users_list = [
    {"Name": "demouser",
     "Security Level": "AuthPriv",
     "Auth Type": "SHA",
     "Auth Password": "C1sco12345",
     "Privacy Type": "AES",
     "Privacy Password": "C1sco12345"
     },
    ]
snmp_policy_trap_destinations_list = [
    {"Enable": True,
     "SNMP Version": "V3",
     "User": "demouser",
     "Trap Type": "Trap",
     "Destination Address": "192.168.0.101",
     "Port": 162
     },
    {"Enable": True,
     "SNMP Version": "V2",
     "Community String": "demo_trap_string",
     "Trap Type": "Trap",
     "Destination Address": "192.168.0.102",
     "Port": 162
     },
    ]


#----------------------------------Section 20----------------------------------#

# SYSTEM QOS POLICY CONFIGURATION

# General Settings
system_qos_policy_name = "System-QoS-Policy-1"
system_qos_policy_description = "A Cisco Intersight System QoS Policy generated by the UCS Domain Deployment Tool."
system_qos_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the system_qos_policy_tags dictionary if no tags are needed, for example: system_qos_policy_tags = {}

# Policy Detail Settings
## For additional info on QoS class setting options, go to https://intersight.com/apidocs/apirefs/fabric/SystemQosPolicies/model.
system_qos_policy_class_settings_list = [
    {"Name": "Best Effort", "AdminState": "Enabled", "Cos": 255, "Weight": 5, "PacketDrop": True, "Mtu": 1500},
    {"Name": "FC", "AdminState": "Enabled", "Cos": 3, "Weight": 5, "PacketDrop": False, "Mtu": 2240},
    {"Name": "Platinum", "AdminState": "Disabled", "Cos": 5, "Weight": 10, "PacketDrop": True, "Mtu": 1500},
    {"Name": "Gold", "AdminState": "Disabled", "Cos": 4, "Weight": 9, "PacketDrop": True, "Mtu": 1500},
    {"Name": "Silver", "AdminState": "Disabled", "Cos": 2, "Weight": 8, "PacketDrop": True, "Mtu": 1500},
    {"Name": "Bronze", "AdminState": "Disabled", "Cos": 1, "Weight": 7, "PacketDrop": True, "Mtu": 1500}
    ]


#----------------------------------Section 21----------------------------------#

# SWITCH CONTROL POLICY CONFIGURATION

# General Settings
switch_control_policy_name = "Switch-Control-Policy-1"
switch_control_policy_description = "A Cisco Intersight Switch Control Policy generated by the UCS Domain Deployment Tool."
switch_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the switch_control_policy_tags dictionary if no tags are needed, for example: switch_control_policy_tags = {}

# Policy Detail Settings
switch_control_policy_enable_vlan_port_count_optimization = False
switch_control_policy_mac_address_table_aging_time_option = "Default"     # Options: "Default", "Custom", "Never"
switch_control_policy_mac_address_table_aging_time_custom_value_in_seconds = 14500
switch_control_policy_link_control_message_interval_in_seconds = 15
switch_control_policy_link_control_recovery_action = "None"   # Options: "None", "Reset"


#----------------------------------Section 22----------------------------------#

# CUSTOM DEFAULT PRE-REQUISITE AND SUPPORT POLICIES (Change only if using previously created default policies. Otherwise these policies will be automatically created by the UCS Domain Deployment Tool)

# Custom Default Pre-requisite and Support Policies for VLAN Policies
custom_default_multicast_policy_name = ""

# Custom Default Pre-requisite and Support Policies for Port Policies
custom_default_ethernet_network_group_policy_name = ""
custom_default_ethernet_network_control_policy_name = ""
custom_default_flow_control_policy_name = ""
custom_default_link_control_policy_name = ""
custom_default_link_aggregation_policy_name = ""


####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to convert a list of strings in string type format to list type format.
def string_to_list_maker(string_list,
                         remove_duplicate_elements_in_list=True
                         ):
    """This function converts a list of strings in string type format to list
    type format. The provided string should contain commas, semicolons, or
    spaces as the separator between strings. For each string in the list,
    leading and rear spaces will be removed. Duplicate strings in the list are
    removed by default.

    Args:
        string_list (str):
            A string containing an element or range of elements.

        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements are
            removed from the provided string list. The default value is True.

    Returns:
        A list of elements.   
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.

            separator (str):
                The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.   
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            provided_list (list): A list of elements to be separated.

            separator (str): The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.        
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element, separator)
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    staged_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list, " ")
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list, ",")
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list, ";")
    # Split provided list by hyphens.
    for post_semicolon_split_string_set in post_semicolon_split_list:
        staged_list.append(post_semicolon_split_string_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        final_list = list(set(staged_list))
    return final_list


# Establish function to convert a list of numbers in string type format to list type format.
def integer_number_list_maker(string_list,
                              remove_duplicate_elements_in_list=True,
                              sort_elements_in_list=True
                              ):
    """This function converts a list of numbers in string type format
    to list type format. The provided string should contain commas,
    semicolons, or spaces as the separator between numbers. Number
    ranges can be configured using hyphens. An example entry would be
    "1, 2, 3, 4, 5, 6, 7, 7-14, 25". For each number in the list,
    leading and rear spaces will be removed. Duplicate numbers in the
    list are removed by default.

    Args:
        string_list (str):
            A string containing a number or range of numbers.
        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements
            are removed from the provided string list. The default
            value is True.
        sort_elements_in_list (bool):
            Optional; A setting to determine if the elements in the provided
            string list should be sorted in ascending order. The default value
            is True.

    Returns:
        A list of integers.            
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            provided_list (list):
                A list of elements to be separated.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.               
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element,
                                                               separator
                                                               )
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    integer_number_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list,
                                                " "
                                                )
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list,
                                                   ","
                                                   )
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list,
                                                       ";"
                                                       )
    # Split provided number ranges in the list by hyphens.
    for post_semicolon_split_number_set in post_semicolon_split_list:
        if "-" in post_semicolon_split_number_set:
            if post_semicolon_split_number_set[0] != "-" and post_semicolon_split_number_set[-1] != "-":
                hyphen_split_list = string_to_list_separator(post_semicolon_split_number_set,
                                                             "-"
                                                             )
                # Limit new list to a maximum of two elements.
                fixed_hyphen_split_list = hyphen_split_list[:2]
                # Enumerate the numbers in the hyphen split list.
                integer_starting_number_of_provided_range = int(fixed_hyphen_split_list[0])
                integer_ending_number_of_provided_range = int(fixed_hyphen_split_list[1])
                enumerated_range_list = range(
                    integer_starting_number_of_provided_range,
                    (integer_ending_number_of_provided_range + 1)
                    )
                integer_number_list.extend(enumerated_range_list)
        else:
            integer_of_current_number_set = int(post_semicolon_split_number_set)
            integer_number_list.append(integer_of_current_number_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        integer_number_list = list(set(integer_number_list))
    if sort_elements_in_list:
        integer_number_list = sorted(integer_number_list)
    return integer_number_list


# Establish base class for configuring Intersight objects with IDs such as Ports, VLANs and VSANs
class IdConfigurator:
    """This class serves as a base class for configuring the IDs of objects in
    Intersight policies. Examples of the objects that would use these IDs are
    ports, VLANs, and VSANs.
    """
    object_type = "ID Configurator"
    attributes_that_require_special_handling = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        if id_list is None:
            self.id_list = []
        else:
            self.id_list = id_list
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def enumerated_id_range_retriever(self,
                                      id_dictionary,
                                      id_key
                                      ):
        """This function captures provided ID ranges for enumeration and
        returns the enumerated list.

        Args:
            id_dictionary (dict):
                The dictionary containing the ID or range of IDs to be
                enumerated.
            id_key (str):
                The key name of the ID to be enumerated.

       Returns:
            A list of enumerated integers for the provided IDs in a format
            consumable by the Intersight API.
            
        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the ID type is inaccessible from the
                ID dictionary. The key may be missing or misspelled.       
        """
        # Verify ID range has been configured in provided ID dictionary
        try:
            provided_id_range = id_dictionary[id_key]
        except KeyError:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} "
                  f"settings for the {self.policy_type} named "
                  f"{self.policy_name}, there was an issue accessing the range "
                  f"of IDs to be configured.")
            print(f"Please verify a key named '{id_key}' exists in the "
                  f"ID list variable for the {self.object_type} "
                  "settings.\n")
            print("Please review and resolve any error messages, then "
                  "re-attempt execution.\n")
            print("Exception Message: ")
            traceback.print_exc()
            sys.exit(0)
        return integer_number_list_maker(provided_id_range)

    def attribute_handler(self,
                          staged_intersight_api_body
                          ):
        """
        This function is used to retrieve the MOIDs for provided attributes
        that require them for configuration through the Intersight API.

        Args:
            staged_intersight_api_body (dict):
                The staged Intersight API body dictionary being prepared for
                configuration on Intersight.

        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the name of a required attribute is
                inaccessible from the ID dictionary. The key may be missing or
                misspelled.
        """
        if self.attributes_that_require_special_handling:
            for id_attribute in self.attributes_that_require_special_handling:
                # If provided, add default attribute option to staged Intersight API body
                if id_attribute.get("DefaultOption"):
                    id_attribute_default_option = getattr(self,
                                                          id_attribute.get("DefaultOption")
                                                          )
                    if id_attribute_default_option:
                        if id_attribute["Name"] not in staged_intersight_api_body:
                            staged_intersight_api_body[id_attribute["Name"]] = id_attribute_default_option
                # Verify mandatory attributes are present in the staged Intersight API body
                if id_attribute.get("Mandatory"):
                    try:
                        verify_id_attribute_presence = staged_intersight_api_body[id_attribute["Name"]]
                    except KeyError:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{self.object_type} settings for the "
                              f"{self.policy_type} named {self.policy_name}, "
                              f"there was an issue accessing the value for "
                              f"the {id_attribute['Type']}.")
                        print("Please verify the key named "
                              f"'{id_attribute['Name']}' exists in the "
                              f"ID list variable for the {self.object_type} "
                              "settings.\n")
                        print("Please review and resolve any error messages, "
                              f"then re-attempt execution.\n")
                        print("Exception Message: ")
                        traceback.print_exc()
                        sys.exit(0)
                    # Retrieve MOID if required
                    if id_attribute.get("MoidRequired"):
                        id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                             intersight_api_key=None,
                                                                             object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                             intersight_api_path=id_attribute["IntersightAPIPath"],
                                                                             object_type=id_attribute["Type"],
                                                                             organization=self.organization,
                                                                             preconfigured_api_client=self.api_client
                                                                             )
                        staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}
                else:
                    # Retrieve MOID if required for optional attributes
                    if id_attribute.get("MoidRequired"):
                        if staged_intersight_api_body.get(id_attribute["Name"]):
                            id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                 intersight_api_key=None,
                                                                                 object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                                 intersight_api_path=id_attribute["IntersightAPIPath"],
                                                                                 object_type=id_attribute["Type"],
                                                                                 organization=self.organization,
                                                                                 preconfigured_api_client=self.api_client
                                                                                 )
                            staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}


# Establish base classes for configuring Intersight UCS Policies
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=self.intersight_api_path,
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsDomainPolicy(UcsPolicy):
    """This class is used to configure a UCS Domain Policy in Intersight that
    is logically directly attached to UCS Fabric Interconnects through UCS
    Domain Profiles.
    """
    object_type = "Directly Attached UCS Domain Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_domain_profile_name = ucs_domain_profile_name
        self.fabric_interconnect = fabric_interconnect

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.fabric_interconnect}')"
            )

    def _attach_ucs_domain_profile(self):
        """This is a function to attach an Intersight UCS Domain Profile to an
        Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Attach UCS Domain Profile
        if self.ucs_domain_profile_name:
            print("Attaching the UCS Domain Profile named "
                  f"{self.ucs_domain_profile_name}...")
            # Get UCS Domain Profile MOID
            ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       object_name=self.ucs_domain_profile_name,
                                                                       intersight_api_path="fabric/SwitchClusterProfiles",
                                                                       object_type="UCS Domain Profile",
                                                                       organization=self.organization,
                                                                       preconfigured_api_client=self.api_client
                                                                       )
            # Get UCS Domain Profile object dictionary attributes
            ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                                     intersight_api_key=None,
                                                                     intersight_api_path="fabric/SwitchClusterProfiles",
                                                                     object_moid=ucs_domain_profile_moid,
                                                                     object_type="UCS Domain Profile",
                                                                     preconfigured_api_client=self.api_client
                                                                     )
            # Get Switch Profiles that are attached to the UCS Domain Profile
            ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
            if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
                print("\nA configuration error has occurred!\n")
                print("The provided UCS Domain Profile named "
                      f"{self.ucs_domain_profile_name} is not configured with "
                      "two attached Switch Profiles.")
                print("To proceed, two Switch Profiles must be attached to the "
                      "provided UCS Domain Profile.")
                print("Please update the configuration of the provided UCS "
                      f"Domain Profile, then re-attempt execution.\n")
                sys.exit(0)
            else:
                fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
                fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
            # Update the API body with the appropriate Switch Profile MOIDs based on selected Fabric Interconnects
            if self.fabric_interconnect not in ("AB", "BA", "A", "B"):
                print("\nA configuration error has occurred!\n")
                print("The provided UCS Domain Profile Fabric Interconnect "
                      "value of "
                      f"'{self.fabric_interconnect}' "
                      "is not supported.")
                print("To proceed, the Fabric Interconnect value for the "
                      "UCS Domain Profile must be 'AB', 'A', or 'B'.")
                print("Please update the configuration of the provided UCS "
                      "Domain Profile Fabric Interconnect, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            else:
                if self.fabric_interconnect == "A":
                    print("The attachment will be made to Fabric Interconnect "
                          "A.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_a_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]
                elif self.fabric_interconnect == "B":
                    print("The attachment will be made to Fabric Interconnect "
                          "B.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_b_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]
                else:
                    print("The attachment will be made to Fabric Interconnects "
                          "A and B.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_a_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"},
                        {"Moid": fabric_interconnect_b_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Domain Profile attached, if specified
        self._attach_ucs_domain_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


# Establish classes and functions to make UCS Domain Profile
class UcsDomainProfile:
    """This class is used to configure a UCS Domain Profile in Intersight.
    """
    object_type = "UCS Domain Profile"
    intersight_api_path = "fabric/SwitchClusterProfiles"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 ucs_domain_profile_name,
                 ucs_domain_profile_description="",
                 ucs_domain_profile_organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.ucs_domain_profile_name = ucs_domain_profile_name
        self.ucs_domain_profile_description = ucs_domain_profile_description
        self.ucs_domain_profile_organization = ucs_domain_profile_organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.ucs_domain_profile_name,
            "Description": self.ucs_domain_profile_description,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.ucs_domain_profile_description}', "
            f"'{self.ucs_domain_profile_organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.ucs_domain_profile_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=self.intersight_api_path,
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        ucs_domain_profile_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                intersight_api_key=None,
                                                                                object_name=self.ucs_domain_profile_organization,
                                                                                intersight_api_path="organization/Organizations",
                                                                                object_type="Organization",
                                                                                preconfigured_api_client=self.api_client
                                                                                )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": ucs_domain_profile_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.ucs_domain_profile_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class SwitchProfile(UcsDomainProfile):
    """This class serves as a base class for configuring Switch Profiles.
    """
    object_type = "Switch Profile"
    intersight_api_path = "fabric/SwitchProfiles"
    cluster_profile_type = "UCS Domain Profile"
    cluster_profile_intersight_api_path = "fabric/SwitchClusterProfiles"
    attributes_that_require_special_handling = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 ucs_domain_profile_name,
                 ucs_domain_profile_description="",
                 ucs_domain_profile_organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 fabric_interconnect="A"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         ucs_domain_profile_name,
                         ucs_domain_profile_description,
                         ucs_domain_profile_organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.fabric_interconnect = fabric_interconnect
        self.intersight_api_body = {
            "Description": self.ucs_domain_profile_description,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.ucs_domain_profile_description}', "
            f"'{self.ucs_domain_profile_organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.fabric_interconnect}')"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.ucs_domain_profile_name}-{self.fabric_interconnect}'"

    def _post_intersight_switch_profile(self,
                                        switch_profile_name,
                                        moid=None
                                        ):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Args:
            switch_profile_name (str):
                The name of the Switch Profile to be posted on Intersight.
            moid (str):
                Optional; The Intersight MOID of the object to be posted
                on Intersight. The default value is None.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        if moid:
            full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
        else:
            full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            if moid:
                print(f"Configuring the underlying {self.object_type} "
                      f"named {switch_profile_name}...")
                print(f"The configuration of the {self.object_type} for "
                      f"Fabric Interconnect {self.fabric_interconnect} has "
                      "been updated.")
            else:
                print(f"Configuring the underlying {self.object_type} "
                      f"named {switch_profile_name}...")
                print(f"The configuration of the {self.object_type} for "
                      f"Fabric Interconnect {self.fabric_interconnect} has "
                      "completed.")
            return "The POST method was successful."
        except Exception:
            print("\nA configuration error has occurred!\n")
            if moid:
                print(f"Unable to update the underlying {self.object_type} "
                      f"named {switch_profile_name} for "
                      f"Fabric Interconnect {self.fabric_interconnect} "
                      "under the Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
            else:
                print("Unable to configure the underlying "
                      f"{self.object_type} named {switch_profile_name} for "
                      f"Fabric Interconnect {self.fabric_interconnect} "
                      "under the Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def object_maker(self):
        """This function applies the provided configuration to the
        targeted profile.
        """ 
        # Begin configuration of the Switch Profile
        # Verify that accepted values for the Fabric Interconnect have been provided
        if self.fabric_interconnect not in ("A", "B"):
            print("\nA configuration error has occurred!\n")
            print(f"The provided value of '{self.fabric_interconnect}' for the "
                  f"{self.object_type} Fabric Interconnect is not supported.")
            print(f"To proceed, the {self.object_type} Fabric Interconnect "
                  "value must be 'A' or 'B'.")
            print(f"Please update the value for the {self.object_type} "
                  f"Fabric Interconnect, then re-attempt execution.\n")
            sys.exit(0)        
        # Update the API body with the Switch Profile name, depending on the target Fabric Interconnect
        switch_profile_name = f"{self.ucs_domain_profile_name}-{self.fabric_interconnect}"
        self.intersight_api_body["Name"] = switch_profile_name
        # Retrieve the UCS Domain Profile MOID
        ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                   intersight_api_key=None,
                                                                   object_name=self.ucs_domain_profile_name,
                                                                   intersight_api_path=self.cluster_profile_intersight_api_path,
                                                                   object_type=self.cluster_profile_type,
                                                                   organization=self.ucs_domain_profile_organization,
                                                                   preconfigured_api_client=self.api_client
                                                                   )
        # Update the API body with the UCS Domain Profile a.k.a. Switch Cluster Profile
        self.intersight_api_body["SwitchClusterProfile"] = {"Moid": ucs_domain_profile_moid}
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # POST the API body to Intersight
        self._post_intersight_switch_profile(switch_profile_name)


def ucs_domain_profile_maker(intersight_api_key_id,
                             intersight_api_key,
                             ucs_domain_profile_name,
                             ucs_domain_profile_description="",
                             ucs_domain_profile_organization="default",
                             intersight_base_url="https://www.intersight.com/api/v1",
                             tags=None,
                             preconfigured_api_client=None
                             ):
    """This is a function used to make a UCS Domain Profile on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_domain_profile_name (str):
            The name of the UCS Domain Profile to be created.
        ucs_domain_profile_description (str):
            Optional; The description of the UCS Domain Profile to be created.
            The default value is an empty string ("").
        ucs_domain_profile_organization (str):
            Optional; The Intersight account organization of the UCS Domain
            Profile. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            profile. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool, policy, or profile on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create UCS Domain Profile object in Intersight
    builder(UcsDomainProfile(intersight_api_key_id=intersight_api_key_id,
                             intersight_api_key=intersight_api_key,
                             ucs_domain_profile_name=ucs_domain_profile_name,
                             ucs_domain_profile_description=ucs_domain_profile_description,
                             ucs_domain_profile_organization=ucs_domain_profile_organization,
                             intersight_base_url=intersight_base_url,
                             tags=tags,
                             preconfigured_api_client=preconfigured_api_client
                             ))

    # Define and create Switch Profile object for Fabric Interconnect A in Intersight
    builder(SwitchProfile(intersight_api_key_id=intersight_api_key_id,
                          intersight_api_key=intersight_api_key,
                          ucs_domain_profile_name=ucs_domain_profile_name,
                          ucs_domain_profile_description=ucs_domain_profile_description,
                          ucs_domain_profile_organization=ucs_domain_profile_organization,
                          intersight_base_url=intersight_base_url,
                          tags=tags,
                          preconfigured_api_client=preconfigured_api_client,
                          fabric_interconnect="A"
                          ))

    time.sleep(2)

    # Define and create Switch Profile object for Fabric Interconnect B in Intersight
    builder(SwitchProfile(intersight_api_key_id=intersight_api_key_id,
                          intersight_api_key=intersight_api_key,
                          ucs_domain_profile_name=ucs_domain_profile_name,
                          ucs_domain_profile_description=ucs_domain_profile_description,
                          ucs_domain_profile_organization=ucs_domain_profile_organization,
                          intersight_base_url=intersight_base_url,
                          tags=tags,
                          preconfigured_api_client=preconfigured_api_client,
                          fabric_interconnect="B"
                          ))


# Establish function to assign domain profile to targets
def assign_and_deploy_ucs_domain_profile(intersight_api_key_id,
                                         intersight_api_key,
                                         ucs_domain_profile_name,
                                         target_assignment_identifier="",
                                         assign_ucs_domain_profile=True,
                                         deploy_ucs_domain_profile=False,
                                         ucs_domain_profile_organization="default",
                                         intersight_base_url="https://www.intersight.com/api/v1",
                                         preconfigured_api_client=None
                                         ):
    """This is a function to assign and deploy a UCS Domain Profile to
    an Intersight Target.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        ucs_domain_profile_name (str):
            The name of the UCS Domain Profile to be assigned and/or deployed.
        target_assignment_identifier (str):
            Optional; The Intersight Target that the provided UCS Domain
            Profile should be assigned to. The default value is an empty string 
            (""). An empty string or None can be provided if no Intersight
            Target is being set or the UCS Domain Profile is already assigned
            to an Intersight Target.
        assign_ucs_domain_profile (bool):
            Optional; This argument enables or disables the option to assign
            the provided UCS Domain Profile to the provided Intersight Target.
            The default value is True.
        assign_ucs_domain_profile (bool):
            Optional; This argument enables or disables the option to deploy
            the provided UCS Domain Profile to the provided Intersight Target
            or a previously assigned Intersight Target.
            The default value is False.
        ucs_domain_profile_organization (str):
            Optional; The Intersight account organization of the UCS Domain
            Profile. The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def post_intersight_switch_profile_update(switch_profile_moid,
                                              switch_profile_api_body,
                                              switch_profile_fabric_id
                                              ):
        """This is a function to update an Intersight Switch Profile by
        performing a POST through the Intersight API.

        Args:
            switch_profile_moid (str):
                The Intersight MOID of the Switch Profile to be updated
                on Intersight.
            switch_profile_api_body (dict):
                The updated Switch Profile Intersight API body.
            switch_profile_fabric_id (str):
                The Fabric ID of the Fabric Interconnect that the Switch
                Profile will be assigned to.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/fabric/SwitchProfiles/{switch_profile_moid}"
        try:
            api_client.call_api(resource_path=full_intersight_api_path,
                                method="POST",
                                body=switch_profile_api_body,
                                auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                )
            print("The configuration of the Switch Profile for Fabric "
                  f"Interconnect {switch_profile_fabric_id} has been updated.")
            print("Any accompanying Intersight Requests will be initiated.")
            return "The POST method was successful."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("Unable to update the Switch Profile for Fabric Interconnect "
                  f"{switch_profile_fabric_id}.")
            print("The Intersight API resource path for the Switch Profile is "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."
    
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Get UCS Domain Profile MOID
    ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                               intersight_api_key=None,
                                                               object_name=ucs_domain_profile_name,
                                                               intersight_api_path="fabric/SwitchClusterProfiles",
                                                               object_type="UCS Domain Profile",
                                                               organization=ucs_domain_profile_organization,
                                                               preconfigured_api_client=api_client
                                                               )
    # Get UCS Domain Profile object dictionary attributes
    ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                             intersight_api_key=None,
                                                             intersight_api_path="fabric/SwitchClusterProfiles",
                                                             object_moid=ucs_domain_profile_moid,
                                                             object_type="UCS Domain Profile",
                                                             preconfigured_api_client=api_client
                                                             )
    # Get Switch Profiles that are attached to the UCS Domain Profile
    ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
    if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
        print("\nA configuration error has occurred!\n")
        print("The provided UCS Domain Profile named "
              f"{ucs_domain_profile_name} is not configured with two "
              "attached Switch Profiles.")
        print("To proceed, two Switch Profiles must be attached to the "
              "provided UCS Domain Profile.")
        print("Please update the configuration of the provided UCS "
              f"Domain Profile, then re-attempt execution.\n")
        sys.exit(0)
    else:
        fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
        fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
    # Assign UCS Domain Profile
    if assign_ucs_domain_profile:
        print("\nAssigning the UCS Domain Profile named "
              f"{ucs_domain_profile_name}...")
        print("The provided Intersight Target identifier for assignment is "
              f"'{target_assignment_identifier}'.")
        # Convert provided Intersight Target Identifier
        if target_assignment_identifier:
            provided_target_identifiers = string_to_list_maker(target_assignment_identifier)
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the UCS Domain "
                  "Profile to an Intersight Target.")
            print("In order to assign the provided UCS Domain Profile, an "
                  "Intersight Target identifier must also be provided.")
            print("Please check the value provided for the "
                  "Intersight Target identifier.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)            
        # Find provided Intersight Target
        retrieved_intersight_targets = get_intersight_objects(intersight_api_key_id=None,
                                                              intersight_api_key=None,
                                                              intersight_api_path="asset/Targets",
                                                              object_type="Target",
                                                              preconfigured_api_client=api_client
                                                              )
        if retrieved_intersight_targets.get("Results"):
            for intersight_target in retrieved_intersight_targets.get("Results"):
                for target_identifier in provided_target_identifiers:
                    for target_identifier_type in ("TargetId", "Name", "IpAddress"):
                        if target_identifier in intersight_target.get(target_identifier_type):
                            if intersight_target.get("TargetType") == "UCSFIISM":
                                matching_intersight_target = intersight_target
                                break
                            else:
                                print("\nA configuration error has occurred!\n")
                                print("There was an issue assigning the UCS "
                                      "Domain Profile to an Intersight Target.")
                                print("The Intersight Target with the provided "
                                      "identifier of "
                                      f"'{target_assignment_identifier}' "
                                      "was found, but is not supported with "
                                      "Intersight UCS Domain Profiles.")
                                print("Please provide a supported Intersight "
                                      "Target.")
                                print("Once the issue has been resolved, "
                                      "re-attempt execution.\n")
                                sys.exit(0)
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("There was an issue assigning the UCS Domain "
                              "Profile to an Intersight Target.")
                        print("The Intersight Target with the provided "
                              f"identifier of '{target_assignment_identifier}' "
                              "was not found.")
                        print("Please check the Intersight Account named "
                              f"{intersight_account_name}.")
                        print("Verify through the API or GUI that the needed "
                              "Intersight Target is present.")
                        print("If the needed Intersight Target is missing, "
                              "please register it.")
                        print("Once the issue has been resolved, "
                              "re-attempt execution.\n")
                        sys.exit(0)
                    break
                else:
                    print("\nA configuration error has occurred!\n")
                    print("There was an issue assigning the UCS Domain "
                          "Profile to an Intersight Target.")
                    print("Please check the value provided for the "
                          "Intersight Target identifier.")
                    print("The Intersight Target with the provided "
                          f"identifier of '{target_assignment_identifier}' "
                          "was not found.")
                    print("Please check the Intersight Account named "
                          f"{intersight_account_name}.")
                    print("Verify through the API or GUI that the needed "
                          "Intersight Target is present.")
                    print("If the needed Intersight Target is missing, "
                          "please register it.")
                    print("Once the issue has been resolved, re-attempt "
                          "execution.\n")
                    sys.exit(0)                           
                break
            else:
                print("\nA configuration error has occurred!\n")
                print("There was an issue assigning the UCS Domain Profile to "
                      "an Intersight Target.")
                print("The Intersight Target with the provided identifier of "
                      f"'{target_assignment_identifier}' was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      "Intersight Target is present.")
                print("If the needed Intersight Target is missing, please "
                      "register it.")
                print(f"Once the issue has been resolved, re-attempt "
                      "execution.\n")
                sys.exit(0)
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the UCS Domain Profile to an "
                  "Intersight Target.")
            print(f"The Intersight Target with the provided identifier of "
                  f"'{target_assignment_identifier}' was not found.")
            print("No Intersight targets are currently available in the "
                  f"Intersight account named {intersight_account_name}.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed Intersight "
                  "Target is present.")
            print("If the needed Intersight Target is missing, please register "
                  "it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
        # Log name of found matching Intersight Target
        matching_intersight_target_name = matching_intersight_target.get("Name")
        print("A matching Intersight Target named "
              f"{matching_intersight_target_name} has been found for "
              "assignment.")
        # Find the Intersight Network Elements (Fabric Interconnects) related to the Intersight Target
        matching_network_elements_list = []
        retrieved_intersight_network_elements = get_intersight_objects(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       intersight_api_path="network/Elements",
                                                                       object_type="Fabric Interconnect",
                                                                       preconfigured_api_client=api_client
                                                                       )
        if retrieved_intersight_network_elements.get("Results"):
            for network_element in retrieved_intersight_network_elements.get("Results"):
                if network_element.get("RegisteredDevice") == matching_intersight_target.get("RegisteredDevice"):
                    matching_network_elements_list.append(network_element)
            # Determine the Fabric ID for the found matching Fabric Interconnect Network Elements
            if len(matching_network_elements_list) != 2:
                print("\nA configuration error has occurred!\n")
                print("There was an issue assigning the UCS Domain Profile to "
                      "an Intersight Target.")
                print(f"The Intersight Target with the provided identifier of "
                      f"'{target_assignment_identifier}' does not have two "
                      "Fabric Interconnects.")
                print("To proceed, two Fabric Interconnects "
                      "(no more and no less) must be registered under the "
                      "provided Intersight Target.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      "Intersight Target is present, properly registered and "
                      "in a healthy state.")
                print("If the needed Intersight Target is missing, please "
                      "register it.")
                print("Once the issue has been resolved, re-attempt "
                      "execution.\n")
                sys.exit(0)
            else:
                for fabric_interconnect_network_element in matching_network_elements_list:
                    if fabric_interconnect_network_element.get("SwitchId") == "A":
                        fabric_interconnect_a_network_element = fabric_interconnect_network_element
                    if fabric_interconnect_network_element.get("SwitchId") == "B":
                        fabric_interconnect_b_network_element = fabric_interconnect_network_element
        else:
            print("\nA configuration error has occurred!\n")
            print("There was an issue assigning the "
                  "UCS Domain Profile to an Intersight Target.")
            print("The Fabric Interconnects related to the Intersight Target "
                  "with the provided identifier of "
                  f"'{target_assignment_identifier}' were not found.")
            print("No Fabric Interconnects are currently registered under the "
                  f"Intersight account named {intersight_account_name}.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed Intersight "
                  "Target is present, properly registered and in a healthy "
                  "state.")
            print("If the needed Intersight Target is missing, please register "
                  "it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
        # Assign Service Profile to Fabric Interconnect A
        print("Assigning the underlying Switch Profile for Fabric "
              "Interconnect A...")
        fabric_interconnect_a_network_element_moid = fabric_interconnect_a_network_element.get("Moid")
        fabric_interconnect_a_switch_profile_assignment_api_body = {
            "AssignedSwitch": {"Moid": fabric_interconnect_a_network_element_moid}
            }
        post_intersight_switch_profile_update(
            switch_profile_moid=fabric_interconnect_a_switch_profile_moid,
            switch_profile_api_body=fabric_interconnect_a_switch_profile_assignment_api_body,
            switch_profile_fabric_id="A"
            )
        # Assign Service Profile to Fabric Interconnect B
        print("Assigning the underlying Switch Profile for Fabric "
              "Interconnect B...")
        fabric_interconnect_b_network_element_moid = fabric_interconnect_b_network_element.get("Moid")
        fabric_interconnect_b_switch_profile_assignment_api_body = {
            "AssignedSwitch": {"Moid": fabric_interconnect_b_network_element_moid}
            }
        post_intersight_switch_profile_update(
            switch_profile_moid=fabric_interconnect_b_switch_profile_moid,
            switch_profile_api_body=fabric_interconnect_b_switch_profile_assignment_api_body,
            switch_profile_fabric_id="B"
            )
    # Deploy UCS Domain Profile
    if deploy_ucs_domain_profile:
        print("\nDeploying the UCS Domain Profile named "
              f"{ucs_domain_profile_name}...")
        # Deploy Service Profile to Fabric Interconnect A
        print("Deploying the underlying Switch Profile for Fabric "
              "Interconnect A...")
        fabric_interconnect_a_switch_profile_deployment_api_body = {
            "Action": "Deploy"
            }
        post_intersight_switch_profile_update(
            switch_profile_moid=fabric_interconnect_a_switch_profile_moid,
            switch_profile_api_body=fabric_interconnect_a_switch_profile_deployment_api_body,
            switch_profile_fabric_id="A"
            )
        # Deploy Service Profile to Fabric Interconnect B
        print("Deploying the underlying Switch Profile for Fabric "
              "Interconnect B...")
        fabric_interconnect_b_switch_profile_deployment_api_body = {
            "Action": "Deploy"
            }
        post_intersight_switch_profile_update(
            switch_profile_moid=fabric_interconnect_b_switch_profile_moid,
            switch_profile_api_body=fabric_interconnect_b_switch_profile_deployment_api_body,
            switch_profile_fabric_id="B"
            )


# Establish classes and functions to make Multicast Policy
class MulticastPolicy(UcsPolicy):
    """This class is used to configure a Multicast Policy in Intersight.
    """
    object_type = "Multicast Policy"
    intersight_api_path = "fabric/MulticastPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 snooping_state="Enabled",
                 querier_state="Disabled",
                 querier_ip_address="",
                 querier_ip_address_peer=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.snooping_state = snooping_state
        self.querier_state = querier_state
        self.querier_ip_address = querier_ip_address
        self.querier_ip_address_peer = querier_ip_address_peer
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "SnoopingState": self.snooping_state,
            "QuerierState": self.querier_state,
            "QuerierIpAddress": self.querier_ip_address,
            "QuerierIpAddressPeer": self.querier_ip_address_peer,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.snooping_state}', "
            f"'{self.querier_state}', "
            f"'{self.querier_ip_address}', "
            f"'{self.querier_ip_address_peer}')"
            )


def multicast_policy_maker(intersight_api_key_id,
                           intersight_api_key,
                           policy_name,
                           snooping_state="Enabled",
                           querier_state="Disabled",
                           querier_ip_address="",
                           querier_ip_address_peer="",
                           policy_description="",
                           organization="default",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           tags=None,
                           preconfigured_api_client=None
                           ):
    """This is a function used to make a Multicast Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        snooping_state (str):
            Optional; The desired administrative state of the IGMP snooping for
            associated VLANs. The default value is "Enabled".
        querier_state (str):
            Optional; The desired administrative state of the IGMP querier for
            associated VLANs. The default value is "Disabled".
        querier_ip_address (str):
            Optional; If the administrative state of the IGMP querier is
            enabled, this sets the desired IGMP querier IP address. The default
            value is an empty string ("").
        querier_ip_address_peer (str):
            Optional; If the administrative state of the IGMP querier is
            enabled, this sets the desired IGMP querier IP address peer. The
            default value is an empty string ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Multicast Policy object in Intersight
    builder(MulticastPolicy(intersight_api_key_id=intersight_api_key_id,
                            intersight_api_key=intersight_api_key,
                            policy_name=policy_name,
                            policy_description=policy_description,
                            organization=organization,
                            intersight_base_url=intersight_base_url,
                            tags=tags,
                            preconfigured_api_client=preconfigured_api_client,
                            snooping_state=snooping_state,
                            querier_state=querier_state,
                            querier_ip_address=querier_ip_address,
                            querier_ip_address_peer=querier_ip_address_peer
                            ))


# Establish classes and functions to make VLAN Policy
class VlanPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a VLAN Policy in Intersight.
    """
    object_type = "VLAN Policy"
    intersight_api_path = "fabric/EthNetworkPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect
                         )

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.fabric_interconnect}')"
            )


class Vlan(IdConfigurator):
    """This class serves as a base class for configuring the IDs of VLANs in
    Intersight policies.
    """
    object_type = "VLAN"
    id_type = "Vlan"
    intersight_api_path = "fabric/Vlans"
    policy_type = "VLAN Policy"
    policy_intersight_api_path = "fabric/EthNetworkPolicies"
    attributes_that_require_special_handling = [
        {"Name": "Name",
         "Type": "VLAN Name Prefix",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         },
        {"Name": "MulticastPolicy",
         "Type": "Multicast Policy",
         "IntersightAPIPath": "fabric/MulticastPolicies",
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_multicast_policy_name"
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_multicast_policy_name="",
                 native_vlan_id=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        self.default_multicast_policy_name = default_multicast_policy_name
        self.native_vlan_id = native_vlan_id

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"'{self.default_multicast_policy_name}', "
            f"{self.native_vlan_id})"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def post_intersight_vlan(vlan_name,
                                 body,
                                 moid=None
                                 ):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                vlan_name (str):
                    The name of the VLAN to be posted on Intersight.
                body (dict):
                    The body of the object to be posted on Intersight.
                moid (str):
                    Optional; The Intersight MOID of the object to be posted
                    on Intersight. The default value is None.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            if moid:
                full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
            else:
                full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                if moid:
                    print(f"The configuration of {self.object_type} "
                          f"{vlan_name} has been updated.")
                else:
                    print(f"The configuration of {self.object_type} "
                          f"{vlan_name} has completed.")
                return "The POST method was successful."
            except Exception:
                print("\nA configuration error has occurred!\n")
                if moid:
                    print(f"Unable to update {self.object_type} "
                          f"{vlan_name} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                else:
                    print(f"Unable to configure {self.object_type} "
                          f"{vlan_name} under the Intersight "
                          f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."

        if self.id_list:
            vlans_id_key = f"{self.id_type}s"
            # Retrieving the VLAN Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=self.policy_intersight_api_path,
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           intersight_base_url=self.intersight_base_url,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                vlans_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                               vlans_id_key
                                                                               )
                staged_intersight_api_body = copy.deepcopy(id_dictionary)
                staged_intersight_api_body.pop(vlans_id_key)
                staged_intersight_api_body["EthNetworkPolicy"] = {"Moid": policy_moid}
                # Set provided default ID attributes and retrieve any required MOIDs for ID attributes
                self.attribute_handler(staged_intersight_api_body)
                current_vlan_id_name_prefix = id_dictionary.get("Name")
                for current_vlan_id in vlans_enumerated_id_range:
                    staged_intersight_api_body[f"{self.id_type}Id"] = current_vlan_id
                    current_vlan_id_full_name = f"{current_vlan_id_name_prefix}_{current_vlan_id}"
                    staged_intersight_api_body["Name"] = current_vlan_id_full_name
                    staged_intersight_api_body["IsNative"] = False
                    post_intersight_vlan(
                        current_vlan_id_full_name,
                        staged_intersight_api_body
                        )

            # Begin the process to set the native VLAN for the VLAN Policy
            if self.native_vlan_id:
                print("\nAttempting to set the native VLAN to VLAN "
                      f"{self.native_vlan_id}...")
                all_intersight_vlans_pre_check_cycle = get_intersight_objects(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              intersight_api_path=self.intersight_api_path,
                                                                              object_type=self.object_type,
                                                                              intersight_base_url=self.intersight_base_url,
                                                                              preconfigured_api_client=self.api_client
                                                                              )
                if all_intersight_vlans_pre_check_cycle.get("Results"):
                    # Verify that a VLAN object matching the native VLAN ID exists
                    for vlan_check in all_intersight_vlans_pre_check_cycle.get("Results"):
                        if (vlan_check.get("VlanId") == self.native_vlan_id and
                            vlan_check.get("EthNetworkPolicy", {}).get("Moid") == policy_moid):
                            break
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("The native VLAN cannot be set to "
                              f"VLAN {self.native_vlan_id}.")
                        print(f"VLAN {self.native_vlan_id} does not currently "
                              f"exist in the VLAN Policy {self.policy_name}.")
                        print(f"Please add VLAN {self.native_vlan_id} to the "
                              f"VLAN list for {self.policy_name}, then "
                              "re-attempt execution.\n")
                        sys.exit(0)
                    # Verify the native VLAN is not already set on a pre-existing VLAN object that does not match
                    for native_vlan_id_check in all_intersight_vlans_pre_check_cycle.get("Results"):
                        if (native_vlan_id_check.get("VlanId") != self.native_vlan_id and
                            native_vlan_id_check.get("EthNetworkPolicy", {}).get("Moid") == policy_moid and
                            native_vlan_id_check.get("IsNative") == True):
                            native_vlan_id_check_vlan_id = native_vlan_id_check.get("VlanId")
                            native_vlan_id_check_full_name = native_vlan_id_check.get("Name")
                            native_vlan_id_check_moid = native_vlan_id_check.get("Moid")
                            print("The native VLAN is currently set to VLAN "
                                  f"{native_vlan_id_check_vlan_id}.")
                            print(f"The native VLAN setting will now be "
                                  "removed from VLAN "
                                  f"{native_vlan_id_check_full_name}, in order "
                                  "to change the native VLAN to VLAN "
                                  f"{self.native_vlan_id}...")
                            # Remove the native VLAN setting from the mis-matched pre-existing VLAN object if needed
                            native_vlan_id_check_api_body_update = {"IsNative": False}
                            post_intersight_vlan(
                                native_vlan_id_check_full_name,
                                native_vlan_id_check_api_body_update,
                                moid=native_vlan_id_check_moid
                                )
                            break
                else:
                    print("\nA configuration error has occurred!\n")
                    print("The native VLAN cannot be set to "
                          f"VLAN {self.native_vlan_id}.")
                    print("No VLANs were found in the VLAN Policy "
                          f"{self.policy_name}.")
                    print(f"Please add VLAN {self.native_vlan_id} to the "
                          f"VLAN list for {self.policy_name}, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Set the native VLAN on the matching VLAN object
                all_intersight_vlans_update_cycle = get_intersight_objects(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           intersight_api_path=self.intersight_api_path,
                                                                           object_type=self.object_type,
                                                                           intersight_base_url=self.intersight_base_url,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                if all_intersight_vlans_update_cycle.get("Results"):
                    for native_vlan_id_update in all_intersight_vlans_update_cycle.get("Results"):
                        if (native_vlan_id_update.get("VlanId") == self.native_vlan_id and
                            native_vlan_id_update.get("EthNetworkPolicy", {}).get("Moid") == policy_moid and
                            native_vlan_id_update.get("IsNative") == True):
                            native_vlan_id_update_full_name = native_vlan_id_update.get("Name")
                            print(f"VLAN {self.native_vlan_id} is already set "
                                  "as the native VLAN.")
                            break
                        elif (native_vlan_id_update.get("VlanId") == self.native_vlan_id and
                              native_vlan_id_update.get("EthNetworkPolicy", {}).get("Moid") == policy_moid and
                              native_vlan_id_update.get("IsNative") == False):
                            native_vlan_id_update_vlan_id = native_vlan_id_update.get("VlanId")
                            native_vlan_id_update_full_name = native_vlan_id_update.get("Name")
                            native_vlan_id_update_moid = native_vlan_id_update.get("Moid")
                            print("The native VLAN will now be set to VLAN "
                                  f"{self.native_vlan_id}...")
                            # Add the native VLAN ID setting to the matching VLAN object
                            native_vlan_id_update_api_body_update = {"IsNative": True}
                            post_intersight_vlan(
                                native_vlan_id_update_full_name,
                                native_vlan_id_update_api_body_update,
                                moid=native_vlan_id_update_moid
                                )
                            break
                else:
                    print("\nA configuration error has occurred!\n")
                    print("The native VLAN cannot be set to "
                          f"VLAN {self.native_vlan_id}.")
                    print("No VLANs were found in the VLAN Policy "
                          f"{self.policy_name}.")
                    print(f"Please add VLAN {self.native_vlan_id} to the "
                          f"VLAN list for {self.policy_name}, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                              

def vlan_policy_maker(intersight_api_key_id,
                      intersight_api_key,
                      policy_name,
                      vlan_list=None,
                      default_multicast_policy_name="",
                      native_vlan_id=None,
                      policy_description="",
                      organization="default",
                      intersight_base_url="https://www.intersight.com/api/v1",
                      tags=None,
                      preconfigured_api_client=None,
                      ucs_domain_profile_name="",
                      fabric_interconnect="AB"
                      ):
    """This is a function used to make a VLAN Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        vlan_list (list):
            Optional; The list of dictionary entries for VLANs to
            be configured. The default value is None. An
            example entry is:
            [{"Vlans": "10-20,30,35",
              "Name": "Infra"},
             {"Vlans": "40-50",
              "Name": "Mgmt",
              "AutoAllowOnUplinks": False},].
            A "Vlans" key with a string value must be configured in each
            dictionary of the list to specify the VLAN ID or range of VLAN IDs
            to be created. A "Name" key with a string value must also be
            configured to specify the VLAN name prefix. A Multicast Policy is
            mandatory in order to configure a VLAN. If a default Multicast
            Policy is not provided using the default_multicast_policy_name
            variable, a "MulticastPolicy" key must also be configured with
            string values to specify a previously created Multicast Policy. If
            different Multicast Policies are desired for different sets of
            VLANs, the "MulticastPolicy" key should also be used and will
            always override the default_multicast_policy_name variable.
            Otherwise the "MulticastPolicy" key is optional. Optional key
            settings such as "AutoAllowOnUplinks" can also be configured in
            each list dictionary, if the associated system default values are
            not desired. Multiple dictionaries can be placed in the list to
            configure different settings for different ranges of VLANs.
        default_multicast_policy_name (str):
            Optional; The name of the default Multicast Policy to be used by
            all VLANs in the VLAN Policy. The default value is an empty string
            ("").
        native_vlan_id (int):
            Optional; The desired native VLAN ID. The default value is None.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
        fabric_interconnect (str):
            Optional; The Fabric Interconnect in the UCS Domain Profile that
            the policy should be attached to. The default value is "AB".
            Accepted values are "AB" for both Fabric Interconnects A and B,
            "A" for only Fabric Interconnect A, and "B" for only
            Fabric Interconnect B.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create VLAN Policy object in Intersight
    builder(VlanPolicy(intersight_api_key_id=intersight_api_key_id,
                       intersight_api_key=intersight_api_key,
                       policy_name=policy_name,
                       policy_description=policy_description,
                       organization=organization,
                       intersight_base_url=intersight_base_url,
                       tags=tags,
                       preconfigured_api_client=preconfigured_api_client,
                       ucs_domain_profile_name=ucs_domain_profile_name,
                       fabric_interconnect=fabric_interconnect
                       ))

    # Define and create VLAN objects in Intersight
    builder(Vlan(intersight_api_key_id=intersight_api_key_id,
                 intersight_api_key=intersight_api_key,
                 policy_name=policy_name,
                 id_list=vlan_list,
                 organization=organization,
                 intersight_base_url=intersight_base_url,
                 preconfigured_api_client=preconfigured_api_client,
                 default_multicast_policy_name=default_multicast_policy_name,
                 native_vlan_id=native_vlan_id
                 ))


# Establish classes and functions to make VSAN Policy
class VsanPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a VSAN Policy in Intersight.
    """
    object_type = "VSAN Policy"
    intersight_api_path = "fabric/FcNetworkPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 fabric_interconnect="A",
                 enable_uplink_trunking=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect
                         )
        self.enable_uplink_trunking = enable_uplink_trunking
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "EnableTrunking": self.enable_uplink_trunking,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.fabric_interconnect}', "
            f"{self.enable_uplink_trunking})"
            )


class Vsan(IdConfigurator):
    """This class serves as a base class for configuring the IDs of VSANs in
    Intersight policies.
    """
    object_type = "VSAN"
    id_type = "Vsan"
    intersight_api_path = "fabric/Vsans"
    policy_type = "VSAN Policy"
    policy_intersight_api_path = "fabric/FcNetworkPolicies"
    attributes_that_require_special_handling = [
        {"Name": "Name",
         "Type": "VSAN Name Prefix",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client})"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def post_intersight_vsan(vsan_name,
                                 body,
                                 moid=None
                                 ):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                vsan_name (str):
                    The name of the VSAN to be posted on Intersight.
                body (dict):
                    The body of the object to be posted on Intersight.
                moid (str):
                    Optional; The Intersight MOID of the object to be posted
                    on Intersight. The default value is None.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            if moid:
                full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
            else:
                full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                if moid:
                    print(f"The configuration of {self.object_type} "
                          f"{vsan_name} has been updated.")
                else:
                    print(f"The configuration of {self.object_type} "
                          f"{vsan_name} has completed.")
                return "The POST method was successful."
            except Exception:
                print("\nA configuration error has occurred!\n")
                if moid:
                    print(f"Unable to update {self.object_type} "
                          f"{vsan_name} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                else:
                    print(f"Unable to configure {self.object_type} "
                          f"{vsan_name} under the Intersight "
                          f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."

        if self.id_list:
            vsans_id_key = f"{self.id_type}s"
            fcoe_vlans_id_key = "FcoeVlans"
            for id_dictionary in self.id_list:
                # Enumerate provided VSAN range
                vsans_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                               vsans_id_key
                                                                               )
                # Enumerate provided FCoE VLAN range
                fcoe_vlans_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                                    fcoe_vlans_id_key
                                                                                    )
                # Match and pair enumerated VSAN and FCoE VLAN ranges
                vsan_id_and_fcoe_vlan_id_matched_pair_list = list(zip(vsans_enumerated_id_range,
                                                                      fcoe_vlans_enumerated_id_range
                                                                      ))
                staged_intersight_api_body = copy.deepcopy(id_dictionary)
                staged_intersight_api_body.pop(vsans_id_key)
                staged_intersight_api_body.pop(fcoe_vlans_id_key)
                # Retrieving the VSAN Policy MOID
                policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                               intersight_api_key=None,
                                                               object_name=self.policy_name,
                                                               intersight_api_path=self.policy_intersight_api_path,
                                                               object_type=self.policy_type,
                                                               organization=self.organization,
                                                               intersight_base_url=self.intersight_base_url,
                                                               preconfigured_api_client=self.api_client
                                                               )
                staged_intersight_api_body["FcNetworkPolicy"] = {"Moid": policy_moid}
                # Retrieve MOIDs for ID attributes that require MOIDs
                self.attribute_handler(staged_intersight_api_body)
                current_vsan_id_name_prefix = id_dictionary.get("Name")
                for current_vsan_id, current_fcoe_vlan_id in vsan_id_and_fcoe_vlan_id_matched_pair_list:
                    staged_intersight_api_body[f"{self.id_type}Id"] = current_vsan_id
                    current_vsan_id_full_name = f"{current_vsan_id_name_prefix}_{current_vsan_id}"
                    staged_intersight_api_body["Name"] = current_vsan_id_full_name
                    staged_intersight_api_body["FcoeVlan"] = current_fcoe_vlan_id
                    post_intersight_vsan(
                        current_vsan_id_full_name,
                        staged_intersight_api_body
                        )
                              

def vsan_policy_maker(intersight_api_key_id,
                      intersight_api_key,
                      policy_name,
                      enable_uplink_trunking=False,
                      vsan_list=None,
                      policy_description="",
                      organization="default",
                      intersight_base_url="https://www.intersight.com/api/v1",
                      tags=None,
                      preconfigured_api_client=None,
                      ucs_domain_profile_name="",
                      fabric_interconnect="A"
                      ):
    """This is a function used to make a VSAN Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_uplink_trunking (bool):
            Optional; The setting to enable or disable trunking on all
            configured FC uplink ports. The default value is False (disabled).
        vsan_list (list):
            Optional; The list of dictionary entries for VSANs to
            be configured. The default value is None. An
            example entry is:
            [{"Vsans": "500",
              "Name": "ESXi_FC_Storage",
              "FcoeVlans": "500",
              "DefaultZoning": "Disabled"
              },
             {"Vsans": "501-510,550,570",
              "Name": "Hyper-V_FC_Storage",
              "FcoeVlans": "501-510,550,570",
              "DefaultZoning": "Disabled"
              },
             {"Vsans": "575-585",
              "Name": "Xen_FC_Storage",
              "FcoeVlans": "575-585",
              "DefaultZoning": "Enabled"},].
            A "Vsans" key with a string value must be configured in each
            dictionary of the list to specify the VSAN ID or range of VSAN IDs
            to be created. A "Name" key with a string value must also be
            configured to specify the VSAN name prefix. A "FcoeVlans" key
            must also be configured with a string value to specify the
            FCoE VLAN ID or range of FCoE VLAN IDs to be created and matched
            with the VSANs previously specified in the Vsans key. Optional key
            settings such as "DefaultZoning" and "FcZoneSharingMode" can also
            be configured in each list dictionary, if the associated system
            default values are not desired. Multiple dictionaries can be placed
            in the list to configure different settings for different ranges of
            VSANs.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
        fabric_interconnect (str):
            Optional; The Fabric Interconnect in the UCS Domain Profile that
            the policy should be attached to. The default value is "A".
            Accepted values are "A" for only Fabric Interconnect A, "B" for
            only Fabric Interconnect B, and "AB" for both Fabric Interconnects A
            and B. For VSAN configuration, typically each Fabric Interconnect
            would have separate VSAN Policies to support different VSAN numbers
            for each storage fabric.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create VSAN Policy object in Intersight
    builder(VsanPolicy(intersight_api_key_id=intersight_api_key_id,
                       intersight_api_key=intersight_api_key,
                       policy_name=policy_name,
                       policy_description=policy_description,
                       organization=organization,
                       intersight_base_url=intersight_base_url,
                       tags=tags,
                       preconfigured_api_client=preconfigured_api_client,
                       ucs_domain_profile_name=ucs_domain_profile_name,
                       fabric_interconnect=fabric_interconnect,
                       enable_uplink_trunking=enable_uplink_trunking
                       ))

    # Define and create VSAN objects in Intersight
    builder(Vsan(intersight_api_key_id=intersight_api_key_id,
                 intersight_api_key=intersight_api_key,
                 policy_name=policy_name,
                 id_list=vsan_list,
                 organization=organization,
                 intersight_base_url=intersight_base_url,
                 preconfigured_api_client=preconfigured_api_client
                 ))


# Establish classes and functions to make Ethernet Network Group Policy
class EthernetNetworkGroupPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Network Group Policy in
    Intersight.
    """
    object_type = "Ethernet Network Group Policy"
    intersight_api_path = "fabric/EthNetworkGroupPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 allowed_vlans="1",
                 native_vlan=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.allowed_vlans = allowed_vlans
        self.native_vlan = native_vlan
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "VlanSettings": {"AllowedVlans": self.allowed_vlans,
                             "NativeVlan": self.native_vlan
                             }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.allowed_vlans}', "
            f"{self.native_vlan})"
            )


def ethernet_network_group_policy_maker(intersight_api_key_id,
                                        intersight_api_key,
                                        policy_name,
                                        allowed_vlans="1",
                                        native_vlan=1,
                                        policy_description="",
                                        organization="default",
                                        intersight_base_url="https://www.intersight.com/api/v1",
                                        tags=None,
                                        preconfigured_api_client=None
                                        ):
    """This is a function used to make an Ethernet Network Group Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        allowed_vlans (str):
            Optional; The allowed VLAN IDs of the virtual interface. A list of
            comma separated VLAN IDs and/or VLAN ID ranges. An example entry
            is: "10,11". The default value is an empty string ("").
        native_vlan (int):
            Optional; The native VLAN ID of the virtual interface or the
            corresponding vEthernet on the peer Fabric Interconnect to which
            the virtual interface is connected. If the native VLAN is not a
            part of the allowed VLANs, it will automatically be added to the
            list of allowed VLANs. The default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """

    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Network Group Policy object in Intersight
    builder(EthernetNetworkGroupPolicy(intersight_api_key_id=intersight_api_key_id,
                                       intersight_api_key=intersight_api_key,
                                       policy_name=policy_name,
                                       policy_description=policy_description,
                                       organization=organization,
                                       intersight_base_url=intersight_base_url,
                                       tags=tags,
                                       preconfigured_api_client=preconfigured_api_client,
                                       allowed_vlans=allowed_vlans,
                                       native_vlan=native_vlan
                                       ))


# Establish classes and functions to make Ethernet Network Control Policy
class EthernetNetworkControlPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Network Control Policy in
    Intersight.
    """
    object_type = "Ethernet Network Control Policy"
    intersight_api_path = "fabric/EthNetworkControlPolicies"
    object_variable_value_maps = [
        {"VariableName": "mac_register_mode",
         "Description": "MAC Register Mode",
         "AttributeName": "MacRegistrationMode",
         "Values": [
             {"FrontEndValue": "Only Native VLAN",
              "BackEndValue": "nativeVlanOnly"
              },
             {"FrontEndValue": "All Host VLANs",
              "BackEndValue": "allVlans"
              }
             ]
         },
        {"VariableName": "action_on_uplink_fail",
         "Description": "Action on Uplink Fail",
         "AttributeName": "UplinkFailAction",
         "Values": [
             {"FrontEndValue": "Link Down",
              "BackEndValue": "linkDown"
              },
             {"FrontEndValue": "Warning",
              "BackEndValue": "warning"
              }
             ]
         },
        {"VariableName": "mac_forging",
         "Description": "MAC Forging",
         "AttributeName": "ForgeMac",
         "Values": [
             {"FrontEndValue": "Allow",
              "BackEndValue": "allow"
              },
             {"FrontEndValue": "Deny",
              "BackEndValue": "deny"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 enable_cdp=False,
                 mac_register_mode="Only Native VLAN",
                 action_on_uplink_fail="Link Down",
                 mac_forging="Allow",
                 lldp_enable_transmit=False,
                 lldp_enable_receive=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.enable_cdp = enable_cdp
        self.mac_register_mode = mac_register_mode
        self.action_on_uplink_fail = action_on_uplink_fail
        self.mac_forging = mac_forging
        self.lldp_enable_transmit = lldp_enable_transmit
        self.lldp_enable_receive = lldp_enable_receive
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "CdpEnabled": self.enable_cdp,
            "LldpSettings": {
                "TransmitEnabled": self.lldp_enable_transmit,
                "ReceiveEnabled": self.lldp_enable_receive
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"('{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.enable_cdp}, "
            f"'{self.mac_register_mode}', "
            f"'{self.action_on_uplink_fail}', "
            f"'{self.mac_forging}', "
            f"{self.lldp_enable_transmit}, "
            f"{self.lldp_enable_receive})"
            )


def ethernet_network_control_policy_maker(intersight_api_key_id,
                                          intersight_api_key,
                                          policy_name,
                                          enable_cdp=False,
                                          mac_register_mode="Only Native VLAN",
                                          action_on_uplink_fail="Link Down",
                                          mac_forging="Allow",
                                          lldp_enable_transmit=False,
                                          lldp_enable_receive=False,
                                          policy_description="",
                                          organization="default",
                                          intersight_base_url="https://www.intersight.com/api/v1",
                                          tags=None,
                                          preconfigured_api_client=None
                                          ):
    """This is a function used to make an Ethernet Network Control Policy on
    Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_cdp (bool):
            Optional; The administrative state of Cisco Discovery Protocol
            (CDP) on an interface. The default value is False.
        mac_register_mode (str):
            Optional; The MAC address registration mode. The accepted values
            are "Only Native VLAN" and "All Host VLANs". The default value is
            "Only Native VLAN".
        action_on_uplink_fail (str):
            Optional; The state of a virtual interface if an uplink is not
            pinned. The accepted values are "Link Down" or "Warning". The
            "Link Down" option will take down the virtual interface if an
            uplink is not pinned. The "Warning" option will leave the virtual
            interface up even if there is no pinned uplink. The default value
            is "Link Down".
        mac_forging (str):
            Optional; Determines if MAC forging is allowed or denied on an
            interface. The accepted values are "Allow" and "Deny". The default
            value is "Allow".
        lldp_enable_transmit (bool):
            Optional; The administrative state of Link Layer Discovery Protocol
            (LLDP) frames being transmitted on an interface. The default value
            is False.
        lldp_enable_receive (bool):
            Optional; The administrative state of Link Layer Discovery Protocol
            (LLDP) frames being received on an interface. The default value
            is False.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Network Control Policy object in Intersight
    builder(EthernetNetworkControlPolicy(intersight_api_key_id=intersight_api_key_id,
                                         intersight_api_key=intersight_api_key,
                                         policy_name=policy_name,
                                         policy_description=policy_description,
                                         organization=organization,
                                         intersight_base_url=intersight_base_url,
                                         tags=tags,
                                         preconfigured_api_client=preconfigured_api_client,
                                         enable_cdp=enable_cdp,
                                         mac_register_mode=mac_register_mode,
                                         action_on_uplink_fail=action_on_uplink_fail,
                                         mac_forging=mac_forging,
                                         lldp_enable_transmit=lldp_enable_transmit,
                                         lldp_enable_receive=lldp_enable_receive
                                         ))


# Establish classes and functions to make Flow Control Policy
class FlowControlPolicy(UcsPolicy):
    """This class is used to configure a Flow Control Policy in Intersight.
    """
    object_type = "Flow Control Policy"
    intersight_api_path = "fabric/FlowControlPolicies"
    object_variable_value_maps = [
        {"VariableName": "priority",
         "Description": "Flow Control Priority Mode",
         "AttributeName": "PriorityFlowControlMode",
         "Values": [
             {"FrontEndValue": "Auto",
              "BackEndValue": "auto"
              },
             {"FrontEndValue": "On",
              "BackEndValue": "on"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 priority="Auto",
                 receive="Disabled",
                 send="Disabled"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.priority = priority
        self.receive = receive
        self.send = send
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "ReceiveDirection": self.receive,
            "SendDirection": self.send
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.priority}', "
            f"'{self.receive}', "
            f"'{self.send}')"
            )


def flow_control_policy_maker(intersight_api_key_id,
                              intersight_api_key,
                              policy_name,
                              priority="Auto",
                              receive="Disabled",
                              send="Disabled",
                              policy_description="",
                              organization="default",
                              intersight_base_url="https://www.intersight.com/api/v1",
                              tags=None,
                              preconfigured_api_client=None
                              ):
    """This is a function used to make a Flow Control Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        priority (str):
            Optional; The flow control priority mode. The accepted values are
            "Auto" and "On". The default value is "Auto".
        receive (str):
            Optional; The administrative state of link-level flow control in
            the receive direction. The accepted values are "Enabled" and
            "Disabled". The default value is "Disabled".
        send (str):
            Optional; The administrative state of link-level flow control in
            the send direction. The accepted values are "Enabled" and
            "Disabled". The default value is "Disabled".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Flow Control Policy object in Intersight
    builder(FlowControlPolicy(intersight_api_key_id=intersight_api_key_id,
                              intersight_api_key=intersight_api_key,
                              policy_name=policy_name,
                              policy_description=policy_description,
                              organization=organization,
                              intersight_base_url=intersight_base_url,
                              tags=tags,
                              preconfigured_api_client=preconfigured_api_client,
                              priority=priority,
                              receive=receive,
                              send=send
                              ))


# Establish classes and functions to make Link Control Policy
class LinkControlPolicy(UcsPolicy):
    """This class is used to configure a Link Control Policy in Intersight.
    """
    object_type = "Link Control Policy"
    intersight_api_path = "fabric/LinkControlPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 admin_state="Enabled",
                 mode="Normal"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.admin_state = admin_state
        self.mode = mode

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.admin_state}', "
            f"'{self.mode}')"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Reformat the provided Link Control Mode value to lowercase format for back-end Intersight API compatibility
        try:
            lowercase_mode = self.mode.lower()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the Link Control UDLD Mode settings.")
            print(f"The value provided was {self.mode}.")
            print("To proceed, the value provided for the Link Control UDLD "
                  "Mode settings should be updated to an accepted string "
                  "format.")
            print("The recommended values are 'Normal' or 'Aggressive' in "
                  "string format.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        # Update the API body with the Link Control Mode Settings
        self.intersight_api_body["UdldSettings"] = {
            "AdminState": self.admin_state,
            "Mode": lowercase_mode
            }
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


def link_control_policy_maker(intersight_api_key_id,
                              intersight_api_key,
                              policy_name,
                              admin_state="Enabled",
                              mode="Normal",
                              policy_description="",
                              organization="default",
                              intersight_base_url="https://www.intersight.com/api/v1",
                              tags=None,
                              preconfigured_api_client=None
                              ):
    """This is a function used to make a Link Control Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        admin_state (str):
            Optional; The administrative state of Unidirectional Link Detection
            (UDLD). The accepted values are "Enabled" and "Disabled". The
            default value is "Enabled".
        mode (str):
            Optional; The Unidirectional Link Detection (UDLD) mode. The
            accepted values are "Normal" and "Aggressive". The default value is
            "Normal".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Link Control Policy object in Intersight
    builder(LinkControlPolicy(intersight_api_key_id=intersight_api_key_id,
                              intersight_api_key=intersight_api_key,
                              policy_name=policy_name,
                              policy_description=policy_description,
                              organization=organization,
                              intersight_base_url=intersight_base_url,
                              tags=tags,
                              preconfigured_api_client=preconfigured_api_client,
                              admin_state=admin_state,
                              mode=mode
                              ))


# Establish classes and functions to make Link Aggregation Policy
class LinkAggregationPolicy(UcsPolicy):
    """This class is used to configure a Link Aggregation Policy in Intersight.
    """
    object_type = "Link Aggregation Policy"
    intersight_api_path = "fabric/LinkAggregationPolicies"
    object_variable_value_maps = [
        {"VariableName": "lacp_rate",
         "Description": "LACP Rate Mode",
         "AttributeName": "LacpRate",
         "Values": [
             {"FrontEndValue": "Normal",
              "BackEndValue": "normal"
              },
             {"FrontEndValue": "Fast",
              "BackEndValue": "fast"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 suspend_individual=False,
                 lacp_rate="Normal"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.suspend_individual = suspend_individual
        self.lacp_rate = lacp_rate
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "SuspendIndividual": self.suspend_individual
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.suspend_individual}, "
            f"'{self.lacp_rate}')"
            )


def link_aggregation_policy_maker(intersight_api_key_id,
                                  intersight_api_key,
                                  policy_name,
                                  suspend_individual=False,
                                  lacp_rate="Normal",
                                  policy_description="",
                                  organization="default",
                                  intersight_base_url="https://www.intersight.com/api/v1",
                                  tags=None,
                                  preconfigured_api_client=None
                                  ):
    """This is a function used to make a Link Aggregation Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        suspend_individual (bool):
            Optional; Setting to suspend a port if Link Aggregation Control
            Protocol (LACP) Protocol Data Units (PDUs) are not received.
            The default value is False.
        lacp_rate (str):
            Optional; The Link Aggregation Control Protocol (LACP) rate mode 
            for sending Protocol Data Units (PDUs). The accepted values are
            "Normal" and "Fast". The default value is "Normal".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Link Aggregation Policy object in Intersight
    builder(LinkAggregationPolicy(intersight_api_key_id=intersight_api_key_id,
                                  intersight_api_key=intersight_api_key,
                                  policy_name=policy_name,
                                  policy_description=policy_description,
                                  organization=organization,
                                  intersight_base_url=intersight_base_url,
                                  tags=tags,
                                  preconfigured_api_client=preconfigured_api_client,
                                  suspend_individual=suspend_individual,
                                  lacp_rate=lacp_rate
                                  ))


# Establish classes and functions to make Port Policy
class PortPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a Port Policy in Intersight.
    """
    object_type = "Port Policy"
    intersight_api_path = "fabric/PortPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 fabric_interconnect="AB",
                 fabric_interconnect_model="UCS-FI-6454"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect
                         )
        self.fabric_interconnect_model = fabric_interconnect_model
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "DeviceModel": self.fabric_interconnect_model
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.fabric_interconnect_model}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.fabric_interconnect}', "
            f"'{self.fabric_interconnect_model}')"
            )


class PortModes(IdConfigurator):
    """This class is used to configure the Port Modes of an
    Intersight Port Policy.
    """
    object_type = "FC Port Mode"
    id_type = "Port"
    intersight_api_path = "fabric/PortModes"
    policy_type = "Port Policy"
    policy_intersight_api_path = "fabric/PortPolicies"
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        self.default_slot_id = default_slot_id
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id})"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """
        def post_intersight_port_modes(body):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                body (dict):
                    The body of the object to be posted on Intersight.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                print(f"The configuration of {self.object_type} "
                      f"for ports {full_fc_port_mode_start_port_id} - "
                      f"{full_fc_port_mode_end_port_id} has completed.")
                return "The POST method was successful."
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure {self.object_type} "
                      f"for ports {full_fc_port_mode_start_port_id} - "
                      f"{full_fc_port_mode_end_port_id} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
            
        if self.id_list:
            ports_id_key = f"{self.id_type}s"
            # Retrieving the Port Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=self.policy_intersight_api_path,
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                ports_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                               ports_id_key
                                                                               )
                staged_intersight_api_body = copy.deepcopy(id_dictionary)
                staged_intersight_api_body.pop(ports_id_key)
                staged_intersight_api_body["PortPolicy"] = {"Moid": policy_moid}
                fc_port_mode_start = min(ports_enumerated_id_range)
                staged_intersight_api_body["PortIdStart"] = fc_port_mode_start
                fc_port_mode_end = max(ports_enumerated_id_range)
                staged_intersight_api_body["PortIdEnd"] = fc_port_mode_end
                current_slot_id = id_dictionary.get("SlotId", self.default_slot_id)
                staged_intersight_api_body["SlotId"] = current_slot_id
                full_fc_port_mode_start_port_id = f"{current_slot_id}/{fc_port_mode_start}"
                full_fc_port_mode_end_port_id = f"{current_slot_id}/{fc_port_mode_end}"
                post_intersight_port_modes(staged_intersight_api_body)


class Port(IdConfigurator):
    """This class serves as a base class for configuring the IDs of ports in
    Intersight policies.
    """
    object_type = "Port"
    id_type = "Port"
    policy_type = "Port Policy"
    policy_intersight_api_path = "fabric/PortPolicies"
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1,
                 default_aggregate_port_id=0
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        self.default_slot_id = default_slot_id
        self.default_aggregate_port_id = default_aggregate_port_id

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id}, "
            f"{self.default_aggregate_port_id})"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def post_intersight_port(body):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                body (dict):
                    The body of the object to be posted on Intersight.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                print(f"The configuration of {self.object_type} "
                      f"{full_current_port_id} has completed.")
                return "The POST method was successful."
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure {self.object_type} "
                      f"{full_current_port_id} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
            
        if self.id_list:
            ports_id_key = f"{self.id_type}s"
            # Retrieving the Port Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=self.policy_intersight_api_path,
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                ports_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                               ports_id_key
                                                                               )
                staged_intersight_api_body = copy.deepcopy(id_dictionary)
                staged_intersight_api_body.pop(ports_id_key)
                staged_intersight_api_body["PortPolicy"] = {"Moid": policy_moid}
                # Retrieve MOIDs for ID attributes that require MOIDs
                self.attribute_handler(staged_intersight_api_body)
                current_slot_id = id_dictionary.get("SlotId",
                                                    self.default_slot_id
                                                    )
                staged_intersight_api_body["SlotId"] = current_slot_id
                current_aggregate_port_id = id_dictionary.get("AggregatePortId",
                                                              self.default_aggregate_port_id
                                                              )
                staged_intersight_api_body["AggregatePortId"] = current_aggregate_port_id
                for current_port_id in ports_enumerated_id_range:
                    staged_intersight_api_body[f"{self.id_type}Id"] = current_port_id
                    full_current_port_id = f"{current_slot_id}/{current_port_id}"
                    post_intersight_port(staged_intersight_api_body)


class ServerPort(Port):
    """This class is used to configure the Server Ports of an
    Intersight Port Policy using the provided Port IDs.
    """
    object_type = "Server Port"
    intersight_api_path = "fabric/ServerRoles"
    

class EthernetUplinkPort(Port):
    """This class is used to configure the Ethernet Uplink Ports of an
    Intersight Port Policy using the provided Port IDs.
    """
    object_type = "Ethernet Uplink Port"
    intersight_api_path = "fabric/UplinkRoles"
    attributes_that_require_special_handling = [
        {"Name": "FlowControlPolicy",
         "Type": "Flow Control Policy",
         "IntersightAPIPath": "fabric/FlowControlPolicies",
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_flow_control_policy_name"
         },
        {"Name": "LinkControlPolicy",
         "Type": "Link Control Policy",
         "IntersightAPIPath": "fabric/LinkControlPolicies",
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_link_control_policy_name"
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1,
                 default_aggregate_port_id=0,
                 default_flow_control_policy_name="",
                 default_link_control_policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         default_slot_id,
                         default_aggregate_port_id
                         )
        self.default_flow_control_policy_name = default_flow_control_policy_name
        self.default_link_control_policy_name = default_link_control_policy_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id}, "
            f"{self.default_aggregate_port_id}, "
            f"'{self.default_flow_control_policy_name}', "
            f"'{self.default_link_control_policy_name}')"
            )


class FcoeUplinkPort(Port):
    """This class is used to configure the FCoE Uplink Ports of an
    Intersight Port Policy using the provided Port IDs.
    """
    object_type = "FCoE Uplink Port"
    intersight_api_path = "fabric/FcoeUplinkRoles"
    attributes_that_require_special_handling = [
        {"Name": "LinkControlPolicy",
         "Type": "Link Control Policy",
         "IntersightAPIPath": "fabric/LinkControlPolicies",
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_link_control_policy_name"
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1,
                 default_aggregate_port_id=0,
                 default_link_control_policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         default_slot_id,
                         default_aggregate_port_id
                         )
        self.default_link_control_policy_name = default_link_control_policy_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id}, "
            f"{self.default_aggregate_port_id}, "
            f"'{self.default_link_control_policy_name}')"
            )
    

class FcUplinkPort(Port):
    """This class is used to configure the FC Uplink Ports of an
    Intersight Port Policy using the provided Port IDs.
    """
    object_type = "FC Uplink Port"
    intersight_api_path = "fabric/FcUplinkRoles"
    attributes_that_require_special_handling = [
        {"Name": "AdminSpeed",
         "Type": "Admin Speed",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         },
        {"Name": "VsanId",
         "Type": "VSAN ID",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         }
        ]
    

class AppliancePort(Port):
    """This class is used to configure the Appliance Ports of an
    Intersight Port Policy using the provided Port IDs.
    """
    object_type = "Appliance Uplink Port"
    intersight_api_path = "fabric/ApplianceRoles"
    attributes_that_require_special_handling = [
        {"Name": "EthNetworkGroupPolicy",
         "Type": "Ethernet Network Group Policy",
         "IntersightAPIPath": "fabric/EthNetworkGroupPolicies",
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_network_group_policy_name"
         },
        {"Name": "EthNetworkControlPolicy",
         "Type": "Ethernet Network Control Policy",
         "IntersightAPIPath": "fabric/EthNetworkControlPolicies",
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_network_control_policy_name"
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1,
                 default_aggregate_port_id=0,
                 default_ethernet_network_group_policy_name="",
                 default_ethernet_network_control_policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         default_slot_id,
                         default_aggregate_port_id
                         )
        self.default_ethernet_network_group_policy_name = default_ethernet_network_group_policy_name
        self.default_ethernet_network_control_policy_name = default_ethernet_network_control_policy_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id}, "
            f"{self.default_aggregate_port_id}, "
            f"'{self.default_ethernet_network_group_policy_name}', "
            f"'{self.default_ethernet_network_control_policy_name}')"
            )
    

class PortChannel(IdConfigurator):
    """This class serves as a base class for configuring the port channel IDs
    of objects in Intersight policies.
    """
    object_type = "Port Channel"
    id_type = "Port"
    policy_type = "Port Policy"
    policy_intersight_api_path = "fabric/PortPolicies"
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1,
                 default_aggregate_port_id=0
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        self.default_slot_id = default_slot_id
        self.default_aggregate_port_id = default_aggregate_port_id

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id}, "
            f"{self.default_aggregate_port_id})"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """
        def post_intersight_port_channel(body):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                body (dict):
                    The body of the object to be posted on Intersight.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                print(f"The configuration of {self.object_type} "
                      f"{current_port_channel_id} has completed with the "
                      "following member ports: "
                      f"{pc_member_dictionary_list_for_logging_formatted}.")
                return "The POST method was successful."
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the provided {self.object_type} "
                      "settings under the Intersight API resource path "
                      f"'{full_intersight_api_path}'.")
                print(f"The {self.object_type} ID is "
                      f"{current_port_channel_id}.")
                print(f"Please check the provided {self.object_type} "
                      "arguments.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
            
        if self.id_list:
            ports_id_key = f"{self.id_type}s"
            # Retrieving the Port Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=self.policy_intersight_api_path,
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for pc_id_dictionary in self.id_list:
                ports_enumerated_id_range = self.enumerated_id_range_retriever(pc_id_dictionary,
                                                                               ports_id_key
                                                                               )
                staged_intersight_api_body = copy.deepcopy(pc_id_dictionary)
                staged_intersight_api_body.pop(ports_id_key)
                staged_intersight_api_body["PortPolicy"] = {"Moid": policy_moid}
                # Retrieve MOIDs for ID attributes that require MOIDs
                self.attribute_handler(staged_intersight_api_body)
                pc_member_dictionary_list_for_intersight_api_body = []
                pc_member_dictionary_list_for_logging = []
                current_slot_id = pc_id_dictionary.get("SlotId",
                                                       self.default_slot_id
                                                       )
                current_aggregate_port_id = pc_id_dictionary.get("AggregatePortId",
                                                                 self.default_aggregate_port_id
                                                                 )
                for current_port_id in ports_enumerated_id_range:
                    pc_member_dictionary = {
                        f"{self.id_type}Id": current_port_id,
                        "SlotId": current_slot_id,
                        "AggregatePortId": current_aggregate_port_id,
                        }
                    pc_member_dictionary_list_for_intersight_api_body.append(
                        pc_member_dictionary
                        )
                    full_current_port_id = f"{current_slot_id}/{current_port_id}"
                    pc_member_dictionary_list_for_logging.append(
                        full_current_port_id
                        )
                staged_intersight_api_body[ports_id_key] = pc_member_dictionary_list_for_intersight_api_body
                # Retrieve current port channel ID for post_intersight_port_channel() function logging
                current_port_channel_id = staged_intersight_api_body.get("PcId",
                                                                        "missing. Please verify a 'PcId' key with an unused integer value is present in the associated list variable dictionary"
                                                                        )
                # Format pc_member_dictionary_list_for_logging for post_intersight_port_channel() function logging
                pc_member_dictionary_list_for_logging_formatted = ', '.join(pc_member_dictionary_list_for_logging)
                post_intersight_port_channel(staged_intersight_api_body)


class EthernetUplinkPortChannel(PortChannel):
    """This class is used to configure the Ethernet Uplink Port Channels of an
    Intersight Port Policy using the provided Port Channel and Port IDs.
    """
    object_type = "Ethernet Uplink Port Channel"
    intersight_api_path = "fabric/UplinkPcRoles"
    attributes_that_require_special_handling = [
        {"Name": "PcId",
         "Type": "Port Channel ID",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         },
        {"Name": "FlowControlPolicy",
         "Type": "Flow Control Policy",
         "IntersightAPIPath": "fabric/FlowControlPolicies",
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_flow_control_policy_name"
         },
        {"Name": "LinkAggregationPolicy",
         "Type": "Link Aggregation Policy",
         "IntersightAPIPath": "fabric/LinkAggregationPolicies",
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_link_aggregation_policy_name"
         },
        {"Name": "LinkControlPolicy",
         "Type": "Link Control Policy",
         "IntersightAPIPath": "fabric/LinkControlPolicies",
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_link_control_policy_name"
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1,
                 default_aggregate_port_id=0,
                 default_flow_control_policy_name="",
                 default_link_aggregation_policy_name="",
                 default_link_control_policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         default_slot_id,
                         default_aggregate_port_id
                         )
        self.default_flow_control_policy_name = default_flow_control_policy_name
        self.default_link_aggregation_policy_name = default_link_aggregation_policy_name
        self.default_link_control_policy_name = default_link_control_policy_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id}, "
            f"{self.default_aggregate_port_id}, "
            f"'{self.default_flow_control_policy_name}', "
            f"'{self.default_link_aggregation_policy_name}', "
            f"'{self.default_link_control_policy_name}')"
            )


class FcoeUplinkPortChannel(PortChannel):
    """This class is used to configure the FCoE Uplink Port Channels of an
    Intersight Port Policy using the provided Port Channel and Port IDs.
    Note: FCoE Uplink Port Channel configuration at this time is identical to
    Ethernet Uplink Port Channels, so the EthernetUplinkPortChannel class is
    used as the base class.
    """
    object_type = "FCoE Uplink Port Channel"
    intersight_api_path = "fabric/FcoeUplinkPcRoles"
    attributes_that_require_special_handling = [
        {"Name": "PcId",
         "Type": "Port Channel ID",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         },
        {"Name": "LinkAggregationPolicy",
         "Type": "Link Aggregation Policy",
         "IntersightAPIPath": "fabric/LinkAggregationPolicies",
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_link_aggregation_policy_name"
         },
        {"Name": "LinkControlPolicy",
         "Type": "Link Control Policy",
         "IntersightAPIPath": "fabric/LinkControlPolicies",
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_link_control_policy_name"
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1,
                 default_aggregate_port_id=0,
                 default_link_aggregation_policy_name="",
                 default_link_control_policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         default_slot_id,
                         default_aggregate_port_id
                         )
        self.default_link_aggregation_policy_name = default_link_aggregation_policy_name
        self.default_link_control_policy_name = default_link_control_policy_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id}, "
            f"{self.default_aggregate_port_id}, "
            f"'{self.default_link_aggregation_policy_name}', "
            f"'{self.default_link_control_policy_name}')"
            )


class FcUplinkPortChannel(PortChannel):
    """This class is used to configure the FC Uplink Port Channels of an
    Intersight Port Policy using the provided Port Channel and Port IDs.
    """
    object_type = "FC Uplink Port Channel"
    intersight_api_path = "fabric/FcUplinkPcRoles"
    attributes_that_require_special_handling = [
        {"Name": "PcId",
         "Type": "Port Channel ID",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         },
        {"Name": "AdminSpeed",
         "Type": "Admin Speed",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         },
        {"Name": "VsanId",
         "Type": "VSAN ID",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         }
        ]


class AppliancePortChannel(PortChannel):
    """This class is used to configure the Appliance Port Channels of an
    Intersight Port Policy using the provided Port Channel and Port IDs.
    """
    object_type = "Appliance Uplink Port Channel"
    intersight_api_path = "fabric/AppliancePcRoles"
    attributes_that_require_special_handling = [
        {"Name": "PcId",
         "Type": "Port Channel ID",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         },
        {"Name": "EthNetworkGroupPolicy",
         "Type": "Ethernet Network Group Policy",
         "IntersightAPIPath": "fabric/EthNetworkGroupPolicies",
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_network_group_policy_name"
         },
        {"Name": "EthNetworkControlPolicy",
         "Type": "Ethernet Network Control Policy",
         "IntersightAPIPath": "fabric/EthNetworkControlPolicies",
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_network_control_policy_name"
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_slot_id=1,
                 default_aggregate_port_id=0,
                 default_ethernet_network_group_policy_name="",
                 default_ethernet_network_control_policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         default_slot_id,
                         default_aggregate_port_id
                         )
        self.default_ethernet_network_group_policy_name = default_ethernet_network_group_policy_name
        self.default_ethernet_network_control_policy_name = default_ethernet_network_control_policy_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.default_slot_id}, "
            f"{self.default_aggregate_port_id}, "
            f"'{self.default_ethernet_network_group_policy_name}', "
            f"'{self.default_ethernet_network_control_policy_name}')"
            )
    

def port_policy_maker(intersight_api_key_id,
                      intersight_api_key,
                      policy_name,
                      fabric_interconnect_model="UCS-FI-6454",
                      fc_port_mode_list=None,
                      server_port_list=None,
                      ethernet_uplink_port_list=None,
                      fcoe_uplink_port_list=None,
                      fc_uplink_port_list=None,
                      appliance_port_list=None,
                      ethernet_uplink_port_channel_list=None,
                      fcoe_uplink_port_channel_list=None,
                      fc_uplink_port_channel_list=None,
                      appliance_port_channel_list=None,
                      policy_description="",
                      organization="default",
                      intersight_base_url="https://www.intersight.com/api/v1",
                      tags=None,
                      preconfigured_api_client=None,
                      ucs_domain_profile_name="",
                      fabric_interconnect="AB",
                      default_flow_control_policy_name="",
                      default_link_control_policy_name="",
                      default_link_aggregation_policy_name="",
                      default_ethernet_network_group_policy_name="",
                      default_ethernet_network_control_policy_name="",
                      default_slot_id_of_server_ports=1,
                      default_slot_id_of_ethernet_uplink_ports=1,
                      default_slot_id_of_fcoe_uplink_ports=1,
                      default_slot_id_of_fc_uplink_ports=1,
                      default_slot_id_of_appliance_ports=1,
                      default_aggregate_port_id_of_server_ports=0,
                      default_aggregate_port_id_of_ethernet_uplink_ports=0,
                      default_aggregate_port_id_of_fcoe_uplink_ports=0,
                      default_aggregate_port_id_of_fc_uplink_ports=0,
                      default_aggregate_port_id_of_appliance_ports=0
                      ):
    """This is a function used to make a Port Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        fabric_interconnect_model (str):
            Optional; The model of the Fabric Interconnect
            to be configured by the Port Policy. The default value is
            "UCS-FI-6454".
        fc_port_mode_list (list):
            Optional; The list of dictionary entries for ports to
            be configured in FC port mode. The default value is None. An
            example entry is: [{"Ports": "1-8"}]. A "Ports" key with a string
            value must be configured in each dictionary of the list to specify
            the port or range of ports.
        server_port_list (list):
            Optional; The list of dictionary entries for ports to
            be configured as a Server Port. The default value is None. An
            example entry is: [{"Ports": "9, 14-20, 22, 24-27"},]. A "Ports"
            key with a string value must be configured in each dictionary of
            the list to specify the port or range of ports. If the global slot
            ID and global aggregate port ID variable settings need to be
            overridden for a particular set of ports, optional key settings
            such as "SlotId" and "AggregatePortId" can also be configured in
            each list dictionary. Multiple dictionaries can be placed in the
            list to configure different settings for different ranges of ports.
        ethernet_uplink_port_list (list):
            Optional; The list of dictionary entries for
            ports to be configured as an Ethernet Uplink Port. The default
            value is None. An example entry is: [{"Ports": "28"},]. A "Ports"
            key with a string value must be configured in each dictionary of
            the list to specify the port or range of ports. Optional key
            settings such as "AdminSpeed", "Fec", "FlowControlPolicy", and
            "LinkControlPolicy" can also be configured in each list dictionary,
            if the associated system default values are not desired. If the
            global slot ID and global aggregate port ID variable values need to
            be overridden for a particular set of ports, optional key settings
            such as "SlotId" and "AggregatePortId" can also be configured in
            each list dictionary. Multiple dictionaries can be placed in the
            list to configure different settings for different ranges of ports.
        fcoe_uplink_port_list (list):
            Optional; The list of dictionary entries for ports to
            be configured as an FCoE Uplink Port. The default value is None.
            An example entry is:
            [{"Ports": "29, 31-32"},
             {"Ports": "33-34", "AdminSpeed": "25Gbps", "Fec": "Cl91"},
             {"Ports": "45-48", "AdminSpeed": "1Gbps"},]. A "Ports" key with a
            string value must be configured in each dictionary of the list to
            specify the port or range of ports. Optional key settings such as
            "AdminSpeed", "Fec", and "LinkControlPolicy" can also be configured
            in each list dictionary, if the associated system default values
            are not desired. If the global slot ID and global aggregate port ID
            variable values need to be overridden for a particular set of
            ports, optional key settings such as "SlotId" and "AggregatePortId"
            can also be configured in each list dictionary. Multiple
            dictionaries can be placed in the list to configure different
            settings for different ranges of ports.
        fc_uplink_port_list (list):
            Optional; The list of dictionary entries for ports to
            be configured as an FC Uplink Port. The default value is None. An
            example entry is: [{"Ports": "1-2", "VsanId": 1},]. A "Ports" key
            with a string value must be configured in each dictionary of the
            list to specify the port or range of ports. A "VsanId" key with an
            integer value must also be configured to specify the VSAN ID.
            Optional key settings such as "AdminSpeed" and "FillPattern" can
            also be configured in each list dictionary, if the associated
            system default values are not desired. If the global slot ID and
            global aggregate port ID variable values need to be overridden for
            a particular set of ports, optional key settings such as "SlotId"
            and "AggregatePortId" can also be configured in each list
            dictionary. Multiple dictionaries can be placed in the list to
            configure different settings for different ranges of ports.
        appliance_port_list (list):
            Optional; The list of dictionary entries for ports to
            be configured as an Appliance Port. The default value is None.
            An example entry is:
            [{"Ports": "10",
             "EthNetworkControlPolicy":"eth-net-control-1",
             "EthNetworkGroupPolicy":"eth-net-group-1"},]. A "Ports" key with a
            string value must be configured in each dictionary of the list to
            specify the port or range of ports. An "EthNetworkControlPolicy" key
            and "EthNetworkGroupPolicy" key must also be configured with string
            values to specify a previously created Ethernet Network Control
            Policy and Ethernet Network Group Policy respectively. These
            policies are mandatory in order to configure an Appliance Port.
            Optional key settings such as "AdminSpeed", "Fec", "Priority",
            "Mode", "FlowControlPolicy", and "LinkControlPolicy" can also be 
            configured in each list dictionary, if the associated system
            default values are not desired. If the global slot ID and global
            aggregate port ID variable values need to be overridden for a
            particular set of ports, optional key settings such as "SlotId" and
            "AggregatePortId" can also be configured in each list dictionary.
            Multiple dictionaries can be placed in the list to configure
            different settings for different ranges of ports.
        ethernet_uplink_port_channel_list (list):
            Optional; The list of dictionary entries
            for ports to be configured as members of an Ethernet Uplink Port
            Channel. The default value is None. An example entry is:
            [{"PcId": 1, "Ports": "35-40"},]. A "PcId" key with an integer
            value must be configured in each dictionary of the list to specify
            the port channel ID. A "Ports" key with a string value must be
            configured in each dictionary of the list to specify the port or
            range of ports. Optional key settings such as "AdminSpeed",
            "FlowControlPolicy", "LinkControlPolicy" and
            "LinkAggregationPolicy" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. If the global slot ID and global aggregate port ID
            variable values need to be overridden for a particular set of
            ports, optional key settings such as "SlotId" and "AggregatePortId"
            can also be configured in each list dictionary. Multiple
            dictionaries can be placed in the list to configure different
            settings for different ranges of ports.
        fcoe_uplink_port_channel_list (list):
            Optional; The list of dictionary entries
            for ports to be configured as members of an FCoE Uplink Port
            Channel. The default value is None. An example entry is:
            [{"PcId": 2, "Ports": "41, 42-44"},
             {"PcId": 3, "Ports": "49-54", "AdminSpeed": "100Gbps"},]. A "PcId"
            key with an integer value must be configured in each dictionary of
            the list to specify the port channel ID. A "Ports" key with a
            string value must be configured in each dictionary of the list to
            specify the port or range of ports. Optional key settings such as
            "AdminSpeed", "LinkControlPolicy" and "LinkAggregationPolicy" can
            also be configured in each list dictionary, if the associated
            system default values are not desired. If the global slot ID and
            global aggregate port ID variable values need to be overridden for
            a particular set of ports, optional key settings such as "SlotId"
            and "AggregatePortId" can also be configured in each list
            dictionary. Multiple dictionaries can be placed in the list to
            configure different settings for different ranges of ports.
        fc_uplink_port_channel_list (list):
            Optional; The list of dictionary entries for
            ports to be configured as members of an FC Uplink Port Channel.
            The default value is None. An example entry is:
            [{"PcId": 4, "Ports": "3-4", "VsanId": 1},]. A "PcId" key with an
            integer value must be configured in each dictionary of the list to
            specify the port channel ID. A "Ports" key with a string value must
            be configured in each dictionary of the list to specify the port or
            range of ports. A "VsanId" key with an integer value must also be
            configured to specify the VSAN ID. Optional key settings such as
            "AdminSpeed" and "FillPattern" can also be configured in each list
            dictionary, if the associated system default values are not
            desired. If the global slot ID and global aggregate port ID
            variable values need to be overridden for a particular set of
            ports, optional key settings such as "SlotId" and "AggregatePortId"
            can also be configured in each list dictionary. Multiple
            dictionaries can be placed in the list to configure different
            settings for different ranges of ports.
        appliance_port_channel_list (list):
            Optional; The list of dictionary entries for
            ports to be configured as members of an Appliance Port Channel.
            The default value is None. An example entry is:
            [{"PcId": 5, "Ports": "11-13",
             "EthNetworkControlPolicy":"eth-net-control-1",
             "EthNetworkGroupPolicy":"eth-net-group-1"}]. A "PcId" key with an
            integer value must be configured in each dictionary of the list to
            specify the port channel ID. A "Ports" key with a string value must
            be configured in each dictionary of the list to specify the port or
            range of ports. An "EthNetworkControlPolicy" key and
            "EthNetworkGroupPolicy" key must also be configured with string
            values to specify a previously created Ethernet Network Control
            Policy and Ethernet Network Group Policy respectively. These
            policies are mandatory in order to configure an Appliance Port.
            Optional key settings such as "AdminSpeed", "Fec", "Priority",
            "Mode", "FlowControlPolicy", and "LinkControlPolicy" can be also 
            configured in each list dictionary, if the associated system
            default values are not desired. If the global slot ID and global
            aggregate port ID variable values need to be overridden for a
            particular set of ports, optional key settings such as "SlotId" and
            "AggregatePortId" can also be configured in each list dictionary.
            Multiple dictionaries can be placed in the list to configure
            different settings for different ranges of ports.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
        fabric_interconnect (str):
            Optional; The Fabric Interconnect in the UCS Domain Profile that
            the policy should be attached to. The default value is "AB".
            Accepted values are "AB" for both Fabric Interconnects A and B,
            "A" for only Fabric Interconnect A, and "B" for only
            Fabric Interconnect B.
        default_flow_control_policy_name (str):
            Optional; The name of the default Flow Control Policy to be used by
            all ports in the Port Policy. The default value is an empty string
            ("").
        default_link_control_policy_name (str):
            Optional; The name of the default Link Control Policy to be used by
            all ports in the Port Policy. The default value is an empty string
            ("").
        default_link_aggregation_policy_name (str):
            Optional; The name of the default Link Aggregation Policy to be
            used by all ports in the Port Policy. The default value is an empty
            string ("").
        default_ethernet_network_group_policy_name (str):
            Optional; The name of the default Ethernet Network Group Policy to
            be used by all ports in the Port Policy. The default value is an
            empty string ("").
        default_ethernet_network_control_policy_name (str):
            Optional; The name of the default Ethernet Network Control Policy
            to be used by all ports in the Port Policy. The default value is an
            empty string ("").
        default_slot_id_of_server_ports (int):
            Optional; The global slot ID value for all Server Ports configured
            in the Port Policy. The default value is 1.
        default_slot_id_of_ethernet_uplink_ports (int):
            Optional; The global slot ID value for all Ethernet Uplink Ports
            configured in the Port Policy. The default value is 1.
        default_slot_id_of_fcoe_uplink_ports (int):
            Optional; The global slot ID value for all FCoE Uplink Ports
            configured in the Port Policy. The default value is 1.
        default_slot_id_of_fc_uplink_ports (int):
            Optional; The global slot ID value for all FC Uplink Ports
            configured in the Port Policy. The default value is 1.
        default_slot_id_of_appliance_ports (int):
            Optional; The global slot ID value for all Appliance Ports
            configured in the Port Policy. The default value is 1.
        default_aggregate_port_id_of_server_ports (int):
            Optional; The global aggregate port ID value for all Server Ports
            configured in the Port Policy. The default value is 0.
        default_aggregate_port_id_of_ethernet_uplink_ports (int): 
            Optional; The global aggregate port ID value for all Ethernet
            Uplink Ports configured in the Port Policy. The default value is 0.
        default_aggregate_port_id_of_fcoe_uplink_ports (int):
            Optional; The global aggregate port ID value for all FCoE Uplink
            Ports configured in the Port Policy. The default value is 0.
        default_aggregate_port_id_of_fc_uplink_ports (int):
            Optional; The global aggregate port ID value for all FC Uplink
            Ports configured in the Port Policy. The default value is 0.
        default_aggregate_port_id_of_appliance_ports (int):
            Optional; The global aggregate port ID value for all Appliance
            Ports configured in the Port Policy. The default value is 0.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Port Policy object in Intersight
    builder(PortPolicy(intersight_api_key_id=intersight_api_key_id,
                       intersight_api_key=intersight_api_key,
                       policy_name=policy_name,
                       policy_description=policy_description,
                       organization=organization,
                       intersight_base_url=intersight_base_url,
                       tags=tags,
                       preconfigured_api_client=preconfigured_api_client,
                       ucs_domain_profile_name=ucs_domain_profile_name,
                       fabric_interconnect=fabric_interconnect,
                       fabric_interconnect_model=fabric_interconnect_model
                       ))

    # Define and create Port Modes object in Intersight
    builder(PortModes(intersight_api_key_id=intersight_api_key_id,
                      intersight_api_key=intersight_api_key,
                      policy_name=policy_name,
                      id_list=fc_port_mode_list,
                      organization=organization,
                      intersight_base_url=intersight_base_url,
                      preconfigured_api_client=preconfigured_api_client,
                      default_slot_id=default_slot_id_of_fc_uplink_ports
                      ))
    
    # Define and create Server Port objects in Intersight
    builder(ServerPort(intersight_api_key_id=intersight_api_key_id,
                       intersight_api_key=intersight_api_key,
                       policy_name=policy_name,
                       id_list=server_port_list,
                       organization=organization,
                       intersight_base_url=intersight_base_url,
                       preconfigured_api_client=preconfigured_api_client,
                       default_slot_id=default_slot_id_of_server_ports,
                       default_aggregate_port_id=default_aggregate_port_id_of_server_ports
                       ))
        
    # Define and create Ethernet Uplink Port objects in Intersight
    builder(EthernetUplinkPort(intersight_api_key_id=intersight_api_key_id,
                               intersight_api_key=intersight_api_key,
                               policy_name=policy_name,
                               id_list=ethernet_uplink_port_list,
                               organization=organization,
                               intersight_base_url=intersight_base_url,
                               preconfigured_api_client=preconfigured_api_client,
                               default_slot_id=default_slot_id_of_ethernet_uplink_ports,
                               default_aggregate_port_id=default_aggregate_port_id_of_ethernet_uplink_ports,
                               default_flow_control_policy_name=default_flow_control_policy_name,
                               default_link_control_policy_name=default_link_control_policy_name
                               ))

    # Define and create FCoE Uplink Port objects in Intersight
    builder(FcoeUplinkPort(intersight_api_key_id=intersight_api_key_id,
                           intersight_api_key=intersight_api_key,
                           policy_name=policy_name,
                           id_list=fcoe_uplink_port_list,
                           organization=organization,
                           intersight_base_url=intersight_base_url,
                           preconfigured_api_client=preconfigured_api_client,
                           default_slot_id=default_slot_id_of_fcoe_uplink_ports,
                           default_aggregate_port_id=default_aggregate_port_id_of_fcoe_uplink_ports,
                           default_link_control_policy_name=default_link_control_policy_name
                           ))

    # Define and create FC Uplink Port objects in Intersight
    builder(FcUplinkPort(intersight_api_key_id=intersight_api_key_id,
                         intersight_api_key=intersight_api_key,
                         policy_name=policy_name,
                         id_list=fc_uplink_port_list,
                         organization=organization,
                         intersight_base_url=intersight_base_url,
                         preconfigured_api_client=preconfigured_api_client,
                         default_slot_id=default_slot_id_of_fc_uplink_ports,
                         default_aggregate_port_id=default_aggregate_port_id_of_fc_uplink_ports
                         ))

    # Define and create Appliance Port objects in Intersight
    builder(AppliancePort(intersight_api_key_id=intersight_api_key_id,
                          intersight_api_key=intersight_api_key,
                          policy_name=policy_name,
                          id_list=appliance_port_list,
                          organization=organization,
                          intersight_base_url=intersight_base_url,
                          preconfigured_api_client=preconfigured_api_client,
                          default_slot_id=default_slot_id_of_appliance_ports,
                          default_aggregate_port_id=default_aggregate_port_id_of_appliance_ports,
                          default_ethernet_network_group_policy_name=default_ethernet_network_group_policy_name,
                          default_ethernet_network_control_policy_name=default_ethernet_network_control_policy_name
                          ))

    # Define and create Ethernet Uplink Port Channel objects in Intersight
    builder(EthernetUplinkPortChannel(intersight_api_key_id=intersight_api_key_id,
                                      intersight_api_key=intersight_api_key,
                                      policy_name=policy_name,
                                      id_list=ethernet_uplink_port_channel_list,
                                      organization=organization,
                                      intersight_base_url=intersight_base_url,
                                      preconfigured_api_client=preconfigured_api_client,
                                      default_slot_id=default_slot_id_of_ethernet_uplink_ports,
                                      default_aggregate_port_id=default_aggregate_port_id_of_ethernet_uplink_ports,
                                      default_flow_control_policy_name=default_flow_control_policy_name,
                                      default_link_aggregation_policy_name=default_link_aggregation_policy_name,
                                      default_link_control_policy_name=default_link_control_policy_name
                                      ))

    # Define and create FCoE Uplink Port Channel objects in Intersight
    builder(FcoeUplinkPortChannel(intersight_api_key_id=intersight_api_key_id,
                                  intersight_api_key=intersight_api_key,
                                  policy_name=policy_name,
                                  id_list=fcoe_uplink_port_channel_list,
                                  organization=organization,
                                  intersight_base_url=intersight_base_url,
                                  preconfigured_api_client=preconfigured_api_client,
                                  default_slot_id=default_slot_id_of_fcoe_uplink_ports,
                                  default_aggregate_port_id=default_aggregate_port_id_of_fcoe_uplink_ports,
                                  default_link_aggregation_policy_name=default_link_aggregation_policy_name,
                                  default_link_control_policy_name=default_link_control_policy_name
                                  ))

    # Define and create FC Uplink Port Channel objects in Intersight
    builder(FcUplinkPortChannel(intersight_api_key_id=intersight_api_key_id,
                                intersight_api_key=intersight_api_key,
                                policy_name=policy_name,
                                id_list=fc_uplink_port_channel_list,
                                organization=organization,
                                intersight_base_url=intersight_base_url,
                                preconfigured_api_client=preconfigured_api_client,
                                default_slot_id=default_slot_id_of_fc_uplink_ports,
                                default_aggregate_port_id=default_aggregate_port_id_of_fc_uplink_ports
                                ))

    # Define and create Appliance Port Channel objects in Intersight
    builder(AppliancePortChannel(intersight_api_key_id=intersight_api_key_id,
                                 intersight_api_key=intersight_api_key,
                                 policy_name=policy_name,
                                 id_list=appliance_port_channel_list,
                                 organization=organization,
                                 intersight_base_url=intersight_base_url,
                                 preconfigured_api_client=preconfigured_api_client,
                                 default_slot_id=default_slot_id_of_appliance_ports,
                                 default_aggregate_port_id=default_aggregate_port_id_of_appliance_ports,
                                 default_ethernet_network_group_policy_name=default_ethernet_network_group_policy_name,
                                 default_ethernet_network_control_policy_name=default_ethernet_network_control_policy_name
                                 ))


# Establish classes and functions to make NTP Policy
class NtpPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a NTP Policy in Intersight.
    """
    object_type = "NTP Policy"
    intersight_api_path = "ntp/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 ntp_servers=None,
                 timezone="Etc/GMT",
                 enable_ntp=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        if ntp_servers is None:
            self.ntp_servers = []
        else:
            self.ntp_servers = ntp_servers
        self.timezone = timezone
        self.enable_ntp = enable_ntp
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "NtpServers": self.ntp_servers,
            "Timezone": self.timezone,
            "Enabled": self.enable_ntp
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"{self.ntp_servers}, "
            f"'{self.timezone}', "
            f"{self.enable_ntp})"
            )


def ntp_policy_maker(intersight_api_key_id,
                     intersight_api_key,
                     policy_name,
                     ntp_servers=None,
                     timezone="Etc/GMT",
                     enable_ntp=True,
                     policy_description="",
                     organization="default",
                     intersight_base_url="https://www.intersight.com/api/v1",
                     tags=None,
                     preconfigured_api_client=None,
                     ucs_domain_profile_name=""
                     ):
    """This is a function used to make a NTP Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        ntp_servers (list):
            Optional; A list of unauthenticated NTP server IP addresses or
            hostnames to be configured in the NTP Policy. An example entry is: 
            ["198.18.128.1",].
            More than one NTP server IP address or hostname can be provided in
            the list. Each NTP server IP address or hostname in the list must
            be in string format. The default value is None.
        timezone (str):
            Optional; The desired time zone. The default value is "Etc/GMT".
        enable_ntp (bool):
            Optional; The administrative state of the NTP service. The default
            value is True.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create NTP Policy object in Intersight
    builder(NtpPolicy(intersight_api_key_id=intersight_api_key_id,
                      intersight_api_key=intersight_api_key,
                      policy_name=policy_name,
                      policy_description=policy_description,
                      organization=organization,
                      intersight_base_url=intersight_base_url,
                      tags=tags,
                      preconfigured_api_client=preconfigured_api_client,
                      ucs_domain_profile_name=ucs_domain_profile_name,
                      ntp_servers=ntp_servers,
                      timezone=timezone,
                      enable_ntp=enable_ntp
                      ))


# Establish classes and functions to make Syslog Policy
class SyslogPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a Syslog Policy in Intersight.
    """
    object_type = "Syslog Policy"
    intersight_api_path = "syslog/Policies"
    subobject_types = [
        {"SubobjectType": "syslog.RemoteLoggingClient",
         "SubobjectList": "syslog_remote_logging_server_list",
         "AttributeName": "RemoteClients",
         "Description": "Remote Logging Syslog Server"
         }
        ]
    subobject_attribute_maps = {
        "syslog.RemoteLoggingClient": [
            {"FrontEndName": "Enable",
             "BackEndName": "Enabled",
             "Description": "Remote Logging Syslog Server Enablement",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Hostname/IP Address",
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "IP Address",
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Port",
             "Description": "Port",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Protocol",
             "Description": "Protocol",
             "FixedFrontEndValues": [
                 "UDP",
                 "TCP"
                 ],
             "FronttoBackEndValueMaps": {
                 "udp": "udp",
                 "tcp": "tcp"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Minimum Severity To Report",
             "BackEndName": "MinSeverity",
             "Description": "Minimum Severity To Report",
             "FixedFrontEndValues": [
                 "warning",
                 "emergency",
                 "alert",
                 "critical",
                 "error",
                 "notice",
                 "informational",
                 "debug"
                 ],
             "FronttoBackEndValueMaps": {
                 "warning": "warning",
                 "emergency": "emergency",
                 "alert": "alert",
                 "critical": "critical",
                 "error": "error",
                 "notice": "notice",
                 "informational": "informational",
                 "debug": "debug"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Minimum Severity",
             "BackEndName": "MinSeverity",
             "Description": "Minimum Severity To Report",
             "FixedFrontEndValues": [
                 "warning",
                 "emergency",
                 "alert",
                 "critical",
                 "error",
                 "notice",
                 "informational",
                 "debug"
                 ],
             "FronttoBackEndValueMaps": {
                 "warning": "warning",
                 "emergency": "emergency",
                 "alert": "alert",
                 "critical": "critical",
                 "error": "error",
                 "notice": "notice",
                 "informational": "informational",
                 "debug": "debug"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 syslog_local_logging_minimum_severity_to_report="warning",
                 syslog_remote_logging_server_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        self.syslog_local_logging_minimum_severity_to_report = syslog_local_logging_minimum_severity_to_report
        if syslog_remote_logging_server_list is None:
            self.syslog_remote_logging_server_list = []
        else:
            self.syslog_remote_logging_server_list = syslog_remote_logging_server_list
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "LocalClients": [
                {"MinSeverity": self.syslog_local_logging_minimum_severity_to_report,
                 "ClassId": "syslog.LocalFileLoggingClient",
                 "ObjectType": "syslog.LocalFileLoggingClient"
                 }
                ]
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.fabric_interconnect_model}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.syslog_local_logging_minimum_severity_to_report}', "
            f"{self.syslog_remote_logging_server_list})"
            )


def syslog_policy_maker(intersight_api_key_id,
                        intersight_api_key,
                        policy_name,
                        syslog_local_logging_minimum_severity_to_report="warning",
                        syslog_remote_logging_server_list=None,
                        policy_description="",
                        organization="default",
                        intersight_base_url="https://www.intersight.com/api/v1",
                        tags=None,
                        preconfigured_api_client=None,
                        ucs_domain_profile_name=""
                        ):
    """This is a function used to make a Syslog Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        syslog_local_logging_minimum_severity_to_report (str):
            Optional; The lowest level of Syslog messages to be included in the
            local log. The default value is "warning". Other values include
            "emergency", "alert", "critical", "error", "notice",
            "informational", and "debug"
        syslog_remote_logging_server_list (list):
            Optional; The list of dictionary entries for each Syslog remote
            logging server to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "Hostname/IP Address": "192.168.0.201",
              "Port": 514,
              "Protocol": "TCP",
              "Minimum Severity To Report": "alert"
              },
             {"Enable": False,
              "Hostname/IP Address": "0.0.0.0",
              "Port": 514,
              "Protocol": "UDP",
              "Minimum Severity To Report": "warning"
              },
             ]
            A "Hostname/IP Address" key with a string value must be configured
            in each dictionary of the list to specify the remote logging Syslog
            server. Optional key settings include "Enable", "Port", "Protocol,
            and "Minimum Severity To Report".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Syslog Policy object in Intersight
    builder(SyslogPolicy(intersight_api_key_id=intersight_api_key_id,
                         intersight_api_key=intersight_api_key,
                         policy_name=policy_name,
                         policy_description=policy_description,
                         organization=organization,
                         intersight_base_url=intersight_base_url,
                         tags=tags,
                         preconfigured_api_client=preconfigured_api_client,
                         ucs_domain_profile_name=ucs_domain_profile_name,
                         syslog_local_logging_minimum_severity_to_report=syslog_local_logging_minimum_severity_to_report,
                         syslog_remote_logging_server_list=syslog_remote_logging_server_list
                         ))


# Establish classes and functions to make Network Connectivity Policy
class NetworkConnectivityPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a Network Connectivity Policy in
    Intersight.
    """
    object_type = "Network Connectivity Policy"
    intersight_api_path = "networkconfig/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 preferred_ipv4_dns_server="0.0.0.0",
                 alternate_ipv4_dns_server="0.0.0.0",
                 obtain_ipv4_dns_server_from_dhcp=False,
                 enable_dynamic_dns=False,
                 dynamic_dns_update_domain="",
                 enable_ipv6=False,
                 obtain_ipv6_dns_server_from_dhcp=False,
                 preferred_ipv6_dns_server="",
                 alternate_ipv6_dns_server=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        self.preferred_ipv4_dns_server = preferred_ipv4_dns_server
        self.alternate_ipv4_dns_server = alternate_ipv4_dns_server
        self.obtain_ipv4_dns_server_from_dhcp = obtain_ipv4_dns_server_from_dhcp
        self.enable_dynamic_dns = enable_dynamic_dns
        self.dynamic_dns_update_domain = dynamic_dns_update_domain
        self.enable_ipv6 = enable_ipv6
        self.obtain_ipv6_dns_server_from_dhcp = obtain_ipv6_dns_server_from_dhcp
        self.preferred_ipv6_dns_server = preferred_ipv6_dns_server
        self.alternate_ipv6_dns_server = alternate_ipv6_dns_server
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "PreferredIpv4dnsServer": self.preferred_ipv4_dns_server,
            "AlternateIpv4dnsServer": self.alternate_ipv4_dns_server,
            "EnableIpv4dnsFromDhcp": self.obtain_ipv4_dns_server_from_dhcp,
            "EnableDynamicDns": self.enable_dynamic_dns,
            "DynamicDnsDomain": self.dynamic_dns_update_domain,
            "EnableIpv6": self.enable_ipv6,
            "EnableIpv6dnsFromDhcp": self.obtain_ipv6_dns_server_from_dhcp,
            "PreferredIpv6dnsServer": self.preferred_ipv6_dns_server,
            "AlternateIpv6dnsServer": self.alternate_ipv6_dns_server
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.preferred_ipv4_dns_server}', "
            f"'{self.alternate_ipv4_dns_server}', "
            f"{self.obtain_ipv4_dns_server_from_dhcp}, "
            f"{self.enable_dynamic_dns}, "
            f"'{self.dynamic_dns_update_domain}', "
            f"{self.enable_ipv6}, "
            f"{self.obtain_ipv6_dns_server_from_dhcp}, "
            f"'{self.preferred_ipv6_dns_server}', "
            f"'{self.alternate_ipv6_dns_server}')"
            )


def network_connectivity_policy_maker(intersight_api_key_id,
                                      intersight_api_key,
                                      policy_name,
                                      preferred_ipv4_dns_server="0.0.0.0",
                                      alternate_ipv4_dns_server="0.0.0.0",
                                      obtain_ipv4_dns_server_from_dhcp=False,
                                      enable_dynamic_dns=False,
                                      dynamic_dns_update_domain="",
                                      enable_ipv6=False,
                                      obtain_ipv6_dns_server_from_dhcp=False,
                                      preferred_ipv6_dns_server="",
                                      alternate_ipv6_dns_server="",
                                      policy_description="",
                                      organization="default",
                                      intersight_base_url="https://www.intersight.com/api/v1",
                                      tags=None,
                                      preconfigured_api_client=None,
                                      ucs_domain_profile_name=""
                                      ):
    """This is a function used to make a Network Connectivity Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        preferred_ipv4_dns_server (str):
            Optional; The preferred IPv4 DNS server. The default value is
            "0.0.0.0".
        alternate_ipv4_dns_server (str):
            Optional; The alternate IPv4 DNS server. The default value is
            "0.0.0.0".
        obtain_ipv4_dns_server_from_dhcp (bool):
            Optional; A setting to enable obtaining the IPv4 DNS server from
            DHCP. The default value is False.
        enable_dynamic_dns (bool):
            Optional; A setting to enable dynamic DNS. The default value is
            False.
        dynamic_dns_update_domain (str):
            Optional; The dynamic DNS update domain if dynamic DNS is enabled.
            The default value is an empty string ("").
        enable_ipv6 (bool):
            Optional; The administrative state of the IPv6 DNS settings. The
            default value is False.
        obtain_ipv6_dns_server_from_dhcp (bool):
            Optional; A setting to enable obtaining the IPv6 DNS server from
            DHCP. The default value is False.
        preferred_ipv6_dns_server (str):
            Optional; The preferred IPv6 DNS server. The default value is an 
            empty string ("").
        alternate_ipv6_dns_server (str):
            Optional; The alternate IPv6 DNS server. The default value is an 
            empty string ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Network Connectivity Policy object in Intersight
    builder(NetworkConnectivityPolicy(intersight_api_key_id=intersight_api_key_id,
                                      intersight_api_key=intersight_api_key,
                                      policy_name=policy_name,
                                      policy_description=policy_description,
                                      organization=organization,
                                      intersight_base_url=intersight_base_url,
                                      tags=tags,
                                      preconfigured_api_client=preconfigured_api_client,
                                      ucs_domain_profile_name=ucs_domain_profile_name,
                                      preferred_ipv4_dns_server=preferred_ipv4_dns_server,
                                      alternate_ipv4_dns_server=alternate_ipv4_dns_server,
                                      obtain_ipv4_dns_server_from_dhcp=obtain_ipv4_dns_server_from_dhcp,
                                      enable_dynamic_dns=enable_dynamic_dns,
                                      dynamic_dns_update_domain=dynamic_dns_update_domain,
                                      enable_ipv6=enable_ipv6,
                                      obtain_ipv6_dns_server_from_dhcp=obtain_ipv6_dns_server_from_dhcp,
                                      preferred_ipv6_dns_server=preferred_ipv6_dns_server,
                                      alternate_ipv6_dns_server=alternate_ipv6_dns_server
                                      ))


# Establish classes and functions to make SNMP Policy
class SnmpPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a SNMP Policy in Intersight.
    """
    object_type = "SNMP Policy"
    intersight_api_path = "snmp/Policies"
    subobject_types = [
        {"SubobjectType": "snmp.User",
         "SubobjectList": "snmp_users_list",
         "AttributeName": "SnmpUsers",
         "Description": "SNMP User",
         },
        {"SubobjectType": "snmp.Trap",
         "SubobjectList": "snmp_trap_destinations_list",
         "AttributeName": "SnmpTraps",
         "Description": "SNMP Trap Destination",
         }
        ]
    subobject_attribute_maps = {
        "snmp.User": [
            {"FrontEndName": None,
             "BackEndName": "Name",
             "Description": "User Name",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Security Level",
             "BackEndName": "SecurityLevel",
             "Description": "Security Level",
             "FixedFrontEndValues": [
                 "AuthPriv",
                 "NoAuthNoPriv",
                 "AuthNoPriv"
                 ],
             "FronttoBackEndValueMaps": {
                 "authpriv": "AuthPriv",
                 "noauthnopriv": "NoAuthNoPriv",
                 "authnopriv": "AuthNoPriv"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Auth Type",
             "BackEndName": "AuthType",
             "Description": "Authentication Type",
             "FixedFrontEndValues": [
                 "NA",
                 "MD5",
                 "SHA",
                 "SHA-224",
                 "SHA-256",
                 "SHA-384",
                 "SHA-512"
                 ],
             "FronttoBackEndValueMaps": {
                 "na": "NA",
                 "md5": "MD5",
                 "sha": "SHA",
                 "sha-224": "SHA-224",
                 "sha-256": "SHA-256",
                 "sha-384": "SHA-384",
                 "sha-512": "SHA-512"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Auth Password",
             "BackEndName": "AuthPassword",
             "Description": "Authentication Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Privacy Type",
             "BackEndName": "PrivacyType",
             "Description": "Privacy Type",
             "FixedFrontEndValues": [
                 "NA",
                 "DES",
                 "AES"
                 ],
             "FronttoBackEndValueMaps": {
                 "na": "NA",
                 "des": "DES",
                 "aes": "AES"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Privacy Password",
             "BackEndName": "PrivacyPassword",
             "Description": "Privacy Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ],
        "snmp.Trap": [
            {"FrontEndName": "Enable",
             "BackEndName": "Enabled",
             "Description": "SNMP Trap Destination Enablement",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "SNMP Version",
             "BackEndName": "Version",
             "Description": "SNMP Version",
             "FixedFrontEndValues": [
                 "V3",
                 "V2"
                 ],
             "FronttoBackEndValueMaps": {
                 "v3": "V3",
                 "v2": "V2"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "User",
             "Description": "SNMP v3 Trap User",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Community String",
             "BackEndName": "Community",
             "Description": "SNMP v2c Community String",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Trap Type",
             "BackEndName": "Type",
             "Description": "Trap Type",
             "FixedFrontEndValues": [
                 "Trap",
                 "Inform"
                 ],
             "FronttoBackEndValueMaps": {
                 "trap": "Trap",
                 "inform": "Inform"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Destination Address",
             "BackEndName": "Destination",
             "Description": "SNMP Trap Destination Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Port",
             "Description": "Port",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 enable_snmp=True,
                 snmp_v2c_features=True,
                 snmp_v3_features=True,
                 snmp_port=161,
                 system_contact="Administrator",
                 system_location="N/A",
                 access_community_string="N/A",
                 snmp_community_access="Disabled",
                 trap_community_string="N/A",
                 snmp_engine_input_id="N/A",
                 snmp_users_list=None,
                 snmp_trap_destinations_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        self.enable_snmp = enable_snmp
        self.snmp_v2c_features = snmp_v2c_features
        self.snmp_v3_features = snmp_v3_features
        self.snmp_port = snmp_port
        self.system_contact = system_contact
        self.system_location = system_location
        self.access_community_string = access_community_string
        self.snmp_community_access = snmp_community_access
        self.trap_community_string = trap_community_string
        self.snmp_engine_input_id = snmp_engine_input_id
        if snmp_users_list is None:
            self.snmp_users_list = []
        else:
            self.snmp_users_list = snmp_users_list
        if snmp_trap_destinations_list is None:
            self.snmp_trap_destinations_list = []
        else:
            self.snmp_trap_destinations_list = snmp_trap_destinations_list
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_snmp,
            "V2Enabled": self.snmp_v2c_features,
            "V3Enabled": self.snmp_v3_features,
            "SnmpPort": self.snmp_port,
            "SysContact": self.system_contact,
            "SysLocation": self.system_location,
            "AccessCommunityString": self.access_community_string,
            "CommunityAccess": self.snmp_community_access,
            "TrapCommunity": self.trap_community_string,
            "EngineId": self.snmp_engine_input_id
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.fabric_interconnect_model}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"{self.enable_snmp}, "
            f"{self.snmp_v2c_features}, "
            f"{self.snmp_v3_features}, "
            f"{self.snmp_port}, "
            f"'{self.system_contact}', "
            f"'{self.system_location}', "
            f"'{self.access_community_string}', "
            f"'{self.snmp_community_access}', "
            f"'{self.trap_community_string}', "
            f"'{self.snmp_engine_input_id}', "
            f"{self.snmp_users_list}, "
            f"{self.snmp_trap_destinations_list})"
            )


def snmp_policy_maker(intersight_api_key_id,
                      intersight_api_key,
                      policy_name,
                      enable_snmp=True,
                      snmp_v2c_features=True,
                      snmp_v3_features=True,
                      snmp_port=161,
                      system_contact="Administrator",
                      system_location="N/A",
                      access_community_string="N/A",
                      snmp_community_access="Disabled",
                      trap_community_string="N/A",
                      snmp_engine_input_id="N/A",
                      snmp_users_list=None,
                      snmp_trap_destinations_list=None,
                      policy_description="",
                      organization="default",
                      intersight_base_url="https://www.intersight.com/api/v1",
                      tags=None,
                      preconfigured_api_client=None,
                      ucs_domain_profile_name=""
                      ):
    """This is a function used to make a SNMP Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_snmp (bool):
            Optional; Enablement of the SNMP Policy on the attached endpoint.
            The default value is True.
        snmp_v2c_features (bool):
            Optional; Enablement of SNMP version 2c features in the SNMP
            Policy. The default value is True.
        snmp_v3_features (bool):
            Optional; Enablement of SNMP version 3 features in the SNMP
            Policy. The default value is True.
        snmp_port (int):
            Optional; The SNMP agent port. The default value is 161.
        system_contact (str):
            Optional; The contact for the system running the SNMP agent. The
            default value is "Administrator".
        system_location (str):
            Optional; The location of the system running the SNMP agent. The
            default value is "N/A".
        access_community_string (str):
            Optional; The access community string for the system running the
            SNMP agent. The default value is "N/A".
        snmp_community_access (str):
            Optional; The SNMP community access level for the system running
            the SNMP agent. The default value is "Disabled".
        trap_community_string (str):
            Optional; The trap community string for the system running the
            SNMP agent. The default value is "N/A".
        snmp_engine_input_id (str):
            Optional; The SNMP engine input ID for the system running the SNMP
            agent. The default value is "N/A".
        snmp_users_list (list):
            Optional; The list of dictionary entries for each SNMP user to be
            configured. The default value is None. An example entry is:
            [{"Name": "demouser",
              "Security Level": "AuthPriv",
              "Auth Type": "SHA",
              "Auth Password": "C1sco12345",
              "Privacy Type": "AES",
              "Privacy Password": "C1sco12345"
              },
             ]
            A "Name" key with a string value must be configured in each
            dictionary of the list to specify the SNMP user's name. The key
            "Auth Password" is mandatory and specifies the authentication
            password. The key "Privacy Password" is mandatory and specifies the
            privacy password. Optional key settings include "Security Level",
            "Auth Type", and "Privacy Type".
        snmp_trap_destinations_list (list):
            Optional; The list of dictionary entries for each SNMP trap
            destination to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "SNMP Version": "V3",
              "User": "demouser",
              "Trap Type": "Inform",
              "Destination Address": "192.168.0.101",
              "Port": 162
              },
             {"Enable": True,
              "SNMP Version": "V2",
              "Community String": "demo_trap_string",
              "Trap Type": "Trap",
              "Destination Address": "192.168.0.102",
              "Port": 162
              },
             ]
            For SNMP version 3, a "User" key with a string value must be
            configured in the associated dictionary of the list to specify the
            SNMP trap destination's user name. For SNMP version 2c, a
            "Community String" key with a string value must be configured in
            the associated dictionary of the list to specify the SNMP trap
            destination community string. The key "Destination Address" is
            mandatory and specifies the SNMP trap destination address. Optional
            key settings include "Enable", "SNMP Version", "Trap Type", and
            "Port".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create SNMP Policy object in Intersight
    builder(SnmpPolicy(intersight_api_key_id=intersight_api_key_id,
                       intersight_api_key=intersight_api_key,
                       policy_name=policy_name,
                       policy_description=policy_description,
                       organization=organization,
                       intersight_base_url=intersight_base_url,
                       tags=tags,
                       preconfigured_api_client=preconfigured_api_client,
                       ucs_domain_profile_name=ucs_domain_profile_name,
                       enable_snmp=enable_snmp,
                       snmp_v2c_features=snmp_v2c_features,
                       snmp_v3_features=snmp_v3_features,
                       snmp_port=snmp_port,
                       system_contact=system_contact,
                       system_location=system_location,
                       access_community_string=access_community_string,
                       snmp_community_access=snmp_community_access,
                       trap_community_string=trap_community_string,
                       snmp_engine_input_id=snmp_engine_input_id,
                       snmp_users_list=snmp_users_list,
                       snmp_trap_destinations_list=snmp_trap_destinations_list
                       ))


# Establish classes and functions to make System QoS Policy
class SystemQosPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a System QoS Policy in Intersight.
    """
    object_type = "System QoS Policy"
    intersight_api_path = "fabric/SystemQosPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 qos_class_settings_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        if qos_class_settings_list is None:
            self.qos_class_settings_list = []
        else:
            self.qos_class_settings_list = qos_class_settings_list

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"{self.qos_class_settings_list})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with a UCS Domain Profile attached, if specified
        self._attach_ucs_domain_profile()
        # POST the API body to Intersight
        self._post_intersight_object()
        # Update the API body with the QoS Class Settings (NOTE - As of 7/27/21, QoS Class Settings cannot be set until after a base System QoS Policy is created)
        if self.qos_class_settings_list:
            print("Updating the QoS classes of the System QoS Policy...")
            self.intersight_api_body["Classes"] = self.qos_class_settings_list
        # POST the API body to Intersight
        self._post_intersight_object()


def system_qos_policy_maker(intersight_api_key_id,
                            intersight_api_key,
                            policy_name,
                            qos_class_settings_list=None,
                            policy_description="",
                            organization="default",
                            intersight_base_url="https://www.intersight.com/api/v1",
                            tags=None,
                            preconfigured_api_client=None,
                            ucs_domain_profile_name=""
                            ):
    """This is a function used to make a System QoS Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        qos_class_settings_list (list):
            A list of dictionaries for QoS classes to be configured in
            the System QoS Policy. An example entry is:
            [{"Name": "Best Effort",
              "AdminState": "Enabled",
              "Cos": 255,
              "Weight": 5,
              "PacketDrop": True,
              "Mtu": 1500
              },
             {"Name": "FC",
              "AdminState": "Enabled",
              "Cos": 3,
              "Weight": 5,
              "PacketDrop": False,
              "Mtu": 2240
              },
             {"Name": "Platinum",
              "AdminState": "Disabled",
              "Cos": 5,
              "Weight": 10,
              "PacketDrop": True,
              "Mtu": 1500
              },
             {"Name": "Gold",
              "AdminState": "Disabled",
              "Cos": 4,
              "Weight": 9,
              "PacketDrop": True,
              "Mtu": 1500
              },
             {"Name": "Silver",
              "AdminState": "Disabled",
              "Cos": 2,
              "Weight": 8,
              "PacketDrop": True,
              "Mtu": 1500
              },
             {"Name": "Bronze",
              "AdminState": "Disabled",
              "Cos": 1,
              "Weight": 7,
              "PacketDrop": True,
              "Mtu": 1500
              }
             ].
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create System QoS Policy object in Intersight
    builder(SystemQosPolicy(intersight_api_key_id=intersight_api_key_id,
                            intersight_api_key=intersight_api_key,
                            policy_name=policy_name,
                            policy_description=policy_description,
                            organization=organization,
                            intersight_base_url=intersight_base_url,
                            tags=tags,
                            preconfigured_api_client=preconfigured_api_client,
                            ucs_domain_profile_name=ucs_domain_profile_name,
                            qos_class_settings_list=qos_class_settings_list
                            ))


# Establish classes and functions to make Switch Control Policy
class SwitchControlPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a Switch Control Policy in Intersight.
    """
    object_type = "Switch Control Policy"
    intersight_api_path = "fabric/SwitchControlPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 enable_vlan_port_count_optimization=False,
                 mac_address_table_aging_time_option="Default",
                 mac_address_table_aging_time_custom_value_in_seconds=14500,
                 link_control_message_interval_in_seconds=15,
                 link_control_recovery_action="None"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        self.enable_vlan_port_count_optimization = enable_vlan_port_count_optimization
        self.mac_address_table_aging_time_option = mac_address_table_aging_time_option
        self.mac_address_table_aging_time_custom_value_in_seconds = mac_address_table_aging_time_custom_value_in_seconds
        self.link_control_message_interval_in_seconds = link_control_message_interval_in_seconds
        self.link_control_recovery_action = link_control_recovery_action
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "VlanPortOptimizationEnabled": self.enable_vlan_port_count_optimization,
            "MacAgingSettings": {
                "MacAgingOption": self.mac_address_table_aging_time_option,
                "MacAgingTime": self.mac_address_table_aging_time_custom_value_in_seconds
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.enable_vlan_port_count_optimization}', "
            f"'{self.mac_address_table_aging_time_option}', "
            f"{self.mac_address_table_aging_time_custom_value_in_seconds}, "
            f"{self.link_control_message_interval_in_seconds}, "
            f"'{self.link_control_recovery_action}')"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Reformat the provided Link Control Recovery Action value to lowercase format for back-end Intersight API compatibility
        try:
            lowercase_link_control_recovery_action = self.link_control_recovery_action.lower()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the Link Control Recovery Action settings.")
            print("The value provided was "
                  f"{self.link_control_recovery_action}.")
            print("To proceed, the value provided for the Link Control "
                  "Recovery Action settings should be updated to an accepted "
                  "string format.")
            print("The recommended values are 'None' or 'Reset' in string "
                  "format.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        # Update the API body with the Switch Control Unidirectional Link Detection (UDLD) Settings
        self.intersight_api_body["UdldSettings"] = {
            "MessageInterval": self.link_control_message_interval_in_seconds,
            "RecoveryAction": lowercase_link_control_recovery_action
            }
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with a UCS Domain Profile attached, if specified
        self._attach_ucs_domain_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


def switch_control_policy_maker(intersight_api_key_id,
                                intersight_api_key,
                                policy_name,
                                enable_vlan_port_count_optimization=False,
                                mac_address_table_aging_time_option="Default",
                                mac_address_table_aging_time_custom_value_in_seconds=14500,
                                link_control_message_interval_in_seconds=15,
                                link_control_recovery_action="None",
                                policy_description="",
                                organization="default",
                                intersight_base_url="https://www.intersight.com/api/v1",
                                tags=None,
                                preconfigured_api_client=None,
                                ucs_domain_profile_name=""
                                ):
    """This is a function used to make a Switch Control Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_vlan_port_count_optimization (bool):
            Optional; A setting to enable VLAN port optimization. The default
            value is False.
        mac_address_table_aging_time_option (str):
            Optional; A setting to determine the MAC address table aging time
            in seconds. The accepted values are "Default", which sets the
            default time of 14500 seconds, "Custom", which allows a custom time
            in seconds to be set using the
            'mac_address_table_aging_time_custom_value_in_seconds' argument or 
            "Never", which disables the MAC address table aging time. The
            default value is "Default"
        mac_address_table_aging_time_custom_value_in_seconds (int):
            Optional; The custom MAC address table aging time in seconds. This
            setting is only valid if the 'mac_address_table_aging_time_option'
            argument has been set to "Custom". The accepted range of values are 
            1 - 1000000 seconds. The default value is 14500.
        link_control_message_interval_in_seconds (int):
            Optional; Configures the time between Link Control probe messages
            on ports that are in advertisement mode and are currently
            determined to be bidirectional. The accepted range of values are
            7 - 90 seconds. The default value is 15.
        link_control_recovery_action (str):
            Optional; Configures the Link Control recovery action. When
            enabled, Link Control recovery attempts to bring a Link Control
            error-disabled port out of reset. The accepted values are "None" or
            "Reset". The default value is "None".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Switch Control Policy object in Intersight
    builder(SwitchControlPolicy(intersight_api_key_id=intersight_api_key_id,
                                intersight_api_key=intersight_api_key,
                                policy_name=policy_name,
                                policy_description=policy_description,
                                organization=organization,
                                intersight_base_url=intersight_base_url,
                                tags=tags,
                                preconfigured_api_client=preconfigured_api_client,
                                ucs_domain_profile_name=ucs_domain_profile_name,
                                enable_vlan_port_count_optimization=enable_vlan_port_count_optimization,
                                mac_address_table_aging_time_option=mac_address_table_aging_time_option,
                                mac_address_table_aging_time_custom_value_in_seconds=mac_address_table_aging_time_custom_value_in_seconds,
                                link_control_message_interval_in_seconds=link_control_message_interval_in_seconds,
                                link_control_recovery_action=link_control_recovery_action
                                ))


def main():

    # Establish UCS Domain Deployment Tool specific variables
    deployment_tool_type = "Intersight UCS Domain Deployment Tool"
    deployment_tool_ucs_domain_profile_name = f"{deployment_name_prefix}{ucs_domain_profile_name}{deployment_name_suffix}"

    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the UCS Domain Deployment Tool for Cisco Intersight
    print(f"\nStarting the {deployment_tool_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Establish the initial UCS Domain Deployment Tool default pre-requisite and support Policy names
    deployment_tool_multicast_policy_name = ""
    deployment_tool_flow_control_policy_name = ""
    deployment_tool_link_control_policy_name = ""
    deployment_tool_link_aggregation_policy_name = ""
    deployment_tool_ethernet_network_group_policy_name = ""
    deployment_tool_ethernet_network_control_policy_name = ""

    # Create the UCS Domain Profile in Intersight
    ucs_domain_profile_maker(
        intersight_api_key_id=None,
        intersight_api_key=None,
        ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
        ucs_domain_profile_description=ucs_domain_profile_description,
        ucs_domain_profile_organization=ucs_domain_profile_organization,
        tags=ucs_domain_profile_tags,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the Multicast Policy in Intersight
    if enable_multicast_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_multicast_policy_name = f"{deployment_name_prefix}{multicast_policy_name}{deployment_name_suffix}"
        multicast_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_multicast_policy_name,
            snooping_state=multicast_policy_snooping_state,
            querier_state=multicast_policy_querier_state,
            querier_ip_address=multicast_policy_querier_ip_address,
            querier_ip_address_peer=multicast_policy_querier_ip_address_peer,
            policy_description=multicast_policy_description,
            organization=ucs_domain_profile_organization,
            tags=multicast_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the VLAN Policies in Intersight
    if enable_vlan_policy:
        # Establish default pre-requisite and support Policy names for VLAN Policies
        if custom_default_multicast_policy_name:
            vlan_policy_default_multicast_policy_name = custom_default_multicast_policy_name
        else:
            vlan_policy_default_multicast_policy_name = deployment_tool_multicast_policy_name
            
        # Check if Policy will be shared by both Fabric Interconnects
        if shared_vlan_policy_for_both_fabric_interconnects:
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_vlan_policy_a_name = f"{deployment_name_prefix}{vlan_policy_a_name}{deployment_name_suffix}"
            vlan_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_vlan_policy_a_name,
                vlan_list=vlan_policy_a_vlan_list,
                default_multicast_policy_name=vlan_policy_default_multicast_policy_name,
                native_vlan_id=vlan_policy_a_native_vlan_id,
                policy_description=vlan_policy_a_description,
                organization=ucs_domain_profile_organization,
                tags=vlan_policy_a_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="AB"
                )
        else:
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_vlan_policy_a_name = f"{deployment_name_prefix}{vlan_policy_a_name}{deployment_name_suffix}"
            vlan_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_vlan_policy_a_name,
                vlan_list=vlan_policy_a_vlan_list,
                default_multicast_policy_name=vlan_policy_default_multicast_policy_name,
                native_vlan_id=vlan_policy_a_native_vlan_id,
                policy_description=vlan_policy_a_description,
                organization=ucs_domain_profile_organization,
                tags=vlan_policy_a_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="A"
                )
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_vlan_policy_b_name = f"{deployment_name_prefix}{vlan_policy_b_name}{deployment_name_suffix}"
            vlan_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_vlan_policy_b_name,
                vlan_list=vlan_policy_b_vlan_list,
                default_multicast_policy_name=vlan_policy_default_multicast_policy_name,
                native_vlan_id=vlan_policy_b_native_vlan_id,
                policy_description=vlan_policy_b_description,
                organization=ucs_domain_profile_organization,
                tags=vlan_policy_b_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="B"
                )

    # Create the VSAN Policies in Intersight
    if enable_vsan_policy:
        # Check if Policy will be shared by both Fabric Interconnects
        if shared_vsan_policy_for_both_fabric_interconnects:
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_vsan_policy_a_name = f"{deployment_name_prefix}{vsan_policy_a_name}{deployment_name_suffix}"
            vsan_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_vsan_policy_a_name,
                enable_uplink_trunking=vsan_policy_a_enable_uplink_trunking,
                vsan_list=vsan_policy_a_vsan_list,
                policy_description=vsan_policy_a_description,
                organization=ucs_domain_profile_organization,
                tags=vsan_policy_a_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="AB"
                )
        else:
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_vsan_policy_a_name = f"{deployment_name_prefix}{vsan_policy_a_name}{deployment_name_suffix}"
            vsan_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_vsan_policy_a_name,
                enable_uplink_trunking=vsan_policy_a_enable_uplink_trunking,
                vsan_list=vsan_policy_a_vsan_list,
                policy_description=vsan_policy_a_description,
                organization=ucs_domain_profile_organization,
                tags=vsan_policy_a_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="A"
                )
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_vsan_policy_b_name = f"{deployment_name_prefix}{vsan_policy_b_name}{deployment_name_suffix}"
            vsan_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_vsan_policy_b_name,
                enable_uplink_trunking=vsan_policy_b_enable_uplink_trunking,
                vsan_list=vsan_policy_b_vsan_list,
                policy_description=vsan_policy_b_description,
                organization=ucs_domain_profile_organization,
                tags=vsan_policy_b_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="B"
                )

    # Create the Ethernet Network Group Policy in Intersight
    if enable_ethernet_network_group_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_network_group_policy_name = f"{deployment_name_prefix}{ethernet_network_group_policy_name}{deployment_name_suffix}"
        ethernet_network_group_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_network_group_policy_name,
            allowed_vlans=ethernet_network_group_policy_allowed_vlans,
            native_vlan=ethernet_network_group_policy_native_vlan,
            policy_description=ethernet_network_group_policy_description,
            organization=ucs_domain_profile_organization,
            tags=ethernet_network_group_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet Network Control Policy in Intersight
    if enable_ethernet_network_control_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_network_control_policy_name = f"{deployment_name_prefix}{ethernet_network_control_policy_name}{deployment_name_suffix}"
        ethernet_network_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_network_control_policy_name,
            enable_cdp=ethernet_network_control_policy_enable_cdp,
            mac_register_mode=ethernet_network_control_policy_mac_register_mode,
            action_on_uplink_fail=ethernet_network_control_policy_action_on_uplink_fail,
            mac_forging=ethernet_network_control_policy_mac_forging,
            lldp_enable_transmit=ethernet_network_control_policy_lldp_enable_transmit,
            lldp_enable_receive=ethernet_network_control_policy_lldp_enable_receive,
            policy_description=ethernet_network_control_policy_description,
            organization=ucs_domain_profile_organization,
            tags=ethernet_network_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Flow Control Policy in Intersight
    if enable_flow_control_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_flow_control_policy_name = f"{deployment_name_prefix}{flow_control_policy_name}{deployment_name_suffix}"
        flow_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_flow_control_policy_name,
            priority=flow_control_policy_priority,
            receive=flow_control_policy_receive,
            send=flow_control_policy_send,
            policy_description=flow_control_policy_description,
            organization=ucs_domain_profile_organization,
            tags=flow_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Link Control Policy in Intersight
    if enable_link_control_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_link_control_policy_name = f"{deployment_name_prefix}{link_control_policy_name}{deployment_name_suffix}"
        link_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_link_control_policy_name,
            admin_state=link_control_policy_admin_state,
            mode=link_control_policy_mode,
            policy_description=link_control_policy_description,
            organization=ucs_domain_profile_organization,
            tags=link_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Link Aggregation Policy in Intersight
    if enable_link_aggregation_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_link_aggregation_policy_name = f"{deployment_name_prefix}{link_aggregation_policy_name}{deployment_name_suffix}"
        link_aggregation_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_link_aggregation_policy_name,
            suspend_individual=link_aggregation_policy_suspend_individual,
            lacp_rate=link_aggregation_policy_lacp_rate,
            policy_description=link_aggregation_policy_description,
            organization=ucs_domain_profile_organization,
            tags=link_aggregation_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Port Policies in Intersight
    if enable_port_policy:
        # Establish default pre-requisite and support Policy names for Port Policies
        if custom_default_ethernet_network_group_policy_name:
            port_policy_default_ethernet_network_group_policy_name = custom_default_ethernet_network_group_policy_name
        else:
            port_policy_default_ethernet_network_group_policy_name = deployment_tool_ethernet_network_group_policy_name
            
        if custom_default_ethernet_network_control_policy_name:
            port_policy_default_ethernet_network_control_policy_name = custom_default_ethernet_network_control_policy_name
        else:
            port_policy_default_ethernet_network_control_policy_name = deployment_tool_ethernet_network_control_policy_name
            
        if custom_default_flow_control_policy_name:
            port_policy_default_flow_control_policy_name = custom_default_flow_control_policy_name
        else:
            port_policy_default_flow_control_policy_name = deployment_tool_flow_control_policy_name
            
        if custom_default_link_control_policy_name:
            port_policy_default_link_control_policy_name = custom_default_link_control_policy_name
        else:
            port_policy_default_link_control_policy_name = deployment_tool_link_control_policy_name
            
        if custom_default_link_aggregation_policy_name:
            port_policy_default_link_aggregation_policy_name = custom_default_link_aggregation_policy_name
        else:
            port_policy_default_link_aggregation_policy_name = deployment_tool_link_aggregation_policy_name
            
        # Check if Policy will be shared by both Fabric Interconnects
        if shared_port_policy_for_both_fabric_interconnects:
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_port_policy_a_name = f"{deployment_name_prefix}{port_policy_a_name}{deployment_name_suffix}"
            port_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_port_policy_a_name,
                fabric_interconnect_model=port_policy_a_fabric_interconnect_model,
                fc_port_mode_list=port_policy_a_fc_port_mode_list,
                server_port_list=port_policy_a_server_port_list,
                ethernet_uplink_port_list=port_policy_a_ethernet_uplink_port_list,
                fcoe_uplink_port_list=port_policy_a_fcoe_uplink_port_list,
                fc_uplink_port_list=port_policy_a_fc_uplink_port_list,
                appliance_port_list=port_policy_a_appliance_port_list,
                ethernet_uplink_port_channel_list=port_policy_a_ethernet_uplink_port_channel_list,
                fcoe_uplink_port_channel_list=port_policy_a_fcoe_uplink_port_channel_list,
                fc_uplink_port_channel_list=port_policy_a_fc_uplink_port_channel_list,
                appliance_port_channel_list=port_policy_a_appliance_port_channel_list,
                policy_description=port_policy_a_description,
                organization=ucs_domain_profile_organization,
                tags=port_policy_a_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="AB",
                default_flow_control_policy_name=port_policy_default_flow_control_policy_name,
                default_link_control_policy_name=port_policy_default_link_control_policy_name,
                default_link_aggregation_policy_name=port_policy_default_link_aggregation_policy_name,
                default_ethernet_network_group_policy_name=port_policy_default_ethernet_network_group_policy_name,
                default_ethernet_network_control_policy_name=port_policy_default_ethernet_network_control_policy_name,                        
                default_slot_id_of_server_ports=port_policy_default_slot_id_of_server_ports,
                default_slot_id_of_ethernet_uplink_ports=port_policy_default_slot_id_of_ethernet_uplink_ports,
                default_slot_id_of_fcoe_uplink_ports=port_policy_default_slot_id_of_fcoe_uplink_ports,
                default_slot_id_of_fc_uplink_ports=port_policy_default_slot_id_of_fc_uplink_ports,
                default_slot_id_of_appliance_ports=port_policy_default_slot_id_of_appliance_ports,
                default_aggregate_port_id_of_server_ports=port_policy_default_aggregate_port_id_of_server_ports,
                default_aggregate_port_id_of_ethernet_uplink_ports=port_policy_default_aggregate_port_id_of_ethernet_uplink_ports,
                default_aggregate_port_id_of_fcoe_uplink_ports=port_policy_default_aggregate_port_id_of_fcoe_uplink_ports,
                default_aggregate_port_id_of_fc_uplink_ports=port_policy_default_aggregate_port_id_of_fc_uplink_ports,
                default_aggregate_port_id_of_appliance_ports=port_policy_default_aggregate_port_id_of_appliance_ports
                )
        else:
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_port_policy_a_name = f"{deployment_name_prefix}{port_policy_a_name}{deployment_name_suffix}"
            port_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_port_policy_a_name,
                fabric_interconnect_model=port_policy_a_fabric_interconnect_model,
                fc_port_mode_list=port_policy_a_fc_port_mode_list,
                server_port_list=port_policy_a_server_port_list,
                ethernet_uplink_port_list=port_policy_a_ethernet_uplink_port_list,
                fcoe_uplink_port_list=port_policy_a_fcoe_uplink_port_list,
                fc_uplink_port_list=port_policy_a_fc_uplink_port_list,
                appliance_port_list=port_policy_a_appliance_port_list,
                ethernet_uplink_port_channel_list=port_policy_a_ethernet_uplink_port_channel_list,
                fcoe_uplink_port_channel_list=port_policy_a_fcoe_uplink_port_channel_list,
                fc_uplink_port_channel_list=port_policy_a_fc_uplink_port_channel_list,
                appliance_port_channel_list=port_policy_a_appliance_port_channel_list,
                policy_description=port_policy_a_description,
                organization=ucs_domain_profile_organization,
                tags=port_policy_a_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="A",
                default_flow_control_policy_name=deployment_tool_flow_control_policy_name,
                default_link_control_policy_name=deployment_tool_link_control_policy_name,
                default_link_aggregation_policy_name=deployment_tool_link_aggregation_policy_name,
                default_ethernet_network_group_policy_name=deployment_tool_ethernet_network_group_policy_name,
                default_ethernet_network_control_policy_name=deployment_tool_ethernet_network_control_policy_name,                        
                default_slot_id_of_server_ports=port_policy_default_slot_id_of_server_ports,
                default_slot_id_of_ethernet_uplink_ports=port_policy_default_slot_id_of_ethernet_uplink_ports,
                default_slot_id_of_fcoe_uplink_ports=port_policy_default_slot_id_of_fcoe_uplink_ports,
                default_slot_id_of_fc_uplink_ports=port_policy_default_slot_id_of_fc_uplink_ports,
                default_slot_id_of_appliance_ports=port_policy_default_slot_id_of_appliance_ports,
                default_aggregate_port_id_of_server_ports=port_policy_default_aggregate_port_id_of_server_ports,
                default_aggregate_port_id_of_ethernet_uplink_ports=port_policy_default_aggregate_port_id_of_ethernet_uplink_ports,
                default_aggregate_port_id_of_fcoe_uplink_ports=port_policy_default_aggregate_port_id_of_fcoe_uplink_ports,
                default_aggregate_port_id_of_fc_uplink_ports=port_policy_default_aggregate_port_id_of_fc_uplink_ports,
                default_aggregate_port_id_of_appliance_ports=port_policy_default_aggregate_port_id_of_appliance_ports
                )
            # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
            deployment_tool_port_policy_b_name = f"{deployment_name_prefix}{port_policy_b_name}{deployment_name_suffix}"
            port_policy_maker(
                intersight_api_key_id=None,
                intersight_api_key=None,
                policy_name=deployment_tool_port_policy_b_name,
                fabric_interconnect_model=port_policy_b_fabric_interconnect_model,
                fc_port_mode_list=port_policy_b_fc_port_mode_list,
                server_port_list=port_policy_b_server_port_list,
                ethernet_uplink_port_list=port_policy_b_ethernet_uplink_port_list,
                fcoe_uplink_port_list=port_policy_b_fcoe_uplink_port_list,
                fc_uplink_port_list=port_policy_b_fc_uplink_port_list,
                appliance_port_list=port_policy_b_appliance_port_list,
                ethernet_uplink_port_channel_list=port_policy_b_ethernet_uplink_port_channel_list,
                fcoe_uplink_port_channel_list=port_policy_b_fcoe_uplink_port_channel_list,
                fc_uplink_port_channel_list=port_policy_b_fc_uplink_port_channel_list,
                appliance_port_channel_list=port_policy_b_appliance_port_channel_list,
                policy_description=port_policy_b_description,
                organization=ucs_domain_profile_organization,
                tags=port_policy_b_tags,
                preconfigured_api_client=main_intersight_api_client,
                ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
                fabric_interconnect="B",
                default_flow_control_policy_name=deployment_tool_flow_control_policy_name,
                default_link_control_policy_name=deployment_tool_link_control_policy_name,
                default_link_aggregation_policy_name=deployment_tool_link_aggregation_policy_name,
                default_ethernet_network_group_policy_name=deployment_tool_ethernet_network_group_policy_name,
                default_ethernet_network_control_policy_name=deployment_tool_ethernet_network_control_policy_name,                        
                default_slot_id_of_server_ports=port_policy_default_slot_id_of_server_ports,
                default_slot_id_of_ethernet_uplink_ports=port_policy_default_slot_id_of_ethernet_uplink_ports,
                default_slot_id_of_fcoe_uplink_ports=port_policy_default_slot_id_of_fcoe_uplink_ports,
                default_slot_id_of_fc_uplink_ports=port_policy_default_slot_id_of_fc_uplink_ports,
                default_slot_id_of_appliance_ports=port_policy_default_slot_id_of_appliance_ports,
                default_aggregate_port_id_of_server_ports=port_policy_default_aggregate_port_id_of_server_ports,
                default_aggregate_port_id_of_ethernet_uplink_ports=port_policy_default_aggregate_port_id_of_ethernet_uplink_ports,
                default_aggregate_port_id_of_fcoe_uplink_ports=port_policy_default_aggregate_port_id_of_fcoe_uplink_ports,
                default_aggregate_port_id_of_fc_uplink_ports=port_policy_default_aggregate_port_id_of_fc_uplink_ports,
                default_aggregate_port_id_of_appliance_ports=port_policy_default_aggregate_port_id_of_appliance_ports
                )

    # Create the NTP Policy in Intersight
    if enable_ntp_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_ntp_policy_name = f"{deployment_name_prefix}{ntp_policy_name}{deployment_name_suffix}"
        ntp_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ntp_policy_name,
            ntp_servers=ntp_policy_ntp_servers,
            timezone=ntp_policy_timezone,
            enable_ntp=ntp_policy_enable_ntp,
            policy_description=ntp_policy_description,
            organization=ucs_domain_profile_organization,
            tags=ntp_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name
            )

    # Create the Syslog Policy in Intersight
    if enable_syslog_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_syslog_policy_name = f"{deployment_name_prefix}{syslog_policy_name}{deployment_name_suffix}"
        syslog_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_syslog_policy_name,
            syslog_local_logging_minimum_severity_to_report=syslog_policy_local_logging_minimum_severity_to_report,
            syslog_remote_logging_server_list=syslog_policy_remote_logging_server_list,
            policy_description=syslog_policy_description,
            organization=ucs_domain_profile_organization,
            tags=syslog_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name
            )

    # Create the Network Connectivity Policy in Intersight
    if enable_network_connectivity_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_network_connectivity_policy_name = f"{deployment_name_prefix}{network_connectivity_policy_name}{deployment_name_suffix}"
        network_connectivity_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_network_connectivity_policy_name,
            preferred_ipv4_dns_server=network_connectivity_policy_preferred_ipv4_dns_server,
            alternate_ipv4_dns_server=network_connectivity_policy_alternate_ipv4_dns_server,
            obtain_ipv4_dns_server_from_dhcp=network_connectivity_policy_obtain_ipv4_dns_server_from_dhcp,
            enable_dynamic_dns=network_connectivity_policy_enable_dynamic_dns,
            dynamic_dns_update_domain=network_connectivity_policy_dynamic_dns_update_domain,
            enable_ipv6=network_connectivity_policy_enable_ipv6,
            obtain_ipv6_dns_server_from_dhcp=network_connectivity_policy_obtain_ipv6_dns_server_from_dhcp,
            preferred_ipv6_dns_server=network_connectivity_policy_preferred_ipv6_dns_server,
            alternate_ipv6_dns_server=network_connectivity_policy_alternate_ipv6_dns_server,
            policy_description=network_connectivity_policy_description,
            organization=ucs_domain_profile_organization,
            tags=network_connectivity_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name
            )

    # Create the SNMP Policy in Intersight
    if enable_snmp_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_snmp_policy_name = f"{deployment_name_prefix}{snmp_policy_name}{deployment_name_suffix}"
        snmp_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_snmp_policy_name,
            enable_snmp=snmp_policy_enable_snmp,
            snmp_v2c_features=snmp_policy_v2c_features,
            snmp_v3_features=snmp_policy_v3_features,
            snmp_port=snmp_policy_port,
            system_contact=snmp_policy_system_contact,
            system_location=snmp_policy_system_location,
            access_community_string=snmp_policy_access_community_string,
            snmp_community_access=snmp_policy_community_access,
            trap_community_string=snmp_policy_trap_community_string,
            snmp_engine_input_id=snmp_policy_engine_input_id,
            snmp_users_list=snmp_policy_users_list,
            snmp_trap_destinations_list=snmp_policy_trap_destinations_list,
            policy_description=snmp_policy_description,
            organization=ucs_domain_profile_organization,
            tags=snmp_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name
            )

    # Create the System QoS Policy in Intersight
    if enable_system_qos_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_system_qos_policy_name = f"{deployment_name_prefix}{system_qos_policy_name}{deployment_name_suffix}"
        system_qos_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_system_qos_policy_name,
            qos_class_settings_list=system_qos_policy_class_settings_list,
            policy_description=system_qos_policy_description,
            organization=ucs_domain_profile_organization,
            tags=system_qos_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name
            )

    # Create the Switch Control Policy in Intersight
    if enable_switch_control_policy:
        # Update Policy name with UCS Domain Deployment Tool provided prefix and/or suffix
        deployment_tool_switch_control_policy_name = f"{deployment_name_prefix}{switch_control_policy_name}{deployment_name_suffix}"
        switch_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_switch_control_policy_name,
            enable_vlan_port_count_optimization=switch_control_policy_enable_vlan_port_count_optimization,
            mac_address_table_aging_time_option=switch_control_policy_mac_address_table_aging_time_option,
            mac_address_table_aging_time_custom_value_in_seconds=switch_control_policy_mac_address_table_aging_time_custom_value_in_seconds,
            link_control_message_interval_in_seconds=switch_control_policy_link_control_message_interval_in_seconds,
            link_control_recovery_action=switch_control_policy_link_control_recovery_action,
            policy_description=switch_control_policy_description,
            organization=ucs_domain_profile_organization,
            tags=switch_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client,
            ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name
            )

    # Assign and Deploy the UCS Domain Profile to an Intersight Target
    if assign_ucs_domain_profile or deploy_ucs_domain_profile:
        assign_and_deploy_ucs_domain_profile(
            intersight_api_key_id=None,
            intersight_api_key=None,
            ucs_domain_profile_name=deployment_tool_ucs_domain_profile_name,
            target_assignment_identifier=target_assignment_identifier,
            assign_ucs_domain_profile=assign_ucs_domain_profile,
            deploy_ucs_domain_profile=deploy_ucs_domain_profile,
            ucs_domain_profile_organization=ucs_domain_profile_organization,
            preconfigured_api_client=main_intersight_api_client
            )

    # UCS Domain Deployment Tool completion
    print(f"\nThe {deployment_tool_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the UCS Domain Deployment Tool for Cisco Intersight
sys.exit(0)
