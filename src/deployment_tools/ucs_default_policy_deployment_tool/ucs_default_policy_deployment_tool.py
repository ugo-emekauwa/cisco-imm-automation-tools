"""
UCS Default Policy Deployment Tool for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The UCS Default Policy Deployment Tool for Cisco Intersight automates
         the comprehensive build and deployment of default UCS Policies for
         Cisco IMM (Intersight Managed Mode).
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


import sys
import traceback
import json
import copy
import intersight
import re
import time
import base64
import urllib3

########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
default UCS Policies on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######


#----------------------------------Section 01----------------------------------#

# GENERAL DEPLOYMENT CONFIGURATION

# General Settings
deployment_organization = "default"

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

# Global Deployment Name Settings (Optional - These settings will attach a global prefix or suffix to the names of the created UCS Policies)
deployment_name_prefix = "Default-"
deployment_name_suffix = ""

# UCS Default Policy Deployment List
## NOTE - The following variables enable creation and deployment of the corresponding named Policy. To disable a specific Policy, change the value to False.
deploy_bios_policy = True
deploy_boot_order_policy = True
deploy_cert_mgmt_policy = True
deploy_ethernet_adapter_policy = True
deploy_ethernet_network_control_policy = True
deploy_ethernet_network_group_policy = True
deploy_ethernet_qos_policy = True
deploy_fibre_channel_adapter_policy = True
deploy_fibre_channel_network_policy = True
deploy_fibre_channel_qos_policy = True
deploy_flow_control_policy = True
deploy_ipmi_over_lan_policy = True
deploy_iscsi_adapter_policy = True
deploy_link_aggregation_policy = True
deploy_link_control_policy = True
deploy_local_user_policy = True
deploy_multicast_policy = True
deploy_network_connectivity_policy = True
deploy_ntp_policy = True
deploy_power_policy = True
deploy_serial_over_lan_policy = True
deploy_snmp_policy = True
deploy_switch_control_policy = True
deploy_syslog_policy = True
deploy_system_qos_policy = True
deploy_thermal_policy = True
deploy_virtual_kvm_policy = True


#----------------------------------Section 02----------------------------------#

# BIOS POLICY CONFIGURATION

# General Settings
bios_policy_name = "BIOS-Policy"
bios_policy_description = "A Cisco Intersight BIOS Policy generated by the UCS Default Policy Deployment Tool."
bios_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the bios_policy_tags dictionary if no tags are needed, for example: bios_policy_tags = {}

# Policy Detail Settings
## To change BIOS settings from platform defaults, add the setting and its desired configuration.
## Available BIOS settings can be found at https://intersight.com/apidocs/apirefs/bios/Policies/model/.
bios_policy_bios_settings = {
    "CpuPerformance": "enterprise",
    "CpuEnergyPerformance": "balanced-performance",
    }


#----------------------------------Section 03----------------------------------#

# BOOT ORDER POLICY CONFIGURATION

# General Settings
boot_order_policy_name = "Boot-Order-Policy"
boot_order_policy_description = "A Cisco Intersight Boot Order Policy generated by the UCS Default Policy Deployment Tool."
boot_order_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the boot_order_policy_tags dictionary if no tags are needed, for example: boot_order_policy_tags = {}

# Policy Detail Settings
boot_order_policy_configured_boot_mode = "Uefi"     # Options: "Legacy", "Uefi"
boot_order_policy_enable_uefi_secure_boot = False
# NOTE! - For the boot devices list, place each boot device dictionary in the list to match the desired boot order (first to last).
boot_order_policy_boot_devices_list = [
    {"Type": "Virtual Media", "Device Name": "Virtual-Media-1", "Sub-Type": "CIMC MAPPED HDD"},
    {"Type": "PXE Boot", "Device Name": "PXE-Boot-1", "IP Type": "IPv4", "Interface Name": "pxe1", "Enabled": False},
    {"Type": "Local Disk", "Device Name": "Local-Disk-1"},
    ]


#----------------------------------Section 04----------------------------------#

# CERTIFICATE MANAGEMENT POLICY CONFIGURATION

# General Settings
cert_mgmt_policy_name = "Cert-Mgmt-Policy"
cert_mgmt_policy_description = "A Cisco Intersight Certificate Management Policy generated by the UCS Default Policy Deployment Tool."
cert_mgmt_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the cert_mgmt_policy_tags dictionary if no tags are needed, for example: cert_mgmt_policy_tags = {}

# Policy Detail Settings
cert_mgmt_policy_enable_imc_certificate = True

cert_mgmt_policy_certificate = """
-----BEGIN CERTIFICATE-----
MIIDCjCCAfKgAwIBAgIQUckb2WsT/I5MnEbqjS2d9DANBgkqhkiG9w0BAQsFADAd
MRswGQYDVQQDDBJTYW1wbGUgQ2VydGlmaWNhdGUwHhcNMjIwMTI1MjI0ODUxWhcN
MzIwMTI1MjI1ODUyWjAdMRswGQYDVQQDDBJTYW1wbGUgQ2VydGlmaWNhdGUwggEi
MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDPcG0VRMfORnb0kdR4mehBbLZ8
AiguJ3aSVcr43OlLf7GxEp/MLeP+9zb/HmXdECC58yJi6y3E1n3u4Sr9R2D7Ydej
b0wuUWTsrUWbr4rvvgIIMRfGznbNn179jvHWDd6RjCCT/+nuEwOpwUjzPZi61N36
4bzABPbl2V2wsMq/xwsaCANMO53toCMH64YrdY+HQNJJWDeBuhi3iUk2SdIQ8jOE
3SmB5hJO2yRl2mkUgIN3J1nRndp9L1ZzBuBpghf9HUDy8OPeq3BdQIFaYSiNWqwv
SiaizJwTuEzFTXyj/9w7NLF3PZpLTKMj0OuRncuggF7oYGPDjwZFRhowDPXFAgMB
AAGjRjBEMA4GA1UdDwEB/wQEAwIFoDATBgNVHSUEDDAKBggrBgEFBQcDAjAdBgNV
HQ4EFgQUcPQ6iXWN84RXcNW8H4qHKTXuxpkwDQYJKoZIhvcNAQELBQADggEBAM34
45rCMJm854lnFYVaxKBsAFXEk0fMDUTNT40vJMlk8XQUTBe4vPTtX2y33uqU7FyW
lirhNASU9P3Vq+0dVKgcy22Nk3Mwp4Q8aenrhJ+tO8ToaYrLGRXKAaOOxYUOjOb5
JE3dsXLMXp4D8K02k4I63tDox6XYpR6LKXXMbGq2/6pdXcu9XDSXiMfvlKPoTfy9
+QjKy6eZzZYYtz3OLS6C2XaaIaa9Pp7VkSESH4YD/cOBQEqrwmWNqgvtJP3GJT5q
DjTXdwQ6707d/IasjC3Gd1rnNFiyDQTmlJQqjiHziLMCMesl6Qe75EmPJAQBeT2G
SQZ/GGDkTpEBh+Ru3TM=
-----END CERTIFICATE-----
"""

cert_mgmt_policy_private_key = """
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDPcG0VRMfORnb0
kdR4mehBbLZ8AiguJ3aSVcr43OlLf7GxEp/MLeP+9zb/HmXdECC58yJi6y3E1n3u
4Sr9R2D7Ydejb0wuUWTsrUWbr4rvvgIIMRfGznbNn179jvHWDd6RjCCT/+nuEwOp
wUjzPZi61N364bzABPbl2V2wsMq/xwsaCANMO53toCMH64YrdY+HQNJJWDeBuhi3
iUk2SdIQ8jOE3SmB5hJO2yRl2mkUgIN3J1nRndp9L1ZzBuBpghf9HUDy8OPeq3Bd
QIFaYSiNWqwvSiaizJwTuEzFTXyj/9w7NLF3PZpLTKMj0OuRncuggF7oYGPDjwZF
RhowDPXFAgMBAAECggEANykLKLOwee6M5T3+BM/QTc1tvQ4JxzQhOIptvb1on/Xl
t1NfgLjXPs5YJoDbz2vhd/DqPOmSsxviQupHNzCK3m3HHKOU22AzeSgeMWb9iAC7
o5gCXZA7UTRG2x/uuN/ZRlS/uPs9JlySBcrq7ht8CHpgSL1MJrdrO/WQD1MDpvj5
JuGaUBwRUhFc928TbEgUceZsOzjd7kCNP1h32zk+D6v/97001y0vEMm5bOslhWgZ
orn67zbMOkVmBOCdEjsuhJhr9UCPJZHiFOEQREryza8650nstK/anr81CiY0TOg/
WIigPfXbpBl+n22AiROKMfYw5w4Cif97joiP+jtL5QKBgQDgnX02ms3iBMUsRUAx
DxnzuBIdW5ZVpfTCArLu5lnqwgkgxZp1soHn9wSCm7yOvCS5D6WMMsitL/eeKbgI
3VY8/uB7+3ecoBzyPh7Y4e/PBnPsXB8U9bJAAin0RIH6OlriyfIKCkW6h3G72CXC
GPTZtlL83xWziiPZVNXoLlEkXwKBgQDsbIxtY7p7bxEB4jUvIdvxc5BVZCQy/R/Z
pzlYPtnz5hFueW/owutSudZk0TQSe0vsy7oR/7OW5+wE0QDl/W0kDIvScSvqatTV
MRwWp1+pZqvdH53ijo322MC/7dlL7SeT/17RV4UFHzlVfDs9loI0MB/qE0v8r1Gu
Nat2HKf4WwKBgB6Ka28UR3A289RcKilBg2bXHWduf5dvtEL4+PlwysMX1QPmumTM
e8tdk/hqUo4Z2Ohszzar5QtfXUzdIU/bQJGUmlNhUtcyEh2CAtG8js3Yc8SslfFU
owL/CFNVSVMLwjXZ/ZYN5YNCTV2cOy4UFJ7RoqENeDbsTomLdnZWbeQDAoGBAM7c
UypLPhlOHrVlNV+d4pGqqbjtO/cZHssT08rwg0cyIEJnIpGoKrphO8NOgJ9DHjV8
M7wX3QzGs+2q6XxSdzI5gAWLW/9ppfs7UvZHUB4qZWm+hih6zqATGuNTuvMB98U4
hb/pMcw/e6zeW/8RN69uBB6M78mRpIgnEXTwsc9NAoGAV//5aYtDq1PuxKZAa7nb
b3jP7x+tds+/idQnOLsxRkAI9J8KbUbm4Js0KWYmxSsyKZ2ikUbUEZwNKpaPv0m5
l9rshOr/277oktj4ZGR+ukQlv5RwxTqF7fYPrskScw795bnkoMZ3yqqmLRn+ZYxU
ev9o1mdOxbKniclNUrH8HBA=
-----END PRIVATE KEY-----
"""


#----------------------------------Section 05----------------------------------#

# ETHERNET ADAPTER POLICY CONFIGURATION

# General Settings
ethernet_adapter_policy_name = "Eth-Adapter-Policy"
ethernet_adapter_policy_description = "A Cisco Intersight Ethernet Adapter Policy generated by the UCS Default Policy Deployment Tool."
ethernet_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_adapter_policy_tags dictionary if no tags are needed, for example: ethernet_adapter_policy_tags = {}

## Ethernet Adapter Default Configuration
## NOTE - Setting a default configuration will override all settings under Policy Details. Leave an empty string ("") if a default configuration is not desired.
## NOTE - Default configurations can be set by providing the name of one of the pre-defined built-in default configuration options from Intersight.
## NOTE - Available pre-defined built-in default configuration options from Intersight include:
## "MQ-SMBd"
## "SMBServer"
## "SMBClient"
## "Solaris"
## "usNICOracleRAC"
## "WIN-AzureStack"
## "Win-HPN-SMBd"
## "Win-HPN"
## "Linux-NVMe-RoCE"
## "MQ"
## "usNIC"
## "SRIOV"
## "VMWarePassThru"
## "VMWare"
## "Windows"
## "Linux"
ethernet_adapter_policy_ethernet_adapter_default_configuration = ""

# Policy Detail Settings
ethernet_adapter_policy_enable_virtual_extensible_lan = False
ethernet_adapter_policy_enable_network_virtualization_using_gre = False
ethernet_adapter_policy_enable_accelerated_receive_flow_steering = False
ethernet_adapter_policy_enable_precision_time_protocol = False
ethernet_adapter_policy_enable_advanced_filter = False
ethernet_adapter_policy_enable_interrupt_scaling = False
ethernet_adapter_policy_enable_geneve_offload = False

## RoCE Settings
ethernet_adapter_policy_enable_rdma_over_converged_ethernet = False

## Interrupt Settings
ethernet_adapter_policy_interrupts = 8        # Options: 1 - 1024
ethernet_adapter_policy_interrupt_mode = "MSIx"     # Options: "MSIx", "MSI", or "INTx"
ethernet_adapter_policy_interrupt_timer = 125        # Options: 0 - 65535
ethernet_adapter_policy_interrupt_coalescing_type = "Min"       # Options: "Min" or "Idle"

## Receive Settings
ethernet_adapter_policy_receive_queue_count = 4        # Options: 1 - 1000
ethernet_adapter_policy_receive_ring_size = 512        # Options: 64 - 16384

## Transmit Settings
ethernet_adapter_policy_transmit_queue_count = 1        # Options: 1 - 1000
ethernet_adapter_policy_transmit_ring_size = 256        # Options: 64 - 16384

## Completion Settings
ethernet_adapter_policy_completion_queue_count = 5        # Options: 1 - 2000
ethernet_adapter_policy_completion_ring_size = 5        # Options: 1 - 256
ethernet_adapter_policy_uplink_failback_timeout = 5        # Options: 0 - 600

## TCP Offload Settings
ethernet_adapter_policy_enable_tx_checksum_offload = True
ethernet_adapter_policy_enable_rx_checksum_offload = True
ethernet_adapter_policy_enable_large_send_offload = True
ethernet_adapter_policy_enable_large_receive_offload = True

## Receive Side Scaling Settings
ethernet_adapter_policy_enable_receive_side_scaling = True
ethernet_adapter_policy_enable_ipv4_hash = True
ethernet_adapter_policy_enable_ipv6_extensions_hash = False
ethernet_adapter_policy_enable_ipv6_hash = True
ethernet_adapter_policy_enable_tcp_and_ipv4_hash = True
ethernet_adapter_policy_enable_tcp_and_ipv6_extensions_hash = False
ethernet_adapter_policy_enable_tcp_and_ipv6_hash = True
ethernet_adapter_policy_enable_udp_and_ipv4_hash = False
ethernet_adapter_policy_enable_udp_and_ipv6_hash = False

## Additional RoCE Settings (Not available in the GUI, change only if needed.)
ethernet_adapter_policy_roce_class_of_service = 5        # Options: 1 - 6
ethernet_adapter_policy_roce_memory_regions = 0
ethernet_adapter_policy_roce_queue_pairs = 0
ethernet_adapter_policy_roce_resource_groups = 0
ethernet_adapter_policy_roce_version = 1        # Options: 1 - 2


#----------------------------------Section 06----------------------------------#

# ETHERNET NETWORK CONTROL POLICY CONFIGURATION

# General Settings
ethernet_network_control_policy_name = "Eth-Net-Control-Policy"
ethernet_network_control_policy_description = "A Cisco Intersight Ethernet Network Control Policy generated by the UCS Default Policy Deployment Tool."
ethernet_network_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_network_control_policy_tags dictionary if no tags are needed, for example: ethernet_network_control_policy_tags = {}

# Policy Detail Settings
ethernet_network_control_policy_enable_cdp = False
ethernet_network_control_policy_mac_register_mode = "Only Native VLAN"        # Options: "Only Native VLAN", "All Host VLANs"
ethernet_network_control_policy_action_on_uplink_fail = "Link Down"      # Options: "Link Down", "Warning"
ethernet_network_control_policy_mac_forging = "Allow"        # Options: "Allow", "Deny"
ethernet_network_control_policy_lldp_enable_transmit = False
ethernet_network_control_policy_lldp_enable_receive = False


#----------------------------------Section 07----------------------------------#

# ETHERNET NETWORK GROUP POLICY CONFIGURATION

# General Settings
ethernet_network_group_policy_name = "Eth-Net-Group-Policy"
ethernet_network_group_policy_description = "A Cisco Intersight Ethernet Network Group Policy generated by the UCS Default Policy Deployment Tool."
ethernet_network_group_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_network_group_policy_tags dictionary if no tags are needed, for example: ethernet_network_group_policy_tags = {}

# Policy Detail Settings
## NOTE - For the "Allowed VLANs" setting, the provided value must be a string. Ranges of VLANs can be split with a hyphen or commas with no spaces. Allowed VLANs can be between 1-4093.
ethernet_network_group_policy_allowed_vlans = "10,11"

## NOTE - For the "Native VLAN" setting, the provided value must be an integer. Native VLANs can be between 1-4093.
ethernet_network_group_policy_native_vlan = 1


#----------------------------------Section 08----------------------------------#

# ETHERNET QOS POLICY CONFIGURATION

# General Settings
ethernet_qos_policy_name = "Ethernet-QoS-Policy"
ethernet_qos_policy_description = "A Cisco Intersight Ethernet QoS Policy generated by the UCS Default Policy Deployment Tool."
ethernet_qos_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_qos_policy_tags dictionary if no tags are needed, for example: ethernet_qos_policy_tags = {}

# Policy Detail Settings
ethernet_qos_policy_ethernet_qos_mtu_in_bytes = 1500        # Options: 1500 - 9000
ethernet_qos_policy_ethernet_qos_rate_limit_in_mbps = 0        # Options: 0 - 100000
ethernet_qos_cos = 0        # Options: 0, 1, 2, 4, 5, 6
ethernet_qos_burst = 10240        # Options: 1024 - 1000000
ethernet_qos_priority = "Best Effort"        # Options: "Best Effort", "Platinum", "Gold", "Silver", "Bronze"
ethernet_qos_policy_ethernet_qos_enable_trust_host_cos = False        # Options: True, False


#----------------------------------Section 09----------------------------------#

# FIBRE CHANNEL ADAPTER POLICY CONFIGURATION

# General Settings
fibre_channel_adapter_policy_name = "FC-Adapter-Policy"
fibre_channel_adapter_policy_description = "A Cisco Intersight Fibre Channel Adapter Policy generated by the UCS Default Policy Deployment Tool."
fibre_channel_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the fibre_channel_adapter_policy_tags dictionary if no tags are needed, for example: fibre_channel_adapter_policy_tags = {}

## Fibre Channel Adapter Default Configuration
## NOTE - Setting a default configuration will override all settings under Policy Details. Leave an empty string ("") if a default configuration is not desired.
## NOTE - Default configurations can be set by providing the name of one of the pre-defined built-in default configuration options from Intersight.
## NOTE - Available pre-defined built-in default configuration options from Intersight include:
## "WindowsBoot"
## "Solaris"
## "FCNVMeTarget"
## "FCNVMeInitiator"
## "Target"
## "Initiator"
## "VMWare"
## "Windows"
## "Linux"
fibre_channel_adapter_policy_fibre_channel_adapter_default_configuration = ""

# Policy Detail Settings
## Error Recovery
fibre_channel_adapter_policy_fcp_error_recovery = False
fibre_channel_adapter_policy_port_down_timeout_in_ms = 10000     # Options: 0 - 240000
fibre_channel_adapter_policy_link_down_timeout_in_ms = 30000     # Options: 0 - 240000
fibre_channel_adapter_policy_io_retry_timeout_in_seconds = 5     # Options: 1 - 59
fibre_channel_adapter_policy_port_down_io_retry_in_ms = 8        # Options: 0 - 255

## Error Detection
fibre_channel_adapter_policy_error_detection_timeout = 2000  # Options: 1000 - 100000

## Resource Allocation
fibre_channel_adapter_policy_resource_allocation_timeout = 10000     # Options: 5000 - 100000

## Flogi
fibre_channel_adapter_policy_flogi_retries = 8       # Options: > 0
fibre_channel_adapter_policy_flogi_timeout_in_ms = 4000      # Options: 1000 - 255000

## Plogi
fibre_channel_adapter_policy_plogi_retries = 8       # Options: 0 - 255
fibre_channel_adapter_policy_plogi_timeout_in_ms = 20000     # Options: 1000 - 255000

## Interrupt
fibre_channel_adapter_policy_interrupt_mode = "MSIx"     # Options: "MSIx", "MSI", or "INTx"

## I/O Throttle
fibre_channel_adapter_policy_io_throttle_count = 512     # Options: 1 - 1024

## LUN
fibre_channel_adapter_policy_maximum_luns_per_target = 1024     # Options: 1 - 1024
fibre_channel_adapter_policy_lun_queue_depth = 20     # Options: 1 - 254

## Receive Settings
fibre_channel_adapter_policy_receive_ring_size = 64        # Options: > 64

## Transmit Settings
fibre_channel_adapter_policy_transmit_ring_size = 64        # Options: > 64

## SCSI I/O
fibre_channel_adapter_policy_scsi_io_queues = 1     # Options: 1 - 245
fibre_channel_adapter_policy_scsi_io_ring_size = 512     # Options: 64 - 512


#----------------------------------Section 10----------------------------------#

# FIBRE CHANNEL NETWORK POLICY CONFIGURATION

# General Settings
fibre_channel_network_policy_name = "FC-Network-Policy"
fibre_channel_network_policy_description = "A Cisco Intersight Fibre Channel Network Policy generated by the UCS Default Policy Deployment Tool."
fibre_channel_network_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the fibre_channel_network_policy_tags dictionary if no tags are needed, for example: fibre_channel_network_policy_tags = {}

# Policy Detail Settings
## For the "Default VLAN" setting, the provided value must be an integer. Default VLANs can be between 1-4094. Leave the default of 0 if there is no default VLAN.
fibre_channel_network_policy_default_vlan = 0
## For the "VSAN ID" setting, the provided value must be an integer. VSAN IDs can be between 1-4094.
fibre_channel_network_policy_vsan_id = 1


#----------------------------------Section 11----------------------------------#

# FIBRE CHANNEL QOS POLICY CONFIGURATION

# General Settings
fibre_channel_qos_policy_name = "FC-QoS-Policy"
fibre_channel_qos_policy_description = "A Cisco Intersight Fibre Channel QoS Policy generated by the UCS Default Policy Deployment Tool."
fibre_channel_qos_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the fibre_channel_qos_policy_tags dictionary if no tags are needed, for example: fibre_channel_qos_policy_tags = {}

# Policy Detail Settings
fibre_channel_qos_policy_fibre_channel_qos_rate_limit_in_mbps = 0        # Options: 0 - 100000
fibre_channel_qos_policy_fibre_channel_qos_maximum_data_field_size_in_bytes = 2112        # Options: 256 - 2112
fibre_channel_qos_policy_fibre_channel_qos_cos = 3        # Options: 0 - 6
fibre_channel_qos_policy_fibre_channel_qos_burst = 10240        # Options: 1 - 1000000


#----------------------------------Section 12----------------------------------#

# FLOW CONTROL POLICY CONFIGURATION

# General Settings
flow_control_policy_name = "Flow-Control-Policy"
flow_control_policy_description = "A Cisco Intersight Flow Control Policy generated by the UCS Default Policy Deployment Tool."
flow_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the flow_control_policy_tags dictionary if no tags are needed, for example: flow_control_policy_tags = {}

# Policy Detail Settings
flow_control_policy_priority = "Auto"       # Options: "Auto", "On"
flow_control_policy_receive = "Disabled"        # Options: "Enabled", "Disabled"
flow_control_policy_send = "Disabled"       # Options: "Enabled", "Disabled"


#----------------------------------Section 13----------------------------------#

# IPMI OVER LAN POLICY CONFIGURATION

# General Settings
ipmi_over_lan_policy_name = "IPMI-Over-LAN-Policy"
ipmi_over_lan_policy_description = "A Cisco Intersight IPMI Over LAN Policy generated by the UCS Default Policy Deployment Tool."
ipmi_over_lan_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ipmi_over_lan_policy_tags dictionary if no tags are needed, for example: ipmi_over_lan_policy_tags = {}

# Policy Detail Settings
ipmi_over_lan_policy_enable_ipmi_over_lan = True
ipmi_over_lan_policy_privilege_level = "admin"        # Options: "admin", "user", and "read-only"
ipmi_over_lan_policy_encryption_key = ""


#----------------------------------Section 14----------------------------------#

# iSCSI ADAPTER POLICY CONFIGURATION

# General Settings
iscsi_adapter_policy_name = "iSCSI-Adapter-Policy"
iscsi_adapter_policy_description = "A Cisco Intersight iSCSI Adapter Policy generated by the UCS Default Policy Deployment Tool."
iscsi_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the iscsi_adapter_policy_tags dictionary if no tags are needed, for example: iscsi_adapter_policy_tags = {}

# Policy Detail Settings
iscsi_adapter_policy_tcp_connection_timeout = 15        # Options: 0 - 255
iscsi_adapter_policy_dhcp_timeout = 60      # Options: 60 - 300
iscsi_adapter_policy_lun_busy_retry_count = 15      # Options: 0 - 60


#----------------------------------Section 15----------------------------------#

# LINK AGGREGATION POLICY CONFIGURATION

# General Settings
link_aggregation_policy_name = "Link-Aggregation-Policy"
link_aggregation_policy_description = "A Cisco Intersight Link Aggregation Policy generated by the UCS Default Policy Deployment Tool."
link_aggregation_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the link_aggregation_policy_tags dictionary if no tags are needed, for example: link_aggregation_policy_tags = {}

# Policy Detail Settings
link_aggregation_policy_suspend_individual = False
link_aggregation_policy_lacp_rate = "Normal"        # Options: "Normal", "Fast"


#----------------------------------Section 16----------------------------------#

# LINK CONTROL POLICY CONFIGURATION

# General Settings
link_control_policy_name = "Link-Control-Policy"
link_control_policy_description = "A Cisco Intersight Link Control Policy generated by the UCS Default Policy Deployment Tool."
link_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the link_control_policy_tags dictionary if no tags are needed, for example: link_control_policy_tags = {}

# Policy Detail Settings
link_control_policy_admin_state = "Enabled"     # Options: "Enabled", "Disabled"
link_control_policy_mode = "Normal"     # Options: "Normal", "Aggressive"


#----------------------------------Section 17----------------------------------#

# LOCAL USER POLICY CONFIGURATION

# General Settings
local_user_policy_name = "Local-User-Policy"
local_user_policy_description = "A Cisco Intersight Local User Policy generated by the UCS Default Policy Deployment Tool."
local_user_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the local_user_policy_tags dictionary if no tags are needed, for example: local_user_policy_tags = {}

# Policy Detail Settings
local_user_policy_enforce_strong_password = True
local_user_policy_enable_password_expiry = False
local_user_policy_password_expiry_duration = 90       # Options: 1 - 3650
local_user_policy_password_expiry_notification_period = 15        # Options: 0 - 15
local_user_policy_password_expiry_grace_period = 0       # Options: 0 - 5
local_user_policy_password_history = 5       # Options: 0 - 5
local_user_policy_always_send_user_password = False
local_user_policy_local_users_list = [
    {"Enable": True,
     "Username": "adminuser",
     "Password": "C1sco12345",
     "Role": "admin"
     },
    {"Enable": True,
     "Username": "testuser",
     "Password": "C1sco12345",
     "Role": "user"
     },
    {"Enable": True,
     "Username": "readonlyuser",
     "Password": "C1sco12345",
     "Role": "readonly"
     }
    ]


#----------------------------------Section 18----------------------------------#

# MULTICAST POLICY CONFIGURATION

# General Settings
multicast_policy_name = "Multicast-Policy"
multicast_policy_description = "A Cisco Intersight Multicast Policy generated by the UCS Default Policy Deployment Tool."
multicast_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the multicast_policy_tags dictionary if no tags are needed, for example: multicast_policy_tags = {}

# Policy Detail Settings
multicast_policy_snooping_state = "Enabled"      # Options: "Enabled", "Disabled"
multicast_policy_querier_state = "Disabled"      # Options: "Enabled", "Disabled"
multicast_policy_querier_ip_address = ""
multicast_policy_querier_ip_address_peer = ""


#----------------------------------Section 19----------------------------------#

# NETWORK CONNECTIVITY POLICY CONFIGURATION

# General Settings
network_connectivity_policy_name = "Net-Connect-Policy"
network_connectivity_policy_description = "A Cisco Intersight Network Connectivity Policy generated by the UCS Default Policy Deployment Tool."
network_connectivity_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the network_connectivity_policy_tags dictionary if no tags are needed, for example: network_connectivity_policy_tags = {}

# Policy Detail Settings
network_connectivity_policy_obtain_ipv4_dns_server_from_dhcp = False
network_connectivity_policy_preferred_ipv4_dns_server = "192.168.1.10"
network_connectivity_policy_alternate_ipv4_dns_server = "0.0.0.0"
network_connectivity_policy_enable_dynamic_dns = False
network_connectivity_policy_dynamic_dns_update_domain = ""
network_connectivity_policy_enable_ipv6 = False
network_connectivity_policy_obtain_ipv6_dns_server_from_dhcp = False
network_connectivity_policy_preferred_ipv6_dns_server = ""
network_connectivity_policy_alternate_ipv6_dns_server = ""


#----------------------------------Section 20----------------------------------#

# NTP POLICY CONFIGURATION

# General Settings
ntp_policy_name = "NTP-Policy"
ntp_policy_description = "A Cisco Intersight NTP Policy generated by the UCS Default Policy Deployment Tool."
ntp_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ntp_policy_tags dictionary if no tags are needed, for example: ntp_policy_tags = {}

# Policy Detail Settings
ntp_policy_enable_ntp = True
ntp_policy_ntp_servers = ["192.168.1.11",]
ntp_policy_timezone = "America/New_York"       # Options: Timezone options can be found at https://intersight.com/apidocs/apirefs/ntp/Policies/model


#----------------------------------Section 21----------------------------------#

# POWER POLICY CONFIGURATION

# General Settings
power_policy_name = "Power-Policy"
power_policy_description = "A Cisco Intersight Power Policy generated by the UCS Default Policy Deployment Tool."
power_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the power_policy_tags dictionary if no tags are needed, for example: power_policy_tags = {}

# Policy Detail Settings
power_policy_power_profiling = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_power_priority = "Low"      # Options: "Low", "Medium", "High"
power_policy_power_restore = "Always Off"        # Options: "Always Off",  "Always On", "Last State"
power_policy_power_redundancy = "Grid"       # Options: "Grid", "Not Redundant", "N+1", "N+2"
power_policy_power_save_mode = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_dynamic_power_rebalancing = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_extended_power_capacity = "Enabled"     # Options: "Enabled", "Disabled"
power_policy_power_allocation_in_watts = 0       # Options: 0 - 65535


#----------------------------------Section 22----------------------------------#

# SERIAL OVER LAN POLICY CONFIGURATION

# General Settings
serial_over_lan_policy_name = "Serial-Over-LAN-Policy"
serial_over_lan_policy_description = "A Cisco Intersight Serial Over LAN Policy generated by the UCS Default Policy Deployment Tool."
serial_over_lan_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the serial_over_lan_policy_tags dictionary if no tags are needed, for example: serial_over_lan_policy_tags = {}

# Policy Detail Settings
serial_over_lan_policy_enable_serial_over_lan = True
serial_over_lan_policy_com_port = "com0"        # Options: "com0" or "com1"
serial_over_lan_policy_baud_rate = 9600        # Options: 9600, 19200, 38400, 57600, 115200
serial_over_lan_policy_ssh_port = 2400        # Options: 1024 - 65535


#----------------------------------Section 23----------------------------------#

# SNMP POLICY CONFIGURATION

# General Settings
snmp_policy_name = "SNMP-Policy"
snmp_policy_description = "A Cisco Intersight SNMP Policy generated by the UCS Default Policy Deployment Tool."
snmp_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the snmp_policy_tags dictionary if no tags are needed, for example: snmp_policy_tags = {}

# Policy Detail Settings
snmp_policy_enable_snmp = True
snmp_policy_v2c_features = True
snmp_policy_v3_features = True
snmp_policy_port = 161
snmp_policy_system_contact = "Administrator"
snmp_policy_system_location = "Datacenter 001"
snmp_policy_access_community_string = "demo_access_string"
snmp_policy_community_access = "Disabled"      # Options: "Disabled", "Limited", "Full"
snmp_policy_trap_community_string = "demo_trap_string"
snmp_policy_engine_input_id = "0123456789ABC"
snmp_policy_users_list = [
    {"Name": "demouser",
     "Security Level": "AuthPriv",
     "Auth Type": "SHA",
     "Auth Password": "C1sco12345",
     "Privacy Type": "AES",
     "Privacy Password": "C1sco12345"
     },
    ]
snmp_policy_trap_destinations_list = [
    {"Enable": True,
     "SNMP Version": "V3",
     "User": "demouser",
     "Trap Type": "Trap",
     "Destination Address": "192.168.0.101",
     "Port": 162
     },
    {"Enable": True,
     "SNMP Version": "V2",
     "Community String": "demo_trap_string",
     "Trap Type": "Trap",
     "Destination Address": "192.168.0.102",
     "Port": 162
     },
    ]


#----------------------------------Section 24----------------------------------#

# SWITCH CONTROL POLICY CONFIGURATION

# General Settings
switch_control_policy_name = "Switch-Control-Policy"
switch_control_policy_description = "A Cisco Intersight Switch Control Policy generated by the UCS Default Policy Deployment Tool."
switch_control_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the switch_control_policy_tags dictionary if no tags are needed, for example: switch_control_policy_tags = {}

# Policy Detail Settings
switch_control_policy_enable_vlan_port_count_optimization = False
switch_control_policy_mac_address_table_aging_time_option = "Default"     # Options: "Default", "Custom", "Never"
switch_control_policy_mac_address_table_aging_time_custom_value_in_seconds = 14500
switch_control_policy_link_control_message_interval_in_seconds = 15
switch_control_policy_link_control_recovery_action = "None"   # Options: "None", "Reset"


#----------------------------------Section 25----------------------------------#

# SYSLOG POLICY CONFIGURATION

# General Settings
syslog_policy_name = "Syslog-Policy"
syslog_policy_description = "A Cisco Intersight Syslog Policy generated by the UCS Default Policy Deployment Tool."
syslog_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the syslog_policy_tags dictionary if no tags are needed, for example: syslog_policy_tags = {}

# Policy Detail Settings
syslog_policy_local_logging_minimum_severity_to_report = "warning"     # Options: "warning", "emergency", "alert", "critical", "error", "notice", "informational", "debug"
syslog_policy_remote_logging_server_list = [
    {"Enable": True,
     "Hostname/IP Address": "192.168.0.201",
     "Port": 514,
     "Protocol": "TCP",
     "Minimum Severity To Report": "alert"
     },
    {"Enable": False,
     "Hostname/IP Address": "0.0.0.0",
     "Port": 514,
     "Protocol": "UDP",
     "Minimum Severity To Report": "warning"
     },
    ]


#----------------------------------Section 26----------------------------------#

# SYSTEM QOS POLICY CONFIGURATION

# General Settings
system_qos_policy_name = "System-QoS-Policy"
system_qos_policy_description = "A Cisco Intersight System QoS Policy generated by the UCS Default Policy Deployment Tool."
system_qos_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the system_qos_policy_tags dictionary if no tags are needed, for example: system_qos_policy_tags = {}

# Policy Detail Settings
## For additional info on QoS class setting options, go to https://intersight.com/apidocs/apirefs/fabric/SystemQosPolicies/model.
system_qos_policy_class_settings_list = [
    {"Name": "Best Effort", "AdminState": "Enabled", "Cos": 255, "Weight": 5, "PacketDrop": True, "Mtu": 1500},
    {"Name": "FC", "AdminState": "Enabled", "Cos": 3, "Weight": 5, "PacketDrop": False, "Mtu": 2240},
    {"Name": "Platinum", "AdminState": "Disabled", "Cos": 5, "Weight": 10, "PacketDrop": True, "Mtu": 1500},
    {"Name": "Gold", "AdminState": "Disabled", "Cos": 4, "Weight": 9, "PacketDrop": True, "Mtu": 1500},
    {"Name": "Silver", "AdminState": "Disabled", "Cos": 2, "Weight": 8, "PacketDrop": True, "Mtu": 1500},
    {"Name": "Bronze", "AdminState": "Disabled", "Cos": 1, "Weight": 7, "PacketDrop": True, "Mtu": 1500}
    ]


#----------------------------------Section 27----------------------------------#

# THERMAL POLICY CONFIGURATION

# General Settings
thermal_policy_name = "Thermal-Policy"
thermal_policy_description = "A Cisco Intersight Thermal Policy generated by the UCS Default Policy Deployment Tool."
thermal_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the thermal_policy_tags dictionary if no tags are needed, for example: thermal_policy_tags = {}

# Policy Detail Settings
## Fan Control
thermal_policy_fan_control_mode = "Balanced"       # Options: "Balanced", "Low Power", "High Power", "Maximum Power", "Acoustic"


#----------------------------------Section 28----------------------------------#

# VIRTUAL KVM POLICY CONFIGURATION

# General Settings
virtual_kvm_policy_name = "Virtual-KVM-Policy"
virtual_kvm_policy_description = "A Cisco Intersight Virtual KVM Policy generated by the UCS Default Policy Deployment Tool."
virtual_kvm_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the virtual_kvm_policy_tags dictionary if no tags are needed, for example: virtual_kvm_policy_tags = {}

# Policy Detail Settings
virtual_kvm_policy_enable_virtual_kvm = True
virtual_kvm_policy_max_sessions = 4        # Options: 1 - 4
virtual_kvm_policy_remote_port = 2068      # Options: 1 - 65535
virtual_kvm_policy_enable_video_encryption = True
virtual_kvm_policy_enable_local_server_video = True


####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to backup an Intersight object
def intersight_object_backup(intersight_api_key_id,
                             intersight_api_key,
                             object_attributes,
                             intersight_api_path,
                             backup_attribute_list,
                             object_type="object",
                             organization="default",
                             intersight_base_url="https://www.intersight.com/api/v1",
                             preconfigured_api_client=None
                             ):
    """This is a function to backup an Intersight object based on various
    provided attributes using the Intersight API.
    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        backup_attribute_list (list):
            A list containing the attribute keys that will be backed up for the 
            Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object. To
            ignore the organization value or if no organization is available
            for the object, the value None can be provided for the argument. 
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
    
    if intersight_objects.get("Results"):
        if organization:
            for intersight_object in intersight_objects.get("Results"):
                if intersight_object.get("Organization"):
                    provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                  intersight_api_key=None,
                                                                                  object_name=organization,
                                                                                  intersight_api_path="organization/Organizations?$top=1000",
                                                                                  object_type="Organization",
                                                                                  preconfigured_api_client=api_client
                                                                                  )
                    if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                        for object_attribute in object_attributes:
                            try:
                                intersight_object[object_attribute]
                            except KeyError:
                                break
                            if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                                break
                        else:
                            # The provided object has been identified and retrieved.
                            # Extract requested attributes from identified object
                            backup_intersight_object = {}
                            for backup_attribute in backup_attribute_list:
                                if intersight_object.get(backup_attribute):
                                    backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                            return backup_intersight_object
                else:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        # The provided object has been identified and retrieved.
                        # Extract requested attributes from identified object
                        backup_intersight_object = {}
                        for backup_attribute in backup_attribute_list:
                            if intersight_object.get(backup_attribute):
                                backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                        return backup_intersight_object
            else:
                print("\nA configuration error has occurred!\n")
                print(f"The provided {object_type} was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      f"{object_type} is present.")
                print(f"If the needed {object_type} is missing, please create it.")
                print("Once the issue has been resolved, re-attempt execution.\n")
                sys.exit(0)
        else:
            for intersight_object in intersight_objects.get("Results"):
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    # The provided object has been identified and retrieved.
                    # Extract requested attributes from identified object
                    backup_intersight_object = {}
                    for backup_attribute in backup_attribute_list:
                        if intersight_object.get(backup_attribute):
                            backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                    return backup_intersight_object
            else:
                print("\nA configuration error has occurred!\n")
                print(f"The provided {object_type} was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      f"{object_type} is present.")
                print(f"If the needed {object_type} is missing, please create it.")
                print("Once the issue has been resolved, re-attempt execution.\n")
                sys.exit(0)                
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish base classes for configuring Intersight UCS Policies
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsDomainPolicy(UcsPolicy):
    """This class is used to configure a UCS Domain Policy in Intersight that
    is logically directly attached to UCS Fabric Interconnects through UCS
    Domain Profiles.
    """
    object_type = "Directly Attached UCS Domain Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_domain_profile_name = ucs_domain_profile_name
        self.fabric_interconnect = fabric_interconnect

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.fabric_interconnect}')"
            )

    def _attach_ucs_domain_profile(self):
        """This is a function to attach an Intersight UCS Domain Profile to an
        Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Attach UCS Domain Profile
        if self.ucs_domain_profile_name:
            print("Attaching the UCS Domain Profile named "
                  f"{self.ucs_domain_profile_name}...")
            # Get UCS Domain Profile MOID
            ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       object_name=self.ucs_domain_profile_name,
                                                                       intersight_api_path="fabric/SwitchClusterProfiles?$top=1000",
                                                                       object_type="UCS Domain Profile",
                                                                       organization=self.organization,
                                                                       preconfigured_api_client=self.api_client
                                                                       )
            # Get UCS Domain Profile object dictionary attributes
            ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                                     intersight_api_key=None,
                                                                     intersight_api_path="fabric/SwitchClusterProfiles",
                                                                     object_moid=ucs_domain_profile_moid,
                                                                     object_type="UCS Domain Profile",
                                                                     preconfigured_api_client=self.api_client
                                                                     )
            # Get Switch Profiles that are attached to the UCS Domain Profile
            ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
            if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
                print("\nA configuration error has occurred!\n")
                print("The provided UCS Domain Profile named "
                      f"{self.ucs_domain_profile_name} is not configured with "
                      "two attached Switch Profiles.")
                print("To proceed, two Switch Profiles must be attached to the "
                      "provided UCS Domain Profile.")
                print("Please update the configuration of the provided UCS "
                      f"Domain Profile, then re-attempt execution.\n")
                sys.exit(0)
            else:
                fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
                fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
            # Update the API body with the appropriate Switch Profile MOIDs based on selected Fabric Interconnects
            if self.fabric_interconnect not in ("AB", "BA", "A", "B"):
                print("\nA configuration error has occurred!\n")
                print("The provided UCS Domain Profile Fabric Interconnect "
                      "value of "
                      f"'{self.fabric_interconnect}' "
                      "is not supported.")
                print("To proceed, the Fabric Interconnect value for the "
                      "UCS Domain Profile must be 'AB', 'A', or 'B'.")
                print("Please update the configuration of the provided UCS "
                      "Domain Profile Fabric Interconnect, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            else:
                if self.fabric_interconnect == "A":
                    print("The attachment will be made to Fabric Interconnect "
                          "A.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_a_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]
                elif self.fabric_interconnect == "B":
                    print("The attachment will be made to Fabric Interconnect "
                          "B.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_b_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]
                else:
                    print("The attachment will be made to Fabric Interconnects "
                          "A and B.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_a_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"},
                        {"Moid": fabric_interconnect_b_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Domain Profile attached, if specified
        self._attach_ucs_domain_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerPolicy(UcsPolicy):
    """This class is used to configure a UCS Server Policy in Intersight that
    is logically directly attached to UCS Servers through UCS
    Server Profiles.
    """
    object_type = "Directly Attached UCS Server Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_name = ucs_server_profile_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}')"
            )

    def _attach_ucs_server_profile(self):
        """This is a function to attach an Intersight UCS Server Profile to an
        Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Attach UCS Server Profile
        if self.ucs_server_profile_name:
            print("Attaching the UCS Server Profile named "
                  f"{self.ucs_server_profile_name}...")
            # Get UCS Server Profile MOID
            ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       object_name=self.ucs_server_profile_name,
                                                                       intersight_api_path="server/Profiles?$top=1000",
                                                                       object_type="UCS Server Profile",
                                                                       organization=self.organization,
                                                                       preconfigured_api_client=self.api_client
                                                                       )
            # Update the API body with the appropriate Server Profile MOID
            self.intersight_api_body["Profiles"] = [
                {"Moid": ucs_server_profile_moid,
                 "ObjectType": "server.Profile"}
                ]

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsChassisPolicy(UcsPolicy):
    """This class is used to configure a UCS Chassis Policy in Intersight that
    is logically directly attached to UCS Chassis through UCS
    Chassis Profiles.
    """
    object_type = "Directly Attached UCS Chassis Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_chassis_profile_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_chassis_profile_name = ucs_chassis_profile_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_chassis_profile_name}')"
            )

    def _attach_ucs_chassis_profile(self):
        """This is a function to attach an Intersight UCS Chassis Profile to an
        Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Attach UCS Chassis Profile
        if self.ucs_chassis_profile_name:
            print("Attaching the UCS Chassis Profile named "
                  f"{self.ucs_chassis_profile_name}...")
            # Get UCS Chassis Profile MOID
            ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                        intersight_api_key=None,
                                                                        object_name=self.ucs_chassis_profile_name,
                                                                        intersight_api_path="chassis/Profiles?$top=1000",
                                                                        object_type="UCS Chassis Profile",
                                                                        organization=self.organization,
                                                                        preconfigured_api_client=self.api_client
                                                                        )
            # Update the API body with the appropriate Chassis Profile MOID
            self.intersight_api_body["Profiles"] = [
                {"Moid": ucs_chassis_profile_moid,
                 "ObjectType": "chassis.Profile"}
                ]

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Chassis Profile attached, if specified
        self._attach_ucs_chassis_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerAndChassisPolicy(UcsPolicy):
    """This class is used to configure a UCS Server and/or UCS Chassis Policy
    in Intersight that is logically directly attached to UCS Servers through
    UCS Server Profiles and/or UCS Chassis through UCS Chassis Profiles.
    """
    object_type = "Directly Attached UCS Server and Chassis Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 ucs_chassis_profile_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_name = ucs_server_profile_name
        self.ucs_chassis_profile_name = ucs_chassis_profile_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"'{self.ucs_chassis_profile_name}')"
            )

    def _attach_ucs_server_and_chassis_profiles(self):
        """This is a function to attach an Intersight UCS Server Profile and/or
        UCS Chassis Profile to an Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []
        # Attach UCS Server Profile
        if self.ucs_server_profile_name:
            print("Attaching the UCS Server Profile named "
                  f"{self.ucs_server_profile_name}...")
            # Get UCS Server Profile MOID
            ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       object_name=self.ucs_server_profile_name,
                                                                       intersight_api_path="server/Profiles?$top=1000",
                                                                       object_type="UCS Server Profile",
                                                                       organization=self.organization,
                                                                       preconfigured_api_client=self.api_client
                                                                       )
            # Update the API body with the appropriate Server Profile MOID
            self.intersight_api_body["Profiles"].append(
                {"Moid": ucs_server_profile_moid,
                 "ObjectType": "server.Profile"}
                )
        # Attach UCS Chassis Profile
        if self.ucs_chassis_profile_name:
            print("Attaching the UCS Chassis Profile named "
                  f"{self.ucs_chassis_profile_name}...")
            # Get UCS Chassis Profile MOID
            ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                        intersight_api_key=None,
                                                                        object_name=self.ucs_chassis_profile_name,
                                                                        intersight_api_path="chassis/Profiles?$top=1000",
                                                                        object_type="UCS Chassis Profile",
                                                                        organization=self.organization,
                                                                        preconfigured_api_client=self.api_client
                                                                        )
            # Update the API body with the appropriate Chassis Profile MOID
            self.intersight_api_body["Profiles"].append(
                {"Moid": ucs_chassis_profile_moid,
                 "ObjectType": "chassis.Profile"}
                )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server and/or UCS Chassis Profile attached, if specified
        self._attach_ucs_server_and_chassis_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerChassisAndDomainPolicy(UcsPolicy):
    """This class is used to configure a UCS Server, UCS Chassis and/or
    UCS Domain Policy in Intersight that is logically directly attached to UCS
    Servers through UCS Server Profiles, UCS Chassis through UCS Chassis
    Profiles and/or UCS Fabric Interconnects through UCS Domain Profiles.
    """
    object_type = "Directly Attached UCS Server, Chassis and Domain Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 ucs_chassis_profile_name="",
                 ucs_domain_profile_name="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_name = ucs_server_profile_name
        self.ucs_chassis_profile_name = ucs_chassis_profile_name
        self.ucs_domain_profile_name = ucs_domain_profile_name
        self.fabric_interconnect = fabric_interconnect

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"'{self.ucs_chassis_profile_name}', "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.fabric_interconnect}')"
            )

    def _attach_ucs_server_chassis_and_domain_profiles(self):
        """This is a function to attach an Intersight UCS Server, UCS Chassis
        and/or UCS Domain Profile to an Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []
        # Attach UCS Server Profile
        if self.ucs_server_profile_name:
            print("Attaching the UCS Server Profile named "
                  f"{self.ucs_server_profile_name}...")
            # Get UCS Server Profile MOID
            ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       object_name=self.ucs_server_profile_name,
                                                                       intersight_api_path="server/Profiles?$top=1000",
                                                                       object_type="UCS Server Profile",
                                                                       organization=self.organization,
                                                                       preconfigured_api_client=self.api_client
                                                                       )
            # Update the API body with the appropriate Server Profile MOID
            self.intersight_api_body["Profiles"].append(
                {"Moid": ucs_server_profile_moid,
                 "ObjectType": "server.Profile"}
                )
        # Attach UCS Chassis Profile
        if self.ucs_chassis_profile_name:
            print("Attaching the UCS Chassis Profile named "
                  f"{self.ucs_chassis_profile_name}...")
            # Get UCS Chassis Profile MOID
            ucs_chassis_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                        intersight_api_key=None,
                                                                        object_name=self.ucs_chassis_profile_name,
                                                                        intersight_api_path="chassis/Profiles?$top=1000",
                                                                        object_type="UCS Chassis Profile",
                                                                        organization=self.organization,
                                                                        preconfigured_api_client=self.api_client
                                                                        )
            # Update the API body with the appropriate Chassis Profile MOID
            self.intersight_api_body["Profiles"].append(
                {"Moid": ucs_chassis_profile_moid,
                 "ObjectType": "chassis.Profile"}
                )
        # Attach UCS Domain Profile
        if self.ucs_domain_profile_name:
            print("Attaching the UCS Domain Profile named "
                  f"{self.ucs_domain_profile_name}...")
            # Get UCS Domain Profile MOID
            ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       object_name=self.ucs_domain_profile_name,
                                                                       intersight_api_path="fabric/SwitchClusterProfiles?$top=1000",
                                                                       object_type="UCS Domain Profile",
                                                                       organization=self.organization,
                                                                       preconfigured_api_client=self.api_client
                                                                       )
            # Get UCS Domain Profile object dictionary attributes
            ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                                     intersight_api_key=None,
                                                                     intersight_api_path="fabric/SwitchClusterProfiles",
                                                                     object_moid=ucs_domain_profile_moid,
                                                                     object_type="UCS Domain Profile",
                                                                     preconfigured_api_client=self.api_client
                                                                     )
            # Get Switch Profiles that are attached to the UCS Domain Profile
            ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
            if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
                print("\nA configuration error has occurred!\n")
                print("The provided UCS Domain Profile named "
                      f"{self.ucs_domain_profile_name} is not configured with "
                      "two attached Switch Profiles.")
                print("To proceed, two Switch Profiles must be attached to the "
                      "provided UCS Domain Profile.")
                print("Please update the configuration of the provided UCS "
                      f"Domain Profile, then re-attempt execution.\n")
                sys.exit(0)
            else:
                fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
                fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
            # Update the API body with the appropriate Switch Profile MOIDs based on selected Fabric Interconnects
            if self.fabric_interconnect not in ("AB", "BA", "A", "B"):
                print("\nA configuration error has occurred!\n")
                print("The provided UCS Domain Profile Fabric Interconnect "
                      "value of "
                      f"'{self.fabric_interconnect}' "
                      "is not supported.")
                print("To proceed, the Fabric Interconnect value for the "
                      "UCS Domain Profile must be 'AB', 'A', or 'B'.")
                print("Please update the configuration of the provided UCS "
                      "Domain Profile Fabric Interconnect, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            else:
                if self.fabric_interconnect == "A":
                    print("The attachment will be made to Fabric Interconnect "
                          "A.")
                    self.intersight_api_body["Profiles"].append(
                        {"Moid": fabric_interconnect_a_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        )
                elif self.fabric_interconnect == "B":
                    print("The attachment will be made to Fabric Interconnect "
                          "B.")
                    self.intersight_api_body["Profiles"].append(
                        {"Moid": fabric_interconnect_b_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        )
                else:
                    print("The attachment will be made to Fabric Interconnects "
                          "A and B.")
                    self.intersight_api_body["Profiles"].extend(
                        [{"Moid": fabric_interconnect_a_switch_profile_moid,
                          "ObjectType": "fabric.SwitchProfile"},
                         {"Moid": fabric_interconnect_b_switch_profile_moid,
                          "ObjectType": "fabric.SwitchProfile"}
                         ]
                        )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server, UCS Chassis and/or UCS Domain Profile attached, if specified
        self._attach_ucs_server_chassis_and_domain_profiles()
        # POST the API body to Intersight
        self._post_intersight_object()


# Establish classes and functions to make BIOS Policy
class BiosPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a BIOS Policy in Intersight.
    """
    object_type = "BIOS Policy"
    intersight_api_path = "bios/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 bios_settings=None,
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name
                         )
        if bios_settings is None:
            self.bios_settings = {}
        else:
            self.bios_settings = bios_settings

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"{self.bios_settings})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with the provided BIOS settings
        try:
            self.intersight_api_body.update(self.bios_settings)
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the format of "
                  "the value provided for the BIOS settings.")
            print(f"The value provided was {self.bios_settings}.")
            print("To proceed, the value provided for the BIOS settings "
                  "should be in dictionary format.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


def bios_policy_maker(intersight_api_key_id,
                      intersight_api_key,
                      policy_name,
                      bios_settings=None,
                      policy_description="",
                      organization="default",
                      intersight_base_url="https://www.intersight.com/api/v1",
                      tags=None,
                      preconfigured_api_client=None,
                      ucs_server_profile_name=""
                      ):
    """This is a function used to make a BIOS Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        bios_settings (dict):
            Optional; A dictionary of BIOS settings to be configured in the
            BIOS Policy. An example entry is: 
            {"CpuPerformance": "enterprise",
             "CpuEnergyPerformance": "balanced-performance",
             }.
            Unspecified settings will be left at platform defaults.
            More BIOS settings can be found at
            https://intersight.com/apidocs/apirefs/bios/Policies/model/.
            The default value is None.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create BIOS Policy object in Intersight
    builder(BiosPolicy(intersight_api_key_id=intersight_api_key_id,
                       intersight_api_key=intersight_api_key,
                       policy_name=policy_name,
                       policy_description=policy_description,
                       organization=organization,
                       intersight_base_url=intersight_base_url,
                       tags=tags,
                       preconfigured_api_client=preconfigured_api_client,
                       ucs_server_profile_name=ucs_server_profile_name,
                       bios_settings=bios_settings
                       ))


# Establish classes and functions to make Boot Order Policy
class BootOrderPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Boot Order Policy in Intersight.
    """
    object_type = "Boot Order Policy"
    intersight_api_path = "boot/PrecisionPolicies"
    boot_device_type_maps = {
        "FrontEndName": "Type",
        "BackEndName": "ObjectType",
        "Description": "Boot Device",
        "FixedFrontEndValues": {
            "boot": [
                "iSCSI Boot",
                "Local CDD",
                "Local Disk",
                "NVMe",
                "PCH Storage",
                "PXE Boot",
                "SAN Boot",
                "SD Card",
                "UEFI Shell",
                "USB",
                "Virtual Media"
                ]
            },
        "NestedFronttoBackEndValueMaps": {
            "boot": {
                "iscsiboot": "boot.Iscsi",
                "localcdd": "boot.LocalCdd",
                "localdisk": "boot.LocalDisk",
                "nvme": "boot.Nvme",
                "pchstorage": "boot.PchStorage",
                "pxeboot": "boot.Pxe",
                "sanboot": "boot.San",
                "sdcard": "boot.SdCard",
                "uefishell": "boot.UefiShell",
                "usb": "boot.Usb",
                "virtualmedia": "boot.VirtualMedia"
                }
            }
        }
    boot_device_attribute_maps = [
        {"FrontEndName": "Enable",
         "BackEndName": "Enabled",
         "Description": "Boot Device Enablement",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": True,
         "AutomaticInsertionValue": True
         },
        {"FrontEndName": "Device Name",
         "BackEndName": "Name",
         "Description": "Boot Device Name",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Sub-Type",
         "BackEndName": "Subtype",
         "Description": "Boot Device Sub-Type",
         "FixedFrontEndValues": {
             "boot.VirtualMedia": [
                 "None",
                 "CIMC MAPPED DVD",
                 "CIMC MAPPED HDD",
                 "KVM MAPPED DVD",
                 "KVM MAPPED HDD",
                 "KVM MAPPED FDD"
                 ],
             "boot.SdCard": [
                 "None",
                 "FlexUtil",
                 "FlexFlash",
                 "SdCard"
                 ],
             "boot.Usb": [
                 "None",
                 "CD",
                 "FDD",
                 "HDD"
                 ]
             },
         "NestedFronttoBackEndValueMaps": {
             "boot.VirtualMedia": {
                 "none": "None",
                 "cimcmappeddvd": "cimc-mapped-dvd",
                 "cimcmappedhdd": "cimc-mapped-hdd",
                 "kvmmappeddvd": "kvm-mapped-dvd",
                 "kvmmappedhdd": "kvm-mapped-hdd",
                 "kvmmappedfdd": "kvm-mapped-fdd"
                 },
             "boot.SdCard": {
                 "none": "None",
                 "flexutil": "flex-util",
                 "flexflash": "flex-flash",
                 "sdcard": "SDCARD"
                 },
             "boot.Usb": {
                 "none": "None",
                 "cd": "usb-cd",
                 "fdd": "usb-fdd",
                 "hdd": "usb-hdd"
                 }
             },
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "IP Type",
         "BackEndName": "IpType",
         "Description": "Boot Device IP Type",
         "FixedFrontEndValues": {
             "boot.Pxe": [
                 "None",
                 "IPv4",
                 "IPv6"
                 ]
             },
         "NestedFronttoBackEndValueMaps": {
             "boot.Pxe": {
                 "none": "None",
                 "ipv4": "IPv4",
                 "ipv6": "IPv6"
                 }
             },
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Interface Name",
         "BackEndName": "InterfaceName",
         "Description": "Boot Device Interface Name",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "MAC Address",
         "BackEndName": "MacAddress",
         "Description": "Boot Device MAC Address",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]
    boot_device_bootloader_attribute_maps = [
        {"FrontEndName": "Bootloader Name",
         "BackEndName": "Name",
         "Description": "Boot Device Bootloader Name",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Bootloader Description",
         "BackEndName": "Description",
         "Description": "Boot Device Bootloader Description",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Bootloader Path",
         "BackEndName": "Path",
         "Description": "Boot Device Bootloader Path",
         "FixedFrontEndValues": None,
         "NestedFronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 boot_devices_list=None,
                 configured_boot_mode="Legacy",
                 enable_uefi_secure_boot=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name
                         )
        if boot_devices_list is None:
            self.boot_devices_list = []
        else:
            self.boot_devices_list = boot_devices_list
        self.configured_boot_mode = configured_boot_mode
        self.enable_uefi_secure_boot = enable_uefi_secure_boot
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "ConfiguredBootMode": self.configured_boot_mode,
            "EnforceUefiSecureBoot": self.enable_uefi_secure_boot
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"{self.boot_devices_list}, "
            f"'{self.configured_boot_mode}', "
            f"{self.enable_uefi_secure_boot})"
            )

    def _update_api_body_boot_device_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for boot devices in the Intersight Boot Policy.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        def boot_device_type_map_handler(provided_boot_device_dictionary):
            """This function captures the provided boot device type and converts it
            for use with the Intersight API.
            """
            try:
                provided_boot_device_type = provided_boot_device_dictionary["Type"]
            except KeyError:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} "
                      f"named {self.policy_name}, there was an issue "
                      "accessing a boot device type.")
                print("Please verify a key named 'Type' exists in the "
                      "dictionary entries of the 'boot_devices_list' variable.\n")
                print("Please review and resolve any error messages, then "
                      "re-attempt execution.\n")
                print("Exception Message: ")
                traceback.print_exc()
                sys.exit(0)
            try:
                provided_boot_device_type_updated_for_fixed_value_mappings = "".join(provided_boot_device_type.lower().split())
            except Exception:
                print("\nA configuration error has occurred!\n")
                print("During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with a value "
                      "provided for a boot device type.")
                print("The value provided was "
                      f"{provided_boot_device_type}.")
                print("Please verify that the value has been provided "
                      "in an accepted string format.")
                print("Please review and resolve any error messages, "
                      "then re-attempt execution.\n")
                sys.exit(0)
            if provided_boot_device_type_updated_for_fixed_value_mappings:                
                boot_device_type_fixed_value_mappings_key_list = list(self.boot_device_type_maps["NestedFronttoBackEndValueMaps"]["boot"].keys())
                for boot_device_type_fixed_value_mappings_key in boot_device_type_fixed_value_mappings_key_list:
                    if boot_device_type_fixed_value_mappings_key == provided_boot_device_type_updated_for_fixed_value_mappings:
                        fixed_value_mappings_boot_device_type_converted = self.boot_device_type_maps["NestedFronttoBackEndValueMaps"]["boot"][boot_device_type_fixed_value_mappings_key]
                        return fixed_value_mappings_boot_device_type_converted
                else:
                    print(f"WARNING: An unknown boot device type named '{provided_boot_device_type}' has been provided!")
                    print(f"The {maker_type} will attempt to configure the unknown boot device.")
                    print(f"If there is an error, please use one of the following known boot devices for the 'Type' key and restart the {maker_type}:")
                    for bootdevice in self.boot_device_type_maps["FixedFrontEndValues"]["boot"]:
                        print(f"'{bootdevice}'")
                    try:
                        unknown_boot_device_type_conversion_split_list = re.split("\s|boot|-", provided_boot_device_type.lower())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with a value "
                              "provided for a boot device type.")
                        print("The value provided was "
                              f"{provided_boot_device_type}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    unknown_boot_device_type_conversion_pre_join_list = []
                    for provided_boot_device_type_term in unknown_boot_device_type_conversion_split_list:
                        unknown_boot_device_type_conversion_pre_join_list.append(provided_boot_device_type_term.title())
                    provided_boot_device_type_updated_for_unknown_value_mappings = "".join(unknown_boot_device_type_conversion_pre_join_list)
                    unknown_value_mappings_boot_device_type_converted = f"boot.{provided_boot_device_type_updated_for_unknown_value_mappings}"
                    return unknown_value_mappings_boot_device_type_converted
            else:
                print("\nA configuration error has occurred!\n")
                print("During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with a value "
                      "provided for a boot device type.")
                print("The value provided was "
                      f"{provided_boot_device_type}.")
                print("Please verify that the value is not empty and has been "
                      "provided in an accepted string format.")
                print("Please review and resolve any error messages, "
                      "then re-attempt execution.\n")
                sys.exit(0)            

        def boot_device_attribute_map_handler(boot_device_attribute_map_dictionary):
            """This is a function to handle boot device attributes with a
            mismatch in the Front-End Name and Back-End Name.

            Args:
                boot_device_attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if boot_device_attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_boot_device_dictionary for
                    attribute_name_key in
                    (boot_device_attribute_map_dictionary["FrontEndName"],
                     boot_device_attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if boot_device_attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_boot_device_dictionary[boot_device_attribute_map_dictionary["BackEndName"]] = boot_device_attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{boot_device_type_maps['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{boot_device_attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{boot_device_type_maps['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if boot_device_attribute_map_dictionary['FrontEndName']:
                            print(f"'{boot_device_attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{boot_device_attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if boot_device_attribute_map_dictionary["FrontEndName"] in staged_boot_device_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if boot_device_attribute_map_dictionary["BackEndName"] not in staged_boot_device_dictionary:
                    staged_boot_device_dictionary[boot_device_attribute_map_dictionary["BackEndName"]] = staged_boot_device_dictionary.get(boot_device_attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_boot_device_dictionary.pop(boot_device_attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if boot_device_attribute_map_dictionary.get("NestedFronttoBackEndValueMaps"):
                if boot_device_attribute_map_dictionary.get("NestedFronttoBackEndValueMaps").get(returned_boot_device_type_map):
                    if (
                        boot_device_attribute_map_dictionary["BackEndName"] in
                        staged_boot_device_dictionary and
                        not automatic_insertion_of_attribute_value_performed
                        ):
                        # Retrieve the provided attribute value
                        provided_attribute_value = staged_boot_device_dictionary.get(boot_device_attribute_map_dictionary["BackEndName"])
                        # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                        try:
                            provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                        except Exception:
                            print("\nA configuration error has occurred!\n")
                            print("During the configuration of the "
                                  f"{boot_device_type_maps['Description']} "
                                  f"settings for the {self.object_type} named "
                                  f"{self.policy_name}, there was an issue with "
                                  "the value for the "
                                  f"{boot_device_attribute_map_dictionary['Description']}.")
                            print("The value provided was "
                                  f"{provided_attribute_value}.")
                            print("Please verify that the value has been provided "
                                  "in an accepted string format.")
                            print("Please review and resolve any error messages, "
                                  "then re-attempt execution.\n")
                            sys.exit(0)
                        # Create list of known and mapped front-end to back-end values
                        front_to_backend_value_maps_key_list = list(boot_device_attribute_map_dictionary["NestedFronttoBackEndValueMaps"][returned_boot_device_type_map].keys())
                        # Replace known and reformatted front-end value with known and mapped back-end value
                        if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                            provided_attribute_value_mapped = boot_device_attribute_map_dictionary["NestedFronttoBackEndValueMaps"][returned_boot_device_type_map][provided_attribute_value_reformatted]
                            staged_boot_device_dictionary[boot_device_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                        else:
                            print("\nWARNING: An unknown "
                                  f"{boot_device_attribute_map_dictionary['Description']} "
                                  f"value of '{provided_attribute_value}' has been "
                                  "provided for the "
                                  f"{boot_device_type_maps['Description']} "
                                  "settings!")
                            print("An attempt will be made to configure the "
                                  "unknown "
                                  f"{boot_device_attribute_map_dictionary['Description']} "
                                  "value.")
                            print("If there is an error, please use one of the "
                                  "following known values for the "
                                  f"{boot_device_attribute_map_dictionary['Description']}, "
                                  "then re-attempt execution:\n")
                            print(*boot_device_attribute_map_dictionary["FixedFrontEndValues"][returned_boot_device_type_map],
                                  sep=", "
                                  )
        
        def boot_device_bootloader_attribute_map_handler(bootloader_attribute_map_dictionary):
            """This is a function to handle bootloader attribute values for applicable
            boot devices.
            """
            # Check for attribute front-end name key in the dictionary
            if staged_boot_device_dictionary.get(bootloader_attribute_map_dictionary["FrontEndName"]):
                # Add required 'Bootloader' key if not present in the staged boot device dictionary
                if not staged_boot_device_dictionary.get("Bootloader"):
                    staged_boot_device_dictionary["Bootloader"] = {}
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                staged_boot_device_dictionary["BootLoader"][bootloader_attribute_map_dictionary["BackEndName"]] = staged_boot_device_dictionary.get(bootloader_attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_boot_device_dictionary.pop(bootloader_attribute_map_dictionary["FrontEndName"])

        # Check for boot device attributes that may need configuration
        if self.boot_devices_list:
            converted_boot_devices_list = []
            for provided_boot_device_dictionary in self.boot_devices_list:
                staged_boot_device_dictionary = copy.deepcopy(provided_boot_device_dictionary)
                returned_boot_device_type_map = boot_device_type_map_handler(staged_boot_device_dictionary)
                # Set boot device 'ClassId' attribute
                staged_boot_device_dictionary["ClassId"] = returned_boot_device_type_map
                # Set boot device 'ObjectType' attribute
                staged_boot_device_dictionary["ObjectType"] = returned_boot_device_type_map
                staged_boot_device_dictionary.pop("Type")
                # Handle setting of attributes which have mismatched Front-End and Back-End labeling
                for boot_device_attribute_map_dictionary in self.boot_device_attribute_maps:
                    boot_device_attribute_map_handler(boot_device_attribute_map_dictionary)
                # Handle setting of bootloader attributes
                for bootloader_attribute_map_dictionary in self.boot_device_bootloader_attribute_maps:
                    boot_device_bootloader_attribute_map_handler(bootloader_attribute_map_dictionary)
                converted_boot_device_dictionary = staged_boot_device_dictionary
                converted_boot_devices_list.append(converted_boot_device_dictionary)
            # Update Intersight API body with the converted boot devices list
            self.intersight_api_body["BootDevices"] = converted_boot_devices_list

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with the provided Boot Order settings
        self._update_api_body_boot_device_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


def boot_order_policy_maker(intersight_api_key_id,
                            intersight_api_key,
                            policy_name,
                            boot_devices_list,
                            configured_boot_mode="Legacy",
                            enable_uefi_secure_boot=False,
                            policy_description="",
                            organization="default",
                            intersight_base_url="https://www.intersight.com/api/v1",
                            tags=None,
                            preconfigured_api_client=None,
                            ucs_server_profile_name=""
                            ):
    """This is a function used to make a Boot Order Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        boot_devices_list (list):
            A list of ordered dictionary entries containing the configuration
            for each boot device to be configured in the Boot Order Policy. 
            Place each boot device dictionary in the list to match the desired
            boot order (first to last). An example entry is: 
            [{"Type": "Virtual Media",
              "Device Name": "Virtual-Media-1",
              "Sub-Type": "CIMC MAPPED HDD"},
             {"Type": "PXE Boot",
              "Device Name": "PXE-Boot-1",
              "IP Type": "IPv4",
              "Interface Name": "pxe1",
              "Enabled": False},
             {"Type": "Local Disk",
              "Device Name": "Local-Disk-1"},].
        configured_boot_mode (str):
            Optional; The boot mode to be configured. The accepted values are
            "Legacy" or "Uefi". The default value is "Legacy".
        enable_uefi_secure_boot (bool):
            Optional; Enable or disable UEFI secure boot. This option only
            takes effect if "Uefi" is the configured boot mode. The default
            value is False.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Boot Order Policy object in Intersight
    builder(BootOrderPolicy(intersight_api_key_id=intersight_api_key_id,
                            intersight_api_key=intersight_api_key,
                            policy_name=policy_name,
                            policy_description=policy_description,
                            organization=organization,
                            intersight_base_url=intersight_base_url,
                            tags=tags,
                            preconfigured_api_client=preconfigured_api_client,
                            ucs_server_profile_name=ucs_server_profile_name,
                            boot_devices_list=boot_devices_list,
                            configured_boot_mode=configured_boot_mode,
                            enable_uefi_secure_boot=enable_uefi_secure_boot
                            ))


# Establish classes and functions to make Certificate Management Policy
class CertMgmtPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Certificate Management Policy in Intersight.
    """
    object_type = "Certificate Management Policy"
    intersight_api_path = "certificatemanagement/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 certificate="",
                 private_key="",
                 enable_imc_certificate=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name
                         )
        self.enable_imc_certificate = enable_imc_certificate
        self.certificate = certificate
        self.private_key = private_key

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"{self.enable_imc_certificate}, "
            f"'{self.certificate}', "
            f"'{self.private_key}')"
            )

    def _convert_certificate_input(self,
                                   certificate_input,
                                   certificate_input_type
                                   ):
        """This function converts the provided certificate input into the
        Base64 format accepted by Intersight for creating Certificate
        Management Policies.
        
        Args:
            certificate_input (str):
                The certificate input to be converted. This should be the actual
                certificate value or the certificate private key value.
            certificate_input (str):
                For logging purposes, the type of certificate input to be
                converted. Specify whether the input is the 'certificate' or
                'private key'.

        Returns:
            The certificate input value converted to a Base64 format, then
            decoded to a string in UTF-8 format.
            
        Raises:
            Exception:
                An exception occurred due to an issue converting the provided
                certificate input value. The status code or error message will
                be specified.
        """
        if self.certificate:
            try:
                certificate_input_stripped = certificate_input.strip()
                certificate_input_converted_to_bytes_format = certificate_input_stripped.encode()
                certificate_input_converted_to_base64_format_and_decoded = base64.b64encode(certificate_input_converted_to_bytes_format).decode()
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with the format of "
                      f"the value provided for the {certificate_input_type}.")
                print("To proceed, please verify that the value provided for "
                      f"the {certificate_input_type} is a string with the same "
                      "format and layout as in the source PEM file.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
                
        return certificate_input_converted_to_base64_format_and_decoded
                                  
    
    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # Update the API body with the certificate and private key converted to Base64 format
        converted_certificate = self._convert_certificate_input(self.certificate,
                                                                "certificate"
                                                                )
        converted_private_key = self._convert_certificate_input(self.private_key,
                                                                "certificate private key"
                                                                )
        self.intersight_api_body["Certificates"] = [
            {"Certificate": {
                "PemCertificate": converted_certificate
                },
             "Privatekey": converted_private_key,
             "Enabled": self.enable_imc_certificate,
             "ClassId": "certificatemanagement.Imc",
             "ObjectType": "certificatemanagement.Imc"
             }
            ]
        
        # POST the API body to Intersight
        self._post_intersight_object()


def cert_mgmt_policy_maker(intersight_api_key_id,
                           intersight_api_key,
                           policy_name,
                           certificate,
                           private_key,
                           enable_imc_certificate=True,
                           policy_description="",
                           organization="default",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           tags=None,
                           preconfigured_api_client=None,
                           ucs_server_profile_name=""
                           ):
    """This is a function used to make a Certificate Management Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        certificate (str):
            The certificate chain in string format. This can be obtained from
            a PEM file by copying and pasting the certificate string in the
            exact same format and layout.
        private_key (str):
            The certificate private key in string format. This can be obtained
            from a PEM file by copying and pasting the private key string in
            the exact same format and layout.
        enable_imc_certificate (bool):
            Optional; Enables the IMC certificate that has been created.
            The default value is True.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Certificate Management Policy object in Intersight
    builder(
        CertMgmtPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_name=ucs_server_profile_name,
            certificate=certificate,
            private_key=private_key,
            enable_imc_certificate=enable_imc_certificate
            ))


# Establish classes and functions to make Ethernet Adapter Policy
class EthernetAdapterPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Adapter Policy in
    Intersight.
    """
    object_type = "Ethernet Adapter Policy"
    intersight_api_path = "vnic/EthAdapterPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ethernet_adapter_default_configuration="",
                 enable_virtual_extensible_lan=False,
                 enable_network_virtualization_using_gre=False,
                 enable_accelerated_receive_flow_steering=False,
                 enable_precision_time_protocol=False,
                 enable_advanced_filter=False,
                 enable_interrupt_scaling=False,
                 enable_geneve_offload=False,
                 enable_rdma_over_converged_ethernet=False,
                 interrupts=8,
                 interrupt_mode="MSIx",
                 interrupt_timer=125,
                 interrupt_coalescing_type="Min",
                 receive_queue_count=4,
                 receive_ring_size=512,
                 transmit_queue_count=1,
                 transmit_ring_size=256,
                 completion_queue_count=5,
                 completion_ring_size=5,
                 uplink_failback_timeout=5,
                 enable_tx_checksum_offload=True,
                 enable_rx_checksum_offload=True,
                 enable_large_send_offload=True,
                 enable_large_receive_offload=True,
                 enable_receive_side_scaling=True,
                 enable_ipv4_hash=True,
                 enable_ipv6_extensions_hash=False,
                 enable_ipv6_hash=True,
                 enable_tcp_and_ipv4_hash=True,
                 enable_tcp_and_ipv6_extensions_hash=False,
                 enable_tcp_and_ipv6_hash=True,
                 enable_udp_and_ipv4_hash=False,
                 enable_udp_and_ipv6_hash=False,
                 roce_class_of_service=5,
                 roce_memory_regions=0,
                 roce_queue_pairs=0,
                 roce_resource_groups=0,
                 roce_version=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ethernet_adapter_default_configuration = ethernet_adapter_default_configuration
        self.enable_virtual_extensible_lan = enable_virtual_extensible_lan
        self.enable_network_virtualization_using_gre = enable_network_virtualization_using_gre
        self.enable_accelerated_receive_flow_steering = enable_accelerated_receive_flow_steering
        self.enable_precision_time_protocol = enable_precision_time_protocol
        self.enable_advanced_filter = enable_advanced_filter
        self.enable_interrupt_scaling = enable_interrupt_scaling
        self.enable_geneve_offload = enable_geneve_offload
        self.enable_rdma_over_converged_ethernet = enable_rdma_over_converged_ethernet
        self.interrupts = interrupts
        self.interrupt_mode = interrupt_mode
        self.interrupt_timer = interrupt_timer
        self.interrupt_coalescing_type = interrupt_coalescing_type
        self.receive_queue_count = receive_queue_count
        self.receive_ring_size = receive_ring_size
        self.transmit_queue_count = transmit_queue_count
        self.transmit_ring_size = transmit_ring_size
        self.completion_queue_count = completion_queue_count
        self.completion_ring_size = completion_ring_size
        self.uplink_failback_timeout = uplink_failback_timeout
        self.enable_tx_checksum_offload = enable_tx_checksum_offload
        self.enable_rx_checksum_offload = enable_rx_checksum_offload
        self.enable_large_send_offload = enable_large_send_offload
        self.enable_large_receive_offload = enable_large_receive_offload
        self.enable_receive_side_scaling = enable_receive_side_scaling
        self.enable_ipv4_hash = enable_ipv4_hash
        self.enable_ipv6_extensions_hash = enable_ipv6_extensions_hash
        self.enable_ipv6_hash = enable_ipv6_hash
        self.enable_tcp_and_ipv4_hash = enable_tcp_and_ipv4_hash
        self.enable_tcp_and_ipv6_extensions_hash = enable_tcp_and_ipv6_extensions_hash
        self.enable_tcp_and_ipv6_hash = enable_tcp_and_ipv6_hash
        self.enable_udp_and_ipv4_hash = enable_udp_and_ipv4_hash
        self.enable_udp_and_ipv6_hash = enable_udp_and_ipv6_hash
        self.roce_class_of_service = roce_class_of_service
        self.roce_memory_regions = roce_memory_regions
        self.roce_queue_pairs = roce_queue_pairs
        self.roce_resource_groups = roce_resource_groups
        self.roce_version = roce_version
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"('{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ethernet_adapter_default_configuration}', "
            f"{self.enable_virtual_extensible_lan}, "
            f"{self.enable_network_virtualization_using_gre}, "
            f"{self.enable_accelerated_receive_flow_steering}, "
            f"{self.enable_precision_time_protocol}, "
            f"{self.enable_advanced_filter}, "
            f"{self.enable_interrupt_scaling}, "
            f"{self.enable_geneve_offload}, "
            f"{self.enable_rdma_over_converged_ethernet}, "
            f"{self.interrupts}, "
            f"'{self.interrupt_mode}', "
            f"{self.interrupt_timer}, "
            f"'{self.interrupt_coalescing_type}', "
            f"{self.receive_queue_count}, "
            f"{self.receive_ring_size}, "
            f"{self.transmit_queue_count}, "
            f"{self.transmit_ring_size}, "
            f"{self.completion_queue_count}, "
            f"{self.completion_ring_size}, "
            f"{self.uplink_failback_timeout}, "
            f"{self.enable_tx_checksum_offload}, "
            f"{self.enable_rx_checksum_offload}, "
            f"{self.enable_large_send_offload}, "
            f"{self.enable_large_receive_offload}, "
            f"{self.enable_receive_side_scaling}, "
            f"{self.enable_ipv4_hash}, "
            f"{self.enable_ipv6_extensions_hash}, "
            f"{self.enable_ipv6_hash}, "
            f"{self.enable_tcp_and_ipv4_hash}, "
            f"{self.enable_tcp_and_ipv6_extensions_hash}, "
            f"{self.enable_tcp_and_ipv6_hash}, "
            f"{self.enable_udp_and_ipv4_hash}, "
            f"{self.enable_udp_and_ipv6_hash}, "
            f"{self.roce_class_of_service}, "
            f"{self.roce_memory_regions}, "
            f"{self.roce_queue_pairs}, "
            f"{self.roce_resource_groups}, "
            f"{self.roce_version})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Reformat the user provided interrupt_coalescing_type variable value to uppercase to prevent potential format issues
        if not self.ethernet_adapter_default_configuration:
            try:
                reformatted_interrupt_coalescing_type_value = self.interrupt_coalescing_type.upper()
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with the value "
                      "provided for the Interrupt Coalescing Type setting.")
                print(f"The value provided was {interrupt_coalescing_type}.")
                print("To proceed, the value provided for the Interrupt "
                      "Coalescing Type setting should be updated to an accepted string "
                      "format.")
                print("The accepted values are 'Min' or 'Idle'.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            if reformatted_interrupt_coalescing_type_value not in ("MIN", "IDLE"):
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with the value "
                      "provided for the Interrupt Coalescing Type setting.")
                print(f"The value provided was {interrupt_coalescing_type}.")
                print("To proceed, the value provided for the UCS "
                      "Coalescing Type setting should be updated to an accepted string "
                      "format.")
                print("The accepted values are 'Min' or 'Idle'.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
        # Retrieve the pre-defined built-in Ethernet Adapter Default Configuration if one has been provided and create dictionary with settings
        if self.ethernet_adapter_default_configuration:
            ethernet_adapter_default_configuration_settings = intersight_object_backup(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_attributes={
                    "Name": self.ethernet_adapter_default_configuration,
                    },
                backup_attribute_list = [
                    "AdvancedFilter",
                    "ArfsSettings",
                    "CompletionQueueSettings",
                    "GeneveEnabled",
                    "InterruptScaling",
                    "InterruptSettings",
                    "NvgreSettings",
                    "PtpSettings",
                    "RoceSettings",
                    "RssHashSettings",
                    "RssSettings",
                    "RxQueueSettings",
                    "TcpOffloadSettings",
                    "TxQueueSettings",
                    "UplinkFailbackTimeout",
                    "VxlanSettings"
                    ],
                intersight_api_path=f"vnic/EthAdapterPolicies?$top=1000&$filter=SharedScope%20eq%20%27shared%27",
                object_type="Ethernet Adapter Default Configuration",
                organization=None,
                preconfigured_api_client=self.api_client
                )
            # Update the API body with the Ethernet Adapter Default Configuration settings dictionary
            self.intersight_api_body.update(ethernet_adapter_default_configuration_settings)
        else:
            # Create dictionary with the user provided Ethernet Adapter Configuration settings
            ethernet_adapter_user_configuration_settings = {
                "AdvancedFilter": self.enable_advanced_filter,
                "ArfsSettings": {
                    "ClassId": "vnic.ArfsSettings",
                    "Enabled": self.enable_accelerated_receive_flow_steering,
                    "ObjectType": "vnic.ArfsSettings"
                    },
                "CompletionQueueSettings": {
                    "ClassId": "vnic.CompletionQueueSettings",
                    "Count": self.completion_queue_count,
                    "ObjectType": "vnic.CompletionQueueSettings",
                    "RingSize": self.completion_ring_size
                    },
                "GeneveEnabled": self.enable_geneve_offload,
                "InterruptScaling": self.enable_interrupt_scaling,
                "InterruptSettings": {
                    "ClassId": "vnic.EthInterruptSettings",
                    "CoalescingTime": self.interrupt_timer,
                    "CoalescingType": reformatted_interrupt_coalescing_type_value,
                    "Count": self.interrupts,
                    "Mode": self.interrupt_mode,
                    "ObjectType": "vnic.EthInterruptSettings"
                    },
                "NvgreSettings": {
                    "ClassId": "vnic.NvgreSettings",
                    "Enabled": self.enable_network_virtualization_using_gre,
                    "ObjectType": "vnic.NvgreSettings"
                    },
                "PtpSettings": {
                    "ClassId": "vnic.PtpSettings",
                    "Enabled": self.enable_precision_time_protocol,
                    "ObjectType": "vnic.PtpSettings"
                    },
                "RoceSettings": {
                    "ClassId": "vnic.RoceSettings",
                    "ClassOfService": self.roce_class_of_service,
                    "Enabled": self.enable_rdma_over_converged_ethernet,
                    "MemoryRegions": self.roce_memory_regions,
                    "ObjectType": "vnic.RoceSettings",
                    "QueuePairs": self.roce_queue_pairs,
                    "ResourceGroups": self.roce_resource_groups,
                    "Version": self.roce_version
                    },
                "RssHashSettings": {
                    "ClassId": "vnic.RssHashSettings",
                    "Ipv4Hash": self.enable_ipv4_hash,
                    "Ipv6ExtHash": self.enable_ipv6_extensions_hash,
                    "Ipv6Hash": self.enable_ipv6_hash,
                    "ObjectType": "vnic.RssHashSettings",
                    "TcpIpv4Hash": self.enable_tcp_and_ipv4_hash,
                    "TcpIpv6ExtHash": self.enable_tcp_and_ipv6_extensions_hash,
                    "TcpIpv6Hash": self.enable_tcp_and_ipv6_hash,
                    "UdpIpv4Hash": self.enable_udp_and_ipv4_hash,
                    "UdpIpv6Hash": self.enable_udp_and_ipv6_hash
                    },
                "RssSettings": self.enable_receive_side_scaling,
                "RxQueueSettings": {
                    "ClassId": "vnic.EthRxQueueSettings",
                    "Count": self.receive_queue_count,
                    "ObjectType": "vnic.EthRxQueueSettings",
                    "RingSize": self.receive_ring_size
                    },
                "TcpOffloadSettings": {
                    "ClassId": "vnic.TcpOffloadSettings",
                    "LargeReceive": self.enable_large_receive_offload,
                    "LargeSend": self.enable_large_send_offload,
                    "ObjectType": "vnic.TcpOffloadSettings",
                    "RxChecksum": self.enable_rx_checksum_offload,
                    "TxChecksum": self.enable_tx_checksum_offload
                    },
                "TxQueueSettings": {
                    "ClassId": "vnic.EthTxQueueSettings",
                    "Count": self.transmit_queue_count,
                    "ObjectType": "vnic.EthTxQueueSettings",
                    "RingSize": self.transmit_ring_size
                    },
                "UplinkFailbackTimeout": self.uplink_failback_timeout,
                "VxlanSettings": {
                    "ClassId": "vnic.VxlanSettings",
                    "Enabled": self.enable_virtual_extensible_lan,
                    "ObjectType": "vnic.VxlanSettings"
                    }
                }
            # Update the API body with the user provided Ethernet Adapter Configuration settings
            self.intersight_api_body.update(ethernet_adapter_user_configuration_settings)
        # POST the API body to Intersight
        self._post_intersight_object()


def ethernet_adapter_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    ethernet_adapter_default_configuration="",
    enable_virtual_extensible_lan=False,
    enable_network_virtualization_using_gre=False,
    enable_accelerated_receive_flow_steering=False,
    enable_precision_time_protocol=False,
    enable_advanced_filter=False,
    enable_interrupt_scaling=False,
    enable_geneve_offload=False,
    enable_rdma_over_converged_ethernet=False,
    interrupts=8,
    interrupt_mode="MSIx",
    interrupt_timer=125,
    interrupt_coalescing_type="Min",
    receive_queue_count=4,
    receive_ring_size=512,
    transmit_queue_count=1,
    transmit_ring_size=256,
    completion_queue_count=5,
    completion_ring_size=5,
    uplink_failback_timeout=5,
    enable_tx_checksum_offload=True,
    enable_rx_checksum_offload=True,
    enable_large_send_offload=True,
    enable_large_receive_offload=True,
    enable_receive_side_scaling=True,
    enable_ipv4_hash=True,
    enable_ipv6_extensions_hash=False,
    enable_ipv6_hash=True,
    enable_tcp_and_ipv4_hash=True,
    enable_tcp_and_ipv6_extensions_hash=False,
    enable_tcp_and_ipv6_hash=True,
    enable_udp_and_ipv4_hash=False,
    enable_udp_and_ipv6_hash=False,
    roce_class_of_service=5,
    roce_memory_regions=0,
    roce_queue_pairs=0,
    roce_resource_groups=0,
    roce_version=1,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Ethernet Adapter Policy on
    Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        ethernet_adapter_default_configuration (str):
            Optional; This setting applies a pre-defined built-in default
            configuration to be used for building the Ethernet Adapter policy.
            Entering a default configuration will override user-provided
            configuration settings/arguments for the Ethernet Adapter that
            reside under the Policy Details category. Accepted values include
            "MQ-SMBd", "SMBServer", "SMBClient", "Solaris", "usNICOracleRAC",
            "WIN-AzureStack", "Win-HPN-SMBd", "Win-HPN", "Linux-NVMe-RoCE",
            "MQ", "usNIC", "SRIOV", "VMWarePassThru", "VMWare", "Windows", and
            "Linux". The default value is an empty string (""), which will
            apply no default configuration and user-provided settings will be
            used.
        enable_virtual_extensible_lan (bool):
            Optional; Enable VXLAN on the interface. The default value is False.
        enable_network_virtualization_using_gre (bool):
            Optional; Enable NVGRE on the interface. The default value is False.
        enable_accelerated_receive_flow_steering (bool):
            Optional; Enable ARFS on the interface. The default value is False.
        enable_precision_time_protocol (bool):
            Optional; Enable PTP on the interface. The default value is False.
        enable_advanced_filter (bool):
            Optional; Enable advanced filtering on the interface. The default
            value is False.
        enable_interrupt_scaling (bool):
            Optional; Enable interrupt scaling on the interface. The default
            value is False.
        enable_geneve_offload (bool):
            Optional; Enable Geneve offload on the interface. The default value
            is False.
        enable_rdma_over_converged_ethernet (bool):
            Optional; Enable RoCE on the interface. The default value is False.
        interrupts (int):
            Optional; The number of interrupts. The accepted values are
            1 - 1024. The default value is 8.
        interrupt_mode (str):
            Optional; The interrupt mode. The accepted values are "MSIx",
            "MSI", or "INTx". The default value is "MSIx".
        interrupt_timer (int):
            Optional; The time to wait between interrupts. The accepted values
            are 0 - 65535. The default value is 125.
        interrupt_coalescing_type (str):
            Optional; The interrupt coalescing type. The accepted values are
            "Min" or "Idle". The default value is "Min".
        receive_queue_count (int):
            Optional; The receive queue count. The accepted values are
            1 - 1000. The default value is 4.
        receive_ring_size (int):
            Optional; The receive ring size. The accepted values are
            64 - 16384. The default value is 512.
        transmit_queue_count (int):
            Optional; The transmit queue count. The accepted values are
            1 - 1000. The default value is 1.
        transmit_ring_size (int):
            Optional; The transmit ring size. The accepted values are
            64 - 16384. The default value is 256.
        completion_queue_count (int):
            Optional; The completion queue count. The accepted values are
            1 - 2000. The default value is 5.
        completion_ring_size (int):
            Optional; The completion ring size. The accepted values are
            1 - 256. The default value is 5.
        uplink_failback_timeout (int):
            Optional; The uplink failback timeout. The accepted values are
            0 - 600. The default value is 5.
        enable_tx_checksum_offload (bool):
            Optional; Enable Tx checksum offload to the hardware. The default
            value is True.
        enable_rx_checksum_offload (bool):
            Optional; Enable Rx checksum offload to the hardware. The default
            value is True.
        enable_large_send_offload (bool):
            Optional; Enable large packet segmentation to the hardware. The
            default value is True.
        enable_large_receive_offload (bool):
            Optional; Enable segmented packet reassembly to the hardware. The
            default value is True.
        enable_receive_side_scaling (bool):
            Optional; Enable Receive Side Scaling. The default value is True.
        enable_ipv4_hash (bool):
            Optional; Enable the IPv4 address for traffic distribution. The
            default value is True.
        enable_ipv6_extensions_hash (bool):
            Optional; Enable the IPv6 extensions for traffic distribution. The
            default value is False.
        enable_ipv6_hash (bool):
            Optional; Enable the IPv6 address for traffic distribution. The
            default value is True.
        enable_tcp_and_ipv4_hash (bool):
            Optional; Enable the IPv4 address and TCP port number for traffic
            distribution. The default value is True.
        enable_tcp_and_ipv6_extensions_hash (bool):
            Optional; Enable the IPv6 extensions and TCP port number for
            traffic distribution. The default value is False.
        enable_tcp_and_ipv6_hash (bool):
            Optional; Enable the IPv6 address and TCP port number for traffic
            distribution. The default value is True.
        enable_udp_and_ipv4_hash (bool):
            Optional; Enable the IPv4 address and UDP port number for traffic
            distribution. The default value is False.
        enable_udp_and_ipv6_hash (bool):
            Optional; Enable the IPv6 address and UDP port number for traffic
            distribution. The default value is False.
        roce_class_of_service (int):
            Optional; The RoCE class of service. The accepted values are 1 - 6.
            The default value is 5.
        roce_memory_regions (int):
            Optional; The RoCE memory regions. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_queue_pairs (int):
            Optional; The RoCE queue pairs. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_resource_groups (int):
            Optional; The RoCE resource groups. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_version (int):
            Optional; The RoCE version. The accepted values are
            1 - 2. The default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Adapter Policy object in Intersight
    builder(
        EthernetAdapterPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ethernet_adapter_default_configuration=ethernet_adapter_default_configuration,
            enable_virtual_extensible_lan=enable_virtual_extensible_lan,
            enable_network_virtualization_using_gre=enable_network_virtualization_using_gre,
            enable_accelerated_receive_flow_steering=enable_accelerated_receive_flow_steering,
            enable_precision_time_protocol=enable_precision_time_protocol,
            enable_advanced_filter=enable_advanced_filter,
            enable_interrupt_scaling=enable_interrupt_scaling,
            enable_geneve_offload=enable_geneve_offload,
            enable_rdma_over_converged_ethernet=enable_rdma_over_converged_ethernet,
            interrupts=interrupts,
            interrupt_mode=interrupt_mode,
            interrupt_timer=interrupt_timer,
            interrupt_coalescing_type=interrupt_coalescing_type,
            receive_queue_count=receive_queue_count,
            receive_ring_size=receive_ring_size,
            transmit_queue_count=transmit_queue_count,
            transmit_ring_size=transmit_ring_size,
            completion_queue_count=completion_queue_count,
            completion_ring_size=completion_ring_size,
            uplink_failback_timeout=uplink_failback_timeout,
            enable_tx_checksum_offload=enable_tx_checksum_offload,
            enable_rx_checksum_offload=enable_rx_checksum_offload,
            enable_large_send_offload=enable_large_send_offload,
            enable_large_receive_offload=enable_large_receive_offload,
            enable_receive_side_scaling=enable_receive_side_scaling,
            enable_ipv4_hash=enable_ipv4_hash,
            enable_ipv6_extensions_hash=enable_ipv6_extensions_hash,
            enable_ipv6_hash=enable_ipv6_hash,
            enable_tcp_and_ipv4_hash=enable_tcp_and_ipv4_hash,
            enable_tcp_and_ipv6_extensions_hash=enable_tcp_and_ipv6_extensions_hash,
            enable_tcp_and_ipv6_hash=enable_tcp_and_ipv6_hash,
            enable_udp_and_ipv4_hash=enable_udp_and_ipv4_hash,
            enable_udp_and_ipv6_hash=enable_udp_and_ipv6_hash,
            roce_class_of_service=roce_class_of_service,
            roce_memory_regions=roce_memory_regions,
            roce_queue_pairs=roce_queue_pairs,
            roce_resource_groups=roce_resource_groups,
            roce_version=roce_version
            ))


# Establish classes and functions to make Ethernet Network Control Policy
class EthernetNetworkControlPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Network Control Policy in
    Intersight.
    """
    object_type = "Ethernet Network Control Policy"
    intersight_api_path = "fabric/EthNetworkControlPolicies"
    object_variable_value_maps = [
        {"VariableName": "mac_register_mode",
         "Description": "MAC Register Mode",
         "AttributeName": "MacRegistrationMode",
         "Values": [
             {"FrontEndValue": "Only Native VLAN",
              "BackEndValue": "nativeVlanOnly"
              },
             {"FrontEndValue": "All Host VLANs",
              "BackEndValue": "allVlans"
              }
             ]
         },
        {"VariableName": "action_on_uplink_fail",
         "Description": "Action on Uplink Fail",
         "AttributeName": "UplinkFailAction",
         "Values": [
             {"FrontEndValue": "Link Down",
              "BackEndValue": "linkDown"
              },
             {"FrontEndValue": "Warning",
              "BackEndValue": "warning"
              }
             ]
         },
        {"VariableName": "mac_forging",
         "Description": "MAC Forging",
         "AttributeName": "ForgeMac",
         "Values": [
             {"FrontEndValue": "Allow",
              "BackEndValue": "allow"
              },
             {"FrontEndValue": "Deny",
              "BackEndValue": "deny"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 enable_cdp=False,
                 mac_register_mode="Only Native VLAN",
                 action_on_uplink_fail="Link Down",
                 mac_forging="Allow",
                 lldp_enable_transmit=False,
                 lldp_enable_receive=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.enable_cdp = enable_cdp
        self.mac_register_mode = mac_register_mode
        self.action_on_uplink_fail = action_on_uplink_fail
        self.mac_forging = mac_forging
        self.lldp_enable_transmit = lldp_enable_transmit
        self.lldp_enable_receive = lldp_enable_receive
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "CdpEnabled": self.enable_cdp,
            "LldpSettings": {
                "TransmitEnabled": self.lldp_enable_transmit,
                "ReceiveEnabled": self.lldp_enable_receive
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"('{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.enable_cdp}, "
            f"'{self.mac_register_mode}', "
            f"'{self.action_on_uplink_fail}', "
            f"'{self.mac_forging}', "
            f"{self.lldp_enable_transmit}, "
            f"{self.lldp_enable_receive})"
            )


def ethernet_network_control_policy_maker(intersight_api_key_id,
                                          intersight_api_key,
                                          policy_name,
                                          enable_cdp=False,
                                          mac_register_mode="Only Native VLAN",
                                          action_on_uplink_fail="Link Down",
                                          mac_forging="Allow",
                                          lldp_enable_transmit=False,
                                          lldp_enable_receive=False,
                                          policy_description="",
                                          organization="default",
                                          intersight_base_url="https://www.intersight.com/api/v1",
                                          tags=None,
                                          preconfigured_api_client=None
                                          ):
    """This is a function used to make an Ethernet Network Control Policy on
    Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_cdp (bool):
            Optional; The administrative state of Cisco Discovery Protocol
            (CDP) on an interface. The default value is False.
        mac_register_mode (str):
            Optional; The MAC address registration mode. The accepted values
            are "Only Native VLAN" and "All Host VLANs". The default value is
            "Only Native VLAN".
        action_on_uplink_fail (str):
            Optional; The state of a virtual interface if an uplink is not
            pinned. The accepted values are "Link Down" or "Warning". The
            "Link Down" option will take down the virtual interface if an
            uplink is not pinned. The "Warning" option will leave the virtual
            interface up even if there is no pinned uplink. The default value
            is "Link Down".
        mac_forging (str):
            Optional; Determines if MAC forging is allowed or denied on an
            interface. The accepted values are "Allow" and "Deny". The default
            value is "Allow".
        lldp_enable_transmit (bool):
            Optional; The administrative state of Link Layer Discovery Protocol
            (LLDP) frames being transmitted on an interface. The default value
            is False.
        lldp_enable_receive (bool):
            Optional; The administrative state of Link Layer Discovery Protocol
            (LLDP) frames being received on an interface. The default value
            is False.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Network Control Policy object in Intersight
    builder(EthernetNetworkControlPolicy(intersight_api_key_id=intersight_api_key_id,
                                         intersight_api_key=intersight_api_key,
                                         policy_name=policy_name,
                                         policy_description=policy_description,
                                         organization=organization,
                                         intersight_base_url=intersight_base_url,
                                         tags=tags,
                                         preconfigured_api_client=preconfigured_api_client,
                                         enable_cdp=enable_cdp,
                                         mac_register_mode=mac_register_mode,
                                         action_on_uplink_fail=action_on_uplink_fail,
                                         mac_forging=mac_forging,
                                         lldp_enable_transmit=lldp_enable_transmit,
                                         lldp_enable_receive=lldp_enable_receive
                                         ))


# Establish classes and functions to make Ethernet Network Group Policy
class EthernetNetworkGroupPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Network Group Policy in
    Intersight.
    """
    object_type = "Ethernet Network Group Policy"
    intersight_api_path = "fabric/EthNetworkGroupPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 allowed_vlans="1",
                 native_vlan=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.allowed_vlans = allowed_vlans
        self.native_vlan = native_vlan
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "VlanSettings": {"AllowedVlans": self.allowed_vlans,
                             "NativeVlan": self.native_vlan
                             }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.allowed_vlans}', "
            f"{self.native_vlan})"
            )


def ethernet_network_group_policy_maker(intersight_api_key_id,
                                        intersight_api_key,
                                        policy_name,
                                        allowed_vlans="1",
                                        native_vlan=1,
                                        policy_description="",
                                        organization="default",
                                        intersight_base_url="https://www.intersight.com/api/v1",
                                        tags=None,
                                        preconfigured_api_client=None
                                        ):
    """This is a function used to make an Ethernet Network Group Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        allowed_vlans (str):
            Optional; The allowed VLAN IDs of the virtual interface. A list of
            comma separated VLAN IDs and/or VLAN ID ranges. An example entry
            is: "10,11". The default value is an empty string ("").
        native_vlan (int):
            Optional; The native VLAN ID of the virtual interface or the
            corresponding vEthernet on the peer Fabric Interconnect to which
            the virtual interface is connected. If the native VLAN is not a
            part of the allowed VLANs, it will automatically be added to the
            list of allowed VLANs. The default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """

    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Network Group Policy object in Intersight
    builder(EthernetNetworkGroupPolicy(intersight_api_key_id=intersight_api_key_id,
                                       intersight_api_key=intersight_api_key,
                                       policy_name=policy_name,
                                       policy_description=policy_description,
                                       organization=organization,
                                       intersight_base_url=intersight_base_url,
                                       tags=tags,
                                       preconfigured_api_client=preconfigured_api_client,
                                       allowed_vlans=allowed_vlans,
                                       native_vlan=native_vlan
                                       ))


# Establish classes and functions to make Ethernet QoS Policy
class EthernetQosPolicy(UcsPolicy):
    """This class is used to configure an Ethernet QoS Policy in Intersight.
    """
    object_type = "Ethernet QoS Policy"
    intersight_api_path = "vnic/EthQosPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ethernet_qos_mtu_in_bytes=1500,
                 ethernet_qos_rate_limit_in_mbps=0,
                 ethernet_qos_cos=3,
                 ethernet_qos_burst=1024,
                 ethernet_qos_priority="Best Effort",
                 ethernet_qos_enable_trust_host_cos=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ethernet_qos_mtu_in_bytes = ethernet_qos_mtu_in_bytes
        self.ethernet_qos_rate_limit_in_mbps = ethernet_qos_rate_limit_in_mbps
        self.ethernet_qos_cos = ethernet_qos_cos
        self.ethernet_qos_burst = ethernet_qos_burst
        self.ethernet_qos_priority = ethernet_qos_priority
        self.ethernet_qos_enable_trust_host_cos = ethernet_qos_enable_trust_host_cos
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Mtu": self.ethernet_qos_mtu_in_bytes,
            "RateLimit": self.ethernet_qos_rate_limit_in_mbps,
            "Cos": self.ethernet_qos_cos,
            "Burst": self.ethernet_qos_burst,
            "Priority": self.ethernet_qos_priority,
            "TrustHostCos": self.ethernet_qos_enable_trust_host_cos
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.ethernet_qos_mtu_in_bytes}, "
            f"{self.ethernet_qos_rate_limit_in_mbps}, "
            f"{self.ethernet_qos_cos}, "
            f"{self.ethernet_qos_burst}, "
            f"'{self.ethernet_qos_priority}', "
            f"{self.ethernet_qos_enable_trust_host_cos})"
            )


def ethernet_qos_policy_maker(intersight_api_key_id,
                              intersight_api_key,
                              policy_name,
                              ethernet_qos_mtu_in_bytes=1500,
                              ethernet_qos_rate_limit_in_mbps=0,
                              ethernet_qos_cos=3,
                              ethernet_qos_burst=1024,
                              ethernet_qos_priority="Best Effort",
                              ethernet_qos_enable_trust_host_cos=False,
                              policy_description="",
                              organization="default",
                              intersight_base_url="https://www.intersight.com/api/v1",
                              tags=None,
                              preconfigured_api_client=None
                              ):
    """This is a function used to make an Ethernet QoS Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        default_vlan (int):
            Optional; The default VLAN ID setting. Default VLANs can be between
            1-4094. Leave the default of 0 if there is no default VLAN. The
            default value is 0.
        vsan_id (int):
            Optional; The VSAN ID setting. VSAN IDs can be between 1-4094. The
            default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet QoS Policy object in Intersight
    builder(EthernetQosPolicy(intersight_api_key_id=intersight_api_key_id,
                              intersight_api_key=intersight_api_key,
                              policy_name=policy_name,
                              policy_description=policy_description,
                              organization=organization,
                              intersight_base_url=intersight_base_url,
                              tags=tags,
                              preconfigured_api_client=preconfigured_api_client,
                              ethernet_qos_mtu_in_bytes=ethernet_qos_mtu_in_bytes,
                              ethernet_qos_rate_limit_in_mbps=ethernet_qos_rate_limit_in_mbps,
                              ethernet_qos_cos=ethernet_qos_cos,
                              ethernet_qos_burst=ethernet_qos_burst,
                              ethernet_qos_priority=ethernet_qos_priority,
                              ethernet_qos_enable_trust_host_cos=ethernet_qos_enable_trust_host_cos
                              ))


# Establish classes and functions to make Fibre Channel Adapter Policy
class FibreChannelAdapterPolicy(UcsPolicy):
    """This class is used to configure an Fibre Channel Adapter Policy in
    Intersight.
    """
    object_type = "Fibre Channel Adapter Policy"
    intersight_api_path = "vnic/FcAdapterPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 fibre_channel_adapter_default_configuration="",
                 fcp_error_recovery=False,
                 port_down_timeout_in_ms=10000,
                 link_down_timeout_in_ms=30000,
                 io_retry_timeout_in_seconds=5,
                 port_down_io_retry_in_ms=8,
                 error_detection_timeout=2000,
                 resource_allocation_timeout=10000,
                 flogi_retries=8,
                 flogi_timeout_in_ms=4000,
                 plogi_retries=8,
                 plogi_timeout_in_ms=20000,
                 interrupt_mode="MSIx",
                 io_throttle_count=512,
                 maximum_luns_per_target=1024,
                 lun_queue_depth=20,
                 receive_ring_size=64,
                 transmit_ring_size=64,
                 scsi_io_queues=1,
                 scsi_io_ring_size=512
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.fibre_channel_adapter_default_configuration = fibre_channel_adapter_default_configuration
        self.fcp_error_recovery = fcp_error_recovery
        self.port_down_timeout_in_ms = port_down_timeout_in_ms
        self.link_down_timeout_in_ms = link_down_timeout_in_ms
        self.io_retry_timeout_in_seconds = io_retry_timeout_in_seconds
        self.port_down_io_retry_in_ms = port_down_io_retry_in_ms
        self.error_detection_timeout = error_detection_timeout
        self.resource_allocation_timeout = resource_allocation_timeout
        self.flogi_retries = flogi_retries
        self.flogi_timeout_in_ms = flogi_timeout_in_ms
        self.plogi_retries = plogi_retries
        self.plogi_timeout_in_ms = plogi_timeout_in_ms
        self.interrupt_mode = interrupt_mode
        self.io_throttle_count = io_throttle_count
        self.maximum_luns_per_target = maximum_luns_per_target
        self.lun_queue_depth = lun_queue_depth
        self.receive_ring_size = receive_ring_size
        self.transmit_ring_size = transmit_ring_size
        self.scsi_io_queues = scsi_io_queues
        self.scsi_io_ring_size = scsi_io_ring_size
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"('{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.fibre_channel_adapter_default_configuration}', "
            f"{self.fcp_error_recovery}, "
            f"{self.port_down_timeout_in_ms}, "
            f"{self.link_down_timeout_in_ms}, "
            f"{self.io_retry_timeout_in_seconds}, "
            f"{self.port_down_io_retry_in_ms}, "
            f"{self.error_detection_timeout}, "
            f"{self.resource_allocation_timeout}, "
            f"{self.flogi_retries}, "
            f"{self.flogi_timeout_in_ms}, "
            f"{self.plogi_retries}, "
            f"{self.plogi_timeout_in_ms}, "
            f"'{self.interrupt_mode}', "
            f"{self.io_throttle_count}, "
            f"{self.maximum_luns_per_target}, "
            f"{self.lun_queue_depth}, "
            f"{self.receive_ring_size}, "
            f"{self.transmit_ring_size}, "
            f"{self.scsi_io_queues}, "
            f"{self.scsi_io_ring_size})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Retrieve the pre-defined built-in Fibre Channel Adapter Default Configuration if one has been provided and create dictionary with settings
        if self.fibre_channel_adapter_default_configuration:
            fibre_channel_adapter_default_configuration_settings = intersight_object_backup(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_attributes={
                    "Name": self.fibre_channel_adapter_default_configuration,
                    },
                backup_attribute_list = [
                    "ErrorDetectionTimeout",
                    "ErrorRecoverySettings",
                    "FlogiSettings",
                    "InterruptSettings",
                    "IoThrottleCount",
                    "LunCount",
                    "LunQueueDepth",
                    "PlogiSettings",
                    "ResourceAllocationTimeout",
                    "RxQueueSettings",
                    "ScsiQueueSettings",
                    "TxQueueSettings"
                    ],
                intersight_api_path=f"vnic/FcAdapterPolicies?$top=1000&$filter=SharedScope%20eq%20%27shared%27",
                object_type="Fibre Channel Adapter Default Configuration",
                organization=None,
                preconfigured_api_client=self.api_client
                )
            # Update the API body with the Fibre Channel Adapter Default Configuration settings dictionary
            self.intersight_api_body.update(fibre_channel_adapter_default_configuration_settings)
        else:
            # Create dictionary with the user provided Fibre Channel Adapter Configuration settings
            fibre_channel_adapter_user_configuration_settings = {
                "ErrorDetectionTimeout": self.error_detection_timeout,
                "ErrorRecoverySettings": {
                    "ClassId": "vnic.FcErrorRecoverySettings",
                    "Enabled": self.fcp_error_recovery,
                    "IoRetryCount": self.port_down_io_retry_in_ms,
                    "IoRetryTimeout": self.io_retry_timeout_in_seconds,
                    "LinkDownTimeout": self.link_down_timeout_in_ms,
                    "ObjectType": "vnic.FcErrorRecoverySettings",
                    "PortDownTimeout": self.port_down_timeout_in_ms
                    },
                "FlogiSettings": {
                    "ClassId": "vnic.FlogiSettings",
                    "ObjectType": "vnic.FlogiSettings",
                    "Retries": self.flogi_retries,
                    "Timeout": self.flogi_timeout_in_ms
                    },
                "InterruptSettings": {
                    "ClassId": "vnic.FcInterruptSettings",
                    "Mode": self.interrupt_mode,
                    "ObjectType": "vnic.FcInterruptSettings"
                    },
                "IoThrottleCount": self.io_throttle_count,
                "LunCount": self.maximum_luns_per_target,
                "LunQueueDepth": self.lun_queue_depth,
                "PlogiSettings": {
                    "ClassId": "vnic.PlogiSettings",
                    "ObjectType": "vnic.PlogiSettings",
                    "Retries": self.plogi_retries,
                    "Timeout": self.plogi_timeout_in_ms
                    },
                "ResourceAllocationTimeout": self.resource_allocation_timeout,
                "RxQueueSettings": {
                    "ClassId": "vnic.FcQueueSettings",
                    "ObjectType": "vnic.FcQueueSettings",
                    "RingSize": self.receive_ring_size
                    },
                "ScsiQueueSettings": {
                    "ClassId": "vnic.ScsiQueueSettings",
                    "Count": self.scsi_io_queues,
                    "ObjectType": "vnic.ScsiQueueSettings",
                    "RingSize": self.scsi_io_ring_size
                    },
                "TxQueueSettings": {
                    "ClassId": "vnic.FcQueueSettings",
                    "ObjectType": "vnic.FcQueueSettings",
                    "RingSize": self.transmit_ring_size
                    }
                }
            # Update the API body with the user provided Fibre Channel Adapter Configuration settings
            self.intersight_api_body.update(fibre_channel_adapter_user_configuration_settings)
        # POST the API body to Intersight
        self._post_intersight_object()


def fibre_channel_adapter_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    fibre_channel_adapter_default_configuration="",
    fcp_error_recovery=False,
    port_down_timeout_in_ms=10000,
    link_down_timeout_in_ms=30000,
    io_retry_timeout_in_seconds=5,
    port_down_io_retry_in_ms=8,
    error_detection_timeout=2000,
    resource_allocation_timeout=10000,
    flogi_retries=8,
    flogi_timeout_in_ms=4000,
    plogi_retries=8,
    plogi_timeout_in_ms=20000,
    interrupt_mode="MSIx",
    io_throttle_count=512,
    maximum_luns_per_target=1024,
    lun_queue_depth=20,
    receive_ring_size=64,
    transmit_ring_size=64,
    scsi_io_queues=1,
    scsi_io_ring_size=512,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Fibre Channel Adapter Policy on
    Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        fibre_channel_adapter_default_configuration (str):
            Optional; This setting applies a pre-defined built-in default
            configuration to be used for building the Fibre Channel Adapter
            policy. Entering a default configuration will override
            user-provided configuration settings/arguments for the Fibre
            Channel Adapter that reside under the Policy Details category.
            Accepted values include "WindowsBoot", "Solaris", "FCNVMeTarget",
            "FCNVMeInitiator", "Target", "Initiator", "VMWare", "Windows", and
            "Linux". The default value is an empty string (""), which will
            apply no default configuration and user-provided settings will be
            used.
        fcp_error_recovery (bool):
            Optional; Enable Fibre Channel error recovery on the port. The
            default value is False.
        port_down_timeout_in_ms (int):
            Optional; The amount of time in milliseconds for a remotely
            connected port to be unreachable before being marked as down. The
            accepted values are 0 - 240000. The default value is 10000.
        link_down_timeout_in_ms (int):
            Optional; The amount of time in milliseconds for the uplink port to
            be unreachable before being marked as down. The accepted values are
            0 - 240000. The default value is 30000.
        io_retry_timeout_in_seconds (int):
            Optional; The amount of time in seconds before an I/O transmission
            will be resent if there is no initial response from the target
            device. The accepted values are 1 - 59. The default value is 5.
        port_down_io_retry_in_ms (int):
            Optional; The number of times an I/O request to a remote port is
            returned before labeling the port unavailable. The accepted values
            are 0 - 255. The default value is 8.
        error_detection_timeout (int):
            Optional; The amount of time in milliseconds the system waits before
            determining an error has occurred. The accepted values are
            1000 - 100000. The default value is 2000.
        resource_allocation_timeout (int):
            Optional; The amount of time in milliseconds the system waits before
            determining a resource cannot be allocated. The accepted values are
            5000 - 100000. The default value is 10000.
        flogi_retries (int):
            Optional; The number of times a fabric login will be re-attempted
            after an initial fabric login failure. The accepted values are > 0.
            The default value is 8.
        flogi_timeout_in_ms (int):
            Optional; The amount of time in milliseconds the system waits
            re-attempting a fabric login. The accepted values are
            1000 - 255000. The default value is 4000.
        plogi_retries (int):
            Optional; The number of times a port login will be re-attempted
            after an initial port login failure. The accepted values are
            0 - 255. The default value is 8.
        plogi_timeout_in_ms (int):
            Optional; The amount of time in milliseconds the system waits
            re-attempting a port login. The accepted values are
            1000 - 255000. The default value is 20000.
        interrupt_mode (str):
            Optional; The interrupt mode. The accepted values are "MSIx",
            "MSI", or "INTx". The default value is "MSIx".
        io_throttle_count (int):
            Optional; The maximum number of pending I/O operations allowed. The
            accepted values are 1 - 1024. The default value is 512.
        maximum_luns_per_target (int):
            Optional; The maximum number of LUNs shown per target. This is
            typically limited by the OS. The accepted values are 1 - 1024. The
            default value is 1024.
        lun_queue_depth (int):
            Optional; The maximum number of commands in a transmission that can
            be sent and received by the HBA per LUN. The accepted values are
            1 - 254. The default value is 20.
        receive_ring_size (int):
            Optional; The receive ring size. The accepted values are > 64. The
            default value is 64.
        transmit_ring_size (int):
            Optional; The transmit ring size. The accepted values are > 64. The
            default value is 64.
        scsi_io_queues (int):
            Optional; The maximum number of SCSI I/O queues that can be
            allocated. The accepted values are 1 - 245. The default value is 1.
        scsi_io_ring_size (int):
            Optional; The maximum number of descriptors per SCSI I/O queues.
            The accepted values are 64 - 512. The default value is 512.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Fibre Channel Adapter Policy object in Intersight
    builder(
        FibreChannelAdapterPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            fibre_channel_adapter_default_configuration=fibre_channel_adapter_default_configuration,
            fcp_error_recovery=fcp_error_recovery,
            port_down_timeout_in_ms=port_down_timeout_in_ms,
            link_down_timeout_in_ms=link_down_timeout_in_ms,
            io_retry_timeout_in_seconds=io_retry_timeout_in_seconds,
            port_down_io_retry_in_ms=port_down_io_retry_in_ms,
            error_detection_timeout=error_detection_timeout,
            resource_allocation_timeout=resource_allocation_timeout,
            flogi_retries=flogi_retries,
            flogi_timeout_in_ms=flogi_timeout_in_ms,
            plogi_retries=plogi_retries,
            plogi_timeout_in_ms=plogi_timeout_in_ms,
            interrupt_mode=interrupt_mode,
            io_throttle_count=io_throttle_count,
            maximum_luns_per_target=maximum_luns_per_target,
            lun_queue_depth=lun_queue_depth,
            receive_ring_size=receive_ring_size,
            transmit_ring_size=transmit_ring_size,
            scsi_io_queues=scsi_io_queues,
            scsi_io_ring_size=scsi_io_ring_size
            ))


# Establish classes and functions to make Fibre Channel Network Policy
class FibreChannelNetworkPolicy(UcsPolicy):
    """This class is used to configure a Fibre Channel Network Policy in
    Intersight.
    """
    object_type = "Fibre Channel Network Policy"
    intersight_api_path = "vnic/FcNetworkPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 default_vlan=0,
                 vsan_id=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.default_vlan = default_vlan
        self.vsan_id = vsan_id
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "VsanSettings": {"DefaultVlanId": self.default_vlan, "Id": self.vsan_id}
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.default_vlan}, "
            f"{self.vsan_id})"
            )


def fibre_channel_network_policy_maker(intersight_api_key_id,
                                       intersight_api_key,
                                       policy_name,
                                       default_vlan=0,
                                       vsan_id=1,
                                       policy_description="",
                                       organization="default",
                                       intersight_base_url="https://www.intersight.com/api/v1",
                                       tags=None,
                                       preconfigured_api_client=None
                                       ):
    """This is a function used to make a Fibre Channel Network Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        default_vlan (int):
            Optional; The default VLAN ID setting. Default VLANs can be between
            1-4094. Leave the default of 0 if there is no default VLAN. The
            default value is 0.
        vsan_id (int):
            Optional; The VSAN ID setting. VSAN IDs can be between 1-4094. The
            default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Fibre Channel Network Policy object in Intersight
    builder(FibreChannelNetworkPolicy(intersight_api_key_id=intersight_api_key_id,
                                      intersight_api_key=intersight_api_key,
                                      policy_name=policy_name,
                                      policy_description=policy_description,
                                      organization=organization,
                                      intersight_base_url=intersight_base_url,
                                      tags=tags,
                                      preconfigured_api_client=preconfigured_api_client,
                                      default_vlan=default_vlan,
                                      vsan_id=vsan_id
                                      ))


# Establish classes and functions to make Fibre Channel QoS Policy
class FibreChannelQosPolicy(UcsPolicy):
    """This class is used to configure a Fibre Channel QoS Policy in Intersight.
    """
    object_type = "Fibre Channel QoS Policy"
    intersight_api_path = "vnic/FcQosPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 fibre_channel_qos_rate_limit_in_mbps=0,
                 fibre_channel_qos_maximum_data_field_size_in_bytes=2112,
                 fibre_channel_qos_cos=3,
                 fibre_channel_qos_burst=10240
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.fibre_channel_qos_rate_limit_in_mbps = fibre_channel_qos_rate_limit_in_mbps
        self.fibre_channel_qos_maximum_data_field_size_in_bytes = fibre_channel_qos_maximum_data_field_size_in_bytes
        self.fibre_channel_qos_cos = fibre_channel_qos_cos
        self.fibre_channel_qos_burst = fibre_channel_qos_burst
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "RateLimit": self.fibre_channel_qos_rate_limit_in_mbps,
            "MaxDataFieldSize": self.fibre_channel_qos_maximum_data_field_size_in_bytes,
            "Cos": self.fibre_channel_qos_cos,
            "Burst": self.fibre_channel_qos_burst
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.fibre_channel_qos_rate_limit_in_mbps}, "
            f"{self.fibre_channel_qos_maximum_data_field_size_in_bytes}, "
            f"{self.fibre_channel_qos_cos}, "
            f"{self.fibre_channel_qos_burst})"
            )


def fibre_channel_qos_policy_maker(intersight_api_key_id,
                                   intersight_api_key,
                                   policy_name,
                                   fibre_channel_qos_rate_limit_in_mbps=0,
                                   fibre_channel_qos_maximum_data_field_size_in_bytes=2112,
                                   fibre_channel_qos_cos=3,
                                   fibre_channel_qos_burst=10240,
                                   policy_description="",
                                   organization="default",
                                   intersight_base_url="https://www.intersight.com/api/v1",
                                   tags=None,
                                   preconfigured_api_client=None
                                   ):
    """This is a function used to make a Fibre Channel QoS Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        fibre_channel_qos_rate_limit_in_mbps (int):
            Optional; The fibre channel QoS rate limit in Mbps. The accepted
            values are 0 - 100000. The default value is 0.
        fibre_channel_qos_maximum_data_field_size_in_bytes (int):
            Optional; The fibre channel QoS maximum data field size in
            bytes. The accepted values are 256 - 2112. The default value is
            2112.
        fibre_channel_qos_cos (int):
            Optional; The fibre channel QoS rate limit in Mbps. The accepted
            values are 0 - 6. The default value is 3.
        fibre_channel_qos_burst (int):
            Optional; The fibre channel QoS burst traffic allowed in bytes. The
            accepted values are 1 - 1000000. The default value is 10240.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Fibre Channel QoS Policy object in Intersight
    builder(FibreChannelQosPolicy(intersight_api_key_id=intersight_api_key_id,
                                  intersight_api_key=intersight_api_key,
                                  policy_name=policy_name,
                                  policy_description=policy_description,
                                  organization=organization,
                                  intersight_base_url=intersight_base_url,
                                  tags=tags,
                                  preconfigured_api_client=preconfigured_api_client,
                                  fibre_channel_qos_rate_limit_in_mbps=fibre_channel_qos_rate_limit_in_mbps,
                                  fibre_channel_qos_maximum_data_field_size_in_bytes=fibre_channel_qos_maximum_data_field_size_in_bytes,
                                  fibre_channel_qos_cos=fibre_channel_qos_cos,
                                  fibre_channel_qos_burst=fibre_channel_qos_burst
                                  ))


# Establish classes and functions to make Flow Control Policy
class FlowControlPolicy(UcsPolicy):
    """This class is used to configure a Flow Control Policy in Intersight.
    """
    object_type = "Flow Control Policy"
    intersight_api_path = "fabric/FlowControlPolicies"
    object_variable_value_maps = [
        {"VariableName": "priority",
         "Description": "Flow Control Priority Mode",
         "AttributeName": "PriorityFlowControlMode",
         "Values": [
             {"FrontEndValue": "Auto",
              "BackEndValue": "auto"
              },
             {"FrontEndValue": "On",
              "BackEndValue": "on"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 priority="Auto",
                 receive="Disabled",
                 send="Disabled"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.priority = priority
        self.receive = receive
        self.send = send
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "ReceiveDirection": self.receive,
            "SendDirection": self.send
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.priority}', "
            f"'{self.receive}', "
            f"'{self.send}')"
            )


def flow_control_policy_maker(intersight_api_key_id,
                              intersight_api_key,
                              policy_name,
                              priority="Auto",
                              receive="Disabled",
                              send="Disabled",
                              policy_description="",
                              organization="default",
                              intersight_base_url="https://www.intersight.com/api/v1",
                              tags=None,
                              preconfigured_api_client=None
                              ):
    """This is a function used to make a Flow Control Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        priority (str):
            Optional; The flow control priority mode. The accepted values are
            "Auto" and "On". The default value is "Auto".
        receive (str):
            Optional; The administrative state of link-level flow control in
            the receive direction. The accepted values are "Enabled" and
            "Disabled". The default value is "Disabled".
        send (str):
            Optional; The administrative state of link-level flow control in
            the send direction. The accepted values are "Enabled" and
            "Disabled". The default value is "Disabled".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Flow Control Policy object in Intersight
    builder(FlowControlPolicy(intersight_api_key_id=intersight_api_key_id,
                              intersight_api_key=intersight_api_key,
                              policy_name=policy_name,
                              policy_description=policy_description,
                              organization=organization,
                              intersight_base_url=intersight_base_url,
                              tags=tags,
                              preconfigured_api_client=preconfigured_api_client,
                              priority=priority,
                              receive=receive,
                              send=send
                              ))


# Establish classes and functions to make IPMI Over LAN Policy
class IpmiOverLanPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a IPMI Over LAN Policy in Intersight.
    """
    object_type = "IPMI Over LAN Policy"
    intersight_api_path = "ipmioverlan/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 enable_ipmi_over_lan=True,
                 privilege_level="admin",
                 encryption_key=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name
                         )
        self.enable_ipmi_over_lan = enable_ipmi_over_lan
        self.privilege_level = privilege_level
        self.encryption_key = encryption_key
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_ipmi_over_lan,
            "Privilege": self.privilege_level,
            "EncryptionKey": self.encryption_key
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"{self.enable_ipmi_over_lan}, "
            f"{self.privilege_level}, "
            f"'{self.encryption_key}')"
            )


def ipmi_over_lan_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_ipmi_over_lan=True,
    privilege_level="admin",
    encryption_key="",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_name=""
    ):
    """This is a function used to make a IPMI Over LAN Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_ipmi_over_lan (bool):
            Optional; The setting to enable the IPMI Over LAN service. The
            default value is True.
        privilege_level (str):
            Optional; The highest privilege level assignable to an IPMI Over
            LAN session. The accepted values are "admin", "user", and
            "read-only". The default value is "admin".
        encryption_key (str):
            Optional; The encryption key for IPMI Over LAN sessions. The
            encryption key should have an even number of hexadecimal characters
            that does not exceed 40 total characters. The default value is ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create IPMI Over LAN Policy object in Intersight
    builder(
        IpmiOverLanPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_name=ucs_server_profile_name,
            enable_ipmi_over_lan=enable_ipmi_over_lan,
            privilege_level=privilege_level,
            encryption_key=encryption_key
            ))


# Establish classes and functions to make iSCSI Adapter Policy
class IscsiAdapterPolicy(UcsPolicy):
    """This class is used to configure a iSCSI Adapter Policy in Intersight.
    """
    object_type = "iSCSI Adapter Policy"
    intersight_api_path = "vnic/IscsiAdapterPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 tcp_connection_timeout=15,
                 dhcp_timeout=60,
                 lun_busy_retry_count=15
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.tcp_connection_timeout = tcp_connection_timeout
        self.dhcp_timeout = dhcp_timeout
        self.lun_busy_retry_count = lun_busy_retry_count
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "ConnectionTimeOut": self.tcp_connection_timeout,
            "DhcpTimeout": self.dhcp_timeout,
            "LunBusyRetryCount": self.lun_busy_retry_count
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.tcp_connection_timeout}, "
            f"{self.dhcp_timeout}, "
            f"{self.lun_busy_retry_count})"
            )


def iscsi_adapter_policy_maker(intersight_api_key_id,
                               intersight_api_key,
                               policy_name,
                               tcp_connection_timeout=15,
                               dhcp_timeout=60,
                               lun_busy_retry_count=15,
                               policy_description="",
                               organization="default",
                               intersight_base_url="https://www.intersight.com/api/v1",
                               tags=None,
                               preconfigured_api_client=None
                               ):
    """This is a function used to make a iSCSI Adapter Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        tcp_connection_timeout (int):
            Optional; The maximum number of seconds to wait for a TCP
            connection to the configured iSCSI target. The accepted values
            are 0 - 255. The default value is 15.
        dhcp_timeout (int):
            Optional; The maximum number of seconds to wait for an IP address
            if using a DHCP server for IP assignment on the initiator.
            The accepted values are 60 - 300. The default value is 60.
        lun_busy_retry_count (int):
            Optional; The maximum number of attempts to retry the connection to
            the configured iSCSI LUN during discovery. The accepted values
            are 0 - 60. The default value is 15.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create iSCSI Adapter Policy object in Intersight
    builder(
        IscsiAdapterPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            tcp_connection_timeout=tcp_connection_timeout,
            dhcp_timeout=dhcp_timeout,
            lun_busy_retry_count=lun_busy_retry_count
            ))


# Establish classes and functions to make Link Aggregation Policy
class LinkAggregationPolicy(UcsPolicy):
    """This class is used to configure a Link Aggregation Policy in Intersight.
    """
    object_type = "Link Aggregation Policy"
    intersight_api_path = "fabric/LinkAggregationPolicies"
    object_variable_value_maps = [
        {"VariableName": "lacp_rate",
         "Description": "LACP Rate Mode",
         "AttributeName": "LacpRate",
         "Values": [
             {"FrontEndValue": "Normal",
              "BackEndValue": "normal"
              },
             {"FrontEndValue": "Fast",
              "BackEndValue": "fast"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 suspend_individual=False,
                 lacp_rate="Normal"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.suspend_individual = suspend_individual
        self.lacp_rate = lacp_rate
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "SuspendIndividual": self.suspend_individual
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"{self.suspend_individual}, "
            f"'{self.lacp_rate}')"
            )


def link_aggregation_policy_maker(intersight_api_key_id,
                                  intersight_api_key,
                                  policy_name,
                                  suspend_individual=False,
                                  lacp_rate="Normal",
                                  policy_description="",
                                  organization="default",
                                  intersight_base_url="https://www.intersight.com/api/v1",
                                  tags=None,
                                  preconfigured_api_client=None
                                  ):
    """This is a function used to make a Link Aggregation Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        suspend_individual (bool):
            Optional; Setting to suspend a port if Link Aggregation Control
            Protocol (LACP) Protocol Data Units (PDUs) are not received.
            The default value is False.
        lacp_rate (str):
            Optional; The Link Aggregation Control Protocol (LACP) rate mode 
            for sending Protocol Data Units (PDUs). The accepted values are
            "Normal" and "Fast". The default value is "Normal".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Link Aggregation Policy object in Intersight
    builder(LinkAggregationPolicy(intersight_api_key_id=intersight_api_key_id,
                                  intersight_api_key=intersight_api_key,
                                  policy_name=policy_name,
                                  policy_description=policy_description,
                                  organization=organization,
                                  intersight_base_url=intersight_base_url,
                                  tags=tags,
                                  preconfigured_api_client=preconfigured_api_client,
                                  suspend_individual=suspend_individual,
                                  lacp_rate=lacp_rate
                                  ))


# Establish classes and functions to make Link Control Policy
class LinkControlPolicy(UcsPolicy):
    """This class is used to configure a Link Control Policy in Intersight.
    """
    object_type = "Link Control Policy"
    intersight_api_path = "fabric/LinkControlPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 admin_state="Enabled",
                 mode="Normal"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.admin_state = admin_state
        self.mode = mode

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.admin_state}', "
            f"'{self.mode}')"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Reformat the provided Link Control Mode value to lowercase format for back-end Intersight API compatibility
        try:
            lowercase_mode = self.mode.lower()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the Link Control UDLD Mode settings.")
            print(f"The value provided was {self.mode}.")
            print("To proceed, the value provided for the Link Control UDLD "
                  "Mode settings should be updated to an accepted string "
                  "format.")
            print("The recommended values are 'Normal' or 'Aggressive' in "
                  "string format.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        # Update the API body with the Link Control Mode Settings
        self.intersight_api_body["UdldSettings"] = {
            "AdminState": self.admin_state,
            "Mode": lowercase_mode
            }
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


def link_control_policy_maker(intersight_api_key_id,
                              intersight_api_key,
                              policy_name,
                              admin_state="Enabled",
                              mode="Normal",
                              policy_description="",
                              organization="default",
                              intersight_base_url="https://www.intersight.com/api/v1",
                              tags=None,
                              preconfigured_api_client=None
                              ):
    """This is a function used to make a Link Control Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        admin_state (str):
            Optional; The administrative state of Unidirectional Link Detection
            (UDLD). The accepted values are "Enabled" and "Disabled". The
            default value is "Enabled".
        mode (str):
            Optional; The Unidirectional Link Detection (UDLD) mode. The
            accepted values are "Normal" and "Aggressive". The default value is
            "Normal".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Link Control Policy object in Intersight
    builder(LinkControlPolicy(intersight_api_key_id=intersight_api_key_id,
                              intersight_api_key=intersight_api_key,
                              policy_name=policy_name,
                              policy_description=policy_description,
                              organization=organization,
                              intersight_base_url=intersight_base_url,
                              tags=tags,
                              preconfigured_api_client=preconfigured_api_client,
                              admin_state=admin_state,
                              mode=mode
                              ))


# Establish classes and functions to make Local User Policy
class LocalUserPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Local User Policy in Intersight.
    """
    object_type = "Local User Policy"
    intersight_api_path = "iam/EndPointUserPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 enforce_strong_password=True,
                 enable_password_expiry=False,
                 password_expiry_duration=90,
                 password_expiry_notification_period=15,
                 password_expiry_grace_period=0,
                 password_history=5,
                 always_send_user_password=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name
                         )
        self.enforce_strong_password = enforce_strong_password
        self.enable_password_expiry = enable_password_expiry
        self.password_expiry_duration = password_expiry_duration
        self.password_expiry_notification_period = password_expiry_notification_period
        self.password_expiry_grace_period = password_expiry_grace_period
        self.password_history = password_history
        self.always_send_user_password = always_send_user_password
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "PasswordProperties": {
                "EnforceStrongPassword": self.enforce_strong_password,
                "EnablePasswordExpiry": self.enable_password_expiry,
                "PasswordExpiryDuration": self.password_expiry_duration,
                "NotificationPeriod": self.password_expiry_notification_period,
                "GracePeriod": self.password_expiry_grace_period,
                "PasswordHistory": self.password_history,
                "ForceSendPassword": self.always_send_user_password
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"{self.enforce_strong_password}, "
            f"{self.enable_password_expiry}, "
            f"{self.password_expiry_duration}, "
            f"{self.password_expiry_notification_period}, "
            f"{self.password_expiry_grace_period}, "
            f"{self.password_history}, "
            f"{self.always_send_user_password})"
            )


class LocalUser:
    """This class serves as a base class for configuring Local Users for
    Local User Policies in Intersight.
    """
    object_type = "Local User Account"
    intersight_api_path = "iam/EndPointUsers"
    policy_type = "Local User Policy"
    policy_intersight_api_path = "iam/EndPointUserPolicies"
    local_user_object_attribute_maps = [
        {"FrontEndName": "EndPointUser",
         "BackEndName": "Name",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Username",
         "BackEndName": "Name",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 local_users_list=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        if local_users_list is None:
            self.local_users_list = []
        else:
            self.local_users_list = local_users_list
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.local_users_list})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_local_user(self,
                                    local_user_name,
                                    body
                                    ):
        """This is a function to configure an Intersight Local User object by
        performing a POST through the Intersight API.
        Args:
            local_user_name (str):
                The name of the local user to be posted on Intersight.
            body (dict):
                The body of the object to be posted on Intersight.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the {self.object_type} "
                  f"for {local_user_name} has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                print(f"The targeted {self.object_type} for "
                      f"{local_user_name} appears to already exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{self.object_type} for {local_user_name}...")
                try:
                    existing_intersight_local_user_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                           intersight_api_key=None,
                                                                                           object_name=local_user_name,
                                                                                           intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                           object_type=self.object_type,
                                                                                           preconfigured_api_client=self.api_client
                                                                                           )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_local_user_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} for "
                          f"{local_user_name} has completed.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {self.object_type} for "
                          f"{local_user_name} could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} "
                      f"for {local_user_name} under the Intersight "
                      f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} for "
                  f"{local_user_name} under the Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _local_user_object_attribute_map_handler(self,
                                                 staged_local_user_dictionary,
                                                 local_user_object_attribute_map_dictionary
                                                 ):
        """This is a function to handle local user object attributes with a
        mismatch in the Front-End Name and Back-End Name.

        Args:
            staged_local_user_dictionary (dict):
                A local user dictionary extracted from the provided
                local_users_list being prepared and staged for posting to
                Intersight.
            local_user_object_attribute_map_dictionary (dict):
                A dictionary containing attribute data, including front-end
                (GUI) to back-end (API) mapped values.
        """
        # Establish default automatic insertion status of current attribute
        automatic_insertion_of_attribute_value_performed = False
        # Check if current attribute is mandatory
        if local_user_object_attribute_map_dictionary.get("Mandatory"):
            if not any(
                attribute_name_key in
                staged_local_user_dictionary for
                attribute_name_key in
                (local_user_object_attribute_map_dictionary["FrontEndName"],
                 local_user_object_attribute_map_dictionary["BackEndName"]
                 )
                ):
                if local_user_object_attribute_map_dictionary.get("AutomaticInsertion"):
                    staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = local_user_object_attribute_map_dictionary.get("AutomaticInsertionValue")
                    automatic_insertion_of_attribute_value_performed = True
                else:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{local_user_object_attribute_map_dictionary['Description']}.")
                    print("Please verify the following key exists in the "
                          "appropriate dictionary of the "
                          "local_users_list variable, then "
                          "re-attempt execution:\n")
                    if local_user_object_attribute_map_dictionary['FrontEndName']:
                        print(f"'{local_user_object_attribute_map_dictionary['FrontEndName']}'\n")
                    else:
                        print(f"'{local_user_object_attribute_map_dictionary['BackEndName']}'\n")
                    sys.exit(0)
        # Check for attribute front-end name key in the dictionary
        if local_user_object_attribute_map_dictionary["FrontEndName"] in staged_local_user_dictionary:
            # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
            if local_user_object_attribute_map_dictionary["BackEndName"] not in staged_local_user_dictionary:
                staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = staged_local_user_dictionary.get(local_user_object_attribute_map_dictionary["FrontEndName"])
            # Remove the front-end name key from the dictionary
            staged_local_user_dictionary.pop(local_user_object_attribute_map_dictionary["FrontEndName"])
        # Check for front-end to back-end value mapping
        if local_user_object_attribute_map_dictionary.get("FronttoBackEndValueMaps"):
            if (
                local_user_object_attribute_map_dictionary["BackEndName"] in
                staged_local_user_dictionary and
                not automatic_insertion_of_attribute_value_performed
                ):
                # Retrieve the provided attribute value
                provided_attribute_value = staged_local_user_dictionary.get(local_user_object_attribute_map_dictionary["BackEndName"])
                # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                try:
                    provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{local_user_object_attribute_map_dictionary['Description']}.")
                    print("The value provided was "
                          f"{provided_attribute_value}.")
                    print("Please verify that the value has been provided "
                          "in an accepted string format.")
                    print("Please review and resolve any error messages, "
                          "then re-attempt execution.\n")
                    sys.exit(0)
                # Create list of known and mapped front-end to back-end values
                front_to_backend_value_maps_key_list = list(local_user_object_attribute_map_dictionary["FronttoBackEndValueMaps"])
                # Replace known and reformatted front-end value with known and mapped back-end value
                if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                    provided_attribute_value_mapped = local_user_object_attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                    staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                else:
                    print("\nWARNING: An unknown "
                          f"{local_user_object_attribute_map_dictionary['Description']} "
                          f"value of '{provided_attribute_value}' has been "
                          f"provided for the {self.object_type} settings!")
                    print("An attempt will be made to configure the "
                          "unknown "
                          f"{local_user_object_attribute_map_dictionary['Description']} "
                          "value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{local_user_object_attribute_map_dictionary['Description']}, "
                          "then re-attempt execution:\n")
                    print(*local_user_object_attribute_map_dictionary["FixedFrontEndValues"],
                          sep=", "
                          )

    def object_maker(self):
        """This function makes the targeted policy object.
        """
        # Check for Local User object attributes that may need configuration
        if self.local_users_list:
            # Retrieve the Intersight Organization MOID
            policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                        intersight_api_key=None,
                                                                        object_name=self.organization,
                                                                        intersight_api_path="organization/Organizations?$top=1000",
                                                                        object_type="Organization",
                                                                        preconfigured_api_client=self.api_client
                                                                        )
            # Cycle through the Local User dictionaries in the Local Users list
            for provided_local_user_dictionary in self.local_users_list:
                staged_local_user_dictionary = copy.deepcopy(provided_local_user_dictionary)
                # Update the staged_local_user_dictionary/API body with the Intersight Organization MOID
                staged_local_user_dictionary["Organization"] = {"Moid": policy_organization_moid}
                # Handle setting of attributes which have mismatched Front-End and Back-End labeling
                for local_user_object_attribute_map_dictionary in self.local_user_object_attribute_maps:
                    self._local_user_object_attribute_map_handler(
                        staged_local_user_dictionary=staged_local_user_dictionary,
                        local_user_object_attribute_map_dictionary=local_user_object_attribute_map_dictionary
                        )
                # Remove keys not needed for creating the Local User object from the staged_local_user_dictionary/API body
                staged_local_user_dictionary.pop("Enable", None)
                staged_local_user_dictionary.pop("Enabled", None)
                staged_local_user_dictionary.pop("Role", None)
                staged_local_user_dictionary.pop("EndPointRole", None)
                staged_local_user_dictionary.pop("Password", None)
                # Create new Local User object in Intersight
                current_local_user_name = staged_local_user_dictionary.get("Name")
                self._post_intersight_local_user(
                    local_user_name=current_local_user_name,
                    body=staged_local_user_dictionary
                    )


class LocalUserRole(LocalUser):
    """This class is used to configure a Local User Role in Intersight.
    """
    object_type = "Local User Role Permission Level"
    intersight_api_path = "iam/EndPointUserRoles"
    policy_type = "Local User Policy"
    policy_intersight_api_path = "iam/EndPointUserPolicies"
    local_user_object_attribute_maps = [
        {"FrontEndName": "Enable",
         "BackEndName": "Enabled",
         "Description": "Local User Account Enablement",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": True,
         "AutomaticInsertionValue": True
         },
        {"FrontEndName": "Name",
         "BackEndName": "EndPointUser",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Username",
         "BackEndName": "EndPointUser",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Role",
         "BackEndName": "EndPointRole",
         "Description": "Local User Role Permission Level",
         "FixedFrontEndValues": [
             "admin",
             "readonly",
             "user"
             ],
         "FronttoBackEndValueMaps": {
             "admin": "admin",
             "readonly": "readonly",
             "user": "user"
             },
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 local_users_list=None,
                 policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         local_users_list
                         )
        self.policy_name = policy_name
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"{self.local_users_list}, "
            f"'{self.policy_name}')"
            )

    def _post_intersight_local_user_role(self,
                                         local_user_name,
                                         body
                                         ):
        """This is a function to configure an Intersight Local User Role object
        by performing a POST through the Intersight API.
        Args:
            local_user_name (str):
                The name of the local user to be posted on Intersight.
            body (dict):
                The body of the object to be posted on Intersight.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the {self.object_type} "
                  f"for {local_user_name} has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                print(f"The targeted {self.object_type} for "
                      f"{local_user_name} appears to already exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{self.object_type} for {local_user_name}...")
                try:
                    # Create an attribute dictionary for the advanced_intersight_object_moid_retriever function from the provided Local User Role API body
                    existing_intersight_local_user_role_attributes = {}
                    local_user_policy_moid = body["EndPointUserPolicy"]["Moid"]
                    existing_intersight_local_user_role_attributes["EndPointUserPolicy"] = {
                        "ClassId": "mo.MoRef",
                        "Moid": local_user_policy_moid,
                        "ObjectType": "iam.EndPointUserPolicy",
                        "link": f"{self.intersight_base_url}/iam/EndPointUserPolicies/{local_user_policy_moid}"
                        }
                    local_user_moid = body["EndPointUser"]["Moid"]
                    existing_intersight_local_user_role_attributes["EndPointUser"] = {
                        "ClassId": "mo.MoRef",
                        "Moid": local_user_moid,
                        "ObjectType": "iam.EndPointUser",
                        "link": f"{self.intersight_base_url}/iam/EndPointUsers/{local_user_moid}"
                        }
                    # Retrieve pre-existing Local User Role MOID
                    existing_intersight_local_user_role_moid = advanced_intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                                         intersight_api_key=None,
                                                                                                         object_attributes=existing_intersight_local_user_role_attributes,
                                                                                                         intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                                         object_type=self.object_type,
                                                                                                         organization=self.organization,
                                                                                                         preconfigured_api_client=self.api_client
                                                                                                         )                    
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_local_user_role_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} for "
                          f"{local_user_name} has completed.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {self.object_type} for "
                          f"{local_user_name} could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} "
                      f"for {local_user_name} under the Intersight "
                      f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} for "
                  f"{local_user_name} under the Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def object_maker(self):
        """This function makes the targeted policy object.
        """        
        # Check for Local User object attributes that may need configuration
        if self.local_users_list:
            # Verify a Local User Policy name has been provided
            if not self.policy_name:
                print("\nA configuration error has occurred!\n")
                print("During the configuration of the "
                      f"{self.object_type} settings for the "
                      f"{self.policy_type}, there was an issue "
                      f"accessing the value for the {self.policy_type} name.")
                print("Please verify that the value has been provided "
                      "in an accepted string format.")
                print("Please review and resolve any error messages, "
                      "then re-attempt execution.\n")
                sys.exit(0)
            # Retrieving the Local User Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=f"{self.policy_intersight_api_path}?$top=1000",
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           preconfigured_api_client=self.api_client
                                                           )            
            # Cycle through the Local User dictionaries in the Local Users list
            for provided_local_user_dictionary in self.local_users_list:
                staged_local_user_dictionary = copy.deepcopy(provided_local_user_dictionary)
                # Handle setting of attributes which have mismatched Front-End and Back-End labeling
                for local_user_object_attribute_map_dictionary in self.local_user_object_attribute_maps:
                    self._local_user_object_attribute_map_handler(
                        staged_local_user_dictionary=staged_local_user_dictionary,
                        local_user_object_attribute_map_dictionary=local_user_object_attribute_map_dictionary
                        )
                # Obtain Local User name attached to Local User Role
                current_local_user_name = staged_local_user_dictionary.get("EndPointUser")
                # Set Local User Policy MOID
                staged_local_user_dictionary["EndPointUserPolicy"] = {"Moid": policy_moid}
                # Set Local User MOID
                local_user_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                   intersight_api_key=None,
                                                                   object_name=staged_local_user_dictionary["EndPointUser"],
                                                                   intersight_api_path="iam/EndPointUsers?$top=1000",
                                                                   object_type="Local User",
                                                                   organization=self.organization,
                                                                   preconfigured_api_client=self.api_client
                                                                   )
                staged_local_user_dictionary["EndPointUser"] = {"Moid": local_user_moid}
                # Set Local User End Point Role MOID
                local_user_role_moid = advanced_intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                 intersight_api_key=None,
                                                                                 object_attributes={
                                                                                     "Name": staged_local_user_dictionary["EndPointRole"],
                                                                                     "Type": "IMC"
                                                                                     },
                                                                                 intersight_api_path="iam/EndPointRoles?$top=1000",
                                                                                 object_type="Local User End Point Role",
                                                                                 organization=self.organization,
                                                                                 preconfigured_api_client=self.api_client
                                                                                 )
                staged_local_user_dictionary["EndPointRole"] = [{"Moid": local_user_role_moid}]
                # Remove keys not needed for creating the Local User Role object from the staged_local_user_dictionary/API body
                staged_local_user_dictionary.pop("Username", None)
                staged_local_user_dictionary.pop("Name", None)
                # Create new Local User Role object in Intersight
                self._post_intersight_local_user_role(
                    local_user_name=current_local_user_name,
                    body=staged_local_user_dictionary
                    )


def local_user_policy_maker(intersight_api_key_id,
                            intersight_api_key,
                            policy_name,
                            enforce_strong_password=True,
                            enable_password_expiry=False,
                            password_expiry_duration=90,
                            password_expiry_notification_period=15,
                            password_expiry_grace_period=0,
                            password_history=5,
                            always_send_user_password=False,
                            local_users_list=None,
                            policy_description="",
                            organization="default",
                            intersight_base_url="https://www.intersight.com/api/v1",
                            tags=None,
                            preconfigured_api_client=None,
                            ucs_server_profile_name=""
                            ):
    """This is a function used to make a Local User Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enforce_strong_password (bool):
            Optional; Enforce strong passwords for local user accounts.
            The default value is True.
        enable_password_expiry (bool):
            Optional; Enable local user passwords to expire.
            The default value is False.
        password_expiry_duration (int):
            Optional; The local user password duration time in days.
            The default value is 90.
        password_expiry_notification_period (int):
            Optional; The period of time in days prior to password
            expiration in which local users will begin to be notified.
            The default value is 15.
        password_expiry_grace_period (int):
            Optional; The period of time in days that local users have to
            continue using their account after the password has expired.
            The default value is 0.
        password_history (int):
            Optional; The number of passwords kept in change history for each
            local user account. A password cannot be re-used if it is still in
            the change history log. The default value is 5.
        always_send_user_password (bool):
            Optional; Always send the local user password to the endpoint
            attached to the Local User Policy.
            The default value is False.
        local_users_list (list):
            Optional; The list of dictionary entries for each local user
            account to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "Username": "adminuser",
              "Password": "C1sco12345",
              "Role": "admin"
              },
             {"Enable": True,
              "Username": "testuser",
              "Password": "C1sco12345",
              "Role": "user"
              },
             {"Enable": True,
              "Username": "readonlyuser",
              "Password": "C1sco12345",
              "Role": "readonly"
              },
             ]
            All key settings with the exception of "Enable" are mandatory.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Local User Policy object in Intersight
    builder(
        LocalUserPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_name=ucs_server_profile_name,
            enforce_strong_password=enforce_strong_password,
            enable_password_expiry=enable_password_expiry,
            password_expiry_duration=password_expiry_duration,
            password_expiry_notification_period=password_expiry_notification_period,
            password_expiry_grace_period=password_expiry_grace_period,
            password_history=password_history,
            always_send_user_password=always_send_user_password
            ))

    # Define and create Local User object in Intersight
    builder(
        LocalUser(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            local_users_list=local_users_list
            ))

    # Define and create Local User Role object in Intersight
    builder(
        LocalUserRole(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            local_users_list=local_users_list,
            policy_name=policy_name
            ))


# Establish classes and functions to make Multicast Policy
class MulticastPolicy(UcsPolicy):
    """This class is used to configure a Multicast Policy in Intersight.
    """
    object_type = "Multicast Policy"
    intersight_api_path = "fabric/MulticastPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 snooping_state="Enabled",
                 querier_state="Disabled",
                 querier_ip_address="",
                 querier_ip_address_peer=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.snooping_state = snooping_state
        self.querier_state = querier_state
        self.querier_ip_address = querier_ip_address
        self.querier_ip_address_peer = querier_ip_address_peer
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "SnoopingState": self.snooping_state,
            "QuerierState": self.querier_state,
            "QuerierIpAddress": self.querier_ip_address,
            "QuerierIpAddressPeer": self.querier_ip_address_peer,
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.snooping_state}', "
            f"'{self.querier_state}', "
            f"'{self.querier_ip_address}', "
            f"'{self.querier_ip_address_peer}')"
            )


def multicast_policy_maker(intersight_api_key_id,
                           intersight_api_key,
                           policy_name,
                           snooping_state="Enabled",
                           querier_state="Disabled",
                           querier_ip_address="",
                           querier_ip_address_peer="",
                           policy_description="",
                           organization="default",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           tags=None,
                           preconfigured_api_client=None
                           ):
    """This is a function used to make a Multicast Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        snooping_state (str):
            Optional; The desired administrative state of the IGMP snooping for
            associated VLANs. The default value is "Enabled".
        querier_state (str):
            Optional; The desired administrative state of the IGMP querier for
            associated VLANs. The default value is "Disabled".
        querier_ip_address (str):
            Optional; If the administrative state of the IGMP querier is
            enabled, this sets the desired IGMP querier IP address. The default
            value is an empty string ("").
        querier_ip_address_peer (str):
            Optional; If the administrative state of the IGMP querier is
            enabled, this sets the desired IGMP querier IP address peer. The
            default value is an empty string ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Multicast Policy object in Intersight
    builder(MulticastPolicy(intersight_api_key_id=intersight_api_key_id,
                            intersight_api_key=intersight_api_key,
                            policy_name=policy_name,
                            policy_description=policy_description,
                            organization=organization,
                            intersight_base_url=intersight_base_url,
                            tags=tags,
                            preconfigured_api_client=preconfigured_api_client,
                            snooping_state=snooping_state,
                            querier_state=querier_state,
                            querier_ip_address=querier_ip_address,
                            querier_ip_address_peer=querier_ip_address_peer
                            ))


# Establish classes and functions to make Network Connectivity Policy
class NetworkConnectivityPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a Network Connectivity Policy in
    Intersight.
    """
    object_type = "Network Connectivity Policy"
    intersight_api_path = "networkconfig/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 preferred_ipv4_dns_server="0.0.0.0",
                 alternate_ipv4_dns_server="0.0.0.0",
                 obtain_ipv4_dns_server_from_dhcp=False,
                 enable_dynamic_dns=False,
                 dynamic_dns_update_domain="",
                 enable_ipv6=False,
                 obtain_ipv6_dns_server_from_dhcp=False,
                 preferred_ipv6_dns_server="",
                 alternate_ipv6_dns_server=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        self.preferred_ipv4_dns_server = preferred_ipv4_dns_server
        self.alternate_ipv4_dns_server = alternate_ipv4_dns_server
        self.obtain_ipv4_dns_server_from_dhcp = obtain_ipv4_dns_server_from_dhcp
        self.enable_dynamic_dns = enable_dynamic_dns
        self.dynamic_dns_update_domain = dynamic_dns_update_domain
        self.enable_ipv6 = enable_ipv6
        self.obtain_ipv6_dns_server_from_dhcp = obtain_ipv6_dns_server_from_dhcp
        self.preferred_ipv6_dns_server = preferred_ipv6_dns_server
        self.alternate_ipv6_dns_server = alternate_ipv6_dns_server
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "PreferredIpv4dnsServer": self.preferred_ipv4_dns_server,
            "AlternateIpv4dnsServer": self.alternate_ipv4_dns_server,
            "EnableIpv4dnsFromDhcp": self.obtain_ipv4_dns_server_from_dhcp,
            "EnableDynamicDns": self.enable_dynamic_dns,
            "DynamicDnsDomain": self.dynamic_dns_update_domain,
            "EnableIpv6": self.enable_ipv6,
            "EnableIpv6dnsFromDhcp": self.obtain_ipv6_dns_server_from_dhcp,
            "PreferredIpv6dnsServer": self.preferred_ipv6_dns_server,
            "AlternateIpv6dnsServer": self.alternate_ipv6_dns_server
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.preferred_ipv4_dns_server}', "
            f"'{self.alternate_ipv4_dns_server}', "
            f"{self.obtain_ipv4_dns_server_from_dhcp}, "
            f"{self.enable_dynamic_dns}, "
            f"'{self.dynamic_dns_update_domain}', "
            f"{self.enable_ipv6}, "
            f"{self.obtain_ipv6_dns_server_from_dhcp}, "
            f"'{self.preferred_ipv6_dns_server}', "
            f"'{self.alternate_ipv6_dns_server}')"
            )


def network_connectivity_policy_maker(intersight_api_key_id,
                                      intersight_api_key,
                                      policy_name,
                                      preferred_ipv4_dns_server="0.0.0.0",
                                      alternate_ipv4_dns_server="0.0.0.0",
                                      obtain_ipv4_dns_server_from_dhcp=False,
                                      enable_dynamic_dns=False,
                                      dynamic_dns_update_domain="",
                                      enable_ipv6=False,
                                      obtain_ipv6_dns_server_from_dhcp=False,
                                      preferred_ipv6_dns_server="",
                                      alternate_ipv6_dns_server="",
                                      policy_description="",
                                      organization="default",
                                      intersight_base_url="https://www.intersight.com/api/v1",
                                      tags=None,
                                      preconfigured_api_client=None,
                                      ucs_domain_profile_name=""
                                      ):
    """This is a function used to make a Network Connectivity Policy on Cisco
    Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        preferred_ipv4_dns_server (str):
            Optional; The preferred IPv4 DNS server. The default value is
            "0.0.0.0".
        alternate_ipv4_dns_server (str):
            Optional; The alternate IPv4 DNS server. The default value is
            "0.0.0.0".
        obtain_ipv4_dns_server_from_dhcp (bool):
            Optional; A setting to enable obtaining the IPv4 DNS server from
            DHCP. The default value is False.
        enable_dynamic_dns (bool):
            Optional; A setting to enable dynamic DNS. The default value is
            False.
        dynamic_dns_update_domain (str):
            Optional; The dynamic DNS update domain if dynamic DNS is enabled.
            The default value is an empty string ("").
        enable_ipv6 (bool):
            Optional; The administrative state of the IPv6 DNS settings. The
            default value is False.
        obtain_ipv6_dns_server_from_dhcp (bool):
            Optional; A setting to enable obtaining the IPv6 DNS server from
            DHCP. The default value is False.
        preferred_ipv6_dns_server (str):
            Optional; The preferred IPv6 DNS server. The default value is an 
            empty string ("").
        alternate_ipv6_dns_server (str):
            Optional; The alternate IPv6 DNS server. The default value is an 
            empty string ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Network Connectivity Policy object in Intersight
    builder(NetworkConnectivityPolicy(intersight_api_key_id=intersight_api_key_id,
                                      intersight_api_key=intersight_api_key,
                                      policy_name=policy_name,
                                      policy_description=policy_description,
                                      organization=organization,
                                      intersight_base_url=intersight_base_url,
                                      tags=tags,
                                      preconfigured_api_client=preconfigured_api_client,
                                      ucs_domain_profile_name=ucs_domain_profile_name,
                                      preferred_ipv4_dns_server=preferred_ipv4_dns_server,
                                      alternate_ipv4_dns_server=alternate_ipv4_dns_server,
                                      obtain_ipv4_dns_server_from_dhcp=obtain_ipv4_dns_server_from_dhcp,
                                      enable_dynamic_dns=enable_dynamic_dns,
                                      dynamic_dns_update_domain=dynamic_dns_update_domain,
                                      enable_ipv6=enable_ipv6,
                                      obtain_ipv6_dns_server_from_dhcp=obtain_ipv6_dns_server_from_dhcp,
                                      preferred_ipv6_dns_server=preferred_ipv6_dns_server,
                                      alternate_ipv6_dns_server=alternate_ipv6_dns_server
                                      ))


# Establish classes and functions to make NTP Policy
class NtpPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a NTP Policy in Intersight.
    """
    object_type = "NTP Policy"
    intersight_api_path = "ntp/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 ntp_servers=None,
                 timezone="Etc/GMT",
                 enable_ntp=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        if ntp_servers is None:
            self.ntp_servers = []
        else:
            self.ntp_servers = ntp_servers
        self.timezone = timezone
        self.enable_ntp = enable_ntp
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "NtpServers": self.ntp_servers,
            "Timezone": self.timezone,
            "Enabled": self.enable_ntp
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"{self.ntp_servers}, "
            f"'{self.timezone}', "
            f"{self.enable_ntp})"
            )


def ntp_policy_maker(intersight_api_key_id,
                     intersight_api_key,
                     policy_name,
                     ntp_servers=None,
                     timezone="Etc/GMT",
                     enable_ntp=True,
                     policy_description="",
                     organization="default",
                     intersight_base_url="https://www.intersight.com/api/v1",
                     tags=None,
                     preconfigured_api_client=None,
                     ucs_domain_profile_name=""
                     ):
    """This is a function used to make a NTP Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        ntp_servers (list):
            Optional; A list of unauthenticated NTP server IP addresses or
            hostnames to be configured in the NTP Policy. An example entry is: 
            ["198.18.128.1",].
            More than one NTP server IP address or hostname can be provided in
            the list. Each NTP server IP address or hostname in the list must
            be in string format. The default value is None.
        timezone (str):
            Optional; The desired time zone. The default value is "Etc/GMT".
        enable_ntp (bool):
            Optional; The administrative state of the NTP service. The default
            value is True.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create NTP Policy object in Intersight
    builder(NtpPolicy(intersight_api_key_id=intersight_api_key_id,
                      intersight_api_key=intersight_api_key,
                      policy_name=policy_name,
                      policy_description=policy_description,
                      organization=organization,
                      intersight_base_url=intersight_base_url,
                      tags=tags,
                      preconfigured_api_client=preconfigured_api_client,
                      ucs_domain_profile_name=ucs_domain_profile_name,
                      ntp_servers=ntp_servers,
                      timezone=timezone,
                      enable_ntp=enable_ntp
                      ))


# Establish classes and functions to make Power Policy
class PowerPolicy(DirectlyAttachedUcsServerAndChassisPolicy):
    """This class is used to configure a Power Policy in Intersight.
    """
    object_type = "Power Policy"
    intersight_api_path = "power/Policies"
    object_variable_value_maps = [
        {"VariableName": "power_profiling",
         "Description": "Power Profiling Mode",
         "AttributeName": "PowerProfiling",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "power_priority",
         "Description": "Power Priority Mode",
         "AttributeName": "PowerPriority",
         "Values": [
             {"FrontEndValue": "Low",
              "BackEndValue": "Low"
              },
             {"FrontEndValue": "Medium",
              "BackEndValue": "Medium"
              },
             {"FrontEndValue": "High",
              "BackEndValue": "High"
              }
             ]
         },
        {"VariableName": "power_restore",
         "Description": "Power Restore State Mode",
         "AttributeName": "PowerRestoreState",
         "Values": [
             {"FrontEndValue": "Always Off",
              "BackEndValue": "AlwaysOff"
              },
             {"FrontEndValue": "Always On",
              "BackEndValue": "AlwaysOn"
              },
             {"FrontEndValue": "Last State",
              "BackEndValue": "LastState"
              }
             ]
         },
        {"VariableName": "power_redundancy",
         "Description": "Power Redundancy Mode",
         "AttributeName": "RedundancyMode",
         "Values": [
             {"FrontEndValue": "Grid",
              "BackEndValue": "Grid"
              },
             {"FrontEndValue": "Not Redundant",
              "BackEndValue": "NotRedundant"
              },
             {"FrontEndValue": "N+1",
              "BackEndValue": "N+1"
              },
             {"FrontEndValue": "N+2",
              "BackEndValue": "N+2"
              }
             ]
         },
        {"VariableName": "power_save_mode",
         "Description": "Power Save Mode",
         "AttributeName": "PowerSaveMode",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "dynamic_power_rebalancing",
         "Description": "Dynamic Power Rebalancing Mode",
         "AttributeName": "DynamicRebalancing",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        {"VariableName": "extended_power_capacity",
         "Description": "Extended Power Capacity Mode",
         "AttributeName": "ExtendedPowerCapacity",
         "Values": [
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enabled"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disabled"
              }
             ]
         },
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 ucs_chassis_profile_name="",
                 power_profiling="Enabled",
                 power_priority="Low",
                 power_restore="Always Off",
                 power_redundancy="Grid",
                 power_save_mode="Enabled",
                 dynamic_power_rebalancing="Enabled",
                 extended_power_capacity="Enabled",                 
                 power_allocation_in_watts=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name,
                         ucs_chassis_profile_name
                         )
        self.power_profiling = power_profiling
        self.power_priority = power_priority
        self.power_restore = power_restore
        self.power_redundancy = power_redundancy
        self.power_save_mode = power_save_mode
        self.dynamic_power_rebalancing = dynamic_power_rebalancing
        self.extended_power_capacity = extended_power_capacity
        self.power_allocation_in_watts = power_allocation_in_watts
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "AllocatedBudget": self.power_allocation_in_watts
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"'{self.ucs_chassis_profile_name}', "
            f"'{self.power_profiling}', "
            f"'{self.power_priority}', "
            f"'{self.power_restore}', "
            f"'{self.power_redundancy}', "
            f"'{self.power_save_mode}', "
            f"'{self.dynamic_power_rebalancing}', "
            f"'{self.extended_power_capacity}', "
            f"{self.power_allocation_in_watts})"
            )


def power_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    power_profiling="Enabled",
    power_priority="Low",
    power_restore="Always Off",
    power_redundancy="Grid",
    power_save_mode="Enabled",
    dynamic_power_rebalancing="Enabled",
    extended_power_capacity="Enabled",
    power_allocation_in_watts=True,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_name="",
    ucs_chassis_profile_name=""
    ):
    """This is a function used to make a Power Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        power_profiling (str):
            Optional; Sets server power profiling. This setting is only
            supported on UCS X-Series servers. The default value is "Enabled".
        power_priority (str):
            Optional; Sets server power priority. This setting is only
            supported on UCS X-Series servers. The default value is "Low".
        power_restore (str):
            Optional; Sets the state of the server upon the restoration of
            power after power loss. This setting is only supported on UCS
            X-Series servers. The default value is "Always Off".
        power_redundancy (str):
            Optional; Sets chassis power redundancy mode. This setting is only
            supported on UCS X-Series chassis. The default value is "Grid".
        power_save_mode (str):
            Optional; Sets the chassis power save mode. This setting is only
            supported on UCS X-Series chassis. The default value is "Enabled".
        dynamic_power_rebalancing (str):
            Optional; Sets the chassis dynamic power rebalancing mode. This
            setting is only supported on UCS X-Series chassis. The default
            value is "Enabled".
        extended_power_capacity (str):
            Optional; Sets the extended power capacity mode of the chassis.
            This setting is only supported on UCS X-Series chassis. The default
            value is "Enabled".
        power_allocation_in_watts (int):
            Optional; Sets the power allocated to the chassis in watts. This
            setting is only supported on UCS X-Series chassis. The accepted
            values are 0 - 65535. The default value is 0.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
        ucs_chassis_profile_name (str):
            Optional; The UCS Chassis Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Power Policy object in Intersight
    builder(
        PowerPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_name=ucs_server_profile_name,
            ucs_chassis_profile_name=ucs_chassis_profile_name,
            power_profiling=power_profiling,
            power_priority=power_priority,
            power_restore=power_restore,
            power_redundancy=power_redundancy,
            power_save_mode=power_save_mode,
            dynamic_power_rebalancing=dynamic_power_rebalancing,
            extended_power_capacity=extended_power_capacity,
            power_allocation_in_watts=power_allocation_in_watts
            ))


# Establish classes and functions to make Serial Over LAN Policy
class SerialOverLanPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Serial Over LAN Policy in Intersight.
    """
    object_type = "Serial Over LAN Policy"
    intersight_api_path = "sol/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 enable_serial_over_lan=True,
                 com_port="com0",
                 baud_rate=9600,
                 ssh_port=2400
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name
                         )
        self.enable_serial_over_lan = enable_serial_over_lan
        self.com_port = com_port
        self.baud_rate = baud_rate
        self.ssh_port = ssh_port
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_serial_over_lan,
            "ComPort": self.com_port,
            "BaudRate": self.baud_rate,
            "SshPort": self.ssh_port
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"{self.enable_serial_over_lan}, "
            f"{self.com_port}, "
            f"{self.baud_rate}, "
            f"{self.ssh_port})"
            )


def serial_over_lan_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_serial_over_lan=True,
    com_port="com0",
    baud_rate=9600,
    ssh_port=2400,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_name=""
    ):
    """This is a function used to make a Serial Over LAN Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_serial_over_lan (bool):
            Optional; The setting to enable the Serial Over LAN service. The
            default value is True.
        com_port (str):
            Optional; The serial port used for Serial Over LAN sessions. The
            accepted values are "com0" or "com1". The default value is "com0".
        baud_rate (int):
            Optional; The baud rate used for Serial Over LAN sessions. The
            accepted values are 9600, 19200, 38400, 57600, or 115200. The
            default value is 9600.
        ssh_port (int):
            Optional; The SSH port used for Serial Over LAN sessions. The
            accepted values are 1024 - 65535. The default value is 2400.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Serial Over LAN Policy object in Intersight
    builder(
        SerialOverLanPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_name=ucs_server_profile_name,
            enable_serial_over_lan=enable_serial_over_lan,
            com_port=com_port,
            baud_rate=baud_rate,
            ssh_port=ssh_port
            ))


# Establish classes and functions to make SNMP Policy
class SnmpPolicy(DirectlyAttachedUcsServerChassisAndDomainPolicy):
    """This class is used to configure a SNMP Policy in Intersight.
    """
    object_type = "SNMP Policy"
    intersight_api_path = "snmp/Policies"
    subobject_types = [
        {"SubobjectType": "snmp.User",
         "SubobjectList": "snmp_users_list",
         "AttributeName": "SnmpUsers",
         "Description": "SNMP User",
         },
        {"SubobjectType": "snmp.Trap",
         "SubobjectList": "snmp_trap_destinations_list",
         "AttributeName": "SnmpTraps",
         "Description": "SNMP Trap Destination",
         }
        ]
    subobject_attribute_maps = {
        "snmp.User": [
            {"FrontEndName": None,
             "BackEndName": "Name",
             "Description": "User Name",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Security Level",
             "BackEndName": "SecurityLevel",
             "Description": "Security Level",
             "FixedFrontEndValues": [
                 "AuthPriv",
                 "NoAuthNoPriv",
                 "AuthNoPriv"
                 ],
             "FronttoBackEndValueMaps": {
                 "authpriv": "AuthPriv",
                 "noauthnopriv": "NoAuthNoPriv",
                 "authnopriv": "AuthNoPriv"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Auth Type",
             "BackEndName": "AuthType",
             "Description": "Authentication Type",
             "FixedFrontEndValues": [
                 "NA",
                 "MD5",
                 "SHA",
                 "SHA-224",
                 "SHA-256",
                 "SHA-384",
                 "SHA-512"
                 ],
             "FronttoBackEndValueMaps": {
                 "na": "NA",
                 "md5": "MD5",
                 "sha": "SHA",
                 "sha-224": "SHA-224",
                 "sha-256": "SHA-256",
                 "sha-384": "SHA-384",
                 "sha-512": "SHA-512"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Auth Password",
             "BackEndName": "AuthPassword",
             "Description": "Authentication Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Privacy Type",
             "BackEndName": "PrivacyType",
             "Description": "Privacy Type",
             "FixedFrontEndValues": [
                 "NA",
                 "DES",
                 "AES"
                 ],
             "FronttoBackEndValueMaps": {
                 "na": "NA",
                 "des": "DES",
                 "aes": "AES"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Privacy Password",
             "BackEndName": "PrivacyPassword",
             "Description": "Privacy Password",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ],
        "snmp.Trap": [
            {"FrontEndName": "Enable",
             "BackEndName": "Enabled",
             "Description": "SNMP Trap Destination Enablement",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "SNMP Version",
             "BackEndName": "Version",
             "Description": "SNMP Version",
             "FixedFrontEndValues": [
                 "V3",
                 "V2"
                 ],
             "FronttoBackEndValueMaps": {
                 "v3": "V3",
                 "v2": "V2"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "User",
             "Description": "SNMP v3 Trap User",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Community String",
             "BackEndName": "Community",
             "Description": "SNMP v2c Community String",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Trap Type",
             "BackEndName": "Type",
             "Description": "Trap Type",
             "FixedFrontEndValues": [
                 "Trap",
                 "Inform"
                 ],
             "FronttoBackEndValueMaps": {
                 "trap": "Trap",
                 "inform": "Inform"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Destination Address",
             "BackEndName": "Destination",
             "Description": "SNMP Trap Destination Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Port",
             "Description": "Port",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 ucs_chassis_profile_name="",
                 ucs_domain_profile_name="",
                 enable_snmp=True,
                 snmp_v2c_features=True,
                 snmp_v3_features=True,
                 snmp_port=161,
                 system_contact="Administrator",
                 system_location="N/A",
                 access_community_string="N/A",
                 snmp_community_access="Disabled",
                 trap_community_string="N/A",
                 snmp_engine_input_id="N/A",
                 snmp_users_list=None,
                 snmp_trap_destinations_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name,
                         ucs_chassis_profile_name,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        self.enable_snmp = enable_snmp
        self.snmp_v2c_features = snmp_v2c_features
        self.snmp_v3_features = snmp_v3_features
        self.snmp_port = snmp_port
        self.system_contact = system_contact
        self.system_location = system_location
        self.access_community_string = access_community_string
        self.snmp_community_access = snmp_community_access
        self.trap_community_string = trap_community_string
        self.snmp_engine_input_id = snmp_engine_input_id
        if snmp_users_list is None:
            self.snmp_users_list = []
        else:
            self.snmp_users_list = snmp_users_list
        if snmp_trap_destinations_list is None:
            self.snmp_trap_destinations_list = []
        else:
            self.snmp_trap_destinations_list = snmp_trap_destinations_list
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_snmp,
            "V2Enabled": self.snmp_v2c_features,
            "V3Enabled": self.snmp_v3_features,
            "SnmpPort": self.snmp_port,
            "SysContact": self.system_contact,
            "SysLocation": self.system_location,
            "AccessCommunityString": self.access_community_string,
            "CommunityAccess": self.snmp_community_access,
            "TrapCommunity": self.trap_community_string,
            "EngineId": self.snmp_engine_input_id
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"'{self.ucs_chassis_profile_name}', "
            f"'{self.ucs_domain_profile_name}', "
            f"{self.enable_snmp}, "
            f"{self.snmp_v2c_features}, "
            f"{self.snmp_v3_features}, "
            f"{self.snmp_port}, "
            f"'{self.system_contact}', "
            f"'{self.system_location}', "
            f"'{self.access_community_string}', "
            f"'{self.snmp_community_access}', "
            f"'{self.trap_community_string}', "
            f"'{self.snmp_engine_input_id}', "
            f"{self.snmp_users_list}, "
            f"{self.snmp_trap_destinations_list})"
            )


def snmp_policy_maker(intersight_api_key_id,
                      intersight_api_key,
                      policy_name,
                      enable_snmp=True,
                      snmp_v2c_features=True,
                      snmp_v3_features=True,
                      snmp_port=161,
                      system_contact="Administrator",
                      system_location="N/A",
                      access_community_string="N/A",
                      snmp_community_access="Disabled",
                      trap_community_string="N/A",
                      snmp_engine_input_id="N/A",
                      snmp_users_list=None,
                      snmp_trap_destinations_list=None,
                      policy_description="",
                      organization="default",
                      intersight_base_url="https://www.intersight.com/api/v1",
                      tags=None,
                      preconfigured_api_client=None,
                      ucs_server_profile_name="",
                      ucs_chassis_profile_name="",
                      ucs_domain_profile_name=""
                      ):
    """This is a function used to make a SNMP Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_snmp (bool):
            Optional; Enablement of the SNMP Policy on the attached endpoint.
            The default value is True.
        snmp_v2c_features (bool):
            Optional; Enablement of SNMP version 2c features in the SNMP
            Policy. The default value is True.
        snmp_v3_features (bool):
            Optional; Enablement of SNMP version 3 features in the SNMP
            Policy. The default value is True.
        snmp_port (int):
            Optional; The SNMP agent port. The default value is 161.
        system_contact (str):
            Optional; The contact for the system running the SNMP agent. The
            default value is "Administrator".
        system_location (str):
            Optional; The location of the system running the SNMP agent. The
            default value is "N/A".
        access_community_string (str):
            Optional; The access community string for the system running the
            SNMP agent. The default value is "N/A".
        snmp_community_access (str):
            Optional; The SNMP community access level for the system running
            the SNMP agent. The default value is "Disabled".
        trap_community_string (str):
            Optional; The trap community string for the system running the
            SNMP agent. The default value is "N/A".
        snmp_engine_input_id (str):
            Optional; The SNMP engine input ID for the system running the SNMP
            agent. The default value is "N/A".
        snmp_users_list (list):
            Optional; The list of dictionary entries for each SNMP user to be
            configured. The default value is None. An example entry is:
            [{"Name": "demouser",
              "Security Level": "AuthPriv",
              "Auth Type": "SHA",
              "Auth Password": "C1sco12345",
              "Privacy Type": "AES",
              "Privacy Password": "C1sco12345"
              },
             ]
            A "Name" key with a string value must be configured in each
            dictionary of the list to specify the SNMP user's name. The key
            "Auth Password" is mandatory and specifies the authentication
            password. The key "Privacy Password" is mandatory and specifies the
            privacy password. Optional key settings include "Security Level",
            "Auth Type", and "Privacy Type".
        snmp_trap_destinations_list (list):
            Optional; The list of dictionary entries for each SNMP trap
            destination to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "SNMP Version": "V3",
              "User": "demouser",
              "Trap Type": "Inform",
              "Destination Address": "192.168.0.101",
              "Port": 162
              },
             {"Enable": True,
              "SNMP Version": "V2",
              "Community String": "demo_trap_string",
              "Trap Type": "Trap",
              "Destination Address": "192.168.0.102",
              "Port": 162
              },
             ]
            For SNMP version 3, a "User" key with a string value must be
            configured in the associated dictionary of the list to specify the
            SNMP trap destination's user name. For SNMP version 2c, a
            "Community String" key with a string value must be configured in
            the associated dictionary of the list to specify the SNMP trap
            destination community string. The key "Destination Address" is
            mandatory and specifies the SNMP trap destination address. Optional
            key settings include "Enable", "SNMP Version", "Trap Type", and
            "Port".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
        ucs_chassis_profile_name (str):
            Optional; The UCS Chassis Profile the policy should be attached to.
            The default value is an empty string ("").
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create SNMP Policy object in Intersight
    builder(
        SnmpPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_name=ucs_server_profile_name,
            ucs_chassis_profile_name=ucs_chassis_profile_name,
            ucs_domain_profile_name=ucs_domain_profile_name,
            enable_snmp=enable_snmp,
            snmp_v2c_features=snmp_v2c_features,
            snmp_v3_features=snmp_v3_features,
            snmp_port=snmp_port,
            system_contact=system_contact,
            system_location=system_location,
            access_community_string=access_community_string,
            snmp_community_access=snmp_community_access,
            trap_community_string=trap_community_string,
            snmp_engine_input_id=snmp_engine_input_id,
            snmp_users_list=snmp_users_list,
            snmp_trap_destinations_list=snmp_trap_destinations_list
            ))


# Establish classes and functions to make Switch Control Policy
class SwitchControlPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a Switch Control Policy in Intersight.
    """
    object_type = "Switch Control Policy"
    intersight_api_path = "fabric/SwitchControlPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 enable_vlan_port_count_optimization=False,
                 mac_address_table_aging_time_option="Default",
                 mac_address_table_aging_time_custom_value_in_seconds=14500,
                 link_control_message_interval_in_seconds=15,
                 link_control_recovery_action="None"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        self.enable_vlan_port_count_optimization = enable_vlan_port_count_optimization
        self.mac_address_table_aging_time_option = mac_address_table_aging_time_option
        self.mac_address_table_aging_time_custom_value_in_seconds = mac_address_table_aging_time_custom_value_in_seconds
        self.link_control_message_interval_in_seconds = link_control_message_interval_in_seconds
        self.link_control_recovery_action = link_control_recovery_action
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "VlanPortOptimizationEnabled": self.enable_vlan_port_count_optimization,
            "MacAgingSettings": {
                "MacAgingOption": self.mac_address_table_aging_time_option,
                "MacAgingTime": self.mac_address_table_aging_time_custom_value_in_seconds
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.enable_vlan_port_count_optimization}', "
            f"'{self.mac_address_table_aging_time_option}', "
            f"{self.mac_address_table_aging_time_custom_value_in_seconds}, "
            f"{self.link_control_message_interval_in_seconds}, "
            f"'{self.link_control_recovery_action}')"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Reformat the provided Link Control Recovery Action value to lowercase format for back-end Intersight API compatibility
        try:
            lowercase_link_control_recovery_action = self.link_control_recovery_action.lower()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the Link Control Recovery Action settings.")
            print("The value provided was "
                  f"{self.link_control_recovery_action}.")
            print("To proceed, the value provided for the Link Control "
                  "Recovery Action settings should be updated to an accepted "
                  "string format.")
            print("The recommended values are 'None' or 'Reset' in string "
                  "format.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        # Update the API body with the Switch Control Unidirectional Link Detection (UDLD) Settings
        self.intersight_api_body["UdldSettings"] = {
            "MessageInterval": self.link_control_message_interval_in_seconds,
            "RecoveryAction": lowercase_link_control_recovery_action
            }
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with a UCS Domain Profile attached, if specified
        self._attach_ucs_domain_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


def switch_control_policy_maker(intersight_api_key_id,
                                intersight_api_key,
                                policy_name,
                                enable_vlan_port_count_optimization=False,
                                mac_address_table_aging_time_option="Default",
                                mac_address_table_aging_time_custom_value_in_seconds=14500,
                                link_control_message_interval_in_seconds=15,
                                link_control_recovery_action="None",
                                policy_description="",
                                organization="default",
                                intersight_base_url="https://www.intersight.com/api/v1",
                                tags=None,
                                preconfigured_api_client=None,
                                ucs_domain_profile_name=""
                                ):
    """This is a function used to make a Switch Control Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_vlan_port_count_optimization (bool):
            Optional; A setting to enable VLAN port optimization. The default
            value is False.
        mac_address_table_aging_time_option (str):
            Optional; A setting to determine the MAC address table aging time
            in seconds. The accepted values are "Default", which sets the
            default time of 14500 seconds, "Custom", which allows a custom time
            in seconds to be set using the
            'mac_address_table_aging_time_custom_value_in_seconds' argument or 
            "Never", which disables the MAC address table aging time. The
            default value is "Default"
        mac_address_table_aging_time_custom_value_in_seconds (int):
            Optional; The custom MAC address table aging time in seconds. This
            setting is only valid if the 'mac_address_table_aging_time_option'
            argument has been set to "Custom". The accepted range of values are 
            1 - 1000000 seconds. The default value is 14500.
        link_control_message_interval_in_seconds (int):
            Optional; Configures the time between Link Control probe messages
            on ports that are in advertisement mode and are currently
            determined to be bidirectional. The accepted range of values are
            7 - 90 seconds. The default value is 15.
        link_control_recovery_action (str):
            Optional; Configures the Link Control recovery action. When
            enabled, Link Control recovery attempts to bring a Link Control
            error-disabled port out of reset. The accepted values are "None" or
            "Reset". The default value is "None".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Switch Control Policy object in Intersight
    builder(SwitchControlPolicy(intersight_api_key_id=intersight_api_key_id,
                                intersight_api_key=intersight_api_key,
                                policy_name=policy_name,
                                policy_description=policy_description,
                                organization=organization,
                                intersight_base_url=intersight_base_url,
                                tags=tags,
                                preconfigured_api_client=preconfigured_api_client,
                                ucs_domain_profile_name=ucs_domain_profile_name,
                                enable_vlan_port_count_optimization=enable_vlan_port_count_optimization,
                                mac_address_table_aging_time_option=mac_address_table_aging_time_option,
                                mac_address_table_aging_time_custom_value_in_seconds=mac_address_table_aging_time_custom_value_in_seconds,
                                link_control_message_interval_in_seconds=link_control_message_interval_in_seconds,
                                link_control_recovery_action=link_control_recovery_action
                                ))


# Establish classes and functions to make Syslog Policy
class SyslogPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a Syslog Policy in Intersight.
    """
    object_type = "Syslog Policy"
    intersight_api_path = "syslog/Policies"
    subobject_types = [
        {"SubobjectType": "syslog.RemoteLoggingClient",
         "SubobjectList": "syslog_remote_logging_server_list",
         "AttributeName": "RemoteClients",
         "Description": "Remote Logging Syslog Server"
         }
        ]
    subobject_attribute_maps = {
        "syslog.RemoteLoggingClient": [
            {"FrontEndName": "Enable",
             "BackEndName": "Enabled",
             "Description": "Remote Logging Syslog Server Enablement",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Hostname/IP Address",
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "IP Address",
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Hostname",
             "Description": "Hostname/IP Address",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": True,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Port",
             "Description": "Port",
             "FixedFrontEndValues": None,
             "FronttoBackEndValueMaps": None,
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": None,
             "BackEndName": "Protocol",
             "Description": "Protocol",
             "FixedFrontEndValues": [
                 "UDP",
                 "TCP"
                 ],
             "FronttoBackEndValueMaps": {
                 "udp": "udp",
                 "tcp": "tcp"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Minimum Severity To Report",
             "BackEndName": "MinSeverity",
             "Description": "Minimum Severity To Report",
             "FixedFrontEndValues": [
                 "warning",
                 "emergency",
                 "alert",
                 "critical",
                 "error",
                 "notice",
                 "informational",
                 "debug"
                 ],
             "FronttoBackEndValueMaps": {
                 "warning": "warning",
                 "emergency": "emergency",
                 "alert": "alert",
                 "critical": "critical",
                 "error": "error",
                 "notice": "notice",
                 "informational": "informational",
                 "debug": "debug"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             },
            {"FrontEndName": "Minimum Severity",
             "BackEndName": "MinSeverity",
             "Description": "Minimum Severity To Report",
             "FixedFrontEndValues": [
                 "warning",
                 "emergency",
                 "alert",
                 "critical",
                 "error",
                 "notice",
                 "informational",
                 "debug"
                 ],
             "FronttoBackEndValueMaps": {
                 "warning": "warning",
                 "emergency": "emergency",
                 "alert": "alert",
                 "critical": "critical",
                 "error": "error",
                 "notice": "notice",
                 "informational": "informational",
                 "debug": "debug"
                 },
             "Mandatory": False,
             "AutomaticInsertion": False,
             "AutomaticInsertionValue": None
             }
            ]
        }

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 syslog_local_logging_minimum_severity_to_report="warning",
                 syslog_remote_logging_server_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        self.syslog_local_logging_minimum_severity_to_report = syslog_local_logging_minimum_severity_to_report
        if syslog_remote_logging_server_list is None:
            self.syslog_remote_logging_server_list = []
        else:
            self.syslog_remote_logging_server_list = syslog_remote_logging_server_list
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "LocalClients": [
                {"MinSeverity": self.syslog_local_logging_minimum_severity_to_report,
                 "ClassId": "syslog.LocalFileLoggingClient",
                 "ObjectType": "syslog.LocalFileLoggingClient"
                 }
                ]
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.fabric_interconnect_model}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.syslog_local_logging_minimum_severity_to_report}', "
            f"{self.syslog_remote_logging_server_list})"
            )


def syslog_policy_maker(intersight_api_key_id,
                        intersight_api_key,
                        policy_name,
                        syslog_local_logging_minimum_severity_to_report="warning",
                        syslog_remote_logging_server_list=None,
                        policy_description="",
                        organization="default",
                        intersight_base_url="https://www.intersight.com/api/v1",
                        tags=None,
                        preconfigured_api_client=None,
                        ucs_domain_profile_name=""
                        ):
    """This is a function used to make a Syslog Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        syslog_local_logging_minimum_severity_to_report (str):
            Optional; The lowest level of Syslog messages to be included in the
            local log. The default value is "warning". Other values include
            "emergency", "alert", "critical", "error", "notice",
            "informational", and "debug"
        syslog_remote_logging_server_list (list):
            Optional; The list of dictionary entries for each Syslog remote
            logging server to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "Hostname/IP Address": "192.168.0.201",
              "Port": 514,
              "Protocol": "TCP",
              "Minimum Severity To Report": "alert"
              },
             {"Enable": False,
              "Hostname/IP Address": "0.0.0.0",
              "Port": 514,
              "Protocol": "UDP",
              "Minimum Severity To Report": "warning"
              },
             ]
            A "Hostname/IP Address" key with a string value must be configured
            in each dictionary of the list to specify the remote logging Syslog
            server. Optional key settings include "Enable", "Port", "Protocol,
            and "Minimum Severity To Report".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Syslog Policy object in Intersight
    builder(SyslogPolicy(intersight_api_key_id=intersight_api_key_id,
                         intersight_api_key=intersight_api_key,
                         policy_name=policy_name,
                         policy_description=policy_description,
                         organization=organization,
                         intersight_base_url=intersight_base_url,
                         tags=tags,
                         preconfigured_api_client=preconfigured_api_client,
                         ucs_domain_profile_name=ucs_domain_profile_name,
                         syslog_local_logging_minimum_severity_to_report=syslog_local_logging_minimum_severity_to_report,
                         syslog_remote_logging_server_list=syslog_remote_logging_server_list
                         ))


# Establish classes and functions to make System QoS Policy
class SystemQosPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a System QoS Policy in Intersight.
    """
    object_type = "System QoS Policy"
    intersight_api_path = "fabric/SystemQosPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 qos_class_settings_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect="AB"
                         )
        if qos_class_settings_list is None:
            self.qos_class_settings_list = []
        else:
            self.qos_class_settings_list = qos_class_settings_list

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"{self.qos_class_settings_list})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with a UCS Domain Profile attached, if specified
        self._attach_ucs_domain_profile()
        # POST the API body to Intersight
        self._post_intersight_object()
        # Update the API body with the QoS Class Settings (NOTE - As of 7/27/21, QoS Class Settings cannot be set until after a base System QoS Policy is created)
        if self.qos_class_settings_list:
            print("Updating the QoS classes of the System QoS Policy...")
            self.intersight_api_body["Classes"] = self.qos_class_settings_list
        # POST the API body to Intersight
        self._post_intersight_object()


def system_qos_policy_maker(intersight_api_key_id,
                            intersight_api_key,
                            policy_name,
                            qos_class_settings_list=None,
                            policy_description="",
                            organization="default",
                            intersight_base_url="https://www.intersight.com/api/v1",
                            tags=None,
                            preconfigured_api_client=None,
                            ucs_domain_profile_name=""
                            ):
    """This is a function used to make a System QoS Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        qos_class_settings_list (list):
            A list of dictionaries for QoS classes to be configured in
            the System QoS Policy. An example entry is:
            [{"Name": "Best Effort",
              "AdminState": "Enabled",
              "Cos": 255,
              "Weight": 5,
              "PacketDrop": True,
              "Mtu": 1500
              },
             {"Name": "FC",
              "AdminState": "Enabled",
              "Cos": 3,
              "Weight": 5,
              "PacketDrop": False,
              "Mtu": 2240
              },
             {"Name": "Platinum",
              "AdminState": "Disabled",
              "Cos": 5,
              "Weight": 10,
              "PacketDrop": True,
              "Mtu": 1500
              },
             {"Name": "Gold",
              "AdminState": "Disabled",
              "Cos": 4,
              "Weight": 9,
              "PacketDrop": True,
              "Mtu": 1500
              },
             {"Name": "Silver",
              "AdminState": "Disabled",
              "Cos": 2,
              "Weight": 8,
              "PacketDrop": True,
              "Mtu": 1500
              },
             {"Name": "Bronze",
              "AdminState": "Disabled",
              "Cos": 1,
              "Weight": 7,
              "PacketDrop": True,
              "Mtu": 1500
              }
             ].
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create System QoS Policy object in Intersight
    builder(SystemQosPolicy(intersight_api_key_id=intersight_api_key_id,
                            intersight_api_key=intersight_api_key,
                            policy_name=policy_name,
                            policy_description=policy_description,
                            organization=organization,
                            intersight_base_url=intersight_base_url,
                            tags=tags,
                            preconfigured_api_client=preconfigured_api_client,
                            ucs_domain_profile_name=ucs_domain_profile_name,
                            qos_class_settings_list=qos_class_settings_list
                            ))


# Establish classes and functions to make Thermal Policy
class ThermalPolicy(DirectlyAttachedUcsChassisPolicy):
    """This class is used to configure a Thermal Policy in Intersight.
    """
    object_type = "Thermal Policy"
    intersight_api_path = "thermal/Policies"
    object_variable_value_maps = [
        {"VariableName": "fan_control_mode",
         "Description": "Fan Control Mode",
         "AttributeName": "FanControlMode",
         "Values": [
             {"FrontEndValue": "Balanced",
              "BackEndValue": "Balanced"
              },
             {"FrontEndValue": "Low Power",
              "BackEndValue": "LowPower"
              },
             {"FrontEndValue": "High Power",
              "BackEndValue": "HighPower"
              },
             {"FrontEndValue": "Maximum Power",
              "BackEndValue": "MaximumPower"
              },
             {"FrontEndValue": "Acoustic",
              "BackEndValue": "Acoustic"
              }
             ]
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_chassis_profile_name="",
                 fan_control_mode="Balanced"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_chassis_profile_name
                         )
        self.fan_control_mode = fan_control_mode
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_chassis_profile_name}', "
            f"'{self.fan_control_mode}')"
            )


def thermal_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    fan_control_mode="Balanced",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_chassis_profile_name=""
    ):
    """This is a function used to make a Thermal Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        fan_control_mode (str):
            Optional; The fan control mode. The available options are
            "Balanced", "Low Power", "High Power", "Maximum Power", and
            "Acoustic". The default value is "Balanced".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_chassis_profile_name (str):
            Optional; The UCS Chassis Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Thermal Policy object in Intersight
    builder(
        ThermalPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_chassis_profile_name=ucs_chassis_profile_name,
            fan_control_mode=fan_control_mode
            ))


# Establish classes and functions to make Virtual KVM Policy
class VirtualKvmPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Virtual KVM Policy in Intersight.
    """
    object_type = "Virtual KVM Policy"
    intersight_api_path = "kvm/Policies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 enable_virtual_kvm=True,
                 max_sessions=4,
                 remote_port=2068,
                 enable_video_encryption=True,
                 enable_local_server_video=True
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name
                         )
        self.enable_virtual_kvm = enable_virtual_kvm
        self.max_sessions = max_sessions
        self.remote_port = remote_port
        self.enable_video_encryption = enable_video_encryption
        self.enable_local_server_video = enable_local_server_video
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "Enabled": self.enable_virtual_kvm,
            "MaximumSessions": self.max_sessions,
            "RemotePort": self.remote_port,
            "EnableVideoEncryption": self.enable_video_encryption,
            "EnableLocalServerVideo": self.enable_local_server_video
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"{self.enable_virtual_kvm}, "
            f"{self.max_sessions}, "
            f"{self.remote_port}, "
            f"{self.enable_video_encryption}, "
            f"{self.enable_local_server_video})"
            )


def virtual_kvm_policy_maker(intersight_api_key_id,
                             intersight_api_key,
                             policy_name,
                             enable_virtual_kvm=True,
                             max_sessions=4,
                             remote_port=2068,
                             enable_video_encryption=True,
                             enable_local_server_video=True,
                             policy_description="",
                             organization="default",
                             intersight_base_url="https://www.intersight.com/api/v1",
                             tags=None,
                             preconfigured_api_client=None,
                             ucs_server_profile_name=""
                             ):
    """This is a function used to make a Virtual KVM Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_virtual_kvm (bool):
            Optional; The setting to enable the virtual KVM service. The
            default value is True.
        max_sessions (int):
            Optional; The maximum number of concurrent virtual KVM sessions.
            The accepted values are 1 - 4. The default value is 4.
        remote_port (int):
            Optional; The port used for virtual KVM sessions. The accepted values
            are 1 - 65535. The default value is 2068.
        enable_video_encryption (bool):
            Optional; The setting to encrypt all video sent through virtual KVM. The
            default value is True.
        enable_local_server_video (bool):
            Optional; The setting to display a virtual KVM session on any
            monitor attached to the server. The default value is True.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Server Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Virtual KVM Policy object in Intersight
    builder(VirtualKvmPolicy(intersight_api_key_id=intersight_api_key_id,
                             intersight_api_key=intersight_api_key,
                             policy_name=policy_name,
                             policy_description=policy_description,
                             organization=organization,
                             intersight_base_url=intersight_base_url,
                             tags=tags,
                             preconfigured_api_client=preconfigured_api_client,
                             ucs_server_profile_name=ucs_server_profile_name,
                             enable_virtual_kvm=enable_virtual_kvm,
                             max_sessions=max_sessions,
                             remote_port=remote_port,
                             enable_video_encryption=enable_video_encryption,
                             enable_local_server_video=enable_local_server_video
                             ))


def main():

    # Establish UCS Default Policy Deployment Tool specific variables
    deployment_tool_type = "Intersight UCS Default Policy Deployment Tool"

    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the UCS Default Policy Deployment Tool for Cisco Intersight
    print(f"\nStarting the {deployment_tool_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the BIOS Policy in Intersight
    if deploy_bios_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_bios_policy_name = f"{deployment_name_prefix}{bios_policy_name}{deployment_name_suffix}"
        bios_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_bios_policy_name,
            bios_settings=bios_policy_bios_settings,
            policy_description=bios_policy_description,
            organization=deployment_organization,
            tags=bios_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Boot Order Policy in Intersight
    if deploy_boot_order_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_boot_order_policy_name = f"{deployment_name_prefix}{boot_order_policy_name}{deployment_name_suffix}"
        boot_order_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_boot_order_policy_name,
            boot_devices_list=boot_order_policy_boot_devices_list,
            configured_boot_mode=boot_order_policy_configured_boot_mode,
            enable_uefi_secure_boot=boot_order_policy_enable_uefi_secure_boot,
            policy_description=boot_order_policy_description,
            organization=deployment_organization,
            tags=boot_order_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Certificate Management Policy in Intersight
    if deploy_cert_mgmt_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_cert_mgmt_policy_name = f"{deployment_name_prefix}{cert_mgmt_policy_name}{deployment_name_suffix}"
        cert_mgmt_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_cert_mgmt_policy_name,
            certificate=cert_mgmt_policy_certificate,
            private_key=cert_mgmt_policy_private_key,
            enable_imc_certificate=cert_mgmt_policy_enable_imc_certificate,
            policy_description=cert_mgmt_policy_description,
            organization=deployment_organization,
            tags=cert_mgmt_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet Adapter Policy in Intersight
    if deploy_ethernet_adapter_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_adapter_policy_name = f"{deployment_name_prefix}{ethernet_adapter_policy_name}{deployment_name_suffix}"
        ethernet_adapter_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_adapter_policy_name,
            ethernet_adapter_default_configuration=ethernet_adapter_policy_ethernet_adapter_default_configuration,
            enable_virtual_extensible_lan=ethernet_adapter_policy_enable_virtual_extensible_lan,
            enable_network_virtualization_using_gre=ethernet_adapter_policy_enable_network_virtualization_using_gre,
            enable_accelerated_receive_flow_steering=ethernet_adapter_policy_enable_accelerated_receive_flow_steering,
            enable_precision_time_protocol=ethernet_adapter_policy_enable_precision_time_protocol,
            enable_advanced_filter=ethernet_adapter_policy_enable_advanced_filter,
            enable_interrupt_scaling=ethernet_adapter_policy_enable_interrupt_scaling,
            enable_geneve_offload=ethernet_adapter_policy_enable_geneve_offload,
            enable_rdma_over_converged_ethernet=ethernet_adapter_policy_enable_rdma_over_converged_ethernet,
            interrupts=ethernet_adapter_policy_interrupts,
            interrupt_mode=ethernet_adapter_policy_interrupt_mode,
            interrupt_timer=ethernet_adapter_policy_interrupt_timer,
            interrupt_coalescing_type=ethernet_adapter_policy_interrupt_coalescing_type,
            receive_queue_count=ethernet_adapter_policy_receive_queue_count,
            receive_ring_size=ethernet_adapter_policy_receive_ring_size,
            transmit_queue_count=ethernet_adapter_policy_transmit_queue_count,
            transmit_ring_size=ethernet_adapter_policy_transmit_ring_size,
            completion_queue_count=ethernet_adapter_policy_completion_queue_count,
            completion_ring_size=ethernet_adapter_policy_completion_ring_size,
            uplink_failback_timeout=ethernet_adapter_policy_uplink_failback_timeout,
            enable_tx_checksum_offload=ethernet_adapter_policy_enable_tx_checksum_offload,
            enable_rx_checksum_offload=ethernet_adapter_policy_enable_rx_checksum_offload,
            enable_large_send_offload=ethernet_adapter_policy_enable_large_send_offload,
            enable_large_receive_offload=ethernet_adapter_policy_enable_large_receive_offload,
            enable_receive_side_scaling=ethernet_adapter_policy_enable_receive_side_scaling,
            enable_ipv4_hash=ethernet_adapter_policy_enable_ipv4_hash,
            enable_ipv6_extensions_hash=ethernet_adapter_policy_enable_ipv6_extensions_hash,
            enable_ipv6_hash=ethernet_adapter_policy_enable_ipv6_hash,
            enable_tcp_and_ipv4_hash=ethernet_adapter_policy_enable_tcp_and_ipv4_hash,
            enable_tcp_and_ipv6_extensions_hash=ethernet_adapter_policy_enable_tcp_and_ipv6_extensions_hash,
            enable_tcp_and_ipv6_hash=ethernet_adapter_policy_enable_tcp_and_ipv6_hash,
            enable_udp_and_ipv4_hash=ethernet_adapter_policy_enable_udp_and_ipv4_hash,
            enable_udp_and_ipv6_hash=ethernet_adapter_policy_enable_udp_and_ipv6_hash,
            roce_class_of_service=ethernet_adapter_policy_roce_class_of_service,
            roce_memory_regions=ethernet_adapter_policy_roce_memory_regions,
            roce_queue_pairs=ethernet_adapter_policy_roce_queue_pairs,
            roce_resource_groups=ethernet_adapter_policy_roce_resource_groups,
            roce_version=ethernet_adapter_policy_roce_version,
            policy_description=ethernet_adapter_policy_description,
            organization=deployment_organization,
            tags=ethernet_adapter_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet Network Control Policy in Intersight
    if deploy_ethernet_network_control_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_network_control_policy_name = f"{deployment_name_prefix}{ethernet_network_control_policy_name}{deployment_name_suffix}"
        ethernet_network_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_network_control_policy_name,
            enable_cdp=ethernet_network_control_policy_enable_cdp,
            mac_register_mode=ethernet_network_control_policy_mac_register_mode,
            action_on_uplink_fail=ethernet_network_control_policy_action_on_uplink_fail,
            mac_forging=ethernet_network_control_policy_mac_forging,
            lldp_enable_transmit=ethernet_network_control_policy_lldp_enable_transmit,
            lldp_enable_receive=ethernet_network_control_policy_lldp_enable_receive,
            policy_description=ethernet_network_control_policy_description,
            organization=deployment_organization,
            tags=ethernet_network_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet Network Group Policy in Intersight
    if deploy_ethernet_network_group_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_network_group_policy_name = f"{deployment_name_prefix}{ethernet_network_group_policy_name}{deployment_name_suffix}"
        ethernet_network_group_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_network_group_policy_name,
            allowed_vlans=ethernet_network_group_policy_allowed_vlans,
            native_vlan=ethernet_network_group_policy_native_vlan,
            policy_description=ethernet_network_group_policy_description,
            organization=deployment_organization,
            tags=ethernet_network_group_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Ethernet QoS Policy in Intersight
    if deploy_ethernet_qos_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_ethernet_qos_policy_name = f"{deployment_name_prefix}{ethernet_qos_policy_name}{deployment_name_suffix}"
        ethernet_qos_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ethernet_qos_policy_name,
            ethernet_qos_mtu_in_bytes=ethernet_qos_policy_ethernet_qos_mtu_in_bytes,
            ethernet_qos_rate_limit_in_mbps=ethernet_qos_policy_ethernet_qos_rate_limit_in_mbps,
            ethernet_qos_cos=ethernet_qos_policy_ethernet_qos_cos,
            ethernet_qos_burst=ethernet_qos_policy_ethernet_qos_burst,
            ethernet_qos_priority=ethernet_qos_policy_ethernet_qos_priority,
            ethernet_qos_enable_trust_host_cos=ethernet_qos_policy_ethernet_qos_enable_trust_host_cos,
            policy_description=ethernet_qos_policy_description,
            organization=deployment_organization,
            tags=ethernet_qos_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Fibre Channel Adapter Policy in Intersight
    if deploy_fibre_channel_adapter_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_fibre_channel_adapter_policy_name = f"{deployment_name_prefix}{fibre_channel_adapter_policy_name}{deployment_name_suffix}"
        fibre_channel_adapter_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_fibre_channel_adapter_policy_name,
            fibre_channel_adapter_default_configuration=fibre_channel_adapter_policy_fibre_channel_adapter_default_configuration,
            fcp_error_recovery=fibre_channel_adapter_policy_fcp_error_recovery,
            port_down_timeout_in_ms=fibre_channel_adapter_policy_port_down_timeout_in_ms,
            link_down_timeout_in_ms=fibre_channel_adapter_policy_link_down_timeout_in_ms,
            io_retry_timeout_in_seconds=fibre_channel_adapter_policy_io_retry_timeout_in_seconds,
            port_down_io_retry_in_ms=fibre_channel_adapter_policy_port_down_io_retry_in_ms,
            error_detection_timeout=fibre_channel_adapter_policy_error_detection_timeout,
            resource_allocation_timeout=fibre_channel_adapter_policy_resource_allocation_timeout,
            flogi_retries=fibre_channel_adapter_policy_flogi_retries,
            flogi_timeout_in_ms=fibre_channel_adapter_policy_flogi_timeout_in_ms,
            plogi_retries=fibre_channel_adapter_policy_plogi_retries,
            plogi_timeout_in_ms=fibre_channel_adapter_policy_plogi_timeout_in_ms,
            interrupt_mode=fibre_channel_adapter_policy_interrupt_mode,
            io_throttle_count=fibre_channel_adapter_policy_io_throttle_count,
            maximum_luns_per_target=fibre_channel_adapter_policy_maximum_luns_per_target,
            lun_queue_depth=fibre_channel_adapter_policy_lun_queue_depth,
            receive_ring_size=fibre_channel_adapter_policy_receive_ring_size,
            transmit_ring_size=fibre_channel_adapter_policy_transmit_ring_size,
            scsi_io_queues=fibre_channel_adapter_policy_scsi_io_queues,
            scsi_io_ring_size=fibre_channel_adapter_policy_scsi_io_ring_size,
            policy_description=fibre_channel_adapter_policy_description,
            organization=deployment_organization,
            tags=fibre_channel_adapter_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Fibre Channel Network Policy in Intersight
    if deploy_fibre_channel_network_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_fibre_channel_network_policy_name = f"{deployment_name_prefix}{fibre_channel_network_policy_name}{deployment_name_suffix}"
        fibre_channel_network_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_fibre_channel_network_policy_name,
            default_vlan=fibre_channel_network_policy_default_vlan,
            vsan_id=fibre_channel_network_policy_vsan_id,
            policy_description=fibre_channel_network_policy_description,
            organization=deployment_organization,
            tags=fibre_channel_network_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Fibre Channel QoS Policy in Intersight
    if deploy_fibre_channel_qos_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_fibre_channel_qos_policy_name = f"{deployment_name_prefix}{fibre_channel_qos_policy_name}{deployment_name_suffix}"
        fibre_channel_qos_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_fibre_channel_qos_policy_name,
            fibre_channel_qos_rate_limit_in_mbps=fibre_channel_qos_policy_fibre_channel_qos_rate_limit_in_mbps,
            fibre_channel_qos_maximum_data_field_size_in_bytes=fibre_channel_qos_policy_fibre_channel_qos_maximum_data_field_size_in_bytes,
            fibre_channel_qos_cos=fibre_channel_qos_policy_fibre_channel_qos_cos,
            fibre_channel_qos_burst=fibre_channel_qos_policy_fibre_channel_qos_burst,
            policy_description=fibre_channel_qos_policy_description,
            organization=deployment_organization,
            tags=fibre_channel_qos_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Flow Control Policy in Intersight
    if deploy_flow_control_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_flow_control_policy_name = f"{deployment_name_prefix}{flow_control_policy_name}{deployment_name_suffix}"
        flow_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_flow_control_policy_name,
            priority=flow_control_policy_priority,
            receive=flow_control_policy_receive,
            send=flow_control_policy_send,
            policy_description=flow_control_policy_description,
            organization=deployment_organization,
            tags=flow_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the IPMI Over LAN Policy in Intersight
    if deploy_ipmi_over_lan_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_ipmi_over_lan_policy_name = f"{deployment_name_prefix}{ipmi_over_lan_policy_name}{deployment_name_suffix}"
        ipmi_over_lan_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ipmi_over_lan_policy_name,
            enable_ipmi_over_lan=ipmi_over_lan_policy_enable_ipmi_over_lan,
            privilege_level=ipmi_over_lan_policy_privilege_level,
            encryption_key=ipmi_over_lan_policy_encryption_key,
            policy_description=ipmi_over_lan_policy_description,
            organization=deployment_organization,
            tags=ipmi_over_lan_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the iSCSI Adapter Policy in Intersight
    if deploy_iscsi_adapter_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_iscsi_adapter_policy_name = f"{deployment_name_prefix}{iscsi_adapter_policy_name}{deployment_name_suffix}"
        iscsi_adapter_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_iscsi_adapter_policy_name,
            tcp_connection_timeout=iscsi_adapter_policy_tcp_connection_timeout,
            dhcp_timeout=iscsi_adapter_policy_dhcp_timeout,
            lun_busy_retry_count=iscsi_adapter_policy_lun_busy_retry_count,
            policy_description=iscsi_adapter_policy_description,
            organization=deployment_organization,
            tags=iscsi_adapter_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Link Aggregation Policy in Intersight
    if deploy_link_aggregation_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_link_aggregation_policy_name = f"{deployment_name_prefix}{link_aggregation_policy_name}{deployment_name_suffix}"
        link_aggregation_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_link_aggregation_policy_name,
            suspend_individual=link_aggregation_policy_suspend_individual,
            lacp_rate=link_aggregation_policy_lacp_rate,
            policy_description=link_aggregation_policy_description,
            organization=deployment_organization,
            tags=link_aggregation_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Link Control Policy in Intersight
    if deploy_link_control_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_link_control_policy_name = f"{deployment_name_prefix}{link_control_policy_name}{deployment_name_suffix}"
        link_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_link_control_policy_name,
            admin_state=link_control_policy_admin_state,
            mode=link_control_policy_mode,
            policy_description=link_control_policy_description,
            organization=deployment_organization,
            tags=link_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Local User Policy in Intersight
    if deploy_local_user_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_local_user_policy_name = f"{deployment_name_prefix}{local_user_policy_name}{deployment_name_suffix}"
        local_user_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_local_user_policy_name,
            enforce_strong_password=local_user_policy_enforce_strong_password,
            enable_password_expiry=local_user_policy_enable_password_expiry,
            password_expiry_duration=local_user_policy_password_expiry_duration,
            password_expiry_notification_period=local_user_policy_password_expiry_notification_period,
            password_expiry_grace_period=local_user_policy_password_expiry_grace_period,
            password_history=local_user_policy_password_history,
            always_send_user_password=local_user_policy_always_send_user_password,
            local_users_list=local_user_policy_local_users_list,
            policy_description=local_user_policy_description,
            organization=deployment_organization,
            tags=local_user_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Multicast Policy in Intersight
    if deploy_multicast_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_multicast_policy_name = f"{deployment_name_prefix}{multicast_policy_name}{deployment_name_suffix}"
        multicast_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_multicast_policy_name,
            snooping_state=multicast_policy_snooping_state,
            querier_state=multicast_policy_querier_state,
            querier_ip_address=multicast_policy_querier_ip_address,
            querier_ip_address_peer=multicast_policy_querier_ip_address_peer,
            policy_description=multicast_policy_description,
            organization=deployment_organization,
            tags=multicast_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Network Connectivity Policy in Intersight
    if deploy_network_connectivity_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_network_connectivity_policy_name = f"{deployment_name_prefix}{network_connectivity_policy_name}{deployment_name_suffix}"
        network_connectivity_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_network_connectivity_policy_name,
            preferred_ipv4_dns_server=network_connectivity_policy_preferred_ipv4_dns_server,
            alternate_ipv4_dns_server=network_connectivity_policy_alternate_ipv4_dns_server,
            obtain_ipv4_dns_server_from_dhcp=network_connectivity_policy_obtain_ipv4_dns_server_from_dhcp,
            enable_dynamic_dns=network_connectivity_policy_enable_dynamic_dns,
            dynamic_dns_update_domain=network_connectivity_policy_dynamic_dns_update_domain,
            enable_ipv6=network_connectivity_policy_enable_ipv6,
            obtain_ipv6_dns_server_from_dhcp=network_connectivity_policy_obtain_ipv6_dns_server_from_dhcp,
            preferred_ipv6_dns_server=network_connectivity_policy_preferred_ipv6_dns_server,
            alternate_ipv6_dns_server=network_connectivity_policy_alternate_ipv6_dns_server,
            policy_description=network_connectivity_policy_description,
            organization=deployment_organization,
            tags=network_connectivity_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the NTP Policy in Intersight
    if deploy_ntp_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_ntp_policy_name = f"{deployment_name_prefix}{ntp_policy_name}{deployment_name_suffix}"
        ntp_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_ntp_policy_name,
            ntp_servers=ntp_policy_ntp_servers,
            timezone=ntp_policy_timezone,
            enable_ntp=ntp_policy_enable_ntp,
            policy_description=ntp_policy_description,
            organization=deployment_organization,
            tags=ntp_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Power Policy in Intersight
    if deploy_power_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_power_policy_name = f"{deployment_name_prefix}{power_policy_name}{deployment_name_suffix}"
        power_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_power_policy_name,
            power_profiling=power_policy_power_profiling,
            power_priority=power_policy_power_priority,
            power_restore=power_policy_power_restore,
            power_redundancy=power_policy_power_redundancy,
            power_save_mode=power_policy_power_save_mode,
            dynamic_power_rebalancing=power_policy_dynamic_power_rebalancing,
            extended_power_capacity=power_policy_extended_power_capacity,        
            power_allocation_in_watts=power_policy_power_allocation_in_watts,
            policy_description=power_policy_description,
            organization=deployment_organization,
            tags=power_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Serial Over LAN Policy in Intersight
    if deploy_serial_over_lan_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_serial_over_lan_policy_name = f"{deployment_name_prefix}{serial_over_lan_policy_name}{deployment_name_suffix}"
        serial_over_lan_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_serial_over_lan_policy_name,
            enable_serial_over_lan=serial_over_lan_policy_enable_serial_over_lan,
            com_port=serial_over_lan_policy_com_port,
            baud_rate=serial_over_lan_policy_baud_rate,
            ssh_port=serial_over_lan_policy_ssh_port,
            policy_description=serial_over_lan_policy_description,
            organization=deployment_organization,
            tags=serial_over_lan_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the SNMP Policy in Intersight
    if deploy_snmp_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_snmp_policy_name = f"{deployment_name_prefix}{snmp_policy_name}{deployment_name_suffix}"
        snmp_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_snmp_policy_name,
            enable_snmp=snmp_policy_enable_snmp,
            snmp_v2c_features=snmp_policy_v2c_features,
            snmp_v3_features=snmp_policy_v3_features,
            snmp_port=snmp_policy_port,
            system_contact=snmp_policy_system_contact,
            system_location=snmp_policy_system_location,
            access_community_string=snmp_policy_access_community_string,
            snmp_community_access=snmp_policy_community_access,
            trap_community_string=snmp_policy_trap_community_string,
            snmp_engine_input_id=snmp_policy_engine_input_id,
            snmp_users_list=snmp_policy_users_list,
            snmp_trap_destinations_list=snmp_policy_trap_destinations_list,
            policy_description=snmp_policy_description,
            organization=deployment_organization,
            tags=snmp_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Switch Control Policy in Intersight
    if deploy_switch_control_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_switch_control_policy_name = f"{deployment_name_prefix}{switch_control_policy_name}{deployment_name_suffix}"
        switch_control_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_switch_control_policy_name,
            enable_vlan_port_count_optimization=switch_control_policy_enable_vlan_port_count_optimization,
            mac_address_table_aging_time_option=switch_control_policy_mac_address_table_aging_time_option,
            mac_address_table_aging_time_custom_value_in_seconds=switch_control_policy_mac_address_table_aging_time_custom_value_in_seconds,
            link_control_message_interval_in_seconds=switch_control_policy_link_control_message_interval_in_seconds,
            link_control_recovery_action=switch_control_policy_link_control_recovery_action,
            policy_description=switch_control_policy_description,
            organization=deployment_organization,
            tags=switch_control_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Syslog Policy in Intersight
    if deploy_syslog_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_syslog_policy_name = f"{deployment_name_prefix}{syslog_policy_name}{deployment_name_suffix}"
        syslog_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_syslog_policy_name,
            syslog_local_logging_minimum_severity_to_report=syslog_policy_local_logging_minimum_severity_to_report,
            syslog_remote_logging_server_list=syslog_policy_remote_logging_server_list,
            policy_description=syslog_policy_description,
            organization=deployment_organization,
            tags=syslog_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the System QoS Policy in Intersight
    if deploy_system_qos_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_system_qos_policy_name = f"{deployment_name_prefix}{system_qos_policy_name}{deployment_name_suffix}"
        system_qos_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_system_qos_policy_name,
            qos_class_settings_list=system_qos_policy_class_settings_list,
            policy_description=system_qos_policy_description,
            organization=deployment_organization,
            tags=system_qos_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Thermal Policy in Intersight
    if deploy_thermal_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_thermal_policy_name = f"{deployment_name_prefix}{thermal_policy_name}{deployment_name_suffix}"
        thermal_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_thermal_policy_name,
            fan_control_mode=thermal_policy_fan_control_mode,
            policy_description=thermal_policy_description,
            organization=deployment_organization,
            tags=thermal_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # Create the Virtual KVM Policy in Intersight
    if deploy_virtual_kvm_policy:
        # Update Policy name with UCS Default Policy Deployment Tool provided prefix and/or suffix
        deployment_tool_virtual_kvm_policy_name = f"{deployment_name_prefix}{virtual_kvm_policy_name}{deployment_name_suffix}"
        virtual_kvm_policy_maker(
            intersight_api_key_id=None,
            intersight_api_key=None,
            policy_name=deployment_tool_virtual_kvm_policy_name,
            enable_virtual_kvm=virtual_kvm_policy_enable_virtual_kvm,
            max_sessions=virtual_kvm_policy_max_sessions,
            remote_port=virtual_kvm_policy_remote_port,
            enable_video_encryption=virtual_kvm_policy_enable_video_encryption,
            enable_local_server_video=virtual_kvm_policy_enable_local_server_video,
            policy_description=virtual_kvm_policy_description,
            organization=deployment_organization,
            tags=virtual_kvm_policy_tags,
            preconfigured_api_client=main_intersight_api_client
            )

    # UCS Default Policy Deployment Tool completion
    print(f"\nThe {deployment_tool_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the UCS Default Policy Deployment Tool for Cisco Intersight
sys.exit(0)
