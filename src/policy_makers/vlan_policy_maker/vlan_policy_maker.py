"""
VLAN Policy Maker for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The VLAN Policy Maker for Cisco Intersight automates the creation
         of VLAN Policies.
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
VLAN Policy on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######

# General Settings
vlan_policy_name = "VLAN-Policy-1"
vlan_policy_description = "A Cisco Intersight VLAN Policy generated by the VLAN Policy Maker."
vlan_policy_organization = "default"
vlan_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the vlan_policy_tags dictionary if no tags are needed, for example: vlan_policy_tags = {}

# Policy Detail Settings
## NOTE - To not configure any VLANs, leave the corresponding list empty, for example: vlan_list = []
## NOTE - A pre-existing Multicast Policy must be provided when configuring VLANs.
## A default Multicast Policy can be provided using the default_multicast_policy_name variable below.
## To override the default policy, a "MulticastPolicy" key can be provided for each set of VLAN dictionaries in the VLAN list variable.
## Here is an example for vlan_list: vlan_list = [{"Vlans": "10-12,20,25", "Name": "Infra", "MulticastPolicy": "Multicast-Policy-1"}]
vlan_list = [
    {"Vlans": "10-12,20,25", "Name": "Infra"},
    {"Vlans": "40-43", "Name": "Mgmt", "AutoAllowOnUplinks": False},
    ]
default_multicast_policy_name = "Multicast-Policy-1"
native_vlan_id = None       # Leave the value as None or provide an integer value for the Native VLAN ID, for example: native_vlan_id = 10

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"

# UCS Domain Profile Attachment Settings
ucs_domain_profile_name = ""
vlan_policy_fabric_interconnect = "AB"      # Options: "AB", "A", "B"

####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


import sys
import traceback
import json
import copy
import intersight
import re

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting and try/except blocks added for additional error handling
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com"
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to convert a list of numbers in string type format to list type format.
def integer_number_list_maker(string_list,
                              remove_duplicate_elements_in_list=True,
                              sort_elements_in_list=True
                              ):
    """This function converts a list of numbers in string type format
    to list type format. The provided string should contain commas,
    semicolons, or spaces as the separator between numbers. Number
    ranges can be configured using hyphens. An example entry would be
    "1, 2, 3, 4, 5, 6, 7, 7-14, 25". For each number in the list,
    leading and rear spaces will be removed. Duplicate numbers in the
    list are removed by default.

    Args:
        string_list (str):
            A string containing a number or range of numbers.
        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements
            are removed from the provided string list. The default
            value is True.
        sort_elements_in_list (bool):
            Optional; A setting to determine if the elements in the provided
            string list should be sorted in ascending order. The default value
            is True.

    Returns:
        A list of integers.            
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            provided_list (list):
                A list of elements to be separated.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.               
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element,
                                                               separator
                                                               )
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    integer_number_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list,
                                                " "
                                                )
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list,
                                                   ","
                                                   )
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list,
                                                       ";"
                                                       )
    # Split provided number ranges in the list by hyphens.
    for post_semicolon_split_number_set in post_semicolon_split_list:
        if "-" in post_semicolon_split_number_set:
            if post_semicolon_split_number_set[0] != "-" and post_semicolon_split_number_set[-1] != "-":
                hyphen_split_list = string_to_list_separator(post_semicolon_split_number_set,
                                                             "-"
                                                             )
                # Limit new list to a maximum of two elements.
                fixed_hyphen_split_list = hyphen_split_list[:2]
                # Enumerate the numbers in the hyphen split list.
                integer_starting_number_of_provided_range = int(fixed_hyphen_split_list[0])
                integer_ending_number_of_provided_range = int(fixed_hyphen_split_list[1])
                enumerated_range_list = range(
                    integer_starting_number_of_provided_range,
                    (integer_ending_number_of_provided_range + 1)
                    )
                integer_number_list.extend(enumerated_range_list)
        else:
            integer_of_current_number_set = int(post_semicolon_split_number_set)
            integer_number_list.append(integer_of_current_number_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        integer_number_list = list(set(integer_number_list))
    if sort_elements_in_list:
        integer_number_list = sorted(integer_number_list)
    return integer_number_list


# Establish Maker specific classes and functions
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=self.intersight_api_path,
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsDomainPolicy(UcsPolicy):
    """This class is used to configure a UCS Domain Policy in Intersight that
    is logically directly attached to UCS Fabric Interconnects through UCS
    Domain Profiles.
    """
    object_type = "Directly Attached UCS Domain Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_domain_profile_name = ucs_domain_profile_name
        self.fabric_interconnect = fabric_interconnect

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.fabric_interconnect}')"
            )

    def _attach_ucs_domain_profile(self):
        """This is a function to attach an Intersight UCS Domain Profile to an
        Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Attach UCS Domain Profile
        if self.ucs_domain_profile_name:
            print("Attaching the UCS Domain Profile named "
                  f"{self.ucs_domain_profile_name}...")
            # Get UCS Domain Profile MOID
            ucs_domain_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       object_name=self.ucs_domain_profile_name,
                                                                       intersight_api_path="fabric/SwitchClusterProfiles",
                                                                       object_type="UCS Domain Profile",
                                                                       organization=self.organization,
                                                                       preconfigured_api_client=self.api_client
                                                                       )
            # Get UCS Domain Profile object dictionary attributes
            ucs_domain_profile_object = get_single_intersight_object(intersight_api_key_id=None,
                                                                     intersight_api_key=None,
                                                                     intersight_api_path="fabric/SwitchClusterProfiles",
                                                                     object_moid=ucs_domain_profile_moid,
                                                                     object_type="UCS Domain Profile",
                                                                     preconfigured_api_client=self.api_client
                                                                     )
            # Get Switch Profiles that are attached to the UCS Domain Profile
            ucs_domain_profile_list_of_attached_switch_profiles = ucs_domain_profile_object.get("SwitchProfiles")
            if len(ucs_domain_profile_list_of_attached_switch_profiles) != 2:
                print("\nA configuration error has occurred!\n")
                print("The provided UCS Domain Profile named "
                      f"{self.ucs_domain_profile_name} is not configured with "
                      "two attached Switch Profiles.")
                print("To proceed, two Switch Profiles must be attached to the "
                      "provided UCS Domain Profile.")
                print("Please update the configuration of the provided UCS "
                      f"Domain Profile, then re-attempt execution.\n")
                sys.exit(0)
            else:
                fabric_interconnect_a_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[0].get("Moid")
                fabric_interconnect_b_switch_profile_moid = ucs_domain_profile_list_of_attached_switch_profiles[1].get("Moid")
            # Update the API body with the appropriate Switch Profile MOIDs based on selected Fabric Interconnects
            if self.fabric_interconnect not in ("AB", "BA", "A", "B"):
                print("\nA configuration error has occurred!\n")
                print("The provided UCS Domain Profile Fabric Interconnect "
                      "value of "
                      f"'{self.fabric_interconnect}' "
                      "is not supported.")
                print("To proceed, the Fabric Interconnect value for the "
                      "UCS Domain Profile must be 'AB', 'A', or 'B'.")
                print("Please update the configuration of the provided UCS "
                      "Domain Profile Fabric Interconnect, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            else:
                if self.fabric_interconnect == "A":
                    print("The attachment will be made to Fabric Interconnect "
                          "A.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_a_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]
                elif self.fabric_interconnect == "B":
                    print("The attachment will be made to Fabric Interconnect "
                          "B.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_b_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]
                else:
                    print("The attachment will be made to Fabric Interconnects "
                          "A and B.")
                    self.intersight_api_body["Profiles"] = [
                        {"Moid": fabric_interconnect_a_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"},
                        {"Moid": fabric_interconnect_b_switch_profile_moid,
                         "ObjectType": "fabric.SwitchProfile"}
                        ]

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Domain Profile attached, if specified
        self._attach_ucs_domain_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class VlanPolicy(DirectlyAttachedUcsDomainPolicy):
    """This class is used to configure a VLAN Policy in Intersight.
    """
    object_type = "VLAN Policy"
    intersight_api_path = "fabric/EthNetworkPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_domain_profile_name="",
                 fabric_interconnect="AB"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_domain_profile_name,
                         fabric_interconnect
                         )

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_domain_profile_name}', "
            f"'{self.fabric_interconnect}')"
            )


class IdConfigurator:
    """This class serves as a base class for configuring the IDs of objects in
    Intersight policies. Examples of the objects that would use these IDs are
    ports, VLANs, and VSANs.
    """
    object_type = "ID Configurator"
    attributes_that_require_special_handling = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        if id_list is None:
            self.id_list = []
        else:
            self.id_list = id_list
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def enumerated_id_range_retriever(self,
                                      id_dictionary,
                                      id_key
                                      ):
        """This function captures provided ID ranges for enumeration and
        returns the enumerated list.

        Args:
            id_dictionary (dict):
                The dictionary containing the ID or range of IDs to be
                enumerated.
            id_key (str):
                The key name of the ID to be enumerated.

       Returns:
            A list of enumerated integers for the provided IDs in a format
            consumable by the Intersight API.
            
        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the ID type is inaccessible from the
                ID dictionary. The key may be missing or misspelled.       
        """
        # Verify ID range has been configured in provided ID dictionary
        try:
            provided_id_range = id_dictionary[id_key]
        except KeyError:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} "
                  f"settings for the {self.policy_type} named "
                  f"{self.policy_name}, there was an issue accessing the range "
                  f"of IDs to be configured.")
            print(f"Please verify a key named '{id_key}' exists in the "
                  f"ID list variable for the {self.object_type} "
                  "settings.\n")
            print("Please review and resolve any error messages, then "
                  "re-attempt execution.\n")
            print("Exception Message: ")
            traceback.print_exc()
            sys.exit(0)
        return integer_number_list_maker(provided_id_range)

    def attribute_handler(self,
                          staged_intersight_api_body
                          ):
        """
        This function is used to retrieve the MOIDs for provided attributes
        that require them for configuration through the Intersight API.

        Args:
            staged_intersight_api_body (dict):
                The staged Intersight API body dictionary being prepared for
                configuration on Intersight.

        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the name of a required attribute is
                inaccessible from the ID dictionary. The key may be missing or
                misspelled.
        """
        if self.attributes_that_require_special_handling:
            for id_attribute in self.attributes_that_require_special_handling:
                # If provided, add default attribute option to staged Intersight API body
                if id_attribute.get("DefaultOption"):
                    id_attribute_default_option = getattr(self,
                                                          id_attribute.get("DefaultOption")
                                                          )
                    if id_attribute_default_option:
                        if id_attribute["Name"] not in staged_intersight_api_body:
                            staged_intersight_api_body[id_attribute["Name"]] = id_attribute_default_option
                # Verify mandatory attributes are present in the staged Intersight API body
                if id_attribute.get("Mandatory"):
                    try:
                        verify_id_attribute_presence = staged_intersight_api_body[id_attribute["Name"]]
                    except KeyError:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{self.object_type} settings for the "
                              f"{self.policy_type} named {self.policy_name}, "
                              f"there was an issue accessing the value for "
                              f"the {id_attribute['Type']}.")
                        print("Please verify the key named "
                              f"'{id_attribute['Name']}' exists in the "
                              f"ID list variable for the {self.object_type} "
                              "settings.\n")
                        print("Please review and resolve any error messages, "
                              f"then re-attempt execution.\n")
                        print("Exception Message: ")
                        traceback.print_exc()
                        sys.exit(0)
                    # Retrieve MOID if required
                    if id_attribute.get("MoidRequired"):
                        id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                             intersight_api_key=None,
                                                                             object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                             intersight_api_path=id_attribute["IntersightAPIPath"],
                                                                             object_type=id_attribute["Type"],
                                                                             organization=self.organization,
                                                                             preconfigured_api_client=self.api_client
                                                                             )
                        staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}
                else:
                    # Retrieve MOID if required for optional attributes
                    if id_attribute.get("MoidRequired"):
                        if staged_intersight_api_body.get(id_attribute["Name"]):
                            id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                 intersight_api_key=None,
                                                                                 object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                                 intersight_api_path=id_attribute["IntersightAPIPath"],
                                                                                 object_type=id_attribute["Type"],
                                                                                 organization=self.organization,
                                                                                 preconfigured_api_client=self.api_client
                                                                                 )
                            staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}


class Vlan(IdConfigurator):
    """This class serves as a base class for configuring the IDs of VLANs in
    Intersight policies.
    """
    object_type = "VLAN"
    id_type = "Vlan"
    intersight_api_path = "fabric/Vlans"
    policy_type = "VLAN Policy"
    policy_intersight_api_path = "fabric/EthNetworkPolicies"
    attributes_that_require_special_handling = [
        {"Name": "Name",
         "Type": "VLAN Name Prefix",
         "IntersightAPIPath": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None
         },
        {"Name": "MulticastPolicy",
         "Type": "Multicast Policy",
         "IntersightAPIPath": "fabric/MulticastPolicies",
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_multicast_policy_name"
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_multicast_policy_name="",
                 native_vlan_id=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        self.default_multicast_policy_name = default_multicast_policy_name
        self.native_vlan_id = native_vlan_id

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"'{self.default_multicast_policy_name}', "
            f"{self.native_vlan_id})"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def post_intersight_vlan(vlan_name,
                                 body,
                                 moid=None
                                 ):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                vlan_name (str):
                    The name of the VLAN to be posted on Intersight.
                body (dict):
                    The body of the object to be posted on Intersight.
                moid (str):
                    Optional; The Intersight MOID of the object to be posted
                    on Intersight. The default value is None.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            if moid:
                full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
            else:
                full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                if moid:
                    print(f"The configuration of {self.object_type} "
                          f"{vlan_name} has been updated.")
                else:
                    print(f"The configuration of {self.object_type} "
                          f"{vlan_name} has completed.")
                return "The POST method was successful."
            except Exception:
                print("\nA configuration error has occurred!\n")
                if moid:
                    print(f"Unable to update {self.object_type} "
                          f"{vlan_name} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                else:
                    print(f"Unable to configure {self.object_type} "
                          f"{vlan_name} under the Intersight "
                          f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."

        if self.id_list:
            vlans_id_key = f"{self.id_type}s"
            # Retrieving the VLAN Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=self.policy_intersight_api_path,
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           intersight_base_url=self.intersight_base_url,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                vlans_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                               vlans_id_key
                                                                               )
                staged_intersight_api_body = copy.deepcopy(id_dictionary)
                staged_intersight_api_body.pop(vlans_id_key)
                staged_intersight_api_body["EthNetworkPolicy"] = {"Moid": policy_moid}
                # Set provided default ID attributes and retrieve any required MOIDs for ID attributes
                self.attribute_handler(staged_intersight_api_body)
                current_vlan_id_name_prefix = id_dictionary.get("Name")
                for current_vlan_id in vlans_enumerated_id_range:
                    staged_intersight_api_body[f"{self.id_type}Id"] = current_vlan_id
                    current_vlan_id_full_name = f"{current_vlan_id_name_prefix}_{current_vlan_id}"
                    staged_intersight_api_body["Name"] = current_vlan_id_full_name
                    staged_intersight_api_body["IsNative"] = False
                    post_intersight_vlan(
                        current_vlan_id_full_name,
                        staged_intersight_api_body
                        )

            # Begin the process to set the native VLAN for the VLAN Policy
            if self.native_vlan_id:
                print("\nAttempting to set the native VLAN to VLAN "
                      f"{self.native_vlan_id}...")
                all_intersight_vlans_pre_check_cycle = get_intersight_objects(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              intersight_api_path=self.intersight_api_path,
                                                                              object_type=self.object_type,
                                                                              intersight_base_url=self.intersight_base_url,
                                                                              preconfigured_api_client=self.api_client
                                                                              )
                if all_intersight_vlans_pre_check_cycle.get("Results"):
                    # Verify that a VLAN object matching the native VLAN ID exists
                    for vlan_check in all_intersight_vlans_pre_check_cycle.get("Results"):
                        if (vlan_check.get("VlanId") == self.native_vlan_id and
                            vlan_check.get("EthNetworkPolicy", {}).get("Moid") == policy_moid):
                            break
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("The native VLAN cannot be set to "
                              f"VLAN {self.native_vlan_id}.")
                        print(f"VLAN {self.native_vlan_id} does not currently "
                              f"exist in the VLAN Policy {self.policy_name}.")
                        print(f"Please add VLAN {self.native_vlan_id} to the "
                              f"VLAN list for {self.policy_name}, then "
                              "re-attempt execution.\n")
                        sys.exit(0)
                    # Verify the native VLAN is not already set on a pre-existing VLAN object that does not match
                    for native_vlan_id_check in all_intersight_vlans_pre_check_cycle.get("Results"):
                        if (native_vlan_id_check.get("VlanId") != self.native_vlan_id and
                            native_vlan_id_check.get("EthNetworkPolicy", {}).get("Moid") == policy_moid and
                            native_vlan_id_check.get("IsNative") == True):
                            native_vlan_id_check_vlan_id = native_vlan_id_check.get("VlanId")
                            native_vlan_id_check_full_name = native_vlan_id_check.get("Name")
                            native_vlan_id_check_moid = native_vlan_id_check.get("Moid")
                            print("The native VLAN is currently set to VLAN "
                                  f"{native_vlan_id_check_vlan_id}.")
                            print(f"The native VLAN setting will now be "
                                  "removed from VLAN "
                                  f"{native_vlan_id_check_full_name}, in order "
                                  "to change the native VLAN to VLAN "
                                  f"{self.native_vlan_id}...")
                            # Remove the native VLAN setting from the mis-matched pre-existing VLAN object if needed
                            native_vlan_id_check_api_body_update = {"IsNative": False}
                            post_intersight_vlan(
                                native_vlan_id_check_full_name,
                                native_vlan_id_check_api_body_update,
                                moid=native_vlan_id_check_moid
                                )
                            break
                else:
                    print("\nA configuration error has occurred!\n")
                    print("The native VLAN cannot be set to "
                          f"VLAN {self.native_vlan_id}.")
                    print("No VLANs were found in the VLAN Policy "
                          f"{self.policy_name}.")
                    print(f"Please add VLAN {self.native_vlan_id} to the "
                          f"VLAN list for {self.policy_name}, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Set the native VLAN on the matching VLAN object
                all_intersight_vlans_update_cycle = get_intersight_objects(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           intersight_api_path=self.intersight_api_path,
                                                                           object_type=self.object_type,
                                                                           intersight_base_url=self.intersight_base_url,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                if all_intersight_vlans_update_cycle.get("Results"):
                    for native_vlan_id_update in all_intersight_vlans_update_cycle.get("Results"):
                        if (native_vlan_id_update.get("VlanId") == self.native_vlan_id and
                            native_vlan_id_update.get("EthNetworkPolicy", {}).get("Moid") == policy_moid and
                            native_vlan_id_update.get("IsNative") == True):
                            native_vlan_id_update_full_name = native_vlan_id_update.get("Name")
                            print(f"VLAN {self.native_vlan_id} is already set "
                                  "as the native VLAN.")
                            break
                        elif (native_vlan_id_update.get("VlanId") == self.native_vlan_id and
                              native_vlan_id_update.get("EthNetworkPolicy", {}).get("Moid") == policy_moid and
                              native_vlan_id_update.get("IsNative") == False):
                            native_vlan_id_update_vlan_id = native_vlan_id_update.get("VlanId")
                            native_vlan_id_update_full_name = native_vlan_id_update.get("Name")
                            native_vlan_id_update_moid = native_vlan_id_update.get("Moid")
                            print("The native VLAN will now be set to VLAN "
                                  f"{self.native_vlan_id}...")
                            # Add the native VLAN ID setting to the matching VLAN object
                            native_vlan_id_update_api_body_update = {"IsNative": True}
                            post_intersight_vlan(
                                native_vlan_id_update_full_name,
                                native_vlan_id_update_api_body_update,
                                moid=native_vlan_id_update_moid
                                )
                            break
                else:
                    print("\nA configuration error has occurred!\n")
                    print("The native VLAN cannot be set to "
                          f"VLAN {self.native_vlan_id}.")
                    print("No VLANs were found in the VLAN Policy "
                          f"{self.policy_name}.")
                    print(f"Please add VLAN {self.native_vlan_id} to the "
                          f"VLAN list for {self.policy_name}, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                              

def vlan_policy_maker(intersight_api_key_id,
                      intersight_api_key,
                      policy_name,
                      vlan_list=None,
                      default_multicast_policy_name="",
                      native_vlan_id=None,
                      policy_description="",
                      organization="default",
                      intersight_base_url="https://www.intersight.com/api/v1",
                      tags=None,
                      preconfigured_api_client=None,
                      ucs_domain_profile_name="",
                      fabric_interconnect="AB"
                      ):
    """This is a function used to make a VLAN Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        vlan_list (list):
            Optional; The list of dictionary entries for VLANs to
            be configured. The default value is None. An
            example entry is:
            [{"Vlans": "10-20,30,35",
              "Name": "Infra"},
             {"Vlans": "40-50",
              "Name": "Mgmt",
              "AutoAllowOnUplinks": False},].
            A "Vlans" key with a string value must be configured in each
            dictionary of the list to specify the VLAN ID or range of VLAN IDs
            to be created. A "Name" key with a string value must also be
            configured to specify the VLAN name prefix. A Multicast Policy is
            mandatory in order to configure a VLAN. If a default Multicast
            Policy is not provided using the default_multicast_policy_name
            variable, a "MulticastPolicy" key must also be configured with
            string values to specify a previously created Multicast Policy. If
            different Multicast Policies are desired for different sets of
            VLANs, the "MulticastPolicy" key should also be used and will
            always override the default_multicast_policy_name variable.
            Otherwise the "MulticastPolicy" key is optional. Optional key
            settings such as "AutoAllowOnUplinks" can also be configured in
            each list dictionary, if the associated system default values are
            not desired. Multiple dictionaries can be placed in the list to
            configure different settings for different ranges of VLANs.
        default_multicast_policy_name (str):
            Optional; The name of the default Multicast Policy to be used by
            all VLANs in the VLAN Policy. The default value is an empty string
            ("").
        native_vlan_id (int):
            Optional; The desired native VLAN ID. The default value is None.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_domain_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
        fabric_interconnect (str):
            Optional; The Fabric Interconnect in the UCS Domain Profile that
            the policy should be attached to. The default value is "AB".
            Accepted values are "AB" for both Fabric Interconnects A and B,
            "A" for only Fabric Interconnect A, and "B" for only
            Fabric Interconnect B.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create VLAN Policy object in Intersight
    builder(VlanPolicy(intersight_api_key_id=intersight_api_key_id,
                       intersight_api_key=intersight_api_key,
                       policy_name=policy_name,
                       policy_description=policy_description,
                       organization=organization,
                       intersight_base_url=intersight_base_url,
                       tags=tags,
                       preconfigured_api_client=preconfigured_api_client,
                       ucs_domain_profile_name=ucs_domain_profile_name,
                       fabric_interconnect=fabric_interconnect
                       ))

    # Define and create VLAN objects in Intersight
    builder(Vlan(intersight_api_key_id=intersight_api_key_id,
                 intersight_api_key=intersight_api_key,
                 policy_name=policy_name,
                 id_list=vlan_list,
                 organization=organization,
                 intersight_base_url=intersight_base_url,
                 preconfigured_api_client=preconfigured_api_client,
                 default_multicast_policy_name=default_multicast_policy_name,
                 native_vlan_id=native_vlan_id
                 ))


def main():
    # Establish Maker specific variables
    maker_type = "Intersight VLAN Policy Maker"
    
    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url
                                                )
    
    # Starting the Policy Maker for Cisco Intersight
    print(f"\nStarting the {maker_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the Policy in Intersight
    vlan_policy_maker(
        intersight_api_key_id=None,
        intersight_api_key=None,
        policy_name=vlan_policy_name,
        vlan_list=vlan_list,
        default_multicast_policy_name=default_multicast_policy_name,
        native_vlan_id=native_vlan_id,
        policy_description=vlan_policy_description,
        organization=vlan_policy_organization,
        intersight_base_url=intersight_base_url,
        tags=vlan_policy_tags,
        preconfigured_api_client=main_intersight_api_client,
        ucs_domain_profile_name=ucs_domain_profile_name,
        fabric_interconnect=vlan_policy_fabric_interconnect
        )

    # Policy Maker completion
    print(f"\nThe {maker_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the Policy Maker for Cisco Intersight
sys.exit(0)
