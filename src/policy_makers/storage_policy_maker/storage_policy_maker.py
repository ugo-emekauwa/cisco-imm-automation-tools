"""
Storage Policy Maker for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The Storage Policy Maker for Cisco Intersight automates the creation
         of Storage Policies.
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
Storage Policy on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######

# General Settings
storage_policy_name = "Storage-Policy-1"
storage_policy_description = "A Cisco Intersight Storage Policy generated by the Storage Policy Maker."
storage_policy_organization = "default"
storage_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the storage_policy_tags dictionary if no tags are needed, for example: storage_policy_tags = {}

# Policy Detail Settings
## General Configuration
use_jbod_drives_for_virtual_drive_creation = False
unused_disks_state = "No Change"        # Options: "No Change", "Unconfigured Good", "JBOD"

## M.2 RAID Configuration
enable_m2_raid_configuration = False
m2_raid_controller_slot_for_virtual_drive_creation = "MSTOR-RAID-1 (MSTOR-RAID)"        # Options: "MSTOR-RAID-1 (MSTOR-RAID)", "MSTOR-RAID-2" "MSTOR-RAID-1,MSTOR-RAID-2"

## MRAID/RAID Controller Configuration
## NOTE - Here are example configurations for the drive_group_list and virtual_drive_list variables:
##
## -- Create one Drive Group as RAID 1 with a two-disk span.
##    Create one Virtual Drive set as the boot drive using all available disk space in the matched Drive Group.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID1",
##         "Drive Array Span 0": "0-1",
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Virtual Drive Name": "vd0",
##         "Expand to Available": True,
##         "Set as Boot Drive": True,
##         },
##        ]
##
##
## -- Create one Drive Group as RAID 5 with a three-disk span and a hot spare.
##    Create one Virtual Drive allocated 1000 MiB in the matched Drive Group.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID5",
##         "Drive Array Span 0": "0-2",
##         "Dedicated Hot Spares": "3"
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Virtual Drive Name": "vd0",
##         "Size": 1000,
##         },
##        ]
##
##
## -- Create one Drive Group as RAID 5 with a three-disk span and a hot spare.
##    Create another Drive Group as RAID 10 with two four-disk spans and two hot spares.
##    Create one Virtual Drive set as the boot drive using all available disk space in the first Drive Group and a modified strip size.
##    Create another Virtual Drive allocated 1000 MiB in the second Drive Group, a modified strip size, and modified policies.
##    Key attributes set to default settings do not have to be provided, but are shown as an example.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID5",
##         "Drive Array Span 0": "0-2",
##         "Dedicated Hot Spares": "3"
##         },
##        {"Drive Group Name": "dg1",
##         "RAID Level": "RAID10",
##         "Drive Array Span 0": "4-7",
##         "Drive Array Span 1": "8-11",
##         "Dedicated Hot Spares": "12,13"
##         }
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Number of Copies": 0,
##         "Virtual Drive Name": "vd0",
##         "Size": 0,
##         "Expand to Available": True,
##         "Set as Boot Drive": True,
##         "Strip Size": 128,
##         "Access Policy": "Default",
##         "Read Policy": "Default",
##         "Write Policy": "Default",
##         "Disk Cache": "Default"
##         },
##        {"Drive Group": "dg1",
##         "Number of Copies": 0,
##         "Virtual Drive Name": "vd1",
##         "Size": 1000,
##         "Expand to Available": False,
##         "Set as Boot Drive": False,
##         "Strip Size": 512,
##         "Access Policy": "Read Write",
##         "Read Policy": "Always Read Ahead",
##         "Write Policy": "Write Through",
##         "Disk Cache": "Enabled"
##         }
##        ]
##
##
## -- Create one Drive Group as RAID 5 with a three-disk span and a hot spare.
##    Create one Virtual Drive allocated 1000 MiB in the matched Drive Group.
##    Ten copies of the original Virtual Drive will also be bulk created using the "Number of Copies" key attribute.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID5",
##         "Drive Array Span 0": "0-2",
##         "Dedicated Hot Spares": "3"
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Number of Copies": 10,
##         "Virtual Drive Name": "vd",
##         "Size": 1000,
##         },
##        ]
##
##
## -- Create one Drive Group as RAID 5 with a three-disk span and a hot spare.
##    Bulk create twelve virtual drives allocated 1000 MiB each in the matched Drive Group using the "VirtualDrives" key attribute.
##    The "VirtualDrives" key attribute provides more precision in the naming and numbering of the virtual drives compared to the "Number of Copies" key attribute.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID5",
##         "Drive Array Span 0": "0-2",
##         "Dedicated Hot Spares": "3"
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "VirtualDrives": "2,4,6,8,10,12,20-25",
##         "Virtual Drive Name": "vd",
##         "Size": 1000,
##         },
##        ]
##
##
## -- Create one Drive Group as RAID 50 with the maximum of eight spans. Each span is a three-disk configuration.
##    Create one Virtual Drive allocated 7000000 MiB in the matched Drive Group.
##
##    drive_group_list = [
##        {"Drive Group Name": "dg0",
##         "RAID Level": "RAID50",
##         "Drive Array Span 0": "1-3",
##         "Drive Array Span 1": "4-6",
##         "Drive Array Span 2": "7-9",
##         "Drive Array Span 3": "10-12",
##         "Drive Array Span 4": "13-15",
##         "Drive Array Span 5": "16-18",
##         "Drive Array Span 6": "19-21",
##         "Drive Array Span 7": "22-24",
##         },
##        ]
##
##    virtual_drive_list = [
##        {"Drive Group": "dg0",
##         "Virtual Drive Name": "vd0",
##         "Size": 7000000,
##         },
##        ]

enable_mraid_raid_controller_configuration = True
global_hot_spares = ""

drive_group_list = [
    {"Drive Group Name": "dg0",
     "RAID Level": "RAID5",
     "Drive Array Span 0": "0-2",
     "Dedicated Hot Spares": "3"
     },
    {"Drive Group Name": "dg1",
     "RAID Level": "RAID10",
     "Drive Array Span 0": "4-5",
     "Drive Array Span 1": "6-7",
     "Dedicated Hot Spares": "8"
     }
    ]

virtual_drive_list = [
    {"Drive Group": "dg0",
     "Number of Copies": 0,
     "Virtual Drive Name": "vd0",
     "Size": 0,
     "Expand to Available": True,
     "Set as Boot Drive": True,
     "Strip Size": 64,
     "Access Policy": "Default",
     "Read Policy": "Default",
     "Write Policy": "Default",
     "Disk Cache": "Default"
     },
    {"Drive Group": "dg1",
     "Number of Copies": 0,
     "Virtual Drive Name": "vd1",
     "Size": 1000,
     "Expand to Available": False,
     "Set as Boot Drive": False,
     "Strip Size": 64,
     "Access Policy": "Default",
     "Read Policy": "Default",
     "Write Policy": "Default",
     "Disk Cache": "Default"
     }
    ]

## MRAID/RAID Single Drive RAID0 Configuration
enable_mraid_raid_single_drive_raid0_configuration = False
drive_slots = ""
strip_size_in_kib = 64      # Options: 64, 128, 256, 512, 1024
access_policy = "Default"       # Options: "Default", "Read Write", "Read Only", "Blocked"
read_policy = "Default"     # Options: "Default", "Always Read Ahead", "No Read Ahead"
write_policy = "Default"     # Options: "Default", "Write Through", "Write Back Good BBU", "Always Write Back"
disk_cache = "Default"     # Options: "Default", "Unchanged", "Enabled", "Disabled"

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

# UCS Server Profile Attachment Settings (If providing more than one UCS Server Profile and/or UCS Server Profile Template, additional entries should be comma-separated)
ucs_server_profile_names = ""
ucs_server_profile_template_names = ""

####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


import sys
import traceback
import json
import copy
import intersight
import re
import ast
import urllib3

# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.
    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to convert a list of numbers in string type format to list type format.
def integer_number_list_maker(string_list,
                              remove_duplicate_elements_in_list=True,
                              sort_elements_in_list=True
                              ):
    """This function converts a list of numbers in string type format
    to list type format. The provided string should contain commas,
    semicolons, or spaces as the separator between numbers. Number
    ranges can be configured using hyphens. An example entry would be
    "1, 2, 3, 4, 5, 6, 7, 7-14, 25". For each number in the list,
    leading and rear spaces will be removed. Duplicate numbers in the
    list are removed by default.

    Args:
        string_list (str):
            A string containing a number or range of numbers.
        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements
            are removed from the provided string list. The default
            value is True.
        sort_elements_in_list (bool):
            Optional; A setting to determine if the elements in the provided
            string list should be sorted in ascending order. The default value
            is True.

    Returns:
        A list of integers.            
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            provided_list (list):
                A list of elements to be separated.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.               
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element,
                                                               separator
                                                               )
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    integer_number_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list,
                                                " "
                                                )
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list,
                                                   ","
                                                   )
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list,
                                                       ";"
                                                       )
    # Split provided number ranges in the list by hyphens.
    for post_semicolon_split_number_set in post_semicolon_split_list:
        if "-" in post_semicolon_split_number_set:
            if post_semicolon_split_number_set[0] != "-" and post_semicolon_split_number_set[-1] != "-":
                hyphen_split_list = string_to_list_separator(post_semicolon_split_number_set,
                                                             "-"
                                                             )
                # Limit new list to a maximum of two elements.
                fixed_hyphen_split_list = hyphen_split_list[:2]
                # Enumerate the numbers in the hyphen split list.
                integer_starting_number_of_provided_range = int(fixed_hyphen_split_list[0])
                integer_ending_number_of_provided_range = int(fixed_hyphen_split_list[1])
                enumerated_range_list = range(
                    integer_starting_number_of_provided_range,
                    (integer_ending_number_of_provided_range + 1)
                    )
                integer_number_list.extend(enumerated_range_list)
        else:
            integer_of_current_number_set = int(post_semicolon_split_number_set)
            integer_number_list.append(integer_of_current_number_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        integer_number_list = list(set(integer_number_list))
    if sort_elements_in_list:
        integer_number_list = sorted(integer_number_list)
    return integer_number_list


# Establish function to convert a list of strings in string type format to list type format.
def string_to_list_maker(string_list,
                         remove_duplicate_elements_in_list=True
                         ):
    """This function converts a list of strings in string type format to list
    type format. The provided string should contain commas, semicolons, or
    spaces as the separator between strings. For each string in the list,
    leading and rear spaces will be removed. Duplicate strings in the list are
    removed by default.

    Args:
        string_list (str):
            A string containing an element or range of elements.

        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements are
            removed from the provided string list. The default value is True.

    Returns:
        A list of elements.   
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.

            separator (str):
                The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.   
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            provided_list (list): A list of elements to be separated.

            separator (str): The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.        
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element, separator)
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    staged_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list, " ")
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list, ",")
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list, ";")
    # Split provided list by hyphens.
    for post_semicolon_split_string_set in post_semicolon_split_list:
        staged_list.append(post_semicolon_split_string_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        final_list = list(set(staged_list))
    return final_list


# Establish Maker specific classes and functions
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerPolicy(UcsPolicy):
    """This class is used to configure a UCS Server Policy in Intersight that
    is logically directly attached to UCS Servers through UCS Server Profiles
    and/or UCS Server Profile Templates.
    """
    object_type = "Directly Attached UCS Server Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_names = ucs_server_profile_names
        self.ucs_server_profile_template_names = ucs_server_profile_template_names

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}')"
            )

    def _attach_ucs_server_profile(self):
        """This is a function to attach Intersight UCS Server Profiles and/or
        UCS Server Profile Templates to an Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []        
        # Attach UCS Server Profile
        if self.ucs_server_profile_names:
            provided_ucs_server_profile_list = string_to_list_maker(self.ucs_server_profile_names)
            for provided_ucs_server_profile in provided_ucs_server_profile_list:
                print("Attaching the UCS Server Profile named "
                      f"{provided_ucs_server_profile}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_server_profile,
                                                                           intersight_api_path="server/Profiles?$top=1000",
                                                                           object_type="UCS Server Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_moid,
                     "ObjectType": "server.Profile"}
                    )
        # Attach UCS Server Profile Templates
        if self.ucs_server_profile_template_names:
            provided_ucs_server_profile_template_list = string_to_list_maker(self.ucs_server_profile_template_names)
            for provided_ucs_server_profile_template in provided_ucs_server_profile_template_list:
                print("Attaching the UCS Server Profile Template named "
                      f"{provided_ucs_server_profile_template}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_template_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=provided_ucs_server_profile_template,
                                                                                    intersight_api_path="server/ProfileTemplates?$top=1000",
                                                                                    object_type="UCS Server Profile Template",
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_template_moid,
                     "ObjectType": "server.ProfileTemplate"}
                    )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class StoragePolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Storage Policy in Intersight.
    """
    object_type = "Storage Policy"
    intersight_api_path = "storage/StoragePolicies"
    object_variable_value_maps = [
        {"VariableName": "unused_disks_state",
         "Description": "Unused Disks State",
         "AttributeName": "UnusedDisksState",
         "Values": [
             {"FrontEndValue": "No Change",
              "BackEndValue": "NoChange"
              },
             {"FrontEndValue": "Unconfigured Good",
              "BackEndValue": "UnconfiguredGood"
              },
             {"FrontEndValue": "JBOD",
              "BackEndValue": "Jbod"
              }
             ],
         "ParentAttributeName": None
         },
        {"VariableName": "m2_raid_controller_slot_for_virtual_drive_creation",
         "Description": "M.2 RAID Controller Slot for Virtual Drive Creation",
         "AttributeName": "ControllerSlot",
         "Values": [
             {"FrontEndValue": "MSTOR-RAID-1 (MSTOR-RAID)",
              "BackEndValue": "MSTOR-RAID-1"
              },
             {"FrontEndValue": "MSTOR-RAID-1",
              "BackEndValue": "MSTOR-RAID-1"
              },
             {"FrontEndValue": "MSTOR-RAID",
              "BackEndValue": "MSTOR-RAID-1"
              },
             {"FrontEndValue": "MSTOR-RAID-2",
              "BackEndValue": "MSTOR-RAID-2"
              },
             {"FrontEndValue": "MSTOR-RAID-1,MSTOR-RAID-2",
              "BackEndValue": "MSTOR-RAID-1,MSTOR-RAID-2"
              }
             ],
         "ParentAttributeName": "M2VirtualDrive"
         },
        {"VariableName": "access_policy",
         "Description": "Access Policy for MRAID/RAID Single Drive RAID0 Configuration",
         "AttributeName": "AccessPolicy",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "Default"
              },
             {"FrontEndValue": "Read Write",
              "BackEndValue": "ReadWrite"
              },
             {"FrontEndValue": "Read Only",
              "BackEndValue": "ReadOnly"
              },
             {"FrontEndValue": "Blocked",
              "BackEndValue": "Blocked"
              }
             ],
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"VariableName": "read_policy",
         "Description": "Read Policy for MRAID/RAID Single Drive RAID0 Configuration",
         "AttributeName": "ReadPolicy",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "Default"
              },
             {"FrontEndValue": "Always Read Ahead",
              "BackEndValue": "ReadAhead"
              },
             {"FrontEndValue": "No Read Ahead",
              "BackEndValue": "NoReadAhead"
              }
             ],
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"VariableName": "write_policy",
         "Description": "Write Policy for MRAID/RAID Single Drive RAID0 Configuration",
         "AttributeName": "WritePolicy",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "Default"
              },
             {"FrontEndValue": "Write Through",
              "BackEndValue": "WriteThrough"
              },
             {"FrontEndValue": "Write Back Good BBU",
              "BackEndValue": "WriteBackGoodBbu"
              },
             {"FrontEndValue": "Always Write Back",
              "BackEndValue": "AlwaysWriteBack"
              }
             ],
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"VariableName": "disk_cache",
         "Description": "Disk Cache Policy for MRAID/RAID Single Drive RAID0 Configuration",
         "AttributeName": "DriveCache",
         "Values": [
             {"FrontEndValue": "Default",
              "BackEndValue": "Default"
              },
             {"FrontEndValue": "Unchanged",
              "BackEndValue": "NoChange"
              },
             {"FrontEndValue": "Enabled",
              "BackEndValue": "Enable"
              },
             {"FrontEndValue": "Disabled",
              "BackEndValue": "Disable"
              }
             ],
         "ParentAttributeName": "VirtualDrivePolicy"
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 use_jbod_drives_for_virtual_drive_creation=False,
                 unused_disks_state="No Change",
                 enable_m2_raid_configuration=False,
                 m2_raid_controller_slot_for_virtual_drive_creation="MSTOR-RAID-1 (MSTOR-RAID)",
                 global_hot_spares="",
                 enable_mraid_raid_single_drive_raid0_configuration=False,
                 drive_slots="",
                 strip_size_in_kib=64,
                 access_policy="Default",
                 read_policy="Default",
                 write_policy="Default",
                 disk_cache="Default"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.use_jbod_drives_for_virtual_drive_creation = use_jbod_drives_for_virtual_drive_creation
        self.unused_disks_state = unused_disks_state
        self.enable_m2_raid_configuration = enable_m2_raid_configuration
        self.m2_raid_controller_slot_for_virtual_drive_creation = m2_raid_controller_slot_for_virtual_drive_creation
        self.global_hot_spares = global_hot_spares
        self.enable_mraid_raid_single_drive_raid0_configuration = enable_mraid_raid_single_drive_raid0_configuration
        self.drive_slots = drive_slots
        self.strip_size_in_kib = strip_size_in_kib
        self.access_policy = access_policy
        self.read_policy = read_policy
        self.write_policy = write_policy
        self.disk_cache = disk_cache
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "UseJbodForVdCreation": self.use_jbod_drives_for_virtual_drive_creation,
            "M2VirtualDrive": {
                "Enable": self.enable_m2_raid_configuration
                },
            "GlobalHotSpares": self.global_hot_spares,
            "Raid0Drive": {
                "Enable": self.enable_mraid_raid_single_drive_raid0_configuration,
                "DriveSlots": self.drive_slots
                },
            "VirtualDrivePolicy": {
                "StripSize": self.strip_size_in_kib
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.use_jbod_drives_for_virtual_drive_creation}, "
            f"'{self.unused_disks_state}', "
            f"{self.enable_m2_raid_configuration}, "
            f"'{self.m2_raid_controller_slot_for_virtual_drive_creation}', "
            f"'{self.global_hot_spares}', "
            f"{self.enable_mraid_raid_single_drive_raid0_configuration}, "
            f"'{self.drive_slots}', "
            f"{self.strip_size_in_kib}, "
            f"'{self.access_policy}', "
            f"'{self.read_policy}', "
            f"'{self.write_policy}', "
            f"'{self.disk_cache}')"
            )

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                # Check if current attribute has a back-end Parent attribute and nest as needed, otherwise place in known attribute name directly
                if object_variable.get("ParentAttributeName"):
                    if object_variable.get("ParentAttributeName") not in self.intersight_api_body:
                        self.intersight_api_body[object_variable.get("ParentAttributeName")] = {
                            object_variable["AttributeName"]: backend_object_variable_value
                            }
                    else:
                        self.intersight_api_body[object_variable.get("ParentAttributeName")].update(
                            {object_variable["AttributeName"]: backend_object_variable_value
                             }
                            )
                    self.intersight_api_body.pop(object_variable["AttributeName"], None)
                else:
                    self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with the "VirtualDrivePolicy" dictionary nested under the "Raid0Drive" key
        if self.intersight_api_body.get("VirtualDrivePolicy"):
            self.intersight_api_body["Raid0Drive"].update(
                {"VirtualDrivePolicy": self.intersight_api_body.get("VirtualDrivePolicy")
                 }
                )                
            self.intersight_api_body.pop("VirtualDrivePolicy")
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class IdConfigurator:
    """This class serves as a base class for configuring the IDs of objects in
    Intersight policies. Examples of the objects that would use these IDs are
    ports, VLANs, VSANs, vNICs, vHBAs, and drives.
    """
    object_type = "ID Configurator"
    attributes_that_require_special_handling = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        if id_list is None:
            self.id_list = []
        else:
            self.id_list = id_list
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def enumerated_id_range_retriever(self,
                                      id_dictionary,
                                      id_key
                                      ):
        """This function captures provided ID ranges for enumeration and
        returns the enumerated list.

        Args:
            id_dictionary (dict):
                The dictionary containing the ID or range of IDs to be
                enumerated.
            id_key (str):
                The key name of the ID to be enumerated.

       Returns:
            A list of enumerated integers for the provided IDs in a format
            consumable by the Intersight API.
            
        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the ID type is inaccessible from the
                ID dictionary. The key may be missing or misspelled.       
        """
        # Verify ID range has been configured in provided ID dictionary
        try:
            provided_id_range = id_dictionary[id_key]
        except KeyError:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} "
                  f"settings for the {self.policy_type} named "
                  f"{self.policy_name}, there was an issue accessing the range "
                  f"of IDs to be configured.")
            print(f"Please verify a key named '{id_key}' exists in the "
                  f"ID list variable for the {self.object_type} "
                  "settings.\n")
            print("Please review and resolve any error messages, then "
                  "re-attempt execution.\n")
            print("Exception Message: ")
            traceback.print_exc()
            sys.exit(0)
        return integer_number_list_maker(provided_id_range)

    def attribute_handler(self,
                          staged_intersight_api_body
                          ):
        """
        This function is used to retrieve the MOIDs for provided attributes
        that require them for configuration through the Intersight API.

        Args:
            staged_intersight_api_body (dict):
                The staged Intersight API body dictionary being prepared for
                configuration on Intersight.

        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the name of a required attribute is
                inaccessible from the ID dictionary. The key may be missing or
                misspelled.
        """
        if self.attributes_that_require_special_handling:
            for id_attribute in self.attributes_that_require_special_handling:
                # If provided, add default attribute option to staged Intersight API body
                if id_attribute.get("DefaultOption"):
                    id_attribute_default_option = getattr(self,
                                                          id_attribute.get("DefaultOption")
                                                          )
                    if id_attribute_default_option:
                        if id_attribute["Name"] not in staged_intersight_api_body:
                            staged_intersight_api_body[id_attribute["Name"]] = id_attribute_default_option
                # Verify mandatory attributes are present in the staged Intersight API body
                if id_attribute.get("Mandatory"):
                    try:
                        verify_id_attribute_presence = staged_intersight_api_body[id_attribute["Name"]]
                    except KeyError:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{self.object_type} settings for the "
                              f"{self.policy_type} named {self.policy_name}, "
                              f"there was an issue accessing the value for "
                              f"the {id_attribute['Type']}.")
                        print("Please verify the key named "
                              f"'{id_attribute['Name']}' exists in the "
                              f"ID list variable for the {self.object_type} "
                              "settings.\n")
                        print("Please review and resolve any error messages, "
                              f"then re-attempt execution.\n")
                        print("Exception Message: ")
                        traceback.print_exc()
                        sys.exit(0)
                    # Retrieve MOID if required
                    if id_attribute.get("MoidRequired"):
                        id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                             intersight_api_key=None,
                                                                             object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                             intersight_api_path=f'{id_attribute["IntersightAPIPath"]}?$top=1000',
                                                                             object_type=id_attribute["Type"],
                                                                             organization=self.organization,
                                                                             preconfigured_api_client=self.api_client
                                                                             )
                        staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}
                else:
                    # Retrieve MOID if required for optional attributes
                    if id_attribute.get("MoidRequired"):
                        if staged_intersight_api_body.get(id_attribute["Name"]):
                            id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                 intersight_api_key=None,
                                                                                 object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                                 intersight_api_path=f'{id_attribute["IntersightAPIPath"]}?$top=1000',
                                                                                 object_type=id_attribute["Type"],
                                                                                 organization=self.organization,
                                                                                 preconfigured_api_client=self.api_client
                                                                                 )
                            staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}


class IntersightObject(IdConfigurator):
    """This class serves as a base class for configuring Intersight Objects in
    Intersight policies.
    """
    object_type = "Intersight Object"
    id_type = "IntersightObject"

    def _intersight_object_attribute_map_handler(self,
                                                 staged_intersight_object_dictionary,
                                                 intersight_object_attribute_map_dictionary,
                                                 object_type=None
                                                 ):
        """This is a function to handle setting of Intersight Object attributes
        which have mismatched Front-End and Back-End labeling, set provided
        default values, retrieve any required MOIDs, and set/verify Parent
        attributes.
        
        Args:
            staged_intersight_object_dictionary (dict):
                An Intersight Object dictionary extracted from the provided
                Intersight Object list being prepared and staged for posting to
                Intersight.
            intersight_object_attribute_map_dictionary (dict):
                A dictionary containing attribute data, including front-end
                (GUI) to back-end (API) mapped values.
            object_type (str):
                Optional; The type of Intersight object. The default value is
                None.
        """
        if object_type is None:
            object_type = self.object_type
        # Check for attribute front-end name key in the dictionary
        if intersight_object_attribute_map_dictionary["FrontEndName"] in staged_intersight_object_dictionary:
            # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
            if intersight_object_attribute_map_dictionary["BackEndName"] not in staged_intersight_object_dictionary:
                staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["FrontEndName"])
            # Remove the front-end name key from the dictionary
            staged_intersight_object_dictionary.pop(intersight_object_attribute_map_dictionary["FrontEndName"])
        # Check if current attribute has a provided default option, if so, add default attribute option to staged dictionary (staged Intersight API body)
        if intersight_object_attribute_map_dictionary.get("DefaultOption"):
            intersight_object_attribute_default_option = getattr(self,
                                                                 intersight_object_attribute_map_dictionary.get("DefaultOption")
                                                                 )
            if intersight_object_attribute_default_option:
                if intersight_object_attribute_map_dictionary["BackEndName"] not in staged_intersight_object_dictionary:
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = intersight_object_attribute_default_option
        # Establish default automatic insertion status of current attribute
        automatic_insertion_of_attribute_value_performed = False
        # Check if current attribute is mandatory and verify presence in the staged dictionary (staged Intersight API body)
        if intersight_object_attribute_map_dictionary.get("Mandatory"):
            if not any(
                attribute_name_key in
                staged_intersight_object_dictionary for
                attribute_name_key in
                (intersight_object_attribute_map_dictionary["FrontEndName"],
                 intersight_object_attribute_map_dictionary["BackEndName"],
                 intersight_object_attribute_map_dictionary["ParentAttributeName"]
                 )
                ):
                if intersight_object_attribute_map_dictionary.get("AutomaticInsertion"):
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = intersight_object_attribute_map_dictionary.get("AutomaticInsertionValue")
                    automatic_insertion_of_attribute_value_performed = True
                else:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{intersight_object_attribute_map_dictionary['Description']}.")
                    print("Please verify the following key exists in the "
                          "appropriate dictionary of the "
                          f"associated {object_type} list variable, then "
                          "re-attempt execution:\n")
                    if intersight_object_attribute_map_dictionary['FrontEndName']:
                        print(f"'{intersight_object_attribute_map_dictionary['FrontEndName']}'\n")
                    else:
                        print(f"'{intersight_object_attribute_map_dictionary['BackEndName']}'\n")
                    sys.exit(0)
        # Check for front-end to back-end value mapping
        if intersight_object_attribute_map_dictionary.get("FronttoBackEndValueMaps"):
            if (
                intersight_object_attribute_map_dictionary["BackEndName"] in
                staged_intersight_object_dictionary and
                not automatic_insertion_of_attribute_value_performed
                ):
                # Retrieve the provided attribute value
                provided_attribute_value = staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"])
                # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                try:
                    provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{intersight_object_attribute_map_dictionary['Description']}.")
                    print("The value provided was "
                          f"{provided_attribute_value}.")
                    print("Please verify that the value has been provided "
                          "in an accepted string format.")
                    print("Please review and resolve any error messages, "
                          "then re-attempt execution.\n")
                    sys.exit(0)
                # Create list of known and mapped front-end to back-end values
                front_to_backend_value_maps_key_list = list(intersight_object_attribute_map_dictionary["FronttoBackEndValueMaps"])
                # Replace known and reformatted front-end value with known and mapped back-end value
                if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                    provided_attribute_value_mapped = intersight_object_attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                else:
                    print("\nWARNING: An unknown "
                          f"{intersight_object_attribute_map_dictionary['Description']} "
                          f"value of '{provided_attribute_value}' has been "
                          f"provided for the {object_type} settings!")
                    print("An attempt will be made to configure the "
                          "unknown "
                          f"{intersight_object_attribute_map_dictionary['Description']} "
                          "value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{intersight_object_attribute_map_dictionary['Description']}, "
                          "then re-attempt execution:\n")
                    print(*intersight_object_attribute_map_dictionary["FixedFrontEndValues"],
                          sep=", "
                          )
        # Check if current attribute's MOID is required and retrieve if needed
        if intersight_object_attribute_map_dictionary.get("MoidRequired"):
            if staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"]):
                intersight_object_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]],
                                                                                    intersight_api_path=f'{intersight_object_attribute_map_dictionary["IntersightAPIPath"]}?$top=1000',
                                                                                    object_type=intersight_object_attribute_map_dictionary["Description"],
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary["BackEndName"]] = {"Moid": intersight_object_attribute_moid}
        # Check if current attribute has a back-end Parent attribute and nest as needed
        if intersight_object_attribute_map_dictionary.get("ParentAttributeName"):
            if (
                staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"])
                or
                staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"]) == 0
                ):
                if intersight_object_attribute_map_dictionary.get("ParentAttributeName") not in staged_intersight_object_dictionary:
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary.get("ParentAttributeName")] = {
                        intersight_object_attribute_map_dictionary["BackEndName"]: staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"])
                        }
                else:
                    staged_intersight_object_dictionary[intersight_object_attribute_map_dictionary.get("ParentAttributeName")].update(
                        {intersight_object_attribute_map_dictionary["BackEndName"]: staged_intersight_object_dictionary.get(intersight_object_attribute_map_dictionary["BackEndName"])
                         }
                        )
                staged_intersight_object_dictionary.pop(intersight_object_attribute_map_dictionary["BackEndName"], None)


class DriveGroup(IntersightObject):
    """This class serves as a base class for configuring Drive Groups in Intersight
    policies.
    """
    object_type = "Drive Group"
    id_type = "DriveGroup"
    intersight_api_path = "storage/DriveGroups"
    policy_type = "Storage Policy"
    policy_intersight_api_path = "storage/StoragePolicies"
    policy_class_name = "StoragePolicy"
    intersight_object_attribute_maps = [
        {"FrontEndName": "Drive Group Name",
         "BackEndName": "Name",
         "Description": "Drive Group Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "RAID Level",
         "BackEndName": "RaidLevel",
         "Description": "RAID Level",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "RAID0",
             "RAID1",
             "RAID5",
             "RAID6",
             "RAID10",
             "RAID50",
             "RAID60"
             ],
         "FronttoBackEndValueMaps": {
             "raid0": "Raid0",
             "raid1": "Raid1",
             "raid5": "Raid5",
             "raid6": "Raid6",
             "raid10": "Raid10",
             "raid50": "Raid50",
             "raid60": "Raid60"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 0",
         "BackEndName": "DriveArraySpan0",
         "Description": "Drive Array Span 0",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 1",
         "BackEndName": "DriveArraySpan1",
         "Description": "Drive Array Span 1",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 2",
         "BackEndName": "DriveArraySpan2",
         "Description": "Drive Array Span 2",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 3",
         "BackEndName": "DriveArraySpan3",
         "Description": "Drive Array Span 3",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 4",
         "BackEndName": "DriveArraySpan4",
         "Description": "Drive Array Span 4",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 5",
         "BackEndName": "DriveArraySpan5",
         "Description": "Drive Array Span 5",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 6",
         "BackEndName": "DriveArraySpan6",
         "Description": "Drive Array Span 6",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Drive Array Span 7",
         "BackEndName": "DriveArraySpan7",
         "Description": "Drive Array Span 7",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Dedicated Hot Spares",
         "BackEndName": "DedicatedHotSpares",
         "Description": "Dedicated Hot Spares",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "ManualDriveGroup"
         }
        ]
    virtual_drive_object_type = "Virtual Drive"
    virtual_drive_id_type = "VirtualDrive"
    virtual_drive_attribute_maps = [
        {"FrontEndName": "Drive Group",
         "BackEndName": "DriveGroup",
         "Description": "Drive Group",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Number of Copies",
         "BackEndName": "NumberofCopies",
         "Description": "Number of Copies",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Virtual Drive Name",
         "BackEndName": "Name",
         "Description": "Virtual Drive Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": None,
         "BackEndName": "Size",
         "Description": "Virtual Drive Size",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Expand to Available",
         "BackEndName": "ExpandToAvailable",
         "Description": "Expand to Available",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Set as Boot Drive",
         "BackEndName": "BootDrive",
         "Description": "Set as Boot Drive",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Strip Size",
         "BackEndName": "StripSize",
         "Description": "Strip Size",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"FrontEndName": "Access Policy",
         "BackEndName": "AccessPolicy",
         "Description": "Access Policy",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Default",
             "Read Write",
             "Read Only",
             "Blocked"
             ],
         "FronttoBackEndValueMaps": {
             "default": "Default",
             "readwrite": "ReadWrite",
             "readonly": "ReadOnly",
             "blocked": "Blocked"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"FrontEndName": "Read Policy",
         "BackEndName": "ReadPolicy",
         "Description": "Read Policy",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Default",
             "Always Read Ahead",
             "No Read Ahead"
             ],
         "FronttoBackEndValueMaps": {
             "default": "Default",
             "alwaysreadahead": "ReadAhead",
             "noreadahead": "NoReadAhead"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"FrontEndName": "Write Policy",
         "BackEndName": "WritePolicy",
         "Description": "Write Policy",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Default",
             "Write Through",
             "Write Back Good BBU",
             "Always Write Back"
             ],
         "FronttoBackEndValueMaps": {
             "default": "Default",
             "writethrough": "WriteThrough",
             "writebackgoodbbu": "WriteBackGoodBbu",
             "alwayswriteback": "AlwaysWriteBack"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         },
        {"FrontEndName": "Disk Cache",
         "BackEndName": "DriveCache",
         "Description": "Disk Cache",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Default",
             "Unchanged",
             "Enabled",
             "Disabled"
             ],
         "FronttoBackEndValueMaps": {
             "default": "Default",
             "unchanged": "NoChange",
             "enabled": "Enable",
             "disabled": "Disable"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VirtualDrivePolicy"
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 virtual_drive_list=None
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        if virtual_drive_list is None:
            self.virtual_drive_list = []            
        else:
            self.virtual_drive_list = virtual_drive_list

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.virtual_drive_list})"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def _post_intersight_drive_group(drive_group_name,
                                         body,
                                         moid=None
                                         ):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                drive_group_name (str):
                    The name of the Drive Group to be posted on Intersight.
                body (dict):
                    The body of the object to be posted on Intersight.
                moid (str):
                    Optional; The Intersight MOID of the object to be posted
                    on Intersight. The default value is None.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            if moid:
                full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
            else:
                full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                if moid:
                    print(f"The configuration of {self.object_type} "
                          f"{drive_group_name} has been updated.")
                else:
                    print(f"The configuration of {self.object_type} "
                          f"{drive_group_name} has completed.")
                return "The POST method was successful."
            except Exception:
                print("\nA configuration error has occurred!\n")
                if moid:
                    print(f"Unable to update {self.object_type} "
                          f"{drive_group_name} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                else:
                    print(f"Unable to configure {self.object_type} "
                          f"{drive_group_name} under the Intersight "
                          f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."

        def _intersight_object_api_body_staging_updates(object_dictionary,
                                                        remove_key_list=None,
                                                        object_type=None,
                                                        intersight_object_attribute_maps=None,
                                                        insert_policy_moid=True
                                                        ):
            """This is a function to handle converting a provided Intersight Object
            dictionary into an API body that is prepped and staged for
            posting to Intersight. Attributes are modified and converted for
            compatibility as needed.
            
            Args:
                object_dictionary (dict):
                    An Intersight Object dictionary extracted from the provided
                    Intersight Object list being prepared and staged for posting to
                    Intersight.
                remove_key_list (list):
                    The list of keys to be removed from the Intersight API
                    body, prior to posting to Intersight. The default value is
                    None.
                object_type (str):
                    Optional; The type of Intersight object. The default value
                    is None.
                intersight_object_attribute_maps (list):
                    Optional; The type of Intersight object attribute maps. The
                    default value is None.
                insert_policy_moid (bool):
                    Determines if the MOID of the parent Intersight policy is
                    inserted into the Intersight API body prior to posting to 
                    Intersight. The default value is True.

            Returns:
                A dictionary containing API body data compatible with
                Intersight.
            """
            if remove_key_list is None:
                remove_key_list = []
            if object_type is None:
                object_type = self.object_type
            if intersight_object_attribute_maps is None:
                intersight_object_attribute_maps = self.intersight_object_attribute_maps
            staged_intersight_api_body = copy.deepcopy(object_dictionary)
            if insert_policy_moid:
                staged_intersight_api_body[self.policy_class_name] = {"Moid": policy_moid}
            # Handle setting of attributes which have mismatched Front-End and Back-End labeling, set provided default values, retrieve any required MOIDs and verify/set Parent attributes
            for intersight_object_attribute_map_dictionary in intersight_object_attribute_maps:
                self._intersight_object_attribute_map_handler(
                    staged_intersight_object_dictionary=staged_intersight_api_body,
                    intersight_object_attribute_map_dictionary=intersight_object_attribute_map_dictionary,
                    object_type=object_type
                    )
            # Remove keys not needed for posting or patching the Intersight Object from the staged_intersight_api_body
            for key in remove_key_list:
                staged_intersight_api_body.pop(key, None)
            return staged_intersight_api_body

        def _drive_array_span_configurator(drive_group_intersight_api_body,
                                           drive_array_span_maximum=8
                                           ):
            """This is a function to handle updating the Drive Group Intersight
            API body with the provided Drive Array Spans in the correct order
            and nested under the "SpanGroups" key, as required by the backend
            Intersight API.

            Args:
                drive_group_intersight_api_body (dict):
                    A Drive Group Intersight API body being prepared
                    and staged for posting to Intersight.
                drive_array_span_maximum (int):
                    The maximum number of allowed Drive Array Spans for a
                    Drive Group in Intersight. The default value is 8.
            """
            # Establish Drive Array Span Group list
            span_group_list = []
            # Cycle through present Drive Array Spans and add to span_group_list
            for drive_array_span_id in range(drive_array_span_maximum):
                if drive_group_intersight_api_body.get(f"DriveArraySpan{drive_array_span_id}"):
                    span_group_list.append(
                        {"ClassId": "storage.SpanDrives",
                         "ObjectType": "storage.SpanDrives",
                         "Slots": drive_group_intersight_api_body.get(f"DriveArraySpan{drive_array_span_id}")
                         }
                        )
                    drive_group_intersight_api_body.pop(f"DriveArraySpan{drive_array_span_id}")
            # Nest provided Drive Array Spans in span_group_list under "SpanGroups" key
            if "ManualDriveGroup" not in drive_group_intersight_api_body:
                drive_group_intersight_api_body["ManualDriveGroup"] = {
                    "SpanGroups": span_group_list
                    }
            else:
                drive_group_intersight_api_body["ManualDriveGroup"].update(
                    {"SpanGroups": span_group_list
                     }
                    )    

        def _virtual_drive_configurator(virtual_drive_list,
                                        drive_group_intersight_api_body
                                        ):
            """This is a function to handle updating the Drive Group Intersight
            API body with the provided Virtual Drives, nested under the
            "VirtualDrives" key, as required by the backend Intersight API.

            Args:
                virtual_drive_list (list):
                    A list of Virtual Drive dictionaries ready to be added 
                    to a matching Drive Group Intersight API body.
                drive_group_intersight_api_body (dict):
                    A Drive Group Intersight API body being prepared
                    and staged for posting to Intersight.
            """
            # Cycle through virtual_drive_list and add Virtual Drives to matching Drive Group
            for virtual_drive in virtual_drive_list:
                if virtual_drive.get("DriveGroup") == drive_group_intersight_api_body.get("Name"):
                    # Nest provided Virtual Drives in virtual_drive_list under "VirtualDrives" key
                    if "VirtualDrives" not in drive_group_intersight_api_body:
                        virtual_drive.pop("DriveGroup")
                        drive_group_intersight_api_body["VirtualDrives"] = [virtual_drive]
                    else:
                        virtual_drive.pop("DriveGroup")
                        drive_group_intersight_api_body["VirtualDrives"].append(virtual_drive)

        def _stage_virtual_drives(staged_virtual_drive_intersight_api_body,
                                  staged_virtual_drive_list,
                                  maximum_number_of_virtual_drive_copies=10
                                  ):
            """This is a function to handle staging provided Virtual Drives in the
            staged_virtual_drive_list including any Virtual Drive copies that have been
            specified through the 'NumberofCopies' key.

            Args:
                staged_virtual_drive_list (dict):
                    A Virtual Drive Intersight API body that has been
                    staged by the _intersight_object_api_body_staging_updates
                    function and is being prepared to be added 
                    to a matching Drive Group Intersight API body.
                staged_virtual_drive_list (list):
                    A list that will contain staged Virtual Drive
                    dictionaries that are ready to be added 
                    to a matching Drive Group Intersight API body.
                maximum_number_of_virtual_drive_copies (int):
                    The maximum number of Virtual Drive copies allowed
                    by Intersight. The amount of Virtual Drive copies
                    configured will be limited by this value. The default value
                    is 10.
            """
            current_number_of_virtual_drive_copies = 0

            if staged_virtual_drive_intersight_api_body.get("NumberofCopies"):
                original_virtual_drive_name = staged_virtual_drive_intersight_api_body.get("Name")
                provided_virtual_drive_copy_number = staged_virtual_drive_intersight_api_body.get("NumberofCopies")
                staged_virtual_drive_intersight_api_body.pop("NumberofCopies")
                staged_virtual_drive_list.append(staged_virtual_drive_intersight_api_body)
                if not staged_virtual_drive_intersight_api_body.get("ExpandToAvailable"):
                    target_drive_group = staged_virtual_drive_intersight_api_body.get("DriveGroup")
                    try:
                        for copy_id in range(provided_virtual_drive_copy_number):
                            if current_number_of_virtual_drive_copies >= maximum_number_of_virtual_drive_copies:
                                print("\nA configuration warning has occurred!\n")
                                print(f"A number of {provided_virtual_drive_copy_number} copies has been requested "
                                      f"for the Virtual Drive named {original_virtual_drive_name}.")
                                print(f"However the maximum number of {maximum_number_of_virtual_drive_copies} "
                                      "copies has been reached for "
                                      f"{original_virtual_drive_name}.")
                                print("No more Virtual Drive copies can be "
                                      f"configured for {original_virtual_drive_name}.")
                                print("An attempt will still be made to "
                                      "configure up to "
                                      f"{maximum_number_of_virtual_drive_copies} copies.\n")
                                break
                            copy_virtual_drive_name = f"{original_virtual_drive_name}-{copy_id + 1:02d}"
                            staged_virtual_drive_intersight_api_body_copy = copy.deepcopy(staged_virtual_drive_intersight_api_body)
                            staged_virtual_drive_intersight_api_body_copy["Name"] = copy_virtual_drive_name
                            staged_virtual_drive_intersight_api_body_copy["BootDrive"] = False
                            staged_virtual_drive_list.append(staged_virtual_drive_intersight_api_body_copy)
                            current_number_of_virtual_drive_copies += 1
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print(f"During the configuration of the {self.object_type} "
                              f"settings for the {self.policy_type} named "
                              f"{self.policy_name}, there was an issue creating copies "
                              f"of the Virtual Drive named {original_virtual_drive_name}")
                        print(f"Please verify the key for the Number of Copies in the "
                              "virtual_drive_list variable has an accepted integer value.\n")
                        print("Exception Message: ")
                        traceback.print_exc()        
                else:
                    print("\nA configuration warning has occurred!\n")
                    print(f"A number of {provided_virtual_drive_copy_number} copies has been requested "
                          f"for the Virtual Drive named {original_virtual_drive_name}.")
                    print(f"However {original_virtual_drive_name} is set to "
                          "enable 'Expand to Available' for disk space, so the "
                          "copy request cannot be fulfilled.")
                    print("An attempt will still be made to configure the original "
                          f"Virtual Drive {original_virtual_drive_name}.\n")
            else:
                staged_virtual_drive_intersight_api_body.pop("NumberofCopies", None)
                staged_virtual_drive_list.append(staged_virtual_drive_intersight_api_body)

        # Create list of Virtual Drives provided from virtual_drive_list
        staged_virtual_drive_list = []
        if self.virtual_drive_list:
            print("Configuring the requested Virtual Drives for the Drive Groups...")
            virtual_drives_id_key = f"{self.virtual_drive_id_type}s"
            for virtual_drive_dictionary in self.virtual_drive_list:
                if virtual_drive_dictionary.get(virtual_drives_id_key):
                    virtual_drives_enumerated_id_range = self.enumerated_id_range_retriever(virtual_drive_dictionary,
                                                                                            virtual_drives_id_key
                                                                                            )
                    staged_virtual_drive_intersight_api_body = _intersight_object_api_body_staging_updates(object_dictionary=virtual_drive_dictionary,
                                                                                                           remove_key_list=[
                                                                                                               virtual_drives_id_key
                                                                                                               ],
                                                                                                           object_type=self.virtual_drive_object_type,
                                                                                                           intersight_object_attribute_maps=self.virtual_drive_attribute_maps,
                                                                                                           insert_policy_moid=False
                                                                                                           )
                    current_virtual_drive_id_name_prefix = staged_virtual_drive_intersight_api_body.get("Name")
                    current_virtual_drive_id_instance = 0
                    for current_virtual_drive_id in virtual_drives_enumerated_id_range:
                        current_virtual_drive_id_full_name = f"{current_virtual_drive_id_name_prefix}{current_virtual_drive_id}"
                        staged_virtual_drive_intersight_api_body_id_instance = copy.deepcopy(staged_virtual_drive_intersight_api_body)
                        staged_virtual_drive_intersight_api_body_id_instance["Name"] = current_virtual_drive_id_full_name
                        if current_virtual_drive_id_instance >= 1:
                            staged_virtual_drive_intersight_api_body_id_instance["BootDrive"] = False    
                        _stage_virtual_drives(
                            staged_virtual_drive_intersight_api_body_id_instance,
                            staged_virtual_drive_list
                            )
                        current_virtual_drive_id_instance += 1
                else:
                    staged_virtual_drive_intersight_api_body = _intersight_object_api_body_staging_updates(object_dictionary=virtual_drive_dictionary,
                                                                                                           remove_key_list=[
                                                                                                               virtual_drives_id_key
                                                                                                               ],
                                                                                                           object_type=self.virtual_drive_object_type,
                                                                                                           intersight_object_attribute_maps=self.virtual_drive_attribute_maps,
                                                                                                           insert_policy_moid=False
                                                                                                           )
                    _stage_virtual_drives(
                        staged_virtual_drive_intersight_api_body,
                        staged_virtual_drive_list
                        )

        # Create and post Intersight API body for each provided Drive Group from id_list
        if self.id_list:
            drive_groups_id_key = f"{self.id_type}s"
            # Retrieving the Storage Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=f"{self.policy_intersight_api_path}?$top=1000",
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           intersight_base_url=self.intersight_base_url,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                if id_dictionary.get(drive_groups_id_key):
                    drive_groups_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                                          drive_groups_id_key
                                                                                          )
                    staged_drive_group_intersight_api_body = _intersight_object_api_body_staging_updates(object_dictionary=id_dictionary,
                                                                                                         remove_key_list=[drive_groups_id_key],
                                                                                                         )
                    _drive_array_span_configurator(staged_drive_group_intersight_api_body)
                    _virtual_drive_configurator(
                        staged_virtual_drive_list,
                        staged_drive_group_intersight_api_body
                        )
                    current_drive_group_id_name_prefix = staged_drive_group_intersight_api_body.get("Name")
                    for current_drive_group_id in drive_groups_enumerated_id_range:
                        current_drive_group_id_full_name = f"{current_drive_group_id_name_prefix}{current_drive_group_id}"
                        staged_drive_group_intersight_api_body["Name"] = current_drive_group_id_full_name
                        _post_intersight_drive_group(
                            current_drive_group_id_full_name,
                            staged_drive_group_intersight_api_body
                            )
                else:
                    staged_drive_group_intersight_api_body = _intersight_object_api_body_staging_updates(object_dictionary=id_dictionary,
                                                                                                         remove_key_list=[drive_groups_id_key],
                                                                                                         )
                    _drive_array_span_configurator(staged_drive_group_intersight_api_body)
                    _virtual_drive_configurator(
                        staged_virtual_drive_list,
                        staged_drive_group_intersight_api_body
                        )
                    current_drive_group_id_full_name = staged_drive_group_intersight_api_body.get("Name")
                    _post_intersight_drive_group(
                        current_drive_group_id_full_name,
                        staged_drive_group_intersight_api_body
                        )


def storage_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    use_jbod_drives_for_virtual_drive_creation=False,
    unused_disks_state="No Change",
    enable_m2_raid_configuration=False,
    m2_raid_controller_slot_for_virtual_drive_creation="MSTOR-RAID-1 (MSTOR-RAID)",
    enable_mraid_raid_controller_configuration=False,
    global_hot_spares="",
    drive_group_list=None,
    virtual_drive_list=None,
    enable_mraid_raid_single_drive_raid0_configuration=False,
    drive_slots="",
    strip_size_in_kib=64,
    access_policy="Default",
    read_policy="Default",
    write_policy="Default",
    disk_cache="Default",    
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Storage Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        use_jbod_drives_for_virtual_drive_creation (bool):
            Optional; Enable using JBOD (Just a Bunch of Disks) drives for
            creating Virtual Drives. The default value is False.
        unused_disks_state (str):
            Optional; The default state of unused disks. The accepted values
            are "No Change", "Unconfigured Good", and "JBOD". The default value
            is "No Change".
        enable_m2_raid_configuration (bool):
            Optional; Enable setting M.2 RAID configuration. The default value
            is False.
        global_hot_spares (str):
            Optional; A set of disks that can be used as global hot spares for
            all RAID groups. The provided value can be a single number or range
            of numbers in string format e.g. "4", "4-7", or "4,5,6,7". The
            default value is an empty string ("").
        drive_group_list (list):
            Optional; The list of dictionary entries for Drive Groups to
            be configured. The default value is None. An example entry is:
            [{"Drive Group Name": "dg0",
              "RAID Level": "RAID5",
              "Drive Array Span 0": "0-2",
              "Dedicated Hot Spares": "3"},
             {"Drive Group Name": "dg1",
              "RAID Level": "RAID10",
              "Drive Array Span 0": "4-5",
              "Drive Array Span 1": "6-7",
              "Dedicated Hot Spares": "8"},].
            A "Drive Group Name" key with a string value must be configured to
            specify the Drive Group name. A "RAID Level" key can be set to
            specify the RAID level with a string value of "RAID0", "RAID1",
            "RAID5", "RAID6", "RAID10", "RAID50", or "RAID60". The default
            value is "RAID0". A "Drive Array Span 0" key with a string value
            specifying the disks assigned to drive array span 0 is mandatory.
            The disks should be provided in a comma or hyphen separated range.
            Depending on the RAID level, up to an additional seven drive arrays
            can be assigned using the keys "Drive Array Span 1",
            "Drive Array Span 2", "Drive Array Span 3", "Drive Array Span 4",
            "Drive Array Span 5", "Drive Array Span 6", and
            "Drive Array Span 7". Level RAID 10 and above require a minimum of
            two drive array spans. Optional key settings such as
            "Dedicated Hot Spares" can also be configured in each list
            dictionary. If configuring Drive Groups, an associated Virtual
            Drive must also be configured using the virtual_drive_list argument.
        virtual_drive_list (list):
            Optional; The list of dictionary entries for Virtual Drives to
            be configured. The default value is None. An example entry is:
            [{"Drive Group": "dg0",
              "Number of Copies": 0,
              "Virtual Drive Name": "vd0",
              "Size": 0,
              "Expand to Available": True,
              "Set as Boot Drive": True,
              "Strip Size": 64,
              "Access Policy": "Default",
              "Read Policy": "Default",
              "Write Policy": "Default",
              "Disk Cache": "Default"},
             {"Drive Group": "dg1",
              "Number of Copies": 0,
              "Virtual Drive Name": "vd1",
              "Size": 1000,
              "Expand to Available": False,
              "Set as Boot Drive": False,
              "Strip Size": 64,
              "Access Policy": "Default",
              "Read Policy": "Default",
              "Write Policy": "Default",
              "Disk Cache": "Default"},].
            A "Drive Group" key with a string value must be configured to
            specify the associated Drive Group name. A "Virtual Drive Name" key
            must also be configured to specify the name of the Virtual Drive.
            A "Size" key with an integer value can be configured to specify the
            size of the Virtual Drive in MiB. An "Expand to Available" key can
            also be set with the value True for the Virtual Drive to use all
            the available disk space in the associated Drive Group. Optional
            key settings such as "Number of Copies", "Set as Boot Drive",
            "Strip Size", "Access Policy", "Read Policy", "Write Policy", and
            "Disk Cache" can also be configured in each list dictionary, if the
            associated system default values are not desired. For bulk creation
            of Virtual Drives, a " VirtualDrives" key with a string value can
            be configured in each dictionary of the list to specify a range of
            Virtual Drive IDs with shared values. An example entry is:
            [{"Drive Group": "dg0",
              "VirtualDrives": "2,4,6,8,10,12,20-25",
              "Virtual Drive Name": "vd",
              "Size": 1000},].
            When using the " VirtualDrives" key, the "Virtual Drive Name" key
            becomes a prefix for the Virtual Drive name value. The
            "VirtualDrives" key provides more precision in the naming and
            numbering of the Virtual Drives compared to the "Number of Copies"
            key.
        enable_mraid_raid_single_drive_raid0_configuration (bool):
            Optional; Enable MRAID/RAID single drive RAID 0 configuration. The
            default value is False.
        drive_slots (str):
            Optional; The drive slots for the MRAID/RAID single drive RAID 0
            configuration. The default value is an empty string ("").
        strip_size_in_kib (int):
            Optional; The strip size in KiB for the MRAID/RAID single drive
            RAID 0 configuration. The accepted values are 64, 128, 256, 512,
            and 1024. The default value is 64.
        access_policy (str):
            Optional; The access policy for the MRAID/RAID single drive RAID 0
            configuration. The accepted values are "Default", "Read Write",
            "Read Only", and "Blocked". The default value is "Default".
        read_policy (str):
            Optional; The read policy for the MRAID/RAID single drive RAID 0
            configuration. The accepted values are "Default",
            "Always Read Ahead", and "No Read Ahead". The default value is
            "Default".
        write_policy (str):
            Optional; The write policy for the MRAID/RAID single drive RAID 0
            configuration. The accepted values are "Default", "Write Through",
            "Write Back Good BBU", and "Always Write Back". The default value
            is "Default".
        disk_cache (str):
            Optional; The disk cache policy for the MRAID/RAID single drive
            RAID 0 configuration. The accepted values are "Default",
            "Unchanged", "Enabled", and "Disabled". The default value is
            "Default".
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Storage Policy object in Intersight
    builder(
        StoragePolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            use_jbod_drives_for_virtual_drive_creation=use_jbod_drives_for_virtual_drive_creation,
            unused_disks_state=unused_disks_state,
            enable_m2_raid_configuration=enable_m2_raid_configuration,
            m2_raid_controller_slot_for_virtual_drive_creation=m2_raid_controller_slot_for_virtual_drive_creation,
            global_hot_spares=global_hot_spares,
            enable_mraid_raid_single_drive_raid0_configuration=enable_mraid_raid_single_drive_raid0_configuration,
            drive_slots=drive_slots,
            strip_size_in_kib=strip_size_in_kib,
            access_policy=access_policy,
            read_policy=read_policy,
            write_policy=write_policy,
            disk_cache=disk_cache
            ))

    # Define and create Drive Group objects in Intersight
    if enable_mraid_raid_controller_configuration:
        builder(
            DriveGroup(
                intersight_api_key_id=intersight_api_key_id,
                intersight_api_key=intersight_api_key,
                policy_name=policy_name,
                id_list=drive_group_list,
                organization=organization,
                intersight_base_url=intersight_base_url,
                preconfigured_api_client=preconfigured_api_client,
                virtual_drive_list=virtual_drive_list
                ))


def main():
    # Establish Maker specific variables
    maker_type = "Intersight Storage Policy Maker"
    
    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the Policy Maker for Cisco Intersight
    print(f"\nStarting the {maker_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the Policy in Intersight
    storage_policy_maker(
        intersight_api_key_id=None,
        intersight_api_key=None,
        policy_name=storage_policy_name,
        use_jbod_drives_for_virtual_drive_creation=use_jbod_drives_for_virtual_drive_creation,
        unused_disks_state=unused_disks_state,
        enable_m2_raid_configuration=enable_m2_raid_configuration,
        m2_raid_controller_slot_for_virtual_drive_creation=m2_raid_controller_slot_for_virtual_drive_creation,
        enable_mraid_raid_controller_configuration=enable_mraid_raid_controller_configuration,
        global_hot_spares=global_hot_spares,
        drive_group_list=drive_group_list,
        virtual_drive_list=virtual_drive_list,
        enable_mraid_raid_single_drive_raid0_configuration=enable_mraid_raid_single_drive_raid0_configuration,
        drive_slots=drive_slots,
        strip_size_in_kib=strip_size_in_kib,
        access_policy=access_policy,
        read_policy=read_policy,
        write_policy=write_policy,
        disk_cache=disk_cache,
        policy_description=storage_policy_description,
        organization=storage_policy_organization,
        intersight_base_url=intersight_base_url,
        tags=storage_policy_tags,
        preconfigured_api_client=main_intersight_api_client,
        ucs_server_profile_names=ucs_server_profile_names,
        ucs_server_profile_template_names=ucs_server_profile_template_names
        )

    # Policy Maker completion
    print(f"\nThe {maker_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the Policy Maker for Cisco Intersight
sys.exit(0)
