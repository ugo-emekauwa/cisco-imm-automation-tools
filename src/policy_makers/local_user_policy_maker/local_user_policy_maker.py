"""
Local User Policy Maker for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The Local User Policy Maker for Cisco Intersight automates the creation
         of Local User Policies in Intersight.
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
Local User Policy on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######

# General Settings
local_user_policy_name = "Local-User-Policy-1"
local_user_policy_description = "A Cisco Intersight Local User Policy generated by the Local User Policy Maker."
local_user_policy_organization = "default"
local_user_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the local_user_policy_tags dictionary if no tags are needed, for example: local_user_policy_tags = {}

# Policy Detail Settings
enforce_strong_password = True
enable_password_expiry = False
password_expiry_duration = 90       # Options: 1 - 3650
password_expiry_notification_period = 15        # Options: 0 - 15
password_expiry_grace_period = 0       # Options: 0 - 5
password_history = 5       # Options: 0 - 5
always_send_user_password = False
local_users_list = [
    {"Enable": True,
     "Username": "adminuser",
     "Password": "C1sco12345",
     "Role": "admin"
     },
    {"Enable": True,
     "Username": "readonlyuser",
     "Password": "C1sco12345",
     "Role": "readonly"
     }
    ]

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

# UCS Server Profile Attachment Settings (If providing more than one UCS Server Profile and/or UCS Server Profile Template, additional entries should be comma-separated)
ucs_server_profile_names = ""
ucs_server_profile_template_names = ""

####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


import sys
import traceback
import json
import copy
import intersight
import re
import ast
import urllib3

# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to convert a list of strings in string type format to list type format.
def string_to_list_maker(string_list,
                         remove_duplicate_elements_in_list=True
                         ):
    """This function converts a list of strings in string type format to list
    type format. The provided string should contain commas, semicolons, or
    spaces as the separator between strings. For each string in the list,
    leading and rear spaces will be removed. Duplicate strings in the list are
    removed by default.

    Args:
        string_list (str):
            A string containing an element or range of elements.

        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements are
            removed from the provided string list. The default value is True.

    Returns:
        A list of elements.   
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.

            separator (str):
                The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.   
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type format to
        list type format using the provided separator. For each element in the
        list, leading and rear spaces are removed.

        Args:
            provided_list (list): A list of elements to be separated.

            separator (str): The character to identify where elements in the
                list should be separated (e.g., a comma, semicolon,
                hyphen, etc.).

        Returns:
            A list of separated elements that have been stripped of any spaces.        
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element, separator)
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    staged_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list, " ")
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list, ",")
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list, ";")
    # Split provided list by hyphens.
    for post_semicolon_split_string_set in post_semicolon_split_list:
        staged_list.append(post_semicolon_split_string_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        final_list = list(set(staged_list))
    return final_list


# Establish Maker specific classes and functions
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerPolicy(UcsPolicy):
    """This class is used to configure a UCS Server Policy in Intersight that
    is logically directly attached to UCS Servers through UCS Server Profiles
    and/or UCS Server Profile Templates.
    """
    object_type = "Directly Attached UCS Server Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_names = ucs_server_profile_names
        self.ucs_server_profile_template_names = ucs_server_profile_template_names

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}')"
            )

    def _attach_ucs_server_profile(self):
        """This is a function to attach Intersight UCS Server Profiles and/or
        UCS Server Profile Templates to an Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Update the API body with the Profiles key
        self.intersight_api_body["Profiles"] = []        
        # Attach UCS Server Profile
        if self.ucs_server_profile_names:
            provided_ucs_server_profile_list = string_to_list_maker(self.ucs_server_profile_names)
            for provided_ucs_server_profile in provided_ucs_server_profile_list:
                print("Attaching the UCS Server Profile named "
                      f"{provided_ucs_server_profile}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                           intersight_api_key=None,
                                                                           object_name=provided_ucs_server_profile,
                                                                           intersight_api_path="server/Profiles?$top=1000",
                                                                           object_type="UCS Server Profile",
                                                                           organization=self.organization,
                                                                           preconfigured_api_client=self.api_client
                                                                           )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_moid,
                     "ObjectType": "server.Profile"}
                    )
        # Attach UCS Server Profile Templates
        if self.ucs_server_profile_template_names:
            provided_ucs_server_profile_template_list = string_to_list_maker(self.ucs_server_profile_template_names)
            for provided_ucs_server_profile_template in provided_ucs_server_profile_template_list:
                print("Attaching the UCS Server Profile Template named "
                      f"{provided_ucs_server_profile_template}...")
                # Get UCS Server Profile MOID
                ucs_server_profile_template_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                    intersight_api_key=None,
                                                                                    object_name=provided_ucs_server_profile_template,
                                                                                    intersight_api_path="server/ProfileTemplates?$top=1000",
                                                                                    object_type="UCS Server Profile Template",
                                                                                    organization=self.organization,
                                                                                    preconfigured_api_client=self.api_client
                                                                                    )
                # Update the API body with the appropriate Server Profile MOID
                self.intersight_api_body["Profiles"].append(
                    {"Moid": ucs_server_profile_template_moid,
                     "ObjectType": "server.ProfileTemplate"}
                    )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class LocalUserPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a Local User Policy in Intersight.
    """
    object_type = "Local User Policy"
    intersight_api_path = "iam/EndPointUserPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_names="",
                 ucs_server_profile_template_names="",
                 enforce_strong_password=True,
                 enable_password_expiry=False,
                 password_expiry_duration=90,
                 password_expiry_notification_period=15,
                 password_expiry_grace_period=0,
                 password_history=5,
                 always_send_user_password=False
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_names,
                         ucs_server_profile_template_names
                         )
        self.enforce_strong_password = enforce_strong_password
        self.enable_password_expiry = enable_password_expiry
        self.password_expiry_duration = password_expiry_duration
        self.password_expiry_notification_period = password_expiry_notification_period
        self.password_expiry_grace_period = password_expiry_grace_period
        self.password_history = password_history
        self.always_send_user_password = always_send_user_password
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "PasswordProperties": {
                "EnforceStrongPassword": self.enforce_strong_password,
                "EnablePasswordExpiry": self.enable_password_expiry,
                "PasswordExpiryDuration": self.password_expiry_duration,
                "NotificationPeriod": self.password_expiry_notification_period,
                "GracePeriod": self.password_expiry_grace_period,
                "PasswordHistory": self.password_history,
                "ForceSendPassword": self.always_send_user_password
                }
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"'{self.ucs_server_profile_template_names}', "
            f"{self.enforce_strong_password}, "
            f"{self.enable_password_expiry}, "
            f"{self.password_expiry_duration}, "
            f"{self.password_expiry_notification_period}, "
            f"{self.password_expiry_grace_period}, "
            f"{self.password_history}, "
            f"{self.always_send_user_password})"
            )


class LocalUser:
    """This class serves as a base class for configuring Local Users for
    Local User Policies in Intersight.
    """
    object_type = "Local User Account"
    intersight_api_path = "iam/EndPointUsers"
    policy_type = "Local User Policy"
    policy_intersight_api_path = "iam/EndPointUserPolicies"
    local_user_object_attribute_maps = [
        {"FrontEndName": "EndPointUser",
         "BackEndName": "Name",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Username",
         "BackEndName": "Name",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 local_users_list=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        if local_users_list is None:
            self.local_users_list = []
        else:
            self.local_users_list = local_users_list
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"{self.local_users_list})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_local_user(self,
                                    local_user_name,
                                    body,
                                    moid=None
                                    ):
        """This is a function to configure an Intersight Local User object by
        performing a POST through the Intersight API.
        Args:
            local_user_name (str):
                The name of the local user to be posted on Intersight.
            body (dict):
                The body of the object to be posted on Intersight.
            moid (str):
                Optional; The Intersight MOID of the object to be posted
                on Intersight. The default value is None.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        if moid:
            full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
        else:        
            full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            if moid:
                print(f"The configuration of {self.object_type} "
                      f"{local_user_name} has been updated.")
            else:            
                print(f"The configuration of the {self.object_type} "
                      f"for {local_user_name} has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            error_body_dictionary = ast.literal_eval(error.body)
            if error.status == 409:
                print(f"The targeted {self.object_type} for "
                      f"{local_user_name} appears to already exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{self.object_type} for {local_user_name}...")
                try:
                    existing_intersight_local_user_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                           intersight_api_key=None,
                                                                                           object_name=local_user_name,
                                                                                           intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                           object_type=self.object_type,
                                                                                           preconfigured_api_client=self.api_client
                                                                                           )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_local_user_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} for "
                          f"{local_user_name} has completed.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {self.object_type} for "
                          f"{local_user_name} could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            elif (
                error.status == 400
                and
                error_body_dictionary.get("messageId") == "cannot_modify_endpoint_user"
                ):
                print(f"The requested Local User Account {local_user_name} "
                      "already exists and cannot be modified.")
                return "The POST method failed."                
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} "
                      f"for {local_user_name} under the Intersight "
                      f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            if moid:
                print(f"Unable to update {self.object_type} "
                      f"{local_user_name} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
            else:                
                print(f"Unable to configure the {self.object_type} for "
                      f"{local_user_name} under the Intersight API resource "
                      f"path '{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _local_user_object_attribute_map_handler(self,
                                                 staged_local_user_dictionary,
                                                 local_user_object_attribute_map_dictionary
                                                 ):
        """This is a function to handle local user object attributes with a
        mismatch in the Front-End Name and Back-End Name.

        Args:
            staged_local_user_dictionary (dict):
                A local user dictionary extracted from the provided
                local_users_list being prepared and staged for posting to
                Intersight.
            local_user_object_attribute_map_dictionary (dict):
                A dictionary containing attribute data, including front-end
                (GUI) to back-end (API) mapped values.
        """
        # Establish default automatic insertion status of current attribute
        automatic_insertion_of_attribute_value_performed = False
        # Check if current attribute is mandatory
        if local_user_object_attribute_map_dictionary.get("Mandatory"):
            if not any(
                attribute_name_key in
                staged_local_user_dictionary for
                attribute_name_key in
                (local_user_object_attribute_map_dictionary["FrontEndName"],
                 local_user_object_attribute_map_dictionary["BackEndName"]
                 )
                ):
                if local_user_object_attribute_map_dictionary.get("AutomaticInsertion"):
                    staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = local_user_object_attribute_map_dictionary.get("AutomaticInsertionValue")
                    automatic_insertion_of_attribute_value_performed = True
                else:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{local_user_object_attribute_map_dictionary['Description']}.")
                    print("Please verify the following key exists in the "
                          "appropriate dictionary of the "
                          "local_users_list variable, then "
                          "re-attempt execution:\n")
                    if local_user_object_attribute_map_dictionary['FrontEndName']:
                        print(f"'{local_user_object_attribute_map_dictionary['FrontEndName']}'\n")
                    else:
                        print(f"'{local_user_object_attribute_map_dictionary['BackEndName']}'\n")
                    sys.exit(0)
        # Check for attribute front-end name key in the dictionary
        if local_user_object_attribute_map_dictionary["FrontEndName"] in staged_local_user_dictionary:
            # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
            if local_user_object_attribute_map_dictionary["BackEndName"] not in staged_local_user_dictionary:
                staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = staged_local_user_dictionary.get(local_user_object_attribute_map_dictionary["FrontEndName"])
            # Remove the front-end name key from the dictionary
            staged_local_user_dictionary.pop(local_user_object_attribute_map_dictionary["FrontEndName"])
        # Check for front-end to back-end value mapping
        if local_user_object_attribute_map_dictionary.get("FronttoBackEndValueMaps"):
            if (
                local_user_object_attribute_map_dictionary["BackEndName"] in
                staged_local_user_dictionary and
                not automatic_insertion_of_attribute_value_performed
                ):
                # Retrieve the provided attribute value
                provided_attribute_value = staged_local_user_dictionary.get(local_user_object_attribute_map_dictionary["BackEndName"])
                # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                try:
                    provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{local_user_object_attribute_map_dictionary['Description']}.")
                    print("The value provided was "
                          f"{provided_attribute_value}.")
                    print("Please verify that the value has been provided "
                          "in an accepted string format.")
                    print("Please review and resolve any error messages, "
                          "then re-attempt execution.\n")
                    sys.exit(0)
                # Create list of known and mapped front-end to back-end values
                front_to_backend_value_maps_key_list = list(local_user_object_attribute_map_dictionary["FronttoBackEndValueMaps"])
                # Replace known and reformatted front-end value with known and mapped back-end value
                if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                    provided_attribute_value_mapped = local_user_object_attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                    staged_local_user_dictionary[local_user_object_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                else:
                    print("\nWARNING: An unknown "
                          f"{local_user_object_attribute_map_dictionary['Description']} "
                          f"value of '{provided_attribute_value}' has been "
                          f"provided for the {self.object_type} settings!")
                    print("An attempt will be made to configure the "
                          "unknown "
                          f"{local_user_object_attribute_map_dictionary['Description']} "
                          "value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{local_user_object_attribute_map_dictionary['Description']}, "
                          "then re-attempt execution:\n")
                    print(*local_user_object_attribute_map_dictionary["FixedFrontEndValues"],
                          sep=", "
                          )

    def object_maker(self):
        """This function makes the targeted policy object.
        """
        # Check for Local User object attributes that may need configuration
        if self.local_users_list:
            # Retrieve the Intersight Organization MOID
            policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                        intersight_api_key=None,
                                                                        object_name=self.organization,
                                                                        intersight_api_path="organization/Organizations?$top=1000",
                                                                        object_type="Organization",
                                                                        preconfigured_api_client=self.api_client
                                                                        )
            # Cycle through the Local User dictionaries in the Local Users list
            for provided_local_user_dictionary in self.local_users_list:
                staged_local_user_dictionary = copy.deepcopy(provided_local_user_dictionary)
                # Update the staged_local_user_dictionary/API body with the Intersight Organization MOID
                staged_local_user_dictionary["Organization"] = {"Moid": policy_organization_moid}
                # Handle setting of attributes which have mismatched Front-End and Back-End labeling
                for local_user_object_attribute_map_dictionary in self.local_user_object_attribute_maps:
                    self._local_user_object_attribute_map_handler(
                        staged_local_user_dictionary=staged_local_user_dictionary,
                        local_user_object_attribute_map_dictionary=local_user_object_attribute_map_dictionary
                        )
                # Remove keys not needed for creating the Local User object from the staged_local_user_dictionary/API body
                staged_local_user_dictionary.pop("Enable", None)
                staged_local_user_dictionary.pop("Enabled", None)
                staged_local_user_dictionary.pop("Role", None)
                staged_local_user_dictionary.pop("EndPointRole", None)
                staged_local_user_dictionary.pop("Password", None)
                # Create new Local User object in Intersight
                current_local_user_name = staged_local_user_dictionary.get("Name")
                self._post_intersight_local_user(
                    local_user_name=current_local_user_name,
                    body=staged_local_user_dictionary
                    )


class LocalUserRole(LocalUser):
    """This class is used to configure a Local User Role in Intersight.
    """
    object_type = "Local User Role Permission Level"
    intersight_api_path = "iam/EndPointUserRoles"
    policy_type = "Local User Policy"
    policy_intersight_api_path = "iam/EndPointUserPolicies"
    local_user_object_attribute_maps = [
        {"FrontEndName": "Enable",
         "BackEndName": "Enabled",
         "Description": "Local User Account Enablement",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": True,
         "AutomaticInsertionValue": True
         },
        {"FrontEndName": "Name",
         "BackEndName": "EndPointUser",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Username",
         "BackEndName": "EndPointUser",
         "Description": "Local User Account Name",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         },
        {"FrontEndName": "Role",
         "BackEndName": "EndPointRole",
         "Description": "Local User Role Permission Level",
         "FixedFrontEndValues": [
             "admin",
             "readonly",
             "user"
             ],
         "FronttoBackEndValueMaps": {
             "admin": "admin",
             "readonly": "readonly",
             "user": "user"
             },
         "Mandatory": True,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None
         }
        ]

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 local_users_list=None,
                 policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client,
                         local_users_list
                         )
        self.policy_name = policy_name
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_names}', "
            f"{self.local_users_list}, "
            f"'{self.policy_name}')"
            )

    def _post_intersight_local_user_role(self,
                                         local_user_name,
                                         body
                                         ):
        """This is a function to configure an Intersight Local User Role object
        by performing a POST through the Intersight API.
        Args:
            local_user_name (str):
                The name of the local user to be posted on Intersight.
            body (dict):
                The body of the object to be posted on Intersight.
        
        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the {self.object_type} "
                  f"for {local_user_name} has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                print(f"The targeted {self.object_type} for "
                      f"{local_user_name} appears to already exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{self.object_type} for {local_user_name}...")
                try:
                    # Create an attribute dictionary for the advanced_intersight_object_moid_retriever function from the provided Local User Role API body
                    existing_intersight_local_user_role_attributes = {}
                    local_user_policy_moid = body["EndPointUserPolicy"]["Moid"]
                    existing_intersight_local_user_role_attributes["EndPointUserPolicy"] = {
                        "ClassId": "mo.MoRef",
                        "Moid": local_user_policy_moid,
                        "ObjectType": "iam.EndPointUserPolicy",
                        "link": f"{self.intersight_base_url}/iam/EndPointUserPolicies/{local_user_policy_moid}"
                        }
                    local_user_moid = body["EndPointUser"]["Moid"]
                    existing_intersight_local_user_role_attributes["EndPointUser"] = {
                        "ClassId": "mo.MoRef",
                        "Moid": local_user_moid,
                        "ObjectType": "iam.EndPointUser",
                        "link": f"{self.intersight_base_url}/iam/EndPointUsers/{local_user_moid}"
                        }
                    # Retrieve pre-existing Local User Role MOID
                    existing_intersight_local_user_role_moid = advanced_intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                                         intersight_api_key=None,
                                                                                                         object_attributes=existing_intersight_local_user_role_attributes,
                                                                                                         intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                                         object_type=self.object_type,
                                                                                                         organization=self.organization,
                                                                                                         preconfigured_api_client=self.api_client
                                                                                                         )                    
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_local_user_role_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} for "
                          f"{local_user_name} has completed.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {self.object_type} for "
                          f"{local_user_name} could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} "
                      f"for {local_user_name} under the Intersight "
                      f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} for "
                  f"{local_user_name} under the Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def object_maker(self):
        """This function makes the targeted policy object.
        """        
        # Check for Local User object attributes that may need configuration
        if self.local_users_list:
            # Verify a Local User Policy name has been provided
            if not self.policy_name:
                print("\nA configuration error has occurred!\n")
                print("During the configuration of the "
                      f"{self.object_type} settings for the "
                      f"{self.policy_type}, there was an issue "
                      f"accessing the value for the {self.policy_type} name.")
                print("Please verify that the value has been provided "
                      "in an accepted string format.")
                print("Please review and resolve any error messages, "
                      "then re-attempt execution.\n")
                sys.exit(0)
            # Retrieving the Local User Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=f"{self.policy_intersight_api_path}?$top=1000",
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           preconfigured_api_client=self.api_client
                                                           )            
            # Cycle through the Local User dictionaries in the Local Users list
            for provided_local_user_dictionary in self.local_users_list:
                staged_local_user_dictionary = copy.deepcopy(provided_local_user_dictionary)
                # Handle setting of attributes which have mismatched Front-End and Back-End labeling
                for local_user_object_attribute_map_dictionary in self.local_user_object_attribute_maps:
                    self._local_user_object_attribute_map_handler(
                        staged_local_user_dictionary=staged_local_user_dictionary,
                        local_user_object_attribute_map_dictionary=local_user_object_attribute_map_dictionary
                        )
                # Obtain Local User name attached to Local User Role
                current_local_user_name = staged_local_user_dictionary.get("EndPointUser")
                # Set Local User Policy MOID
                staged_local_user_dictionary["EndPointUserPolicy"] = {"Moid": policy_moid}
                # Set Local User MOID
                local_user_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                   intersight_api_key=None,
                                                                   object_name=staged_local_user_dictionary["EndPointUser"],
                                                                   intersight_api_path="iam/EndPointUsers?$top=1000",
                                                                   object_type="Local User",
                                                                   organization=self.organization,
                                                                   preconfigured_api_client=self.api_client
                                                                   )
                staged_local_user_dictionary["EndPointUser"] = {"Moid": local_user_moid}
                # Set Local User End Point Role MOID
                local_user_role_moid = advanced_intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                 intersight_api_key=None,
                                                                                 object_attributes={
                                                                                     "Name": staged_local_user_dictionary["EndPointRole"],
                                                                                     "Type": "IMC"
                                                                                     },
                                                                                 intersight_api_path="iam/EndPointRoles?$top=1000",
                                                                                 object_type="Local User End Point Role",
                                                                                 organization=self.organization,
                                                                                 preconfigured_api_client=self.api_client
                                                                                 )
                staged_local_user_dictionary["EndPointRole"] = [{"Moid": local_user_role_moid}]
                # Remove keys not needed for creating the Local User Role object from the staged_local_user_dictionary/API body
                staged_local_user_dictionary.pop("Username", None)
                staged_local_user_dictionary.pop("Name", None)
                # Create new Local User Role object in Intersight
                self._post_intersight_local_user_role(
                    local_user_name=current_local_user_name,
                    body=staged_local_user_dictionary
                    )


def local_user_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enforce_strong_password=True,
    enable_password_expiry=False,
    password_expiry_duration=90,
    password_expiry_notification_period=15,
    password_expiry_grace_period=0,
    password_history=5,
    always_send_user_password=False,
    local_users_list=None,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_names="",
    ucs_server_profile_template_names=""
    ):
    """This is a function used to make a Local User Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enforce_strong_password (bool):
            Optional; Enforce strong passwords for local user accounts.
            The default value is True.
        enable_password_expiry (bool):
            Optional; Enable local user passwords to expire.
            The default value is False.
        password_expiry_duration (int):
            Optional; The local user password duration time in days.
            The default value is 90.
        password_expiry_notification_period (int):
            Optional; The period of time in days prior to password
            expiration in which local users will begin to be notified.
            The default value is 15.
        password_expiry_grace_period (int):
            Optional; The period of time in days that local users have to
            continue using their account after the password has expired.
            The default value is 0.
        password_history (int):
            Optional; The number of passwords kept in change history for each
            local user account. A password cannot be re-used if it is still in
            the change history log. The default value is 5.
        always_send_user_password (bool):
            Optional; Always send the local user password to the endpoint
            attached to the Local User Policy.
            The default value is False.
        local_users_list (list):
            Optional; The list of dictionary entries for each local user
            account to be configured. The default value is None. An example
            entry is:
            [{"Enable": True,
              "Username": "adminuser",
              "Password": "C1sco12345",
              "Role": "admin"
              },
             {"Enable": True,
              "Username": "testuser",
              "Password": "C1sco12345",
              "Role": "user"
              },
             {"Enable": True,
              "Username": "readonlyuser",
              "Password": "C1sco12345",
              "Role": "readonly"
              },
             ]
            All key settings with the exception of "Enable" are mandatory.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_names (str):
            Optional; The UCS Server Profiles the policy should be attached
            to. If providing more than one UCS Server Profile, additional 
            entries should be comma-separated. The default value is an empty
            string ("").
        ucs_server_profile_template_names (str):
            Optional; The UCS Server Profile Templates the policy should be
            attached to. If providing more than one UCS Server Profile Template,
            additional entries should be comma-separated. The default value is
            an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Local User Policy object in Intersight
    builder(
        LocalUserPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_names=ucs_server_profile_names,
            ucs_server_profile_template_names=ucs_server_profile_template_names,
            enforce_strong_password=enforce_strong_password,
            enable_password_expiry=enable_password_expiry,
            password_expiry_duration=password_expiry_duration,
            password_expiry_notification_period=password_expiry_notification_period,
            password_expiry_grace_period=password_expiry_grace_period,
            password_history=password_history,
            always_send_user_password=always_send_user_password
            ))

    # Define and create Local User object in Intersight
    builder(
        LocalUser(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            local_users_list=local_users_list
            ))

    # Define and create Local User Role object in Intersight
    builder(
        LocalUserRole(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            local_users_list=local_users_list,
            policy_name=policy_name
            ))


def main():
    # Establish Maker specific variables
    maker_type = "Intersight Local User Policy Maker"
    
    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the Policy Maker for Cisco Intersight
    print(f"\nStarting the {maker_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the Policy in Intersight
    local_user_policy_maker(
        intersight_api_key_id=None,
        intersight_api_key=None,
        policy_name=local_user_policy_name,
        enforce_strong_password=enforce_strong_password,
        enable_password_expiry=enable_password_expiry,
        password_expiry_duration=password_expiry_duration,
        password_expiry_notification_period=password_expiry_notification_period,
        password_expiry_grace_period=password_expiry_grace_period,
        password_history=password_history,
        always_send_user_password=always_send_user_password,
        local_users_list=local_users_list,
        policy_description=local_user_policy_description,
        organization=local_user_policy_organization,
        intersight_base_url=intersight_base_url,
        tags=local_user_policy_tags,
        preconfigured_api_client=main_intersight_api_client,
        ucs_server_profile_names=ucs_server_profile_names,
        ucs_server_profile_template_names=ucs_server_profile_template_names
        )

    # Policy Maker completion
    print(f"\nThe {maker_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the Policy Maker for Cisco Intersight
sys.exit(0)
