"""
LAN Connectivity Policy Maker for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The LAN Connectivity Policy Maker for Cisco Intersight automates the creation
         of LAN Connectivity Policies.
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
LAN Connectivity Policy on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######

# General Settings
lan_connectivity_policy_name = "LAN-Connect-Policy-1"
lan_connectivity_policy_description = "A Cisco Intersight LAN Connectivity Policy generated by the LAN Connectivity Policy Maker."
lan_connectivity_policy_organization = "default"
lan_connectivity_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the lan_connectivity_policy_tags dictionary if no tags are needed, for example: lan_connectivity_policy_tags = {}

# Policy Detail Settings

## IQN
enable_azure_stack_host_qos = False
iqn_assignment_type = "None"        # Options: "None", "Static", "Pool"
iqn_pool = None     # If the iqn_assignment_type variable is set to "Pool", provide a string value e.g. "IQN-Pool-1" for the iqn_pool variable
iqn_static_identifier = ""      # If the iqn_assignment_type variable is set to "Static", provide a string value e.g. "iqn.1987-05.com.cisco.ucs.windows.host.1" for the iqn_static_identifier variable

## vNIC Configuration
## NOTE - Here are example configurations for the vnic_placement_mode and vnic_list variables:
##
## -- Create two vNICs named vnic0 and vnic1 in auto placement mode with the minimum required dictionary keys for default settings.
##    Policies and Pools provided in the separate default variables are automatically applied:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic0",
##         "Switch ID": "A"
##         },
##        {"Name": "vnic1",
##         "Switch ID": "B"
##         }
##        ]
##
##
## -- Bulk create eight vNICs named vnic0-7 using the "Vnics" key in auto placement mode with the minimum required dictionary keys for default settings.
##    When using the "Vnics" key, the "Name" key becomes a prefix for the vNIC name value.
##    Policies and Pools provided in the separate default variables are automatically applied:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic",
##         "Vnics": "0,2,4,6",
##         "Switch ID": "A"
##         },
##        {"Name": "vnic",
##         "Vnics": "1,3,5,7",
##         "Switch ID": "B"
##         }
##        ]
##
##
## -- Create two vNICs named vnic0 and vnic1 in auto placement mode with failover enabled, and a usNIC connection type, and Policies/Pools directly specified that override any provided default Policies/Pools:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic0",
##         "MAC Address Type": "POOL",
##         "MAC Address Pool": "MAC-Pool-2",
##         "Switch ID": "A",
##         "Failover": True,
##         "Ethernet Network Group Policy": "Sample-Eth-Net-Group-Policy",
##         "Ethernet Network Control Policy": "Sample-Eth-Net-Control-Policy",
##         "Ethernet QoS": "Sample-Ethernet-QoS-Policy",
##         "Ethernet Adapter": "Sample-Eth-Adapter-Policy",
##         "Connection Type": "usNIC",
##         "Number of usNICs": 1,
##         "usNIC Adapter Policy": "Sample-Eth-Adapter-Policy",
##         "Class of Service": 5
##         },
##        {"Name": "vnic1",
##         "MAC Address Type": "POOL",
##         "MAC Address Pool": "MAC-Pool-2",
##         "Switch ID": "B",
##         "Failover": True,
##         "Ethernet Network Group Policy": "Sample-Eth-Net-Group-Policy",
##         "Ethernet Network Control Policy": "Sample-Eth-Net-Control-Policy",
##         "Ethernet QoS": "Sample-Ethernet-QoS-Policy",
##         "Ethernet Adapter": "Sample-Eth-Adapter-Policy",
##         "Connection Type": "usNIC",
##         "Number of usNICs": 1,
##         "usNIC Adapter Policy": "Sample-Eth-Adapter-Policy",
##         "Class of Service": 5
##         }
##        ]
##
##
## -- Create two vNICs named vnic0 and vnic1 in manual placement mode with corresponding manual placement settings, a pin group, static MAC addresses, CDN user defined names, a VMQ connection type and VMMQ enabled:
##
##    vnic_placement_mode = "Manual"
##    vnic_list = [
##        {"Name": "vnic0",
##         "Pin Group Name": "Pin-Group-0",
##         "MAC Address Type": "Static",
##         "Static MAC Address": "00:25:B5:DD:00:01",
##         "Slot ID": "1",
##         "PCI Link": 0,
##         "Switch ID": "A",
##         "PCI Order": 0,
##         "Source": "User Defined",
##         "Value": "vnic-user-named-0",
##         "Failover": True,
##         "Connection Type": "VMQ",
##         "Enable Virtual Machine Multi-Queue": True,
##         "Number of Sub vNICs": 32,
##         "VMMQ Adapter Policy": "Sample-Eth-Adapter-Policy"
##         },
##        {"Name": "vnic1",
##         "Pin Group Name": "Pin-Group-1",
##         "MAC Address Type": "Static",
##         "Static MAC Address": "00:25:B5:DD:00:02",
##         "Slot ID": "2",
##         "PCI Link": 0,
##         "Switch ID": "B",
##         "PCI Order": 0,
##         "Source": "User Defined",
##         "Value": "vnic-user-named-1",
##         "Failover": True,
##         "Connection Type": "VMQ",
##         "Enable Virtual Machine Multi-Queue": True,
##         "Number of Sub vNICs": 32,
##         "VMMQ Adapter Policy": "Sample-Eth-Adapter-Policy"
##         }
##        ]
##
##
## -- Create two vNICs named vnic0 and vnic1 in auto placement mode with a VMQ connection type and no VMMQ:
##
##    vnic_placement_mode = "Auto"
##    vnic_list = [
##        {"Name": "vnic0",
##         "Switch ID": "A",
##         "Connection Type": "VMQ",
##         "Number of Interrupts": 25,
##         "Number of Virtual Machine Queues": 7
##         },
##        {"Name": "vnic1",
##         "Switch ID": "B",
##         "Connection Type": "VMQ",
##         "Number of Interrupts": 25,
##         "Number of Virtual Machine Queues": 7
##         }
##        ]
##
##
## NOTE - The full list of configurable keys for each vNIC dictionary entry aligns with the Intersight GUI naming and includes:
## "Name", "Pin Group Name", "MAC Address Type", "MAC Address Pool", "Static MAC Address", 
## "Slot ID", "PCI Link", "Switch ID", "Uplink", "PCI Order", "Source", "Value", "Failover", 
## "Ethernet Network Group Policy", "Ethernet Network Control Policy", "Ethernet QoS",
## "Ethernet Adapter", "Ethernet Network", "iSCSI Boot", "Connection Type", "Number of usNICs",
## "usNIC Adapter Policy", "Class of Service", "Enable Virtual Machine Multi-Queue",
## "Number of Sub vNICs", "VMMQ Adapter Policy", "Number of Interrupts", and "Number of Virtual Machine Queues".
##
## NOTE - Pre-existing Ethernet Network Group, Ethernet Network Control, Ethernet QoS, and Ethernet Adapter Policies must be provided when configuring vNICs.
## Default Policies and Pools to be used by all configured vNICs can be provided using the default variables listed below.
## To override the default Policy or Pool for a particular vNIC, a corresponding Policy or Pool key and value can be provided for each set of vNIC dictionaries in the vnic_list variable.
## Please see the included example above.
##
## NOTE - A custom "Vnics" key can be used for quick bulk creation of multiple vNICs with similar values.
## When using the "Vnics" key, the "Name" key becomes a prefix for the vNIC name value.
## Please see the included example above.
##
## NOTE - To not configure any vNICs, configure the vnic_list variable with an empty list, for example: vnic_list = []

vnic_placement_mode = "Auto"        # Options: "Auto", "Manual"

vnic_list = [
    {"Name": "vnic0",
     "Switch ID": "A"
     },
    {"Name": "vnic1",
     "Switch ID": "B"
     }
    ]

default_mac_address_pool_name = "MAC-Pool-1"
default_ethernet_network_group_policy_name = "Default-Eth-Net-Group-Policy"
default_ethernet_network_control_policy_name = "Default-Eth-Net-Control-Policy"
default_ethernet_qos_policy_name = "Default-Ethernet-QoS-Policy"
default_ethernet_adapter_policy_name = "Default-Eth-Adapter-Policy"
default_iscsi_boot_policy_name = ""
default_usnic_adapter_policy_name = "Default-Eth-Adapter-Policy"
default_vmmq_adapter_policy_name = "Default-Eth-Adapter-Policy"

# Policy Default Settings (Change only if needed)
ucs_server_type = "FI-Attached"     # Options: "FI-Attached", "Standalone"

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

# UCS Domain Profile Attachment Settings
ucs_server_profile_name = ""

####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


import sys
import traceback
import json
import copy
import intersight
import re
import ast
import urllib3

# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to retrieve all instances of a particular Intersight API object type
def get_intersight_objects(intersight_api_key_id,
                           intersight_api_key,
                           intersight_api_path,
                           object_type="object",
                           intersight_base_url="https://www.intersight.com/api/v1",
                           preconfigured_api_client=None
                           ):
    """This is a function to perform an HTTP GET on all objects under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return intersight_objects
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instances from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve a particular instance of a particular Intersight API object type
def get_single_intersight_object(intersight_api_key_id,
                                 intersight_api_key,
                                 intersight_api_path,
                                 object_moid,
                                 object_type="object",
                                 intersight_base_url="https://www.intersight.com/api/v1",
                                 preconfigured_api_client=None
                                 ):
    """This is a function to perform an HTTP GET on a single object under an
    available Intersight API type.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_api_path (str):
            The path to the targeted Intersight API object type. For example,
            to specify the Intersight API type for adapter configuration
            policies, enter "adapter/ConfigPolicies". More API types can be
            found in the Intersight API reference library at
            https://intersight.com/apidocs/introduction/overview/.
        object_moid (str):
            The MOID of the single Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A dictionary containing all objects of the specified API type. If the
        API type is inaccessible, an implicit value of None will be returned.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}/{object_moid}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        single_intersight_object = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
        return single_intersight_object
    except Exception:
        print("\nA configuration error has occurred!\n")
        print(f"There was an issue retrieving the requested {object_type} "
              "instance from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish advanced function to retrieve Intersight API objects
def advanced_intersight_object_moid_retriever(intersight_api_key_id,
                                              intersight_api_key,
                                              object_attributes,
                                              intersight_api_path,
                                              object_type="object",
                                              organization="default",
                                              intersight_base_url="https://www.intersight.com/api/v1",
                                              preconfigured_api_client=None
                                              ):
    """This is a function to retrieve the MOID of Intersight objects based on
    various provided attributes using the Intersight API.
    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} was not found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to convert a list of numbers in string type format to list type format.
def integer_number_list_maker(string_list,
                              remove_duplicate_elements_in_list=True,
                              sort_elements_in_list=True
                              ):
    """This function converts a list of numbers in string type format
    to list type format. The provided string should contain commas,
    semicolons, or spaces as the separator between numbers. Number
    ranges can be configured using hyphens. An example entry would be
    "1, 2, 3, 4, 5, 6, 7, 7-14, 25". For each number in the list,
    leading and rear spaces will be removed. Duplicate numbers in the
    list are removed by default.

    Args:
        string_list (str):
            A string containing a number or range of numbers.
        remove_duplicate_elements_in_list (bool):
            Optional; A setting to determine whether duplicate elements
            are removed from the provided string list. The default
            value is True.
        sort_elements_in_list (bool):
            Optional; A setting to determine if the elements in the provided
            string list should be sorted in ascending order. The default value
            is True.

    Returns:
        A list of integers.            
    """
    def string_to_list_separator(string_list,
                                 separator
                                 ):
        """This function converts a list of elements in string type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            string_list (str):
                A string containing an element or range of elements.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.
        """
        fully_stripped_list = []
        # Split string by provided separator and create list of separated elements.
        split_list = string_list.split(separator)
        for element in split_list:
            if element:
                # Remove leading spaces from elements in list.
                lstripped_element = element.lstrip()
                # Remove rear spaces from elements in list.
                rstripped_element = lstripped_element.rstrip()
                # Populate new list with fully stripped elements.
                fully_stripped_list.append(rstripped_element)
        return fully_stripped_list

    def list_to_list_separator(provided_list,
                               separator
                               ):
        """This function converts a list of elements in list type
        format to list type format using the provided separator. For
        each element in the list, leading and rear spaces are removed.

        Args:
            provided_list (list):
                A list of elements to be separated.
            separator (str):
                The character to identify where elements in the list
                should be separated (e.g., a comma, semicolon, hyphen,
                etc.).

        Returns:
            A list of separated elements that have been stripped of any
            spaces.               
        """
        new_list = []
        # Split list by provided separator and create new list of separated elements.
        for element in provided_list:
            if separator in element:
                split_provided_list = string_to_list_separator(element,
                                                               separator
                                                               )
                new_list.extend(split_provided_list)
            else:
                new_list.append(element)
        return new_list
    
    integer_number_list = []
    # Split provided list by spaces.
    space_split_list = string_to_list_separator(string_list,
                                                " "
                                                )
    # Split provided list by commas.
    post_comma_split_list = list_to_list_separator(space_split_list,
                                                   ","
                                                   )
    # Split provided list by semicolons.
    post_semicolon_split_list = list_to_list_separator(post_comma_split_list,
                                                       ";"
                                                       )
    # Split provided number ranges in the list by hyphens.
    for post_semicolon_split_number_set in post_semicolon_split_list:
        if "-" in post_semicolon_split_number_set:
            if post_semicolon_split_number_set[0] != "-" and post_semicolon_split_number_set[-1] != "-":
                hyphen_split_list = string_to_list_separator(post_semicolon_split_number_set,
                                                             "-"
                                                             )
                # Limit new list to a maximum of two elements.
                fixed_hyphen_split_list = hyphen_split_list[:2]
                # Enumerate the numbers in the hyphen split list.
                integer_starting_number_of_provided_range = int(fixed_hyphen_split_list[0])
                integer_ending_number_of_provided_range = int(fixed_hyphen_split_list[1])
                enumerated_range_list = range(
                    integer_starting_number_of_provided_range,
                    (integer_ending_number_of_provided_range + 1)
                    )
                integer_number_list.extend(enumerated_range_list)
        else:
            integer_of_current_number_set = int(post_semicolon_split_number_set)
            integer_number_list.append(integer_of_current_number_set)
    # Remove duplicates from list if enabled.
    if remove_duplicate_elements_in_list:
        integer_number_list = list(set(integer_number_list))
    if sort_elements_in_list:
        integer_number_list = sorted(integer_number_list)
    return integer_number_list


# Establish Maker specific classes and functions
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=self.intersight_api_path,
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class DirectlyAttachedUcsServerPolicy(UcsPolicy):
    """This class is used to configure a UCS Server Policy in Intersight that
    is logically directly attached to UCS Servers through UCS
    Server Profiles.
    """
    object_type = "Directly Attached UCS Server Policy"
    intersight_api_path = None

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ucs_server_profile_name = ucs_server_profile_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}')"
            )

    def _attach_ucs_server_profile(self):
        """This is a function to attach an Intersight UCS Server Profile to an
        Intersight Policy.

        Returns:
            A dictionary for the API body of the policy object to be posted on
            Intersight.    
        """
        # Attach UCS Server Profile
        if self.ucs_server_profile_name:
            print("Attaching the UCS Server Profile named "
                  f"{self.ucs_server_profile_name}...")
            # Get UCS Server Profile MOID
            ucs_server_profile_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                       intersight_api_key=None,
                                                                       object_name=self.ucs_server_profile_name,
                                                                       intersight_api_path="server/Profiles",
                                                                       object_type="UCS Server Profile",
                                                                       organization=self.organization,
                                                                       preconfigured_api_client=self.api_client
                                                                       )
            # Update the API body with the appropriate Server Profile MOID
            self.intersight_api_body["Profiles"] = [
                {"Moid": ucs_server_profile_moid,
                 "ObjectType": "server.Profile"}
                ]

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # POST the API body to Intersight
        self._post_intersight_object()


class LanConnectivityPolicy(DirectlyAttachedUcsServerPolicy):
    """This class is used to configure a LAN Connectivity Policy in Intersight.
    """
    object_type = "LAN Connectivity Policy"
    intersight_api_path = "vnic/LanConnectivityPolicies"
    object_variable_value_maps = [
        {"VariableName": "vnic_placement_mode",
         "Description": "vNIC Placement Mode",
         "AttributeName": "PlacementMode",
         "Values": [
             {"FrontEndValue": "Auto",
              "BackEndValue": "auto"
              },
             {"FrontEndValue": "Manual",
              "BackEndValue": "custom"
              },
             {"FrontEndValue": "Custom",
              "BackEndValue": "custom"
              }
             ]
         }
        ]    

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ucs_server_profile_name="",
                 enable_azure_stack_host_qos=False,
                 iqn_assignment_type="None",
                 iqn_pool=None,
                 iqn_static_identifier="",
                 vnic_placement_mode="Auto",
                 ucs_server_type="FI-Attached"
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client,
                         ucs_server_profile_name
                         )
        self.enable_azure_stack_host_qos = enable_azure_stack_host_qos
        self.iqn_assignment_type = iqn_assignment_type
        self.iqn_pool = iqn_pool
        self.iqn_static_identifier = iqn_static_identifier
        self.vnic_placement_mode = vnic_placement_mode
        self.ucs_server_type = ucs_server_type
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description,
            "AzureQosEnabled": self.enable_azure_stack_host_qos,
            "IqnAllocationType": self.iqn_assignment_type,
            "StaticIqnName": self.iqn_static_identifier
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ucs_server_profile_name}', "
            f"'{self.ucs_server_type}', "
            f"{self.enable_azure_stack_host_qos}, "
            f"'{self.iqn_assignment_type}', "
            f"{self.iqn_pool}, "
            f"'{self.iqn_static_identifier}', "
            f"'{self.vnic_placement_mode}')"
            )

    def _update_api_body_ucs_server_type(self):
        """This function updates the Intersight API body with the UCS server type
        i.e. target platform in the accepted format.
        
        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """    
        # Update the API body with the provided UCS Server Type (Target Platform)
        # Reformat the user provided ucs_server_type variable value to lowercase and remove spaces to prevent potential format issues
        try:
            reformatted_ucs_server_type_variable_value = "".join(self.ucs_server_type.lower().split())
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)
        if reformatted_ucs_server_type_variable_value == "fi-attached":
            self.intersight_api_body["TargetPlatform"] = "FIAttached"
        elif reformatted_ucs_server_type_variable_value == "standalone":
            self.intersight_api_body["TargetPlatform"] = "Standalone"
        else:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} named "
                  f"{self.policy_name}, there was an issue with the value "
                  "provided for the UCS Server Type setting.")
            print(f"The value provided was {ucs_server_type}.")
            print("To proceed, the value provided for the UCS "
                  "Server Type setting should be updated to an accepted string "
                  "format.")
            print("The accepted values are 'FI-Attached' or 'Standalone'.")
            print("Please update the configuration, then re-attempt "
                  "execution.\n")
            sys.exit(0)

    def object_maker(self):
        """This function makes the targeted policy object.
        """
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Update the API body with any provided IQN Pool
        if self.iqn_pool:
            iqn_pool_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                             intersight_api_key=None,
                                                             object_name=self.iqn_pool,
                                                             intersight_api_path="iqnpool/Pools",
                                                             object_type="IQN Pool",
                                                             preconfigured_api_client=self.api_client
                                                             )
            self.intersight_api_body["IqnPool"] = {
                "Moid": iqn_pool_moid
                }
        else:
            self.intersight_api_body["IqnPool"] = self.iqn_pool
        # Update the API body with a UCS Server Profile attached, if specified
        self._attach_ucs_server_profile()
        # Update the API body with the UCS server type
        self._update_api_body_ucs_server_type()
        # POST the API body to Intersight
        self._post_intersight_object()


class IdConfigurator:
    """This class serves as a base class for configuring the IDs of objects in
    Intersight policies. Examples of the objects that would use these IDs are
    ports, VLANs, VSANs, vNICs, and vHBAs.
    """
    object_type = "ID Configurator"
    attributes_that_require_special_handling = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        if id_list is None:
            self.id_list = []
        else:
            self.id_list = id_list
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def enumerated_id_range_retriever(self,
                                      id_dictionary,
                                      id_key
                                      ):
        """This function captures provided ID ranges for enumeration and
        returns the enumerated list.

        Args:
            id_dictionary (dict):
                The dictionary containing the ID or range of IDs to be
                enumerated.
            id_key (str):
                The key name of the ID to be enumerated.

       Returns:
            A list of enumerated integers for the provided IDs in a format
            consumable by the Intersight API.
            
        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the ID type is inaccessible from the
                ID dictionary. The key may be missing or misspelled.       
        """
        # Verify ID range has been configured in provided ID dictionary
        try:
            provided_id_range = id_dictionary[id_key]
        except KeyError:
            print("\nA configuration error has occurred!\n")
            print(f"During the configuration of the {self.object_type} "
                  f"settings for the {self.policy_type} named "
                  f"{self.policy_name}, there was an issue accessing the range "
                  f"of IDs to be configured.")
            print(f"Please verify a key named '{id_key}' exists in the "
                  f"ID list variable for the {self.object_type} "
                  "settings.\n")
            print("Please review and resolve any error messages, then "
                  "re-attempt execution.\n")
            print("Exception Message: ")
            traceback.print_exc()
            sys.exit(0)
        return integer_number_list_maker(provided_id_range)

    def attribute_handler(self,
                          staged_intersight_api_body
                          ):
        """
        This function is used to retrieve the MOIDs for provided attributes
        that require them for configuration through the Intersight API.

        Args:
            staged_intersight_api_body (dict):
                The staged Intersight API body dictionary being prepared for
                configuration on Intersight.

        Raises:
            KeyError:
                A key error occurred due to an inaccessible dictionary key. In
                this instance, the key for the name of a required attribute is
                inaccessible from the ID dictionary. The key may be missing or
                misspelled.
        """
        if self.attributes_that_require_special_handling:
            for id_attribute in self.attributes_that_require_special_handling:
                # If provided, add default attribute option to staged Intersight API body
                if id_attribute.get("DefaultOption"):
                    id_attribute_default_option = getattr(self,
                                                          id_attribute.get("DefaultOption")
                                                          )
                    if id_attribute_default_option:
                        if id_attribute["Name"] not in staged_intersight_api_body:
                            staged_intersight_api_body[id_attribute["Name"]] = id_attribute_default_option
                # Verify mandatory attributes are present in the staged Intersight API body
                if id_attribute.get("Mandatory"):
                    try:
                        verify_id_attribute_presence = staged_intersight_api_body[id_attribute["Name"]]
                    except KeyError:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{self.object_type} settings for the "
                              f"{self.policy_type} named {self.policy_name}, "
                              f"there was an issue accessing the value for "
                              f"the {id_attribute['Type']}.")
                        print("Please verify the key named "
                              f"'{id_attribute['Name']}' exists in the "
                              f"ID list variable for the {self.object_type} "
                              "settings.\n")
                        print("Please review and resolve any error messages, "
                              f"then re-attempt execution.\n")
                        print("Exception Message: ")
                        traceback.print_exc()
                        sys.exit(0)
                    # Retrieve MOID if required
                    if id_attribute.get("MoidRequired"):
                        id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                             intersight_api_key=None,
                                                                             object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                             intersight_api_path=id_attribute["IntersightAPIPath"],
                                                                             object_type=id_attribute["Type"],
                                                                             organization=self.organization,
                                                                             preconfigured_api_client=self.api_client
                                                                             )
                        staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}
                else:
                    # Retrieve MOID if required for optional attributes
                    if id_attribute.get("MoidRequired"):
                        if staged_intersight_api_body.get(id_attribute["Name"]):
                            id_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                 intersight_api_key=None,
                                                                                 object_name=staged_intersight_api_body[id_attribute["Name"]],
                                                                                 intersight_api_path=id_attribute["IntersightAPIPath"],
                                                                                 object_type=id_attribute["Type"],
                                                                                 organization=self.organization,
                                                                                 preconfigured_api_client=self.api_client
                                                                                 )
                            staged_intersight_api_body[id_attribute["Name"]] = {"Moid": id_attribute_moid}


class Interface(IdConfigurator):
    """This class serves as a base class for configuring interfaces in
    Intersight policies.
    """
    object_type = "Interface"
    id_type = "Interface"

    def _interface_object_attribute_map_handler(self,
                                                staged_interface_dictionary,
                                                interface_object_attribute_map_dictionary
                                                ):
        """This is a function to handle setting of interface object attributes
        which have mismatched Front-End and Back-End labeling, set provided
        default values, retrieve any required MOIDs, and set/verify Parent
        attributes.
        
        Args:
            staged_interface_dictionary (dict):
                An interface dictionary extracted from the provided
                interface list being prepared and staged for posting to
                Intersight.
            interface_object_attribute_map_dictionary (dict):
                A dictionary containing attribute data, including front-end
                (GUI) to back-end (API) mapped values.
        """
        # Check for attribute front-end name key in the dictionary
        if interface_object_attribute_map_dictionary["FrontEndName"] in staged_interface_dictionary:
            # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
            if interface_object_attribute_map_dictionary["BackEndName"] not in staged_interface_dictionary:
                staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = staged_interface_dictionary.get(interface_object_attribute_map_dictionary["FrontEndName"])
            # Remove the front-end name key from the dictionary
            staged_interface_dictionary.pop(interface_object_attribute_map_dictionary["FrontEndName"])
        # Check if current attribute has a provided default option, if so, add default attribute option to staged dictionary (staged Intersight API body)
        if interface_object_attribute_map_dictionary.get("DefaultOption"):
            interface_object_attribute_default_option = getattr(self,
                                                                interface_object_attribute_map_dictionary.get("DefaultOption")
                                                                )
            if interface_object_attribute_default_option:
                if interface_object_attribute_map_dictionary["BackEndName"] not in staged_interface_dictionary:
                    staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = interface_object_attribute_default_option
        # Establish default automatic insertion status of current attribute
        automatic_insertion_of_attribute_value_performed = False
        # Check if current attribute is mandatory and verify presence in the staged dictionary (staged Intersight API body)
        if interface_object_attribute_map_dictionary.get("Mandatory"):
            if not any(
                attribute_name_key in
                staged_interface_dictionary for
                attribute_name_key in
                (interface_object_attribute_map_dictionary["FrontEndName"],
                 interface_object_attribute_map_dictionary["BackEndName"],
                 interface_object_attribute_map_dictionary["ParentAttributeName"]
                 )
                ):
                if interface_object_attribute_map_dictionary.get("AutomaticInsertion"):
                    staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = interface_object_attribute_map_dictionary.get("AutomaticInsertionValue")
                    automatic_insertion_of_attribute_value_performed = True
                else:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{interface_object_attribute_map_dictionary['Description']}.")
                    print("Please verify the following key exists in the "
                          "appropriate dictionary of the "
                          "associated interface list variable, then "
                          "re-attempt execution:\n")
                    if interface_object_attribute_map_dictionary['FrontEndName']:
                        print(f"'{interface_object_attribute_map_dictionary['FrontEndName']}'\n")
                    else:
                        print(f"'{interface_object_attribute_map_dictionary['BackEndName']}'\n")
                    sys.exit(0)
        # Check for front-end to back-end value mapping
        if interface_object_attribute_map_dictionary.get("FronttoBackEndValueMaps"):
            if (
                interface_object_attribute_map_dictionary["BackEndName"] in
                staged_interface_dictionary and
                not automatic_insertion_of_attribute_value_performed
                ):
                # Retrieve the provided attribute value
                provided_attribute_value = staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"])
                # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                try:
                    provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print("During the configuration of the "
                          f"{self.object_type} settings for the "
                          f"{self.policy_type}, there was an issue "
                          "accessing the value for a "
                          f"{interface_object_attribute_map_dictionary['Description']}.")
                    print("The value provided was "
                          f"{provided_attribute_value}.")
                    print("Please verify that the value has been provided "
                          "in an accepted string format.")
                    print("Please review and resolve any error messages, "
                          "then re-attempt execution.\n")
                    sys.exit(0)
                # Create list of known and mapped front-end to back-end values
                front_to_backend_value_maps_key_list = list(interface_object_attribute_map_dictionary["FronttoBackEndValueMaps"])
                # Replace known and reformatted front-end value with known and mapped back-end value
                if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                    provided_attribute_value_mapped = interface_object_attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                    staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                else:
                    print("\nWARNING: An unknown "
                          f"{interface_object_attribute_map_dictionary['Description']} "
                          f"value of '{provided_attribute_value}' has been "
                          f"provided for the {self.object_type} settings!")
                    print("An attempt will be made to configure the "
                          "unknown "
                          f"{interface_object_attribute_map_dictionary['Description']} "
                          "value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{interface_object_attribute_map_dictionary['Description']}, "
                          "then re-attempt execution:\n")
                    print(*interface_object_attribute_map_dictionary["FixedFrontEndValues"],
                          sep=", "
                          )
        # Check if current attribute's MOID is required and retrieve if needed
        if interface_object_attribute_map_dictionary.get("MoidRequired"):
            if staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"]):
                interface_object_attribute_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                     intersight_api_key=None,
                                                                     object_name=staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]],
                                                                     intersight_api_path=interface_object_attribute_map_dictionary["IntersightAPIPath"],
                                                                     object_type=interface_object_attribute_map_dictionary["Description"],
                                                                     organization=self.organization,
                                                                     preconfigured_api_client=self.api_client
                                                                     )
                staged_interface_dictionary[interface_object_attribute_map_dictionary["BackEndName"]] = {"Moid": interface_object_attribute_moid}
        # Check if current attribute has a back-end Parent attribute and nest as needed
        if interface_object_attribute_map_dictionary.get("ParentAttributeName"):
            if (
                staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"])
                or
                staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"]) == 0
                ):
                if interface_object_attribute_map_dictionary.get("ParentAttributeName") not in staged_interface_dictionary:
                    staged_interface_dictionary[interface_object_attribute_map_dictionary.get("ParentAttributeName")] = {
                        interface_object_attribute_map_dictionary["BackEndName"]: staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"])
                        }
                else:
                    staged_interface_dictionary[interface_object_attribute_map_dictionary.get("ParentAttributeName")].update(
                        {interface_object_attribute_map_dictionary["BackEndName"]: staged_interface_dictionary.get(interface_object_attribute_map_dictionary["BackEndName"])
                         }
                        )
                staged_interface_dictionary.pop(interface_object_attribute_map_dictionary["BackEndName"], None)


class Vnic(Interface):
    """This class serves as a base class for configuring vNICs in Intersight
    policies.
    """
    object_type = "vNIC"
    id_type = "Vnic"
    intersight_api_path = "vnic/EthIfs"
    policy_type = "LAN Connectivity Policy"
    policy_intersight_api_path = "vnic/LanConnectivityPolicies"
    policy_class_name = "LanConnectivityPolicy"
    interface_object_attribute_maps = [
        {"FrontEndName": None,
         "BackEndName": "Name",
         "Description": "vNIC Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Pin Group Name",
         "BackEndName": "PinGroupName",
         "Description": "vNIC Pin Group Name",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "MAC Address Type",
         "BackEndName": "MacAddressType",
         "Description": "MAC Address Type",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Pool",
             "Static"
             ],
         "FronttoBackEndValueMaps": {
             "pool": "POOL",
             "static": "STATIC"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "MAC Address Pool",
         "BackEndName": "MacPool",
         "Description": "MAC Address Pool",
         "IntersightAPIPath": "macpool/Pools",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_mac_address_pool_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Static MAC Address",
         "BackEndName": "StaticMacAddress",
         "Description": "vNIC Static MAC Address",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Slot ID",
         "BackEndName": "Id",
         "Description": "vNIC Slot ID Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "PCI Link",
         "BackEndName": "PciLink",
         "Description": "vNIC PCI Link Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "Switch ID",
         "BackEndName": "SwitchId",
         "Description": "vNIC Switch ID Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "A",
             "B",
             "None"
             ],
         "FronttoBackEndValueMaps": {
             "a": "A",
             "b": "B",
             "none": "None"
             },
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": None,
         "BackEndName": "Uplink",
         "Description": "vNIC Uplink Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Placement"
         },
        {"FrontEndName": "PCI Order",
         "BackEndName": "Order",
         "Description": "vNIC PCI Order Placement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": None,
         "BackEndName": "Source",
         "Description": "Consistent Device Naming (CDN) Source",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "vNIC Name",
             "User Defined"
             ],
         "FronttoBackEndValueMaps": {
             "vnicname": "vnic",
             "userdefined": "user"
             },
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Cdn"
         },
        {"FrontEndName": None,
         "BackEndName": "Value",
         "Description": "Consistent Device Naming (CDN) Value",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "Cdn"
         },
        {"FrontEndName": "Failover",
         "BackEndName": "FailoverEnabled",
         "Description": "vNIC Failover Enablement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet Network Group Policy",
         "BackEndName": "FabricEthNetworkGroupPolicy",
         "Description": "Ethernet Network Group Policy",
         "IntersightAPIPath": "fabric/EthNetworkGroupPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_network_group_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet Network Control Policy",
         "BackEndName": "FabricEthNetworkControlPolicy",
         "Description": "Ethernet Network Control Policy",
         "IntersightAPIPath": "fabric/EthNetworkControlPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_network_control_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet QoS",
         "BackEndName": "EthQosPolicy",
         "Description": "Ethernet QoS Policy",
         "IntersightAPIPath": "vnic/EthQosPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_qos_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet Adapter",
         "BackEndName": "EthAdapterPolicy",
         "Description": "Ethernet Adapter Policy",
         "IntersightAPIPath": "vnic/EthAdapterPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": True,
         "MoidRequired": True,
         "DefaultOption": "default_ethernet_adapter_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Ethernet Network",
         "BackEndName": "EthNetworkPolicy",
         "Description": "Ethernet Network Policy",
         "IntersightAPIPath": "vnic/EthNetworkPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "iSCSI Boot",
         "BackEndName": "IscsiBootPolicy",
         "Description": "iSCSI Boot Policy",
         "IntersightAPIPath": "vnic/IscsiBootPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_iscsi_boot_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": None
         },
        {"FrontEndName": "Connection Type",
         "BackEndName": "Connection",
         "Description": "Connection Type",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": [
             "Disabled",
             "usNIC",
             "VMQ"
             ],
         "FronttoBackEndValueMaps": {
             "disabled": "Disabled",
             "usnic": "usNIC",
             "vmq": "VMQ"
             },
         "Mandatory": True,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": True,
         "AutomaticInsertionValue": "Disabled",
         "ParentAttributeName": None
         },
        {"FrontEndName": "Number of usNICs",
         "BackEndName": "Count",
         "Description": "Number of usNICs",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "UsnicSettings"
         },
        {"FrontEndName": "usNIC Adapter Policy",
         "BackEndName": "UsnicAdapterPolicy",
         "Description": "usNIC Adapter Policy",
         "IntersightAPIPath": "vnic/EthAdapterPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_usnic_adapter_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "UsnicSettings"
         },
        {"FrontEndName": "Class of Service",
         "BackEndName": "Cos",
         "Description": "usNIC Class of Service",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "UsnicSettings"
         },
        {"FrontEndName": "Enable Virtual Machine Multi-Queue",
         "BackEndName": "MultiQueueSupport",
         "Description": "Virtual Machine Multi-Queue Enablement",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         },
        {"FrontEndName": "Number of Sub vNICs",
         "BackEndName": "NumSubVnics",
         "Description": "VMQ Number of Sub vNICs",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         },
        {"FrontEndName": "VMMQ Adapter Policy",
         "BackEndName": "VmmqAdapterPolicy",
         "Description": "VMMQ Adapter Policy",
         "IntersightAPIPath": "vnic/EthAdapterPolicies",
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": True,
         "DefaultOption": "default_vmmq_adapter_policy_name",
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         },
        {"FrontEndName": "Number of Interrupts",
         "BackEndName": "NumInterrupts",
         "Description": "VMQ Number of Interrupts",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         },
        {"FrontEndName": "Number of Virtual Machine Queues",
         "BackEndName": "NumVmqs",
         "Description": "VMQ Number of Virtual Machine Queues",
         "IntersightAPIPath": None,
         "FixedFrontEndValues": None,
         "FronttoBackEndValueMaps": None,
         "Mandatory": False,
         "MoidRequired": False,
         "DefaultOption": None,
         "AutomaticInsertion": False,
         "AutomaticInsertionValue": None,
         "ParentAttributeName": "VmqSettings"
         }
        ]
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 id_list=None,
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 preconfigured_api_client=None,
                 default_mac_address_pool_name="",
                 default_ethernet_network_group_policy_name="",
                 default_ethernet_network_control_policy_name="",
                 default_ethernet_qos_policy_name="",
                 default_ethernet_adapter_policy_name="",
                 default_iscsi_boot_policy_name="",
                 default_usnic_adapter_policy_name="",
                 default_vmmq_adapter_policy_name=""
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         id_list,
                         organization,
                         intersight_base_url,
                         preconfigured_api_client
                         )
        self.default_mac_address_pool_name = default_mac_address_pool_name
        self.default_ethernet_network_group_policy_name = default_ethernet_network_group_policy_name
        self.default_ethernet_network_control_policy_name = default_ethernet_network_control_policy_name
        self.default_ethernet_qos_policy_name = default_ethernet_qos_policy_name
        self.default_ethernet_adapter_policy_name = default_ethernet_adapter_policy_name
        self.default_iscsi_boot_policy_name = default_iscsi_boot_policy_name
        self.default_usnic_adapter_policy_name = default_usnic_adapter_policy_name
        self.default_vmmq_adapter_policy_name = default_vmmq_adapter_policy_name

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.id_list}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.api_client}, "
            f"'{self.default_mac_address_pool_name}', "
            f"'{self.default_ethernet_network_group_policy_name}', "
            f"'{self.default_ethernet_network_control_policy_name}', "
            f"'{self.default_ethernet_qos_policy_name}', "
            f"'{self.default_ethernet_adapter_policy_name}', "
            f"'{self.default_iscsi_boot_policy_name}', "
            f"'{self.default_usnic_adapter_policy_name}', "
            f"'{self.default_vmmq_adapter_policy_name}')"
            )

    def object_maker(self):
        """This function applies the provided id list configuration to the
        targeted policy.
        """ 
        def post_intersight_vnic(vnic_name,
                                 body,
                                 moid=None
                                 ):
            """This is a function to configure an Intersight object by
            performing a POST through the Intersight API.

            Args:
                vnic_name (str):
                    The name of the vNIC to be posted on Intersight.
                body (dict):
                    The body of the object to be posted on Intersight.
                moid (str):
                    Optional; The Intersight MOID of the object to be posted
                    on Intersight. The default value is None.
            
            Returns:
                A string with a statement indicating whether the POST method
                was successful or failed.
                
            Raises:
                Exception:
                    An exception occurred while performing the API call.
                    The status code or error message will be specified.
            """
            if moid:
                full_intersight_api_path = f"/{self.intersight_api_path}/{moid}"
            else:
                full_intersight_api_path = f"/{self.intersight_api_path}"
            try:
                self.api_client.call_api(resource_path=full_intersight_api_path,
                                         method="POST",
                                         body=body,
                                         auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                         )
                if moid:
                    print(f"The configuration of {self.object_type} "
                          f"{vnic_name} has been updated.")
                else:
                    print(f"The configuration of {self.object_type} "
                          f"{vnic_name} has completed.")
                return "The POST method was successful."
            except intersight.exceptions.ApiException as error:
                error_body_dictionary = ast.literal_eval(error.body)
                if (
                    error.status == 400
                    and
                    error_body_dictionary.get("messageId") == "vnic_duplicate_name"
                    ):
                    print(f"The targeted {self.object_type} {vnic_name} "
                          "appears to already exist.")
                    print("An attempt will be made to update the pre-existing "
                          f"{vnic_name}...")
                    try:
                        existing_intersight_object_moid = advanced_intersight_object_moid_retriever(
                            intersight_api_key_id=None,
                            intersight_api_key=None,
                            object_attributes={
                                "Name": vnic_name,
                                "LanConnectivityPolicy": {
                                    "ClassId": "mo.MoRef",
                                    "Moid": policy_moid,
                                    "ObjectType": "vnic.LanConnectivityPolicy",
                                    "link": f"https://www.intersight.com/api/v1/vnic/LanConnectivityPolicies/{policy_moid}"
                                    }
                                },
                            intersight_api_path=self.intersight_api_path,
                            object_type=self.object_type,
                            organization=self.organization,
                            preconfigured_api_client=self.api_client
                            )
                        # Update full Intersight API path with the MOID of the existing object
                        full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                        self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                                 method="POST",
                                                 body=body,
                                                 auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                                 )
                        print(f"The update of the {self.object_type} has "
                              "completed.")
                        print(f"The pre-existing {vnic_name} "
                              "has been updated.")
                        return "The POST method was successful."
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print(f"Unable to update the {self.object_type} under the "
                              "Intersight API resource path "
                              f"'{full_intersight_api_path_with_moid}'.\n")
                        print(f"The pre-existing {vnic_name} "
                              "could not be updated.")
                        print("Exception Message: ")
                        traceback.print_exc()
                        return "The POST method failed."
                elif (
                    error.status == 400
                    and
                    error_body_dictionary.get("messageId") == "vif_duplicate_order_same_slot"
                    ):
                    print("\nA configuration error has occurred!\n")
                    if moid:
                        print(f"Unable to update {self.object_type} "
                              f"{vnic_name} under the "
                              "Intersight API resource path "
                              f"'{full_intersight_api_path}'.\n")
                    else:
                        print(f"Unable to configure {self.object_type} "
                              f"{vnic_name} under the Intersight "
                              f"API resource path '{full_intersight_api_path}'.\n")
                    print("Exception Message: ")
                    traceback.print_exc()
                    print(f"If the {self.object_type} Placement mode is set to "
                          "'Manual' or 'Custom', change the mode to 'Auto' or "
                          "include the appropriate unique values for the "
                          "Placement Slot ID, PCI Link, or PCI Order for each "
                          f"provided {self.object_type} by using the "
                          "'Slot ID', 'PCI Link', or 'PCI Order' dictionary "
                          "keys.")
                    return "The POST method failed."
                else:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to configure the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            except Exception:
                print("\nA configuration error has occurred!\n")
                if moid:
                    print(f"Unable to update {self.object_type} "
                          f"{vnic_name} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path}'.\n")
                else:
                    print(f"Unable to configure {self.object_type} "
                          f"{vnic_name} under the Intersight "
                          f"API resource path '{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."

        def _interface_api_body_staging_updates(id_dictionary):
            """This is a function to handle converting a provided interface
            dictionary into an API body that is prepped and staged for
            posting to Intersight. Attributes are modified and converted for
            compatibility as needed.
            
            Args:
                id_dictionary (dict):
                    An interface dictionary extracted from the provided
                    interface list being prepared and staged for posting to
                    Intersight.

            Returns:
                A dictionary containing API body data compatible with
                Intersight.
            """            
            staged_intersight_api_body = copy.deepcopy(id_dictionary)
            staged_intersight_api_body[self.policy_class_name] = {"Moid": policy_moid}
            # Handle setting of attributes which have mismatched Front-End and Back-End labeling, set provided default values, retrieve any required MOIDs and verify/set Parent attributes
            for interface_object_attribute_map_dictionary in self.interface_object_attribute_maps:
                self._interface_object_attribute_map_handler(
                    staged_interface_dictionary=staged_intersight_api_body,
                    interface_object_attribute_map_dictionary=interface_object_attribute_map_dictionary
                    )
            # Update the Intersight API body with the Ethernet Network Group Policy MOID value to a list format as required by the backend API
            staged_intersight_api_body["FabricEthNetworkGroupPolicy"] = [staged_intersight_api_body["FabricEthNetworkGroupPolicy"]]
            # Establish default Connection settings for usNIC and VMQ (Virtual Machine Queue) options
            connection_usnic_default_settings = {
                "ClassId": "vnic.UsnicSettings",
                "Cos": 5,
                "Count": 0,
                "ObjectType": "vnic.UsnicSettings",
                "UsnicAdapterPolicy": ""
                }
            connection_vmq_default_settings = {
                "ClassId": "vnic.VmqSettings",
                "Enabled": False,
                "MultiQueueSupport": False,
                "NumInterrupts": 16,
                "NumSubVnics": 64,
                "NumVmqs": 4,
                "ObjectType": "vnic.VmqSettings",
                "VmmqAdapterPolicy": ""
                }
            # Update the Intersight API body with the provided Connection settings
            if staged_intersight_api_body.get("Connection") == "Disabled":
                staged_intersight_api_body["UsnicSettings"] = connection_usnic_default_settings
                staged_intersight_api_body["VmqSettings"] = connection_vmq_default_settings
            if staged_intersight_api_body.get("Connection") == "usNIC":
                if staged_intersight_api_body.get("UsnicSettings", {}).get("UsnicAdapterPolicy", {}).get("Moid"):
                    staged_intersight_api_body["UsnicSettings"]["UsnicAdapterPolicy"] = staged_intersight_api_body.get("UsnicSettings", {}).get("UsnicAdapterPolicy", {}).get("Moid")
                staged_intersight_api_body["VmqSettings"] = connection_vmq_default_settings
            if staged_intersight_api_body.get("Connection") == "VMQ":
                if not staged_intersight_api_body.get("VmqSettings", {}).get("Enabled"):
                    staged_intersight_api_body["VmqSettings"]["Enabled"] = True
                if staged_intersight_api_body.get("VmqSettings", {}).get("VmmqAdapterPolicy", {}).get("Moid"):
                    staged_intersight_api_body["VmqSettings"]["VmmqAdapterPolicy"] = staged_intersight_api_body.get("VmqSettings", {}).get("VmmqAdapterPolicy", {}).get("Moid")
                staged_intersight_api_body["UsnicSettings"] = connection_usnic_default_settings
            # Updates to the Intersight API body if a Connection usNIC Adapter Policy is provided
            if staged_intersight_api_body.get("UsnicSettings", {}).get("UsnicAdapterPolicy"):
                staged_intersight_api_body["VmqSettings"] = connection_vmq_default_settings
            # Updates to the Intersight API body if a Connection VMMQ (Virtual Machine Multi-Queue) Adapter Policy is provided
            if staged_intersight_api_body.get("VmqSettings", {}).get("VmmqAdapterPolicy"):
                staged_intersight_api_body["UsnicSettings"] = connection_usnic_default_settings
                staged_intersight_api_body["VmqSettings"]["NumInterrupts"] = connection_vmq_default_settings["NumInterrupts"]
                staged_intersight_api_body["VmqSettings"]["NumVmqs"] = connection_vmq_default_settings["NumVmqs"]
            # Updates to the Intersight API body if Connection VMMQ (Virtual Machine Multi-Queue) is enabled
            if staged_intersight_api_body.get("VmqSettings", {}).get("MultiQueueSupport"):
                staged_intersight_api_body["VmqSettings"]["NumInterrupts"] = connection_vmq_default_settings["NumInterrupts"]
                staged_intersight_api_body["VmqSettings"]["NumVmqs"] = connection_vmq_default_settings["NumVmqs"]
            # Updates to the Intersight API body if Connection VMMQ (Virtual Machine Multi-Queue) is disabled
            if staged_intersight_api_body.get("VmqSettings"):
                if not staged_intersight_api_body.get("VmqSettings", {}).get("MultiQueueSupport"):
                    staged_intersight_api_body["VmqSettings"]["NumSubVnics"] = connection_vmq_default_settings["NumSubVnics"]
                    staged_intersight_api_body["VmqSettings"]["VmmqAdapterPolicy"] = connection_vmq_default_settings["VmmqAdapterPolicy"]                
            # Remove keys not needed for creating the Interface object from the staged_intersight_api_body
            staged_intersight_api_body.pop(vnics_id_key, None)
            staged_intersight_api_body.pop("Connection", None)
            return staged_intersight_api_body

        if self.id_list:
            vnics_id_key = f"{self.id_type}s"
            # Retrieving the LAN Connectivity Policy MOID
            policy_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                           intersight_api_key=None,
                                                           object_name=self.policy_name,
                                                           intersight_api_path=self.policy_intersight_api_path,
                                                           object_type=self.policy_type,
                                                           organization=self.organization,
                                                           intersight_base_url=self.intersight_base_url,
                                                           preconfigured_api_client=self.api_client
                                                           )
            for id_dictionary in self.id_list:
                if id_dictionary.get(vnics_id_key):
                    vnics_enumerated_id_range = self.enumerated_id_range_retriever(id_dictionary,
                                                                                   vnics_id_key
                                                                                   )
                    staged_intersight_api_body = _interface_api_body_staging_updates(id_dictionary)
                    current_vnic_id_name_prefix = id_dictionary.get("Name")
                    for current_vnic_id in vnics_enumerated_id_range:
                        current_vnic_id_full_name = f"{current_vnic_id_name_prefix}{current_vnic_id}"
                        staged_intersight_api_body["Name"] = current_vnic_id_full_name
                        post_intersight_vnic(
                            current_vnic_id_full_name,
                            staged_intersight_api_body
                            )
                else:
                    staged_intersight_api_body = _interface_api_body_staging_updates(id_dictionary)
                    current_vnic_id_full_name = id_dictionary.get("Name")
                    post_intersight_vnic(
                        current_vnic_id_full_name,
                        staged_intersight_api_body
                        )
                              

def lan_connectivity_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    enable_azure_stack_host_qos=False,
    iqn_assignment_type="None",
    iqn_pool=None,
    iqn_static_identifier="",
    vnic_placement_mode="Auto",
    ucs_server_type="FI-Attached",
    vnic_list=None,
    default_mac_address_pool_name="",
    default_ethernet_network_group_policy_name="",
    default_ethernet_network_control_policy_name="",
    default_ethernet_qos_policy_name="",
    default_ethernet_adapter_policy_name="",
    default_iscsi_boot_policy_name="",
    default_usnic_adapter_policy_name="",
    default_vmmq_adapter_policy_name="",
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None,
    ucs_server_profile_name=""
    ):
    """This is a function used to make a LAN Connectivity Policy on Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        enable_azure_stack_host_qos (bool):
            Optional; Eanble Azure Stack host QoS. The default value is False.
        iqn_assignment_type (str):
            Optional; The IQN assignment type. The accepted values are "None",
            "Static", and "Pool". The default value is "None".
        iqn_pool (str):
            Optional; The pre-existing IQN pool to be used if the IQN
            assignment type has been set to "Pool". The default value is None.
        iqn_static_identifier (str):
            Optional; The IQN static identifier to be used if the IQN
            assignment type has been set to "Static". The default value is an
            empty string ("").
        vnic_placement_mode (str):
            Optional; The vNIC placement mode. The accepted values are "Auto"
            and "Manual". The default value is "Auto".
        ucs_server_type (str):
            Optional; The target UCS server type of the policy. The accepted
            values are "FI-Attached" or "Standalone". IMM
            (Intersight Managed Mode) environments should use "FI-Attached". 
            The default value is "FI-Attached".
        vnic_list (list):
            Optional; The list of dictionary entries for vNICs to
            be configured. The default value is None. An
            example entry is:
            [{"Name": "vnic0",
              "Switch ID": "A"},
             {"Name": "vnic1",
              "Switch ID": "B"},].
            A "Name" key with a string value must be configured to specify the
            vNIC name. A "Switch ID" key with a string value of "A" or "B" to
            specify the fabric of the vNIC is also mandatory. Pre-existing
            Ethernet Network Group, Ethernet Network Control, Ethernet QoS, and
            Ethernet Adapter Policies are also required when configuring vNICs
            and can be provided through the vnic_list argument or corresponding
            arguments for default policies (see and review other arguments of
            the function). If mandatory Policies are not provided using
            corresponding arguments, a corresponding Policy key must also be
            configured in each vNIC dictionary entry to specify a
            pre-existing Policy using a string value. If different Policies
            and/or Pools are desired for different sets of vNICs, the
            corresponding Policy or Pool key should also be used and will
            always override the arguments for default Policies or Pools.
            Optional key settings such as "Pin Group Name", "MAC Address Type",
            "MAC Address Pool", "Static MAC Address", "Slot ID", "PCI Link",
            "Uplink", "PCI Order", "Source", "Value", "Failover",
            "Ethernet Network Group Policy", "Ethernet Network Control Policy",
            "Ethernet QoS", "Ethernet Adapter", "Ethernet Network",
            "iSCSI Boot", "Connection Type", "Number of usNICs",
            "usNIC Adapter Policy", "Class of Service",
            "Enable Virtual Machine Multi-Queue", "Number of Sub vNICs",
            "VMMQ Adapter Policy", "Number of Interrupts", and
            "Number of Virtual Machine Queues" can also be configured in each
            list dictionary, if the associated system default values are not
            desired. For bulk creation of vNICs, a "Vnics" key with a string
            value can be configured in each dictionary of the list to specify a
            range of vNIC IDs with shared values. An example entry is:
            [{"Name": "vnic",
              "Vnics": "0,2,4,6",
              "Switch ID": "A"},
             {"Name": "vnic",
              "Vnics": "1,3,5,7",
              "Switch ID": "B"},].
            When using the "Vnics" key, the "Name" key becomes a prefix for the
            vNIC name value.
        default_mac_address_pool_name (str):
            Optional; The name of the default MAC Address Pool to be used by
            all vNICs in the LAN Connectivity Policy. The default value is an
            empty string ("").
        default_ethernet_network_group_policy_name (str):
            Optional; The name of the default Ethernet Network Group Policy to
            be used by all vNICs in the LAN Connectivity Policy. The default
            value is an empty string ("").
        default_ethernet_network_control_policy_name (str):
            Optional; The name of the default Ethernet Network Control Policy
            to be used by all vNICs in the LAN Connectivity Policy. The default
            value is an empty string ("").
        default_ethernet_qos_policy_name (str):
            Optional; The name of the default Ethernet QoS Policy to be used by
            all vNICs in the LAN Connectivity Policy. The default value is an
            empty string ("").
        default_ethernet_adapter_policy_name (str):
            Optional; The name of the default Ethernet Adapter Policy to be
            used by all vNICs in the LAN Connectivity Policy. The default value
            is an empty string ("").
        default_iscsi_boot_policy_name (str):
            Optional; The name of the default iSCSI Boot Policy to be used by
            all vNICs in the LAN Connectivity Policy. The default value is an
            empty string ("").
        default_usnic_adapter_policy_name (str):
            Optional; The name of the default usNIC Adapter Policy to be used
            by all vNICs in the LAN Connectivity Policy. The default value is
            an empty string ("").
        default_vmmq_adapter_policy_name (str):
            Optional; The name of the default VMMQ
            (Virtual Machine Multi-Queue) Adapter Policy to be used by
            all vNICs in the LAN Connectivity Policy. The default value is an
            empty string ("").
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
        ucs_server_profile_name (str):
            Optional; The UCS Domain Profile the policy should be attached to.
            The default value is an empty string ("").
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create LAN Connectivity Policy object in Intersight
    builder(
        LanConnectivityPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ucs_server_profile_name=ucs_server_profile_name,
            enable_azure_stack_host_qos=enable_azure_stack_host_qos,
            iqn_assignment_type=iqn_assignment_type,
            iqn_pool=iqn_pool,
            iqn_static_identifier=iqn_static_identifier,
            vnic_placement_mode=vnic_placement_mode,
            ucs_server_type=ucs_server_type            
            ))

    # Define and create vNIC objects in Intersight
    builder(
        Vnic(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            id_list=vnic_list,
            organization=organization,
            intersight_base_url=intersight_base_url,
            preconfigured_api_client=preconfigured_api_client,
            default_mac_address_pool_name=default_mac_address_pool_name,
            default_ethernet_network_group_policy_name=default_ethernet_network_group_policy_name,
            default_ethernet_network_control_policy_name=default_ethernet_network_control_policy_name,
            default_ethernet_qos_policy_name=default_ethernet_qos_policy_name,
            default_ethernet_adapter_policy_name=default_ethernet_adapter_policy_name,
            default_iscsi_boot_policy_name=default_iscsi_boot_policy_name,
            default_usnic_adapter_policy_name=default_usnic_adapter_policy_name,
            default_vmmq_adapter_policy_name=default_vmmq_adapter_policy_name
            ))


def main():
    # Establish Maker specific variables
    maker_type = "Intersight LAN Connectivity Policy Maker"
    
    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the Policy Maker for Cisco Intersight
    print(f"\nStarting the {maker_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the Policy in Intersight
    lan_connectivity_policy_maker(
        intersight_api_key_id=None,
        intersight_api_key=None,
        policy_name=lan_connectivity_policy_name,
        enable_azure_stack_host_qos=enable_azure_stack_host_qos,
        iqn_assignment_type=iqn_assignment_type,
        iqn_pool=iqn_pool,
        iqn_static_identifier=iqn_static_identifier,
        vnic_placement_mode=vnic_placement_mode,
        ucs_server_type=ucs_server_type,
        vnic_list=vnic_list,
        default_mac_address_pool_name=default_mac_address_pool_name,
        default_ethernet_network_group_policy_name=default_ethernet_network_group_policy_name,
        default_ethernet_network_control_policy_name=default_ethernet_network_control_policy_name,
        default_ethernet_qos_policy_name=default_ethernet_qos_policy_name,
        default_ethernet_adapter_policy_name=default_ethernet_adapter_policy_name,
        default_iscsi_boot_policy_name=default_iscsi_boot_policy_name,
        default_usnic_adapter_policy_name=default_usnic_adapter_policy_name,
        default_vmmq_adapter_policy_name=default_vmmq_adapter_policy_name,
        policy_description=lan_connectivity_policy_description,
        organization=lan_connectivity_policy_organization,
        intersight_base_url=intersight_base_url,
        tags=lan_connectivity_policy_tags,
        preconfigured_api_client=main_intersight_api_client,
        ucs_server_profile_name=ucs_server_profile_name,
        )

    # Policy Maker completion
    print(f"\nThe {maker_type} has completed.\n")


if __name__ == "__main__":
    main()

# Exiting the Policy Maker for Cisco Intersight
sys.exit(0)
