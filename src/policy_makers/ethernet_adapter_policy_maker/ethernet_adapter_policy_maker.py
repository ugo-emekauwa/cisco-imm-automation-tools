"""
Ethernet Adapter Policy Maker for Cisco Intersight, v2.0
Author: Ugo Emekauwa
Contact: uemekauw@cisco.com, uemekauwa@gmail.com
Summary: The Ethernet Adapter Policy Maker for Cisco Intersight
         automates the creation of Ethernet Adapter Policies.
GitHub Repository: https://github.com/ugo-emekauwa/cisco-imm-automation-tools
"""


########################
# MODULE REQUIREMENT 1 #
########################
"""
For the following variable below named key_id, please fill in between
the quotes your Intersight API Key ID.

Here is an example:
key_id = "5c89885075646127773ec143/5c82fc477577712d3088eb2f/5c8987b17577712d302eaaff"

"""
key_id = ""


########################
# MODULE REQUIREMENT 2 #
########################
"""
For the following variable below named key, please fill in between
the quotes your system's file path to your Intersight API key "SecretKey.txt"
file.

Here is an example:
key = "C:\\Users\\demouser\\Documents\\SecretKey.txt"

"""
key = ""


########################
# MODULE REQUIREMENT 3 #
########################
"""
Provide the required configuration settings to create the
Ethernet Adapter Policy on Cisco Intersight. Remove the sample
values and replace them with your own, where applicable.
"""

####### Start Configuration Settings - Provide values for the variables listed below. #######

# General Settings
ethernet_adapter_policy_name = "Eth-Adapter-Policy-1"
ethernet_adapter_policy_description = "A Cisco Intersight Ethernet Adapter Policy generated by the Ethernet Adapter Policy Maker."
ethernet_adapter_policy_organization = "default"
ethernet_adapter_policy_tags = {"Org": "IT", "Dept": "DevOps"}  # Empty the ethernet_adapter_policy_tags dictionary if no tags are needed, for example: ethernet_adapter_policy_tags = {}

## Ethernet Adapter Default Configuration
## NOTE - Setting a default configuration will override all settings under Policy Details. Leave an empty string ("") if a default configuration is not desired.
## NOTE - Default configurations can be set by providing the name of one of the pre-defined built-in default configuration options from Intersight.
## NOTE - Available pre-defined built-in default configuration options from Intersight include:
## "MQ-SMBd"
## "SMBServer"
## "SMBClient"
## "Solaris"
## "usNICOracleRAC"
## "WIN-AzureStack"
## "Win-HPN-SMBd"
## "Win-HPN"
## "Linux-NVMe-RoCE"
## "MQ"
## "usNIC"
## "SRIOV"
## "VMWarePassThru"
## "VMWare"
## "Windows"
## "Linux"
ethernet_adapter_default_configuration = ""

# Policy Detail Settings
enable_virtual_extensible_lan = False
enable_network_virtualization_using_gre = False
enable_accelerated_receive_flow_steering = False
enable_precision_time_protocol = False
enable_advanced_filter = False
enable_interrupt_scaling = False
enable_geneve_offload = False

## RoCE Settings
enable_rdma_over_converged_ethernet = False

## Interrupt Settings
interrupts = 8        # Options: 1 - 1024
interrupt_mode = "MSIx"     # Options: "MSIx", "MSI", or "INTx"
interrupt_timer = 125        # Options: 0 - 65535
interrupt_coalescing_type = "Min"       # Options: "Min" or "Idle"

## Receive Settings
receive_queue_count = 4        # Options: 1 - 1000
receive_ring_size = 512        # Options: 64 - 16384

## Transmit Settings
transmit_queue_count = 1        # Options: 1 - 1000
transmit_ring_size = 256        # Options: 64 - 16384

## Completion Settings
completion_queue_count = 5        # Options: 1 - 2000
completion_ring_size = 5        # Options: 1 - 256
uplink_failback_timeout = 5        # Options: 0 - 600

## TCP Offload Settings
enable_tx_checksum_offload = True
enable_rx_checksum_offload = True
enable_large_send_offload = True
enable_large_receive_offload = True

## Receive Side Scaling Settings
enable_receive_side_scaling = True
enable_ipv4_hash = True
enable_ipv6_extensions_hash = False
enable_ipv6_hash = True
enable_tcp_and_ipv4_hash = True
enable_tcp_and_ipv6_extensions_hash = False
enable_tcp_and_ipv6_hash = True
enable_udp_and_ipv4_hash = False
enable_udp_and_ipv6_hash = False

## Additional RoCE Settings (Not available in the GUI, change only if needed.)
roce_class_of_service = 5        # Options: 1 - 6
roce_memory_regions = 0
roce_queue_pairs = 0
roce_resource_groups = 0
roce_version = 1        # Options: 1 - 2

# Intersight Base URL Setting (Change only if using the Intersight Virtual Appliance)
intersight_base_url = "https://www.intersight.com/api/v1"
url_certificate_verification = True

####### Finish Configuration Settings - The required value entries are complete. #######


#############################################################################################################################
#############################################################################################################################


import sys
import traceback
import json
import copy
import intersight
import re
import urllib3

# Suppress InsecureRequestWarning error messages
urllib3.disable_warnings()

# Function to get Intersight API client as specified in the Intersight Python SDK documentation for OpenAPI 3.x
## Modified to align with overall formatting, try/except blocks added for additional error handling, certificate verification option added
def get_api_client(api_key_id,
                   api_secret_file,
                   endpoint="https://intersight.com",
                   url_certificate_verification=True
                   ):
    try:
        with open(api_secret_file, 'r') as f:
            api_key = f.read()
        
        if re.search('BEGIN RSA PRIVATE KEY', api_key):
            # API Key v2 format
            signing_algorithm = intersight.signing.ALGORITHM_RSASSA_PKCS1v15
            signing_scheme = intersight.signing.SCHEME_RSA_SHA256
            hash_algorithm = intersight.signing.HASH_SHA256

        elif re.search('BEGIN EC PRIVATE KEY', api_key):
            # API Key v3 format
            signing_algorithm = intersight.signing.ALGORITHM_ECDSA_MODE_DETERMINISTIC_RFC6979
            signing_scheme = intersight.signing.SCHEME_HS2019
            hash_algorithm = intersight.signing.HASH_SHA256

        configuration = intersight.Configuration(
            host=endpoint,
            signing_info=intersight.signing.HttpSigningConfiguration(
                key_id=api_key_id,
                private_key_path=api_secret_file,
                signing_scheme=signing_scheme,
                signing_algorithm=signing_algorithm,
                hash_algorithm=hash_algorithm,
                signed_headers=[
                    intersight.signing.HEADER_REQUEST_TARGET,
                    intersight.signing.HEADER_HOST,
                    intersight.signing.HEADER_DATE,
                    intersight.signing.HEADER_DIGEST,
                    ]
                )
            )

        if not url_certificate_verification:
            configuration.verify_ssl = False
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API Key.")
        print("Exiting due to the Intersight API Key being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
        
    return intersight.ApiClient(configuration)


# Establish function to test for the availability of the Intersight API and Intersight account
def test_intersight_api_service(intersight_api_key_id,
                                intersight_api_key,
                                intersight_base_url="https://www.intersight.com/api/v1",
                                preconfigured_api_client=None
                                ):
    """This is a function to test the availability of the Intersight API and
    Intersight account. The tested Intersight account contains the user who is
    the owner of the provided Intersight API Key and Key ID.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance. The
            default value is "https://www.intersight.com/api/v1".
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the name for the Intersight account tested, verifying the
        Intersight API service is up and the Intersight account is accessible.
        
    Raises:
        Exception:
            An exception occurred due to an issue with the provided API Key
            and/or API Key ID.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Check that Intersight Account is accessible
        print("Testing access to the Intersight API by verifying the "
              "Intersight account information...")
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("\nThe Intersight API and Account Availability Test did not "
                  "pass.")
            print("The Intersight account information could not be verified.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
            print("The Intersight API and Account Availability Test has "
                  "passed.\n")
            print(f"The Intersight account named '{intersight_account_name}' "
                  "has been found.")
            return intersight_account_name
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)


# Establish function to retrieve the MOID of a specific Intersight API object by name
def intersight_object_moid_retriever(intersight_api_key_id,
                                     intersight_api_key,
                                     object_name,
                                     intersight_api_path,
                                     object_type="object",
                                     organization="default",
                                     intersight_base_url="https://www.intersight.com/api/v1",
                                     preconfigured_api_client=None
                                     ):
    """This is a function to retrieve the MOID of Intersight objects
    using the Intersight API.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_name (str):
            The name of the Intersight object.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.

    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)

    if intersight_objects.get("Results"):
        for intersight_object in intersight_objects.get("Results"):
            if intersight_object.get("Organization"):
                provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                              intersight_api_key=None,
                                                                              object_name=organization,
                                                                              intersight_api_path="organization/Organizations?$top=1000",
                                                                              object_type="Organization",
                                                                              preconfigured_api_client=api_client
                                                                              )
                if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                    if intersight_object.get("Name") == object_name:
                        intersight_object_moid = intersight_object.get("Moid")
                        # The provided object and MOID has been identified and retrieved.
                        return intersight_object_moid
            else:
                if intersight_object.get("Name") == object_name:
                    intersight_object_moid = intersight_object.get("Moid")
                    # The provided object and MOID has been identified and retrieved.
                    return intersight_object_moid
        else:
            print("\nA configuration error has occurred!\n")
            print(f"The provided {object_type} named '{object_name}' was not "
                  "found.")
            print("Please check the Intersight Account named "
                  f"{intersight_account_name}.")
            print("Verify through the API or GUI that the needed "
                  f"{object_type} is present.")
            print(f"If the needed {object_type} is missing, please create it.")
            print("Once the issue has been resolved, re-attempt execution.\n")
            sys.exit(0)
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} named '{object_name}' was not "
              "found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print("Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish function to backup an Intersight object
def intersight_object_backup(intersight_api_key_id,
                             intersight_api_key,
                             object_attributes,
                             intersight_api_path,
                             backup_attribute_list,
                             object_type="object",
                             organization="default",
                             intersight_base_url="https://www.intersight.com/api/v1",
                             preconfigured_api_client=None
                             ):
    """This is a function to backup an Intersight object based on various
    provided attributes using the Intersight API.
    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        object_attributes (dict):
            A dictionary containing the identifying attribute keys and values
            of the Intersight object to be found.
        intersight_api_path (str):
            The Intersight API path of the Intersight object.
        backup_attribute_list (list):
            A list containing the attribute keys that will be backed up for the 
            Intersight object.
        object_type (str):
            Optional; The type of Intersight object. The default value is
            "object".
        organization (str):
            Optional; The Intersight organization of the Intersight object. To
            ignore the organization value or if no organization is available
            for the object, the value None can be provided for the argument. 
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    Returns:
        A string of the MOID for the provided Intersight object.
        
    Raises:
        Exception:
            An exception occurred due to an issue accessing the Intersight API
            path. The status code or error message will be specified.
    """
    # Define Intersight SDK ApiClient variable
    if preconfigured_api_client is None:
        api_client = get_api_client(api_key_id=intersight_api_key_id,
                                    api_secret_file=intersight_api_key,
                                    endpoint=intersight_base_url
                                    )
    else:
        api_client = preconfigured_api_client
    try:
        # Retrieve the Intersight Account name
        api_client.call_api(resource_path="/iam/Accounts",
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        iam_account = json.loads(response)
        if api_client.last_response.status != 200:
            print("The provided Intersight account information could not be "
                  "accessed.")
            print("Exiting due to the Intersight account being unavailable.\n")
            print("Please verify that the correct API Key ID and API Key have "
                  "been entered, then re-attempt execution.\n")
            sys.exit(0)
        else:
            intersight_account_name = iam_account["Results"][0]["Name"]
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("Unable to access the Intersight API.")
        print("Exiting due to the Intersight API being unavailable.\n")
        print("Please verify that the correct API Key ID and API Key have "
              "been entered, then re-attempt execution.\n")
        sys.exit(0)
    # Retrieving the provided object from Intersight...
    full_intersight_api_path = f"/{intersight_api_path}"
    try:
        api_client.call_api(resource_path=full_intersight_api_path,
                            method="GET",
                            auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                            )
        response = api_client.last_response.data
        intersight_objects = json.loads(response)
        # The Intersight API resource path has been accessed successfully.
    except Exception:
        print("\nA configuration error has occurred!\n")
        print("There was an issue retrieving the "
              f"{object_type} from Intersight.")
        print("Unable to access the provided Intersight API resource path "
              f"'{intersight_api_path}'.")
        print("Please review and resolve any error messages, then re-attempt "
              "execution.\n")
        print("Exception Message: ")
        traceback.print_exc()
        sys.exit(0)
    
    if intersight_objects.get("Results"):
        if organization:
            for intersight_object in intersight_objects.get("Results"):
                if intersight_object.get("Organization"):
                    provided_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                  intersight_api_key=None,
                                                                                  object_name=organization,
                                                                                  intersight_api_path="organization/Organizations?$top=1000",
                                                                                  object_type="Organization",
                                                                                  preconfigured_api_client=api_client
                                                                                  )
                    if intersight_object.get("Organization", {}).get("Moid") == provided_organization_moid:
                        for object_attribute in object_attributes:
                            try:
                                intersight_object[object_attribute]
                            except KeyError:
                                break
                            if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                                break
                        else:
                            # The provided object has been identified and retrieved.
                            # Extract requested attributes from identified object
                            backup_intersight_object = {}
                            for backup_attribute in backup_attribute_list:
                                if intersight_object.get(backup_attribute):
                                    backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                            return backup_intersight_object
                else:
                    for object_attribute in object_attributes:
                        try:
                            intersight_object[object_attribute]
                        except KeyError:
                            break
                        if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                            break
                    else:
                        # The provided object has been identified and retrieved.
                        # Extract requested attributes from identified object
                        backup_intersight_object = {}
                        for backup_attribute in backup_attribute_list:
                            if intersight_object.get(backup_attribute):
                                backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                        return backup_intersight_object
            else:
                print("\nA configuration error has occurred!\n")
                print(f"The provided {object_type} was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      f"{object_type} is present.")
                print(f"If the needed {object_type} is missing, please create it.")
                print("Once the issue has been resolved, re-attempt execution.\n")
                sys.exit(0)
        else:
            for intersight_object in intersight_objects.get("Results"):
                for object_attribute in object_attributes:
                    try:
                        intersight_object[object_attribute]
                    except KeyError:
                        break
                    if intersight_object.get(object_attribute) != object_attributes.get(object_attribute):
                        break
                else:
                    # The provided object has been identified and retrieved.
                    # Extract requested attributes from identified object
                    backup_intersight_object = {}
                    for backup_attribute in backup_attribute_list:
                        if intersight_object.get(backup_attribute):
                            backup_intersight_object[backup_attribute] = intersight_object.get(backup_attribute)
                    return backup_intersight_object
            else:
                print("\nA configuration error has occurred!\n")
                print(f"The provided {object_type} was not found.")
                print("Please check the Intersight Account named "
                      f"{intersight_account_name}.")
                print("Verify through the API or GUI that the needed "
                      f"{object_type} is present.")
                print(f"If the needed {object_type} is missing, please create it.")
                print("Once the issue has been resolved, re-attempt execution.\n")
                sys.exit(0)                
    else:
        print("\nA configuration error has occurred!\n")
        print(f"The provided {object_type} was not found.")
        print(f"No requested {object_type} instance is currently available in "
              f"the Intersight account named {intersight_account_name}.")
        print("Please check the Intersight Account named "
              f"{intersight_account_name}.")
        print(f"Verify through the API or GUI that the needed {object_type} "
              "is present.")
        print(f"If the needed {object_type} is missing, please create it.")
        print(f"Once the issue has been resolved, re-attempt execution.\n")
        sys.exit(0)


# Establish Maker specific classes and functions
class UcsPolicy:
    """This class is used to configure a UCS Policy in Intersight.
    """
    object_type = "UCS Policy"
    intersight_api_path = None
    subobject_types = None
    subobject_attribute_maps = None
    object_variable_value_maps = None
    
    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None
                 ):
        self.intersight_api_key_id = intersight_api_key_id
        self.intersight_api_key = intersight_api_key
        self.policy_name = policy_name
        self.policy_description = policy_description
        self.organization = organization
        self.intersight_base_url = intersight_base_url
        if tags is None:
            self.tags = {}
        else:
            self.tags = tags
        if preconfigured_api_client is None:
            self.api_client = get_api_client(api_key_id=intersight_api_key_id,
                                             api_secret_file=intersight_api_key,
                                             endpoint=intersight_base_url
                                             )
        else:
            self.api_client = preconfigured_api_client
        self.intersight_api_body = {
            "Name": self.policy_name,
            "Description": self.policy_description
            }

    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"'{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client})"
            )

    def __str__(self):
        return f"{self.__class__.__name__} class object for '{self.policy_name}'"

    def _post_intersight_object(self):
        """This is a function to configure an Intersight object by
        performing a POST through the Intersight API.

        Returns:
            A string with a statement indicating whether the POST method
            was successful or failed.
            
        Raises:
            Exception:
                An exception occurred while performing the API call.
                The status code or error message will be specified.
        """
        full_intersight_api_path = f"/{self.intersight_api_path}"
        try:
            self.api_client.call_api(resource_path=full_intersight_api_path,
                                     method="POST",
                                     body=self.intersight_api_body,
                                     auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                     )
            print(f"The configuration of the base {self.object_type} "
                  "has completed.")
            return "The POST method was successful."
        except intersight.exceptions.ApiException as error:
            if error.status == 409:
                existing_intersight_object_name = self.intersight_api_body.get("Name", "object")
                print(f"The targeted {self.object_type} appears to already "
                      "exist.")
                print("An attempt will be made to update the pre-existing "
                      f"{existing_intersight_object_name}...")
                try:
                    existing_intersight_object_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                                       intersight_api_key=None,
                                                                                       object_name=existing_intersight_object_name,
                                                                                       intersight_api_path=f"{self.intersight_api_path}?$top=1000",
                                                                                       object_type=self.object_type,
                                                                                       preconfigured_api_client=self.api_client
                                                                                       )
                    # Update full Intersight API path with the MOID of the existing object
                    full_intersight_api_path_with_moid = f"/{self.intersight_api_path}/{existing_intersight_object_moid}"
                    self.api_client.call_api(resource_path=full_intersight_api_path_with_moid,
                                             method="POST",
                                             body=self.intersight_api_body,
                                             auth_settings=['cookieAuth', 'http_signature', 'oAuth2', 'oAuth2']
                                             )
                    print(f"The update of the {self.object_type} has "
                          "completed.")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "has been updated.")
                    return "The POST method was successful."
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"Unable to update the {self.object_type} under the "
                          "Intersight API resource path "
                          f"'{full_intersight_api_path_with_moid}'.\n")
                    print(f"The pre-existing {existing_intersight_object_name} "
                          "could not be updated.")
                    print("Exception Message: ")
                    traceback.print_exc()
                    return "The POST method failed."
            else:
                print("\nA configuration error has occurred!\n")
                print(f"Unable to configure the {self.object_type} under the "
                      "Intersight API resource path "
                      f"'{full_intersight_api_path}'.\n")
                print("Exception Message: ")
                traceback.print_exc()
                return "The POST method failed."
        except Exception:
            print("\nA configuration error has occurred!\n")
            print(f"Unable to configure the {self.object_type} under the "
                  "Intersight API resource path "
                  f"'{full_intersight_api_path}'.\n")
            print("Exception Message: ")
            traceback.print_exc()
            return "The POST method failed."

    def _update_api_body_general_attributes(self):
        """This function updates the Intersight API body with general
        attributes for the Intersight object.
        """
        # Retrieve the Intersight Organization MOID
        policy_organization_moid = intersight_object_moid_retriever(intersight_api_key_id=None,
                                                                    intersight_api_key=None,
                                                                    object_name=self.organization,
                                                                    intersight_api_path="organization/Organizations?$top=1000",
                                                                    object_type="Organization",
                                                                    preconfigured_api_client=self.api_client
                                                                    )
        # Update the API body with the Intersight Organization MOID
        self.intersight_api_body["Organization"] = {"Moid": policy_organization_moid}
        # Create the Intersight Tags dictionary list
        tags_dictionary_list = []
        if self.tags:
            for key in self.tags:
                tags_dictionary_list_entry = {
                    "Key": key,
                    "Value": self.tags.get(key)
                    }
                tags_dictionary_list.append(tags_dictionary_list_entry)
        # Update the API body with the Intersight Tags dictionary list
        self.intersight_api_body["Tags"] = tags_dictionary_list

    def _update_api_body_subobject_attributes(self):
        """This function updates the Intersight API body with individual
        attributes for subobjects of the Intersight object.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """        
        def attribute_map_handler(attribute_map_dictionary):
            """This is a function to handle attributes with a mismatch in the
            Front-End Name and Back-End Name.

            Args:
                attribute_map_dictionary (dict):
                    A dictionary containing attribute data, including front-end
                    (GUI) to back-end (API) mapped values.
            """
            # Establish default automatic insertion status of current attribute
            automatic_insertion_of_attribute_value_performed = False
            # Check if current attribute is mandatory
            if attribute_map_dictionary.get("Mandatory"):
                if not any(
                    attribute_name_key in
                    staged_subobject_dictionary for
                    attribute_name_key in
                    (attribute_map_dictionary["FrontEndName"],
                     attribute_map_dictionary["BackEndName"]
                     )
                    ):
                    if attribute_map_dictionary.get("AutomaticInsertion"):
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = attribute_map_dictionary.get("AutomaticInsertionValue")
                        automatic_insertion_of_attribute_value_performed = True
                    else:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue "
                              "accessing the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("Please verify the following key exists in the "
                              "appropriate dictionary of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"list variable for the {self.object_type}, then "
                              "re-attempt execution:\n")
                        if attribute_map_dictionary['FrontEndName']:
                            print(f"'{attribute_map_dictionary['FrontEndName']}'\n")
                        else:
                            print(f"'{attribute_map_dictionary['BackEndName']}'\n")
                        sys.exit(0)
            # Check for attribute front-end name key in the dictionary
            if attribute_map_dictionary["FrontEndName"] in staged_subobject_dictionary:
                # If the attribute back-end name key is not present in the dictionary, insert the back-end name key with the front-end name key value
                if attribute_map_dictionary["BackEndName"] not in staged_subobject_dictionary:
                    staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = staged_subobject_dictionary.get(attribute_map_dictionary["FrontEndName"])
                # Remove the front-end name key from the dictionary
                staged_subobject_dictionary.pop(attribute_map_dictionary["FrontEndName"])
            # Check for front-end to back-end value mapping
            if attribute_map_dictionary.get("FronttoBackEndValueMaps"):
                if (
                    attribute_map_dictionary["BackEndName"] in
                    staged_subobject_dictionary and
                    not automatic_insertion_of_attribute_value_performed
                    ):
                    # Retrieve the provided attribute value
                    provided_attribute_value = staged_subobject_dictionary.get(attribute_map_dictionary["BackEndName"])
                    # Reformat the provided attribute value to lowercase and remove spaces to prevent potential format issues
                    try:
                        provided_attribute_value_reformatted = "".join(provided_attribute_value.lower().split())
                    except Exception:
                        print("\nA configuration error has occurred!\n")
                        print("During the configuration of the "
                              f"{subobject_type_dictionary['Description']} "
                              f"settings for the {self.object_type} named "
                              f"{self.policy_name}, there was an issue with "
                              "the value for the "
                              f"{attribute_map_dictionary['Description']}.")
                        print("The value provided was "
                              f"{provided_attribute_value}.")
                        print("Please verify that the value has been provided "
                              "in an accepted string format.")
                        print("Please review and resolve any error messages, "
                              "then re-attempt execution.\n")
                        sys.exit(0)
                    # Create list of known and mapped front-end to back-end values
                    front_to_backend_value_maps_key_list = list(attribute_map_dictionary["FronttoBackEndValueMaps"])
                    # Replace known and reformatted front-end value with known and mapped back-end value
                    if provided_attribute_value_reformatted in front_to_backend_value_maps_key_list:
                        provided_attribute_value_mapped = attribute_map_dictionary["FronttoBackEndValueMaps"][provided_attribute_value_reformatted]
                        staged_subobject_dictionary[attribute_map_dictionary["BackEndName"]] = provided_attribute_value_mapped
                    else:
                        print("\nWARNING: An unknown "
                              f"{attribute_map_dictionary['Description']} "
                              f"value of '{provided_attribute_value}' has been "
                              "provided for the "
                              f"{subobject_type_dictionary['Description']} "
                              "settings!")
                        print("An attempt will be made to configure the "
                              "unknown "
                              f"{attribute_map_dictionary['Description']} "
                              "value.")
                        print("If there is an error, please use one of the "
                              "following known values for the "
                              f"{attribute_map_dictionary['Description']}, "
                              "then re-attempt execution:\n")
                        print(*attribute_map_dictionary["FixedFrontEndValues"],
                              sep=", "
                              )
        # Check for subobject types that may need configuration
        if self.subobject_types:
            for subobject_type_dictionary in self.subobject_types:
                subobject_list = getattr(self,
                                         subobject_type_dictionary.get("SubobjectList")
                                         )
                if subobject_list:
                    converted_subobject_list = []
                    for subobject_dictionary in subobject_list:
                        staged_subobject_dictionary = copy.deepcopy(subobject_dictionary)
                        returned_subobject_type = subobject_type_dictionary["SubobjectType"]
                        # Set 'ClassId' attribute
                        staged_subobject_dictionary["ClassId"] = returned_subobject_type
                        # Set 'ObjectType' attribute
                        staged_subobject_dictionary["ObjectType"] = returned_subobject_type
                        # Handle setting of attributes which have mismatched Front-End and Back-End names
                        for attribute_map_dictionary in self.subobject_attribute_maps.get(returned_subobject_type):
                            attribute_map_handler(attribute_map_dictionary)
                        converted_subobject_dictionary = staged_subobject_dictionary
                        converted_subobject_list.append(converted_subobject_dictionary)
                    # Update Intersight API body with the converted sub-objects list
                    self.intersight_api_body[subobject_type_dictionary["AttributeName"]] = converted_subobject_list

    def _update_api_body_mapped_object_attributes(self):
        """This function updates the Intersight API body with individual
        attributes that require mapping frontend to backend values for
        compatibility with the Intersight API.

        Raises:
            Exception:
                An exception occurred while reformatting a provided value for
                an attribute. The issue will likely be due to the provided
                value not being in string format. Changing the value to string
                format should resolve the exception.
        """
        # Check for object variables with value maps that need configuration
        if self.object_variable_value_maps:
            for object_variable in self.object_variable_value_maps:
                # Create list of all known and accepted frontend values
                all_known_and_accepted_frontend_values = (object_variable_value["FrontEndValue"]
                                                          for
                                                          object_variable_value
                                                          in
                                                          object_variable["Values"]
                                                          )
                # Retrieve the user provided object variable value
                provided_object_variable_value = getattr(self,
                                                         object_variable["VariableName"]
                                                         )
                # Reformat the user provided object variable value to lowercase and remove spaces to prevent potential format issues
                try:
                    reformatted_object_variable_value = "".join(provided_object_variable_value.lower().split())
                except Exception:
                    print("\nA configuration error has occurred!\n")
                    print(f"During the configuration of the {self.object_type} named "
                          f"{self.policy_name}, there was an issue with the value "
                          f"provided for the {object_variable['Description']} setting.")
                    print(f"The value provided was {provided_object_variable_value}.")
                    print("To proceed, the value provided for the "
                          f"{object_variable['Description']} setting should be updated to "
                          "an accepted string format.")
                    print("The recommended values are the following:\n")
                    # Print list of all known and accepted frontend values for user
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    print("\nPlease update the configuration, then re-attempt "
                          "execution.\n")
                    sys.exit(0)
                # Cycle through known values and match provided object variable value to backend value
                for object_variable_value in object_variable["Values"]:
                    # Create list of all known and accepted frontend and backend values
                    current_known_frontend_and_backend_value_options = (object_variable_value.values())
                    # Retrieve the current known backend value
                    current_known_backend_value = object_variable_value["BackEndValue"]
                    if (
                        reformatted_object_variable_value
                        in
                        ("".join(current_known_frontend_or_backend_value.lower().split())
                         for
                         current_known_frontend_or_backend_value
                         in
                         current_known_frontend_and_backend_value_options
                         )
                        ):
                        backend_object_variable_value = current_known_backend_value
                        break
                else:
                    # If no backend match is found with the user provided object variable value, pass on the user provided object variable value to Intersight to decide
                    print(f"\nWARNING: An unknown {self.object_type} value of "
                          f"'{provided_object_variable_value}' has been "
                          f"provided for the {object_variable['Description']} "
                          "settings!")
                    print("An attempt will be made to configure the unknown "
                          f"{object_variable['Description']} value.")
                    print("If there is an error, please use one of the "
                          "following known values for the "
                          f"{object_variable['Description']} settings, then "
                          "re-attempt execution:\n")
                    print(*all_known_and_accepted_frontend_values,
                          sep=", "
                          )
                    backend_object_variable_value = provided_object_variable_value
                # Update Intersight API body with the converted object variable value
                self.intersight_api_body[object_variable["AttributeName"]] = backend_object_variable_value

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # POST the API body to Intersight
        self._post_intersight_object()


class EthernetAdapterPolicy(UcsPolicy):
    """This class is used to configure an Ethernet Adapter Policy in
    Intersight.
    """
    object_type = "Ethernet Adapter Policy"
    intersight_api_path = "vnic/EthAdapterPolicies"

    def __init__(self,
                 intersight_api_key_id,
                 intersight_api_key,
                 policy_name,
                 policy_description="",
                 organization="default",
                 intersight_base_url="https://www.intersight.com/api/v1",
                 tags=None,
                 preconfigured_api_client=None,
                 ethernet_adapter_default_configuration="",
                 enable_virtual_extensible_lan=False,
                 enable_network_virtualization_using_gre=False,
                 enable_accelerated_receive_flow_steering=False,
                 enable_precision_time_protocol=False,
                 enable_advanced_filter=False,
                 enable_interrupt_scaling=False,
                 enable_geneve_offload=False,
                 enable_rdma_over_converged_ethernet=False,
                 interrupts=8,
                 interrupt_mode="MSIx",
                 interrupt_timer=125,
                 interrupt_coalescing_type="Min",
                 receive_queue_count=4,
                 receive_ring_size=512,
                 transmit_queue_count=1,
                 transmit_ring_size=256,
                 completion_queue_count=5,
                 completion_ring_size=5,
                 uplink_failback_timeout=5,
                 enable_tx_checksum_offload=True,
                 enable_rx_checksum_offload=True,
                 enable_large_send_offload=True,
                 enable_large_receive_offload=True,
                 enable_receive_side_scaling=True,
                 enable_ipv4_hash=True,
                 enable_ipv6_extensions_hash=False,
                 enable_ipv6_hash=True,
                 enable_tcp_and_ipv4_hash=True,
                 enable_tcp_and_ipv6_extensions_hash=False,
                 enable_tcp_and_ipv6_hash=True,
                 enable_udp_and_ipv4_hash=False,
                 enable_udp_and_ipv6_hash=False,
                 roce_class_of_service=5,
                 roce_memory_regions=0,
                 roce_queue_pairs=0,
                 roce_resource_groups=0,
                 roce_version=1
                 ):
        super().__init__(intersight_api_key_id,
                         intersight_api_key,
                         policy_name,
                         policy_description,
                         organization,
                         intersight_base_url,
                         tags,
                         preconfigured_api_client
                         )
        self.ethernet_adapter_default_configuration = ethernet_adapter_default_configuration
        self.enable_virtual_extensible_lan = enable_virtual_extensible_lan
        self.enable_network_virtualization_using_gre = enable_network_virtualization_using_gre
        self.enable_accelerated_receive_flow_steering = enable_accelerated_receive_flow_steering
        self.enable_precision_time_protocol = enable_precision_time_protocol
        self.enable_advanced_filter = enable_advanced_filter
        self.enable_interrupt_scaling = enable_interrupt_scaling
        self.enable_geneve_offload = enable_geneve_offload
        self.enable_rdma_over_converged_ethernet = enable_rdma_over_converged_ethernet
        self.interrupts = interrupts
        self.interrupt_mode = interrupt_mode
        self.interrupt_timer = interrupt_timer
        self.interrupt_coalescing_type = interrupt_coalescing_type
        self.receive_queue_count = receive_queue_count
        self.receive_ring_size = receive_ring_size
        self.transmit_queue_count = transmit_queue_count
        self.transmit_ring_size = transmit_ring_size
        self.completion_queue_count = completion_queue_count
        self.completion_ring_size = completion_ring_size
        self.uplink_failback_timeout = uplink_failback_timeout
        self.enable_tx_checksum_offload = enable_tx_checksum_offload
        self.enable_rx_checksum_offload = enable_rx_checksum_offload
        self.enable_large_send_offload = enable_large_send_offload
        self.enable_large_receive_offload = enable_large_receive_offload
        self.enable_receive_side_scaling = enable_receive_side_scaling
        self.enable_ipv4_hash = enable_ipv4_hash
        self.enable_ipv6_extensions_hash = enable_ipv6_extensions_hash
        self.enable_ipv6_hash = enable_ipv6_hash
        self.enable_tcp_and_ipv4_hash = enable_tcp_and_ipv4_hash
        self.enable_tcp_and_ipv6_extensions_hash = enable_tcp_and_ipv6_extensions_hash
        self.enable_tcp_and_ipv6_hash = enable_tcp_and_ipv6_hash
        self.enable_udp_and_ipv4_hash = enable_udp_and_ipv4_hash
        self.enable_udp_and_ipv6_hash = enable_udp_and_ipv6_hash
        self.roce_class_of_service = roce_class_of_service
        self.roce_memory_regions = roce_memory_regions
        self.roce_queue_pairs = roce_queue_pairs
        self.roce_resource_groups = roce_resource_groups
        self.roce_version = roce_version
        
    def __repr__(self):
        return (
            f"{self.__class__.__name__}"
            f"('{self.intersight_api_key_id}', "
            f"'{self.intersight_api_key}', "
            f"('{self.policy_name}', "
            f"'{self.policy_description}', "
            f"'{self.organization}', "
            f"'{self.intersight_base_url}', "
            f"{self.tags}, "
            f"{self.api_client}, "
            f"'{self.ethernet_adapter_default_configuration}', "
            f"{self.enable_virtual_extensible_lan}, "
            f"{self.enable_network_virtualization_using_gre}, "
            f"{self.enable_accelerated_receive_flow_steering}, "
            f"{self.enable_precision_time_protocol}, "
            f"{self.enable_advanced_filter}, "
            f"{self.enable_interrupt_scaling}, "
            f"{self.enable_geneve_offload}, "
            f"{self.enable_rdma_over_converged_ethernet}, "
            f"{self.interrupts}, "
            f"'{self.interrupt_mode}', "
            f"{self.interrupt_timer}, "
            f"'{self.interrupt_coalescing_type}', "
            f"{self.receive_queue_count}, "
            f"{self.receive_ring_size}, "
            f"{self.transmit_queue_count}, "
            f"{self.transmit_ring_size}, "
            f"{self.completion_queue_count}, "
            f"{self.completion_ring_size}, "
            f"{self.uplink_failback_timeout}, "
            f"{self.enable_tx_checksum_offload}, "
            f"{self.enable_rx_checksum_offload}, "
            f"{self.enable_large_send_offload}, "
            f"{self.enable_large_receive_offload}, "
            f"{self.enable_receive_side_scaling}, "
            f"{self.enable_ipv4_hash}, "
            f"{self.enable_ipv6_extensions_hash}, "
            f"{self.enable_ipv6_hash}, "
            f"{self.enable_tcp_and_ipv4_hash}, "
            f"{self.enable_tcp_and_ipv6_extensions_hash}, "
            f"{self.enable_tcp_and_ipv6_hash}, "
            f"{self.enable_udp_and_ipv4_hash}, "
            f"{self.enable_udp_and_ipv6_hash}, "
            f"{self.roce_class_of_service}, "
            f"{self.roce_memory_regions}, "
            f"{self.roce_queue_pairs}, "
            f"{self.roce_resource_groups}, "
            f"{self.roce_version})"
            )

    def object_maker(self):
        """This function makes the targeted policy object.
        """           
        print(f"\nConfiguring the {self.object_type} named "
              f"{self.policy_name}...")
        # Update the API body with general attributes
        self._update_api_body_general_attributes()
        # Update the API body with individual subobject attributes
        self._update_api_body_subobject_attributes()
        # Update the API body with individual mapped object attributes
        self._update_api_body_mapped_object_attributes()
        # Reformat the user provided interrupt_coalescing_type variable value to uppercase to prevent potential format issues
        if not self.ethernet_adapter_default_configuration:
            try:
                reformatted_interrupt_coalescing_type_value = self.interrupt_coalescing_type.upper()
            except Exception:
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with the value "
                      "provided for the Interrupt Coalescing Type setting.")
                print(f"The value provided was {interrupt_coalescing_type}.")
                print("To proceed, the value provided for the Interrupt "
                      "Coalescing Type setting should be updated to an accepted string "
                      "format.")
                print("The accepted values are 'Min' or 'Idle'.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
            if reformatted_interrupt_coalescing_type_value not in ("MIN", "IDLE"):
                print("\nA configuration error has occurred!\n")
                print(f"During the configuration of the {self.object_type} named "
                      f"{self.policy_name}, there was an issue with the value "
                      "provided for the Interrupt Coalescing Type setting.")
                print(f"The value provided was {interrupt_coalescing_type}.")
                print("To proceed, the value provided for the UCS "
                      "Coalescing Type setting should be updated to an accepted string "
                      "format.")
                print("The accepted values are 'Min' or 'Idle'.")
                print("Please update the configuration, then re-attempt "
                      "execution.\n")
                sys.exit(0)
        # Retrieve the pre-defined built-in Ethernet Adapter Default Configuration if one has been provided and create dictionary with settings
        if self.ethernet_adapter_default_configuration:
            ethernet_adapter_default_configuration_settings = intersight_object_backup(
                intersight_api_key_id=None,
                intersight_api_key=None,
                object_attributes={
                    "Name": self.ethernet_adapter_default_configuration,
                    },
                backup_attribute_list = [
                    "AdvancedFilter",
                    "ArfsSettings",
                    "CompletionQueueSettings",
                    "GeneveEnabled",
                    "InterruptScaling",
                    "InterruptSettings",
                    "NvgreSettings",
                    "PtpSettings",
                    "RoceSettings",
                    "RssHashSettings",
                    "RssSettings",
                    "RxQueueSettings",
                    "TcpOffloadSettings",
                    "TxQueueSettings",
                    "UplinkFailbackTimeout",
                    "VxlanSettings"
                    ],
                intersight_api_path=f"vnic/EthAdapterPolicies?$top=1000&$filter=SharedScope%20eq%20%27shared%27",
                object_type="Ethernet Adapter Default Configuration",
                organization=None,
                preconfigured_api_client=self.api_client
                )
            # Update the API body with the Ethernet Adapter Default Configuration settings dictionary
            self.intersight_api_body.update(ethernet_adapter_default_configuration_settings)
        else:
            # Create dictionary with the user provided Ethernet Adapter Configuration settings
            ethernet_adapter_user_configuration_settings = {
                "AdvancedFilter": self.enable_advanced_filter,
                "ArfsSettings": {
                    "ClassId": "vnic.ArfsSettings",
                    "Enabled": self.enable_accelerated_receive_flow_steering,
                    "ObjectType": "vnic.ArfsSettings"
                    },
                "CompletionQueueSettings": {
                    "ClassId": "vnic.CompletionQueueSettings",
                    "Count": self.completion_queue_count,
                    "ObjectType": "vnic.CompletionQueueSettings",
                    "RingSize": self.completion_ring_size
                    },
                "GeneveEnabled": self.enable_geneve_offload,
                "InterruptScaling": self.enable_interrupt_scaling,
                "InterruptSettings": {
                    "ClassId": "vnic.EthInterruptSettings",
                    "CoalescingTime": self.interrupt_timer,
                    "CoalescingType": reformatted_interrupt_coalescing_type_value,
                    "Count": self.interrupts,
                    "Mode": self.interrupt_mode,
                    "ObjectType": "vnic.EthInterruptSettings"
                    },
                "NvgreSettings": {
                    "ClassId": "vnic.NvgreSettings",
                    "Enabled": self.enable_network_virtualization_using_gre,
                    "ObjectType": "vnic.NvgreSettings"
                    },
                "PtpSettings": {
                    "ClassId": "vnic.PtpSettings",
                    "Enabled": self.enable_precision_time_protocol,
                    "ObjectType": "vnic.PtpSettings"
                    },
                "RoceSettings": {
                    "ClassId": "vnic.RoceSettings",
                    "ClassOfService": self.roce_class_of_service,
                    "Enabled": self.enable_rdma_over_converged_ethernet,
                    "MemoryRegions": self.roce_memory_regions,
                    "ObjectType": "vnic.RoceSettings",
                    "QueuePairs": self.roce_queue_pairs,
                    "ResourceGroups": self.roce_resource_groups,
                    "Version": self.roce_version
                    },
                "RssHashSettings": {
                    "ClassId": "vnic.RssHashSettings",
                    "Ipv4Hash": self.enable_ipv4_hash,
                    "Ipv6ExtHash": self.enable_ipv6_extensions_hash,
                    "Ipv6Hash": self.enable_ipv6_hash,
                    "ObjectType": "vnic.RssHashSettings",
                    "TcpIpv4Hash": self.enable_tcp_and_ipv4_hash,
                    "TcpIpv6ExtHash": self.enable_tcp_and_ipv6_extensions_hash,
                    "TcpIpv6Hash": self.enable_tcp_and_ipv6_hash,
                    "UdpIpv4Hash": self.enable_udp_and_ipv4_hash,
                    "UdpIpv6Hash": self.enable_udp_and_ipv6_hash
                    },
                "RssSettings": self.enable_receive_side_scaling,
                "RxQueueSettings": {
                    "ClassId": "vnic.EthRxQueueSettings",
                    "Count": self.receive_queue_count,
                    "ObjectType": "vnic.EthRxQueueSettings",
                    "RingSize": self.receive_ring_size
                    },
                "TcpOffloadSettings": {
                    "ClassId": "vnic.TcpOffloadSettings",
                    "LargeReceive": self.enable_large_receive_offload,
                    "LargeSend": self.enable_large_send_offload,
                    "ObjectType": "vnic.TcpOffloadSettings",
                    "RxChecksum": self.enable_rx_checksum_offload,
                    "TxChecksum": self.enable_tx_checksum_offload
                    },
                "TxQueueSettings": {
                    "ClassId": "vnic.EthTxQueueSettings",
                    "Count": self.transmit_queue_count,
                    "ObjectType": "vnic.EthTxQueueSettings",
                    "RingSize": self.transmit_ring_size
                    },
                "UplinkFailbackTimeout": self.uplink_failback_timeout,
                "VxlanSettings": {
                    "ClassId": "vnic.VxlanSettings",
                    "Enabled": self.enable_virtual_extensible_lan,
                    "ObjectType": "vnic.VxlanSettings"
                    }
                }
            # Update the API body with the user provided Ethernet Adapter Configuration settings
            self.intersight_api_body.update(ethernet_adapter_user_configuration_settings)
        # POST the API body to Intersight
        self._post_intersight_object()


def ethernet_adapter_policy_maker(
    intersight_api_key_id,
    intersight_api_key,
    policy_name,
    ethernet_adapter_default_configuration="",
    enable_virtual_extensible_lan=False,
    enable_network_virtualization_using_gre=False,
    enable_accelerated_receive_flow_steering=False,
    enable_precision_time_protocol=False,
    enable_advanced_filter=False,
    enable_interrupt_scaling=False,
    enable_geneve_offload=False,
    enable_rdma_over_converged_ethernet=False,
    interrupts=8,
    interrupt_mode="MSIx",
    interrupt_timer=125,
    interrupt_coalescing_type="Min",
    receive_queue_count=4,
    receive_ring_size=512,
    transmit_queue_count=1,
    transmit_ring_size=256,
    completion_queue_count=5,
    completion_ring_size=5,
    uplink_failback_timeout=5,
    enable_tx_checksum_offload=True,
    enable_rx_checksum_offload=True,
    enable_large_send_offload=True,
    enable_large_receive_offload=True,
    enable_receive_side_scaling=True,
    enable_ipv4_hash=True,
    enable_ipv6_extensions_hash=False,
    enable_ipv6_hash=True,
    enable_tcp_and_ipv4_hash=True,
    enable_tcp_and_ipv6_extensions_hash=False,
    enable_tcp_and_ipv6_hash=True,
    enable_udp_and_ipv4_hash=False,
    enable_udp_and_ipv6_hash=False,
    roce_class_of_service=5,
    roce_memory_regions=0,
    roce_queue_pairs=0,
    roce_resource_groups=0,
    roce_version=1,
    policy_description="",
    organization="default",
    intersight_base_url="https://www.intersight.com/api/v1",
    tags=None,
    preconfigured_api_client=None
    ):
    """This is a function used to make an Ethernet Adapter Policy on
    Cisco Intersight.

    Args:
        intersight_api_key_id (str):
            The ID of the Intersight API key.
        intersight_api_key (str):
            The system file path of the Intersight API key.
        policy_name (str):
            The name of the policy to be created.
        ethernet_adapter_default_configuration (str):
            Optional; This setting applies a pre-defined built-in default
            configuration to be used for building the Ethernet Adapter policy.
            Entering a default configuration will override user-provided
            configuration settings/arguments for the Ethernet Adapter that
            reside under the Policy Details category. Accepted values include
            "MQ-SMBd", "SMBServer", "SMBClient", "Solaris", "usNICOracleRAC",
            "WIN-AzureStack", "Win-HPN-SMBd", "Win-HPN", "Linux-NVMe-RoCE",
            "MQ", "usNIC", "SRIOV", "VMWarePassThru", "VMWare", "Windows", and
            "Linux". The default value is an empty string (""), which will
            apply no default configuration and user-provided settings will be
            used.
        enable_virtual_extensible_lan (bool):
            Optional; Enable VXLAN on the interface. The default value is False.
        enable_network_virtualization_using_gre (bool):
            Optional; Enable NVGRE on the interface. The default value is False.
        enable_accelerated_receive_flow_steering (bool):
            Optional; Enable ARFS on the interface. The default value is False.
        enable_precision_time_protocol (bool):
            Optional; Enable PTP on the interface. The default value is False.
        enable_advanced_filter (bool):
            Optional; Enable advanced filtering on the interface. The default
            value is False.
        enable_interrupt_scaling (bool):
            Optional; Enable interrupt scaling on the interface. The default
            value is False.
        enable_geneve_offload (bool):
            Optional; Enable Geneve offload on the interface. The default value
            is False.
        enable_rdma_over_converged_ethernet (bool):
            Optional; Enable RoCE on the interface. The default value is False.
        interrupts (int):
            Optional; The number of interrupts. The accepted values are
            1 - 1024. The default value is 8.
        interrupt_mode (str):
            Optional; The interrupt mode. The accepted values are "MSIx",
            "MSI", or "INTx". The default value is "MSIx".
        interrupt_timer (int):
            Optional; The time to wait between interrupts. The accepted values
            are 0 - 65535. The default value is 125.
        interrupt_coalescing_type (str):
            Optional; The interrupt coalescing type. The accepted values are
            "Min" or "Idle". The default value is "Min".
        receive_queue_count (int):
            Optional; The receive queue count. The accepted values are
            1 - 1000. The default value is 4.
        receive_ring_size (int):
            Optional; The receive ring size. The accepted values are
            64 - 16384. The default value is 512.
        transmit_queue_count (int):
            Optional; The transmit queue count. The accepted values are
            1 - 1000. The default value is 1.
        transmit_ring_size (int):
            Optional; The transmit ring size. The accepted values are
            64 - 16384. The default value is 256.
        completion_queue_count (int):
            Optional; The completion queue count. The accepted values are
            1 - 2000. The default value is 5.
        completion_ring_size (int):
            Optional; The completion ring size. The accepted values are
            1 - 256. The default value is 5.
        uplink_failback_timeout (int):
            Optional; The uplink failback timeout. The accepted values are
            0 - 600. The default value is 5.
        enable_tx_checksum_offload (bool):
            Optional; Enable Tx checksum offload to the hardware. The default
            value is True.
        enable_rx_checksum_offload (bool):
            Optional; Enable Rx checksum offload to the hardware. The default
            value is True.
        enable_large_send_offload (bool):
            Optional; Enable large packet segmentation to the hardware. The
            default value is True.
        enable_large_receive_offload (bool):
            Optional; Enable segmented packet reassembly to the hardware. The
            default value is True.
        enable_receive_side_scaling (bool):
            Optional; Enable Receive Side Scaling. The default value is True.
        enable_ipv4_hash (bool):
            Optional; Enable the IPv4 address for traffic distribution. The
            default value is True.
        enable_ipv6_extensions_hash (bool):
            Optional; Enable the IPv6 extensions for traffic distribution. The
            default value is False.
        enable_ipv6_hash (bool):
            Optional; Enable the IPv6 address for traffic distribution. The
            default value is True.
        enable_tcp_and_ipv4_hash (bool):
            Optional; Enable the IPv4 address and TCP port number for traffic
            distribution. The default value is True.
        enable_tcp_and_ipv6_extensions_hash (bool):
            Optional; Enable the IPv6 extensions and TCP port number for
            traffic distribution. The default value is False.
        enable_tcp_and_ipv6_hash (bool):
            Optional; Enable the IPv6 address and TCP port number for traffic
            distribution. The default value is True.
        enable_udp_and_ipv4_hash (bool):
            Optional; Enable the IPv4 address and UDP port number for traffic
            distribution. The default value is False.
        enable_udp_and_ipv6_hash (bool):
            Optional; Enable the IPv6 address and UDP port number for traffic
            distribution. The default value is False.
        roce_class_of_service (int):
            Optional; The RoCE class of service. The accepted values are 1 - 6.
            The default value is 5.
        roce_memory_regions (int):
            Optional; The RoCE memory regions. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_queue_pairs (int):
            Optional; The RoCE queue pairs. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_resource_groups (int):
            Optional; The RoCE resource groups. The accepted values are an
            integer to the power of 2. The default value is 0.
        roce_version (int):
            Optional; The RoCE version. The accepted values are
            1 - 2. The default value is 1.
        policy_description (str):
            Optional; The description of the policy to be created. The default
            value is an empty string ("").
        organization (str):
            Optional; The Intersight account organization of the policy.
            The default value is "default".
        intersight_base_url (str):
            Optional; The base URL for Intersight API paths. The default value
            is "https://www.intersight.com/api/v1". This value typically only
            needs to be changed if using the Intersight Virtual Appliance.
        tags (dict):
            Optional; The Intersight account tags that will be assigned to the
            policy. The default value is None.
        preconfigured_api_client ("ApiClient"):
            Optional; An ApiClient class instance which handles
            Intersight client-server communication through the use of API keys.
            The default value is None. If a preconfigured_api_client argument
            is provided, empty strings ("") or None can be provided for the
            intersight_api_key_id, intersight_api_key, and intersight_base_url
            arguments.
    """
    def builder(target_object):
        """This is a function used to build the objects that are components of
        an overarching pool or policy on Cisco Intersight.

        Args:
            target_object (class):
                The class representing the object to be built on Intersight.

        Raises:
            Exception:
                An exception occurred due to an issue accessing the Intersight
                API path. The status code or error message will be specified.
        """
        try:
            target_object.object_maker()
        except Exception:
            print("\nA configuration error has occurred!\n")
            print("The builder function failed to configure the "
                  f"{target_object.object_type} settings.")
            print("Please check the provided arguments for the "
                  f"{target_object.object_type} settings.\n")
            print("Exception Message: ")
            traceback.print_exc()

    # Define and create Ethernet Adapter Policy object in Intersight
    builder(
        EthernetAdapterPolicy(
            intersight_api_key_id=intersight_api_key_id,
            intersight_api_key=intersight_api_key,
            policy_name=policy_name,
            policy_description=policy_description,
            organization=organization,
            intersight_base_url=intersight_base_url,
            tags=tags,
            preconfigured_api_client=preconfigured_api_client,
            ethernet_adapter_default_configuration=ethernet_adapter_default_configuration,
            enable_virtual_extensible_lan=enable_virtual_extensible_lan,
            enable_network_virtualization_using_gre=enable_network_virtualization_using_gre,
            enable_accelerated_receive_flow_steering=enable_accelerated_receive_flow_steering,
            enable_precision_time_protocol=enable_precision_time_protocol,
            enable_advanced_filter=enable_advanced_filter,
            enable_interrupt_scaling=enable_interrupt_scaling,
            enable_geneve_offload=enable_geneve_offload,
            enable_rdma_over_converged_ethernet=enable_rdma_over_converged_ethernet,
            interrupts=interrupts,
            interrupt_mode=interrupt_mode,
            interrupt_timer=interrupt_timer,
            interrupt_coalescing_type=interrupt_coalescing_type,
            receive_queue_count=receive_queue_count,
            receive_ring_size=receive_ring_size,
            transmit_queue_count=transmit_queue_count,
            transmit_ring_size=transmit_ring_size,
            completion_queue_count=completion_queue_count,
            completion_ring_size=completion_ring_size,
            uplink_failback_timeout=uplink_failback_timeout,
            enable_tx_checksum_offload=enable_tx_checksum_offload,
            enable_rx_checksum_offload=enable_rx_checksum_offload,
            enable_large_send_offload=enable_large_send_offload,
            enable_large_receive_offload=enable_large_receive_offload,
            enable_receive_side_scaling=enable_receive_side_scaling,
            enable_ipv4_hash=enable_ipv4_hash,
            enable_ipv6_extensions_hash=enable_ipv6_extensions_hash,
            enable_ipv6_hash=enable_ipv6_hash,
            enable_tcp_and_ipv4_hash=enable_tcp_and_ipv4_hash,
            enable_tcp_and_ipv6_extensions_hash=enable_tcp_and_ipv6_extensions_hash,
            enable_tcp_and_ipv6_hash=enable_tcp_and_ipv6_hash,
            enable_udp_and_ipv4_hash=enable_udp_and_ipv4_hash,
            enable_udp_and_ipv6_hash=enable_udp_and_ipv6_hash,
            roce_class_of_service=roce_class_of_service,
            roce_memory_regions=roce_memory_regions,
            roce_queue_pairs=roce_queue_pairs,
            roce_resource_groups=roce_resource_groups,
            roce_version=roce_version
            ))


def main():
    # Establish Maker specific variables
    maker_type = "Intersight Ethernet Adapter Policy Maker"

    # Establish Intersight SDK for Python API client instance
    main_intersight_api_client = get_api_client(api_key_id=key_id,
                                                api_secret_file=key,
                                                endpoint=intersight_base_url,
                                                url_certificate_verification=url_certificate_verification
                                                )
    
    # Starting the Policy Maker for Cisco Intersight
    print(f"\nStarting the {maker_type} for Cisco Intersight.\n")

    # Run the Intersight API and Account Availability Test
    print("Running the Intersight API and Account Availability Test.")
    test_intersight_api_service(
        intersight_api_key_id=None,
        intersight_api_key=None,
        preconfigured_api_client=main_intersight_api_client
        )

    # Create the Policy in Intersight
    ethernet_adapter_policy_maker(
        intersight_api_key_id=None,
        intersight_api_key=None,
        policy_name=ethernet_adapter_policy_name,
        ethernet_adapter_default_configuration=ethernet_adapter_default_configuration,
        enable_virtual_extensible_lan=enable_virtual_extensible_lan,
        enable_network_virtualization_using_gre=enable_network_virtualization_using_gre,
        enable_accelerated_receive_flow_steering=enable_accelerated_receive_flow_steering,
        enable_precision_time_protocol=enable_precision_time_protocol,
        enable_advanced_filter=enable_advanced_filter,
        enable_interrupt_scaling=enable_interrupt_scaling,
        enable_geneve_offload=enable_geneve_offload,
        enable_rdma_over_converged_ethernet=enable_rdma_over_converged_ethernet,
        interrupts=interrupts,
        interrupt_mode=interrupt_mode,
        interrupt_timer=interrupt_timer,
        interrupt_coalescing_type=interrupt_coalescing_type,
        receive_queue_count=receive_queue_count,
        receive_ring_size=receive_ring_size,
        transmit_queue_count=transmit_queue_count,
        transmit_ring_size=transmit_ring_size,
        completion_queue_count=completion_queue_count,
        completion_ring_size=completion_ring_size,
        uplink_failback_timeout=uplink_failback_timeout,
        enable_tx_checksum_offload=enable_tx_checksum_offload,
        enable_rx_checksum_offload=enable_rx_checksum_offload,
        enable_large_send_offload=enable_large_send_offload,
        enable_large_receive_offload=enable_large_receive_offload,
        enable_receive_side_scaling=enable_receive_side_scaling,
        enable_ipv4_hash=enable_ipv4_hash,
        enable_ipv6_extensions_hash=enable_ipv6_extensions_hash,
        enable_ipv6_hash=enable_ipv6_hash,
        enable_tcp_and_ipv4_hash=enable_tcp_and_ipv4_hash,
        enable_tcp_and_ipv6_extensions_hash=enable_tcp_and_ipv6_extensions_hash,
        enable_tcp_and_ipv6_hash=enable_tcp_and_ipv6_hash,
        enable_udp_and_ipv4_hash=enable_udp_and_ipv4_hash,
        enable_udp_and_ipv6_hash=enable_udp_and_ipv6_hash,
        roce_class_of_service=roce_class_of_service,
        roce_memory_regions=roce_memory_regions,
        roce_queue_pairs=roce_queue_pairs,
        roce_resource_groups=roce_resource_groups,
        roce_version=roce_version,
        policy_description=ethernet_adapter_policy_description,
        organization=ethernet_adapter_policy_organization,
        intersight_base_url=intersight_base_url,
        tags=ethernet_adapter_policy_tags,
        preconfigured_api_client=main_intersight_api_client
        )

    # Policy Maker completion
    print(f"\nThe {maker_type} has completed.\n")


if __name__ == "__main__":
    main()
    
# Exiting the Policy Maker for Cisco Intersight
sys.exit(0)
